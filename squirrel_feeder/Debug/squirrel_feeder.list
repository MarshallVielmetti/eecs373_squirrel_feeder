
squirrel_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f04  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  0800a0c4  0800a0c4  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f4  0800a2f4  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f4  0800a2f4  0000b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2fc  0800a2fc  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2fc  0800a2fc  0000b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a300  0800a300  0000b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20040000  0800a304  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20040080  0800a384  0000c080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040668  0800a384  0000c668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fc2  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003361  00000000  00000000  00023072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000263d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8a  00000000  00000000  000276d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030d1d  00000000  00000000  00028562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a207  00000000  00000000  0005927f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116434  00000000  00000000  00073486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001898ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000595c  00000000  00000000  00189900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0018f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040080 	.word	0x20040080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a0ac 	.word	0x0800a0ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040084 	.word	0x20040084
 80001fc:	0800a0ac 	.word	0x0800a0ac

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <CAMERA_Init>:
	 */
	void finish_image(void);
} CAMERA;


void CAMERA_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	CAMERA.init();
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <CAMERA_Init+0x10>)
 8000596:	f000 f819 	bl	80005cc <_ZN6Camera4initEv>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2004009c 	.word	0x2004009c

080005a4 <CAMERA_Take_Photo>:

uint8_t CAMERA_Take_Photo(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	return CAMERA.take_photo();
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <CAMERA_Take_Photo+0x10>)
 80005aa:	f000 f835 	bl	8000618 <_ZN6Camera10take_photoEv>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2004009c 	.word	0x2004009c

080005b8 <CAMERA_Process>:

uint8_t CAMERA_Process(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	return CAMERA.process();
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <CAMERA_Process+0x10>)
 80005be:	f000 f877 	bl	80006b0 <_ZN6Camera7processEv>
 80005c2:	4603      	mov	r3, r0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2004009c 	.word	0x2004009c

080005cc <_ZN6Camera4initEv>:


void Camera::init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	this->ready = true;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]

	this->cur_image_size = 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
	this->cur_image_idx = 0;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]

	this->pic_index = 0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	819a      	strh	r2, [r3, #12]
	this->rand_seed = rand() % 100;
 80005ec:	f008 fbaa 	bl	8008d44 <rand>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <_ZN6Camera4initEv+0x48>)
 80005f4:	fb82 1203 	smull	r1, r2, r2, r3
 80005f8:	1151      	asrs	r1, r2, #5
 80005fa:	17da      	asrs	r2, r3, #31
 80005fc:	1a8a      	subs	r2, r1, r2
 80005fe:	2164      	movs	r1, #100	@ 0x64
 8000600:	fb01 f202 	mul.w	r2, r1, r2
 8000604:	1a9a      	subs	r2, r3, r2
 8000606:	b292      	uxth	r2, r2
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	81da      	strh	r2, [r3, #14]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	51eb851f 	.word	0x51eb851f

08000618 <_ZN6Camera10take_photoEv>:


uint8_t Camera::take_photo(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if (!this->ready) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f083 0301 	eor.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_ZN6Camera10take_photoEv+0x1a>
		return 0; // camera not ready, return failure
 800062e:	2300      	movs	r3, #0
 8000630:	e037      	b.n	80006a2 <_ZN6Camera10take_photoEv+0x8a>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_TakePhoto();
 8000632:	f000 ff57 	bl	80014e4 <_Z16VC0706_TakePhotov>
 8000636:	4603      	mov	r3, r0
 8000638:	75fb      	strb	r3, [r7, #23]

	// Verify success and update state
	if (!success) {
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <_ZN6Camera10take_photoEv+0x2c>
		return 0;
 8000640:	2300      	movs	r3, #0
 8000642:	e02e      	b.n	80006a2 <_ZN6Camera10take_photoEv+0x8a>
	}

	success = VC0706_StopCapture();
 8000644:	f000 ff84 	bl	8001550 <_Z18VC0706_StopCapturev>
 8000648:	4603      	mov	r3, r0
 800064a:	75fb      	strb	r3, [r7, #23]

	if (!success) {
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <_ZN6Camera10take_photoEv+0x3e>
		return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e025      	b.n	80006a2 <_ZN6Camera10take_photoEv+0x8a>
	}

	/*
	 * Read in the length of the image
	 */
	this->cur_image_size = VC0706_ReadImageDataLength();
 8000656:	f000 ffb1 	bl	80015bc <_Z26VC0706_ReadImageDataLengthv>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "im%d.jpg", this->pic_index);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	899b      	ldrh	r3, [r3, #12]
 8000666:	461a      	mov	r2, r3
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	490f      	ldr	r1, [pc, #60]	@ (80006ac <_ZN6Camera10take_photoEv+0x94>)
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fc68 	bl	8008f44 <siprintf>
	FRESULT fres = f_open(&(this->file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	333c      	adds	r3, #60	@ 0x3c
 8000678:	f107 010c 	add.w	r1, r7, #12
 800067c:	221a      	movs	r2, #26
 800067e:	4618      	mov	r0, r3
 8000680:	f007 ff2c 	bl	80084dc <f_open>
 8000684:	4603      	mov	r3, r0
 8000686:	75bb      	strb	r3, [r7, #22]

	this->pic_index++;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	819a      	strh	r2, [r3, #12]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	this->cur_image_idx = 0;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	this->ready = 0; // no longer ready to take a new photo
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]

	return 1;
 80006a0:	2301      	movs	r3, #1
};
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	0800a0c4 	.word	0x0800a0c4

080006b0 <_ZN6Camera7processEv>:


uint8_t Camera::process(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	uint8_t end_flag = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73fb      	strb	r3, [r7, #15]
	uint8_t num_chunks_processed = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	73bb      	strb	r3, [r7, #14]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80006c0:	e004      	b.n	80006cc <_ZN6Camera7processEv+0x1c>
		end_flag = process_chunk();
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f814 	bl	80006f0 <_ZN6Camera13process_chunkEv>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d106      	bne.n	80006e0 <_ZN6Camera7processEv+0x30>
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	73ba      	strb	r2, [r7, #14]
 80006d8:	2b31      	cmp	r3, #49	@ 0x31
 80006da:	d801      	bhi.n	80006e0 <_ZN6Camera7processEv+0x30>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <_ZN6Camera7processEv+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1ed      	bne.n	80006c2 <_ZN6Camera7processEv+0x12>
	}

	return end_flag; // 1 means the last chunk was read
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_ZN6Camera13process_chunkEv>:

uint8_t Camera::process_chunk(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (this->cur_image_idx >= this->cur_image_size - CAMERA_READ_IMG_SIZE) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689a      	ldr	r2, [r3, #8]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	3b20      	subs	r3, #32
 8000702:	429a      	cmp	r2, r3
 8000704:	d304      	bcc.n	8000710 <_ZN6Camera13process_chunkEv+0x20>
		this->finish_image(); // needs to perform the final processing in this->finish_image
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f828 	bl	800075c <_ZN6Camera12finish_imageEv>
		return 1;
 800070c:	2301      	movs	r3, #1
 800070e:	e021      	b.n	8000754 <_ZN6Camera13process_chunkEv+0x64>
	}

	uint8_t status = VC0706_ReadImageBlock(this->img_read_buf, this->cur_image_idx);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f103 0210 	add.w	r2, r3, #16
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4619      	mov	r1, r3
 800071c:	4610      	mov	r0, r2
 800071e:	f000 ff77 	bl	8001610 <_Z21VC0706_ReadImageBlockPhm>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]

	if (!status) {
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <_ZN6Camera13process_chunkEv+0x40>
		return 0;
 800072c:	2300      	movs	r3, #0
 800072e:	e011      	b.n	8000754 <_ZN6Camera13process_chunkEv+0x64>
	}

	UINT bytes_wrote;
	f_write(&this->file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3310      	adds	r3, #16
 800073a:	1d59      	adds	r1, r3, #5
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2220      	movs	r2, #32
 8000742:	f008 f885 	bl	8008850 <f_write>

	this->cur_image_idx += 0x20;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f103 0220 	add.w	r2, r3, #32
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	609a      	str	r2, [r3, #8]

	return 0; //normal case
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_ZN6Camera12finish_imageEv>:

void Camera::finish_image() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	VC0706_ReadImageBlock(this->img_read_buf, this->cur_image_idx);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 0210 	add.w	r2, r3, #16
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4619      	mov	r1, r3
 8000770:	4610      	mov	r0, r2
 8000772:	f000 ff4d 	bl	8001610 <_Z21VC0706_ReadImageBlockPhm>

	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e01d      	b.n	80007b8 <_ZN6Camera12finish_imageEv+0x5c>
		if (this->img_read_buf[i-1 + 5] == 0xFF && this->img_read_buf[i + 5] == 0xD9) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3304      	adds	r3, #4
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	7c1b      	ldrb	r3, [r3, #16]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d113      	bne.n	80007b2 <_ZN6Camera12finish_imageEv+0x56>
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3305      	adds	r3, #5
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	7c1b      	ldrb	r3, [r3, #16]
 8000794:	2bd9      	cmp	r3, #217	@ 0xd9
 8000796:	d10c      	bne.n	80007b2 <_ZN6Camera12finish_imageEv+0x56>
			// found end sequence
			f_write(&this->file_writer, this->img_read_buf + 5, i + 1, &bytes_wrote);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	3310      	adds	r3, #16
 80007a2:	1d59      	adds	r1, r3, #5
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	f008 f850 	bl	8008850 <f_write>
			break;
 80007b0:	e005      	b.n	80007be <_ZN6Camera12finish_imageEv+0x62>
	for (uint32_t i = 1; i < 32; i++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b1f      	cmp	r3, #31
 80007bc:	d9de      	bls.n	800077c <_ZN6Camera12finish_imageEv+0x20>
		}
	}

	f_close(&this->file_writer);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	333c      	adds	r3, #60	@ 0x3c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fa37 	bl	8008c36 <f_close>

	this->ready = true; // ready to take a new image
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 ff7d 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f83c 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f9ac 	bl	8000b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ec:	f000 f8e2 	bl	80009b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007f0:	f000 f91e 	bl	8000a30 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80007f4:	f000 f95a 	bl	8000aac <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80007f8:	f005 fba2 	bl	8005f40 <MX_FATFS_Init>
  MX_ADC1_Init();
 80007fc:	f000 f876 	bl	80008ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // required camera startup delay
  HAL_Delay(2500);
 8000800:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000804:	f000 ffe0 	bl	80017c8 <HAL_Delay>

  FS_Init();
 8000808:	f000 fba4 	bl	8000f54 <FS_Init>
  CAMERA_Init();
 800080c:	f7ff fec0 	bl	8000590 <CAMERA_Init>

  FIL fil;
  FRESULT fres;

  char fname[10] = "test.txt";
 8000810:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000814:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8000818:	4a10      	ldr	r2, [pc, #64]	@ (800085c <main+0x84>)
 800081a:	4623      	mov	r3, r4
 800081c:	ca07      	ldmia	r2, {r0, r1, r2}
 800081e:	c303      	stmia	r3!, {r0, r1}
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	2300      	movs	r3, #0
 8000824:	7263      	strb	r3, [r4, #9]
  fres = f_open(&fil, fname, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000826:	4639      	mov	r1, r7
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	221a      	movs	r2, #26
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fe54 	bl	80084dc <f_open>
 8000834:	4603      	mov	r3, r0
 8000836:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f


  CAMERA_Take_Photo();
 800083a:	f7ff feb3 	bl	80005a4 <CAMERA_Take_Photo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!CAMERA_Process())
 800083e:	bf00      	nop
 8000840:	f7ff feba 	bl	80005b8 <CAMERA_Process>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0fa      	beq.n	8000840 <main+0x68>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  FS_Cleanup();
 800084a:	f000 fb9d 	bl	8000f88 <FS_Cleanup>
 800084e:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8000850:	4618      	mov	r0, r3
 8000852:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	0800a0d0 	.word	0x0800a0d0

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	@ 0x58
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2244      	movs	r2, #68	@ 0x44
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f008 fbcb 	bl	800900a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000882:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000886:	f002 f955 	bl	8002b34 <HAL_PWREx_ControlVoltageScaling>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000890:	f000 fb86 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000894:	2310      	movs	r3, #16
 8000896:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008a0:	2360      	movs	r3, #96	@ 0x60
 80008a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f9f5 	bl	8002c9c <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fb72 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fdfb 	bl	80034d0 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008e0:	f000 fb5e 	bl	8000fa0 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3758      	adds	r7, #88	@ 0x58
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000902:	4b29      	ldr	r3, [pc, #164]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000904:	4a29      	ldr	r2, [pc, #164]	@ (80009ac <MX_ADC1_Init+0xc0>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000914:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000922:	2204      	movs	r2, #4
 8000924:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000926:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000928:	2200      	movs	r2, #0
 800092a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800092e:	2200      	movs	r2, #0
 8000930:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000934:	2201      	movs	r2, #1
 8000936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000962:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000964:	f001 f8f4 	bl	8001b50 <HAL_ADC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800096e:	f000 fb17 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_ADC1_Init+0xc4>)
 8000974:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000976:	2306      	movs	r3, #6
 8000978:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800097e:	237f      	movs	r3, #127	@ 0x7f
 8000980:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000982:	2304      	movs	r3, #4
 8000984:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_ADC1_Init+0xbc>)
 8000990:	f001 fa24 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800099a:	f000 fb01 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20040308 	.word	0x20040308
 80009ac:	50040000 	.word	0x50040000
 80009b0:	1d500080 	.word	0x1d500080

080009b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <MX_SPI1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c6:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009ea:	2220      	movs	r2, #32
 80009ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a00:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <MX_SPI1_Init+0x74>)
 8000a02:	2207      	movs	r2, #7
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <MX_SPI1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <MX_SPI1_Init+0x74>)
 8000a0e:	2208      	movs	r2, #8
 8000a10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_SPI1_Init+0x74>)
 8000a14:	f003 fd32 	bl	800447c <HAL_SPI_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 fabf 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20040370 	.word	0x20040370
 8000a2c:	40013000 	.word	0x40013000

08000a30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_SPI3_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a66:	2218      	movs	r2, #24
 8000a68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_SPI3_Init+0x74>)
 8000a90:	f003 fcf4 	bl	800447c <HAL_SPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fa81 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200403d4 	.word	0x200403d4
 8000aa8:	40003c00 	.word	0x40003c00

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	@ (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000af6:	f004 fa5d 	bl	8004fb4 <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 fa4e 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b08:	f005 f950 	bl	8005dac <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 fa45 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b1a:	f005 f985 	bl	8005e28 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 fa3c 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b2a:	f005 f906 	bl	8005d3a <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 fa34 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20040438 	.word	0x20040438
 8000b40:	40004800 	.word	0x40004800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4bb4      	ldr	r3, [pc, #720]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4ab3      	ldr	r2, [pc, #716]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4bb1      	ldr	r3, [pc, #708]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	623b      	str	r3, [r7, #32]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4bae      	ldr	r3, [pc, #696]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4aad      	ldr	r2, [pc, #692]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4bab      	ldr	r3, [pc, #684]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	4ba8      	ldr	r3, [pc, #672]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4aa7      	ldr	r2, [pc, #668]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4ba5      	ldr	r3, [pc, #660]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0320 	and.w	r3, r3, #32
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4ba2      	ldr	r3, [pc, #648]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4aa1      	ldr	r2, [pc, #644]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b9f      	ldr	r3, [pc, #636]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b9c      	ldr	r3, [pc, #624]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a9b      	ldr	r2, [pc, #620]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b99      	ldr	r3, [pc, #612]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b96      	ldr	r3, [pc, #600]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a95      	ldr	r2, [pc, #596]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b93      	ldr	r3, [pc, #588]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	4b90      	ldr	r3, [pc, #576]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a8f      	ldr	r2, [pc, #572]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c02:	4b8a      	ldr	r3, [pc, #552]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a89      	ldr	r2, [pc, #548]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b87      	ldr	r3, [pc, #540]	@ (8000e2c <MX_GPIO_Init+0x2e8>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c1a:	f002 f82f 	bl	8002c7c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_0_0_Pin|MOTOR_0_1_Pin|MOTOR_0_2_Pin|MOTOR_0_3_Pin
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000c24:	4882      	ldr	r0, [pc, #520]	@ (8000e30 <MX_GPIO_Init+0x2ec>)
 8000c26:	f001 ff4d 	bl	8002ac4 <HAL_GPIO_WritePin>
                          |MOTOR_1_0_Pin|MOTOR_1_1_Pin|MOTOR_1_2_Pin|MOTOR_1_3_Pin
                          |SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f001 ff47 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|PS1_CLK_Pin|PS0_CLK_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f242 2103 	movw	r1, #8707	@ 0x2203
 8000c3c:	487d      	ldr	r0, [pc, #500]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000c3e:	f001 ff41 	bl	8002ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c42:	230c      	movs	r3, #12
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c52:	230d      	movs	r3, #13
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4876      	ldr	r0, [pc, #472]	@ (8000e38 <MX_GPIO_Init+0x2f4>)
 8000c5e:	f001 fd9f 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c72:	2304      	movs	r3, #4
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	486f      	ldr	r0, [pc, #444]	@ (8000e3c <MX_GPIO_Init+0x2f8>)
 8000c7e:	f001 fd8f 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c82:	2380      	movs	r3, #128	@ 0x80
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c92:	230d      	movs	r3, #13
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4867      	ldr	r0, [pc, #412]	@ (8000e3c <MX_GPIO_Init+0x2f8>)
 8000c9e:	f001 fd7f 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_0_0_Pin MOTOR_0_1_Pin MOTOR_0_2_Pin MOTOR_0_3_Pin
                           MOTOR_1_0_Pin MOTOR_1_1_Pin MOTOR_1_2_Pin MOTOR_1_3_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = MOTOR_0_0_Pin|MOTOR_0_1_Pin|MOTOR_0_2_Pin|MOTOR_0_3_Pin
 8000ca2:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR_1_0_Pin|MOTOR_1_1_Pin|MOTOR_1_2_Pin|MOTOR_1_3_Pin
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	485d      	ldr	r0, [pc, #372]	@ (8000e30 <MX_GPIO_Init+0x2ec>)
 8000cbc:	f001 fd70 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f001 fd5f 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f001 fd50 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin PS1_CLK_Pin PS0_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|PS1_CLK_Pin|PS0_CLK_Pin;
 8000d00:	f242 2303 	movw	r3, #8707	@ 0x2203
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4846      	ldr	r0, [pc, #280]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000d1a:	f001 fd41 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000d1e:	2344      	movs	r3, #68	@ 0x44
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4840      	ldr	r0, [pc, #256]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000d32:	f001 fd35 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d36:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4839      	ldr	r0, [pc, #228]	@ (8000e38 <MX_GPIO_Init+0x2f4>)
 8000d54:	f001 fd24 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d58:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4830      	ldr	r0, [pc, #192]	@ (8000e38 <MX_GPIO_Init+0x2f4>)
 8000d76:	f001 fd13 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4827      	ldr	r0, [pc, #156]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000d98:	f001 fd02 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_DATA_Pin PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin|PS0_DATA_Pin;
 8000d9c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4820      	ldr	r0, [pc, #128]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000db2:	f001 fcf5 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000db6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000dc8:	230e      	movs	r3, #14
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4818      	ldr	r0, [pc, #96]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000dd4:	f001 fce4 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dea:	230d      	movs	r3, #13
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <MX_GPIO_Init+0x2f0>)
 8000df6:	f001 fcd3 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dfa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	480a      	ldr	r0, [pc, #40]	@ (8000e40 <MX_GPIO_Init+0x2fc>)
 8000e18:	f001 fcc2 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e00c      	b.n	8000e44 <MX_GPIO_Init+0x300>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000400 	.word	0x48000400
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	48001400 	.word	0x48001400
 8000e40:	48000c00 	.word	0x48000c00
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	483b      	ldr	r0, [pc, #236]	@ (8000f44 <MX_GPIO_Init+0x400>)
 8000e56:	f001 fca3 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4834      	ldr	r0, [pc, #208]	@ (8000f48 <MX_GPIO_Init+0x404>)
 8000e78:	f001 fc92 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000e7c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f001 fc80 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f001 fc72 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ecc:	2309      	movs	r3, #9
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481d      	ldr	r0, [pc, #116]	@ (8000f4c <MX_GPIO_Init+0x408>)
 8000ed8:	f001 fc62 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000edc:	2304      	movs	r3, #4
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eec:	230c      	movs	r3, #12
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0x408>)
 8000ef8:	f001 fc52 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000efc:	2378      	movs	r3, #120	@ 0x78
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_GPIO_Init+0x408>)
 8000f18:	f001 fc42 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_GPIO_Init+0x40c>)
 8000f38:	f001 fc32 	bl	80027a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	@ 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	48001800 	.word	0x48001800
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	48001000 	.word	0x48001000

08000f54 <FS_Init>:
/* USER CODE BEGIN 4 */

/*
 * mounts the sd card -- if its not found, it blocks forever
 */
static void FS_Init(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8000f5a:	af00      	add	r7, sp, #0
	FATFS FatFs; 	//Fatfs handle
	FRESULT fres; 	//Result after operations
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4908      	ldr	r1, [pc, #32]	@ (8000f84 <FS_Init+0x30>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f007 fa74 	bl	8008450 <f_mount>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	if (fres != FR_OK) {
 8000f6e:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <FS_Init+0x26>
		while(1);
 8000f76:	bf00      	nop
 8000f78:	e7fd      	b.n	8000f76 <FS_Init+0x22>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0800a0dc 	.word	0x0800a0dc

08000f88 <FS_Cleanup>:

/*
 * Unmounts the sd card
 */
static void FS_Cleanup(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4903      	ldr	r1, [pc, #12]	@ (8000f9c <FS_Cleanup+0x14>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f007 fa5d 	bl	8008450 <f_mount>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800a0dc 	.word	0x0800a0dc

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2294      	movs	r2, #148	@ 0x94
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f007 fff8 	bl	800900a <memset>
  if(hadc->Instance==ADC1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <HAL_ADC_MspInit+0xc8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d147      	bne.n	80010b4 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001024:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001028:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800102a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800102e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800103a:	2310      	movs	r3, #16
 800103c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001042:	2302      	movs	r3, #2
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800104a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4618      	mov	r0, r3
 8001056:	f002 fcf9 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001060:	f7ff ff9e 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 800106a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_ADC_MspInit+0xcc>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001094:	2306      	movs	r3, #6
 8001096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800109a:	230b      	movs	r3, #11
 800109c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f001 fb76 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	37b8      	adds	r7, #184	@ 0xb8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	50040000 	.word	0x50040000
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a2f      	ldr	r2, [pc, #188]	@ (80011a0 <HAL_SPI_MspInit+0xdc>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d129      	bne.n	800113a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e6:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f2:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23e0      	movs	r3, #224	@ 0xe0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001134:	f001 fb34 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001138:	e02d      	b.n	8001196 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1a      	ldr	r2, [pc, #104]	@ (80011a8 <HAL_SPI_MspInit+0xe4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d128      	bne.n	8001196 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_SPI_MspInit+0xe0>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001174:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001186:	2306      	movs	r3, #6
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4806      	ldr	r0, [pc, #24]	@ (80011ac <HAL_SPI_MspInit+0xe8>)
 8001192:	f001 fb05 	bl	80027a0 <HAL_GPIO_Init>
}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	@ 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40003c00 	.word	0x40003c00
 80011ac:	48000800 	.word	0x48000800

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ae      	sub	sp, #184	@ 0xb8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2294      	movs	r2, #148	@ 0x94
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f007 ff1a 	bl	800900a <memset>
  if(huart->Instance==USART3)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_UART_MspInit+0xb0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d13b      	bne.n	8001258 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e0:	2304      	movs	r3, #4
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fc2d 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f7ff fed2 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 8001202:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001206:	6593      	str	r3, [r2, #88]	@ 0x58
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <HAL_UART_MspInit+0xb4>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 800122c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001230:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001246:	2307      	movs	r3, #7
 8001248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_UART_MspInit+0xb8>)
 8001254:	f001 faa4 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001258:	bf00      	nop
 800125a:	37b8      	adds	r7, #184	@ 0xb8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004800 	.word	0x40004800
 8001264:	40021000 	.word	0x40021000
 8001268:	48000c00 	.word	0x48000c00

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <MemManage_Handler+0x4>

08001284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <UsageFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c2:	f000 fa61 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_kill>:

int _kill(int pid, int sig)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012e4:	f007 fee0 	bl	80090a8 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2216      	movs	r2, #22
 80012ec:	601a      	str	r2, [r3, #0]
  return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_exit>:

void _exit (int status)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001302:	f04f 31ff 	mov.w	r1, #4294967295
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffe7 	bl	80012da <_kill>
  while (1) {}    /* Make sure we hang here */
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <_exit+0x12>

08001310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e00a      	b.n	8001338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001322:	f3af 8000 	nop.w
 8001326:	4601      	mov	r1, r0
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf0      	blt.n	8001322 <_read+0x12>
  }

  return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e009      	b.n	8001370 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf1      	blt.n	800135c <_write+0x12>
  }
  return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_close>:

int _close(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013aa:	605a      	str	r2, [r3, #4]
  return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_isatty>:

int _isatty(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f007 fe44 	bl	80090a8 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200a0000 	.word	0x200a0000
 800144c:	00000400 	.word	0x00000400
 8001450:	200404cc 	.word	0x200404cc
 8001454:	20040668 	.word	0x20040668

08001458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <_Z18VC0706_SendCommandhPhh>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 800148c:	2356      	movs	r3, #86	@ 0x56
 800148e:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8001490:	2300      	movs	r3, #0
 8001492:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	77fb      	strb	r3, [r7, #31]
 800149c:	e00c      	b.n	80014b8 <_Z18VC0706_SendCommandhPhh+0x3c>
        buffer[3 + i] = params[i];
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	441a      	add	r2, r3
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	3303      	adds	r3, #3
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	3320      	adds	r3, #32
 80014ac:	443b      	add	r3, r7
 80014ae:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	3301      	adds	r3, #1
 80014b6:	77fb      	strb	r3, [r7, #31]
 80014b8:	7ffa      	ldrb	r2, [r7, #31]
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3ee      	bcc.n	800149e <_Z18VC0706_SendCommandhPhh+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 80014c0:	79bb      	ldrb	r3, [r7, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3303      	adds	r3, #3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f107 010c 	add.w	r1, r7, #12
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <_Z18VC0706_SendCommandhPhh+0x64>)
 80014d2:	f003 fdbf 	bl	8005054 <HAL_UART_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20040438 	.word	0x20040438

080014e4 <_Z16VC0706_TakePhotov>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 80014ea:	2301      	movs	r3, #1
 80014ec:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2202      	movs	r2, #2
 80014f4:	4619      	mov	r1, r3
 80014f6:	2036      	movs	r0, #54	@ 0x36
 80014f8:	f7ff ffc0 	bl	800147c <_Z18VC0706_SendCommandhPhh>

    // response array
    uint8_t response[5]={0};
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	2300      	movs	r3, #0
 8001502:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8001504:	1d39      	adds	r1, r7, #4
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	2205      	movs	r2, #5
 800150c:	480f      	ldr	r0, [pc, #60]	@ (800154c <_Z16VC0706_TakePhotov+0x68>)
 800150e:	f003 fe2f 	bl	8005170 <HAL_UART_Receive>
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <_Z16VC0706_TakePhotov+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 800151c:	2300      	movs	r3, #0
 800151e:	e011      	b.n	8001544 <_Z16VC0706_TakePhotov+0x60>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	2b76      	cmp	r3, #118	@ 0x76
 8001524:	d10d      	bne.n	8001542 <_Z16VC0706_TakePhotov+0x5e>
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10a      	bne.n	8001542 <_Z16VC0706_TakePhotov+0x5e>
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	2b36      	cmp	r3, #54	@ 0x36
 8001530:	d107      	bne.n	8001542 <_Z16VC0706_TakePhotov+0x5e>
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <_Z16VC0706_TakePhotov+0x5e>
 8001538:	7a3b      	ldrb	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <_Z16VC0706_TakePhotov+0x5e>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <_Z16VC0706_TakePhotov+0x60>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20040438 	.word	0x20040438

08001550 <_Z18VC0706_StopCapturev>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8001556:	f240 3301 	movw	r3, #769	@ 0x301
 800155a:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	2300      	movs	r3, #0
 8001562:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2202      	movs	r2, #2
 800156a:	4619      	mov	r1, r3
 800156c:	2036      	movs	r0, #54	@ 0x36
 800156e:	f7ff ff85 	bl	800147c <_Z18VC0706_SendCommandhPhh>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8001572:	1d39      	adds	r1, r7, #4
 8001574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001578:	2205      	movs	r2, #5
 800157a:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <_Z18VC0706_StopCapturev+0x68>)
 800157c:	f003 fdf8 	bl	8005170 <HAL_UART_Receive>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d110      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 800158a:	793b      	ldrb	r3, [r7, #4]
 800158c:	2b76      	cmp	r3, #118	@ 0x76
 800158e:	d10d      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 8001590:	797b      	ldrb	r3, [r7, #5]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	2b36      	cmp	r3, #54	@ 0x36
 800159a:	d107      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d104      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 80015a2:	7a3b      	ldrb	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <_Z18VC0706_StopCapturev+0x5c>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <_Z18VC0706_StopCapturev+0x5e>
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20040438 	.word	0x20040438

080015bc <_Z26VC0706_ReadImageDataLengthv>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 80015c2:	2301      	movs	r3, #1
 80015c4:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	2202      	movs	r2, #2
 80015cc:	4619      	mov	r1, r3
 80015ce:	2034      	movs	r0, #52	@ 0x34
 80015d0:	f7ff ff54 	bl	800147c <_Z18VC0706_SendCommandhPhh>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	2209      	movs	r2, #9
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <_Z26VC0706_ReadImageDataLengthv+0x50>)
 80015de:	f003 fdc7 	bl	8005170 <HAL_UART_Receive>
 80015e2:	4603      	mov	r3, r0
 80015e4:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_Z26VC0706_ReadImageDataLengthv+0x34>
    	return 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e008      	b.n	8001602 <_Z26VC0706_ReadImageDataLengthv+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7b3b      	ldrb	r3, [r7, #12]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8001600:	8abb      	ldrh	r3, [r7, #20]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20040438 	.word	0x20040438

08001610 <_Z21VC0706_ReadImageBlockPhm>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 800161a:	230c      	movs	r3, #12
 800161c:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 800161e:	2300      	movs	r3, #0
 8001620:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8001622:	230a      	movs	r3, #10
 8001624:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b2db      	uxtb	r3, r3
 8001634:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8001640:	2300      	movs	r3, #0
 8001642:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8001648:	2320      	movs	r3, #32
 800164a:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8001650:	23ff      	movs	r3, #255	@ 0xff
 8001652:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	220d      	movs	r2, #13
 800165a:	4619      	mov	r1, r3
 800165c:	2032      	movs	r0, #50	@ 0x32
 800165e:	f7ff ff0d 	bl	800147c <_Z18VC0706_SendCommandhPhh>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	222a      	movs	r2, #42	@ 0x2a
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4807      	ldr	r0, [pc, #28]	@ (8001688 <_Z21VC0706_ReadImageBlockPhm+0x78>)
 800166c:	f003 fd80 	bl	8005170 <HAL_UART_Receive>
 8001670:	4603      	mov	r3, r0
 8001672:	75fb      	strb	r3, [r7, #23]

    return status == HAL_OK;
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf0c      	ite	eq
 800167a:	2301      	moveq	r3, #1
 800167c:	2300      	movne	r3, #0
 800167e:	b2db      	uxtb	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20040438 	.word	0x20040438

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff fee2 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	@ (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	@ (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	@ (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f007 fcfb 	bl	80090b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7ff f88b 	bl	80007d8 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016c8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80016cc:	20040080 	.word	0x20040080
  ldr r2, =_sidata
 80016d0:	0800a304 	.word	0x0800a304
  ldr r2, =_sbss
 80016d4:	20040080 	.word	0x20040080
  ldr r4, =_ebss
 80016d8:	20040668 	.word	0x20040668

080016dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f001 f825 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f80e 	bl	8001710 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fc54 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f823 	bl	8002786 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 fffb 	bl	800274e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20040008 	.word	0x20040008
 8001780:	20040000 	.word	0x20040000
 8001784:	20040004 	.word	0x20040004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20040008 	.word	0x20040008
 80017ac:	200404d0 	.word	0x200404d0

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200404d0 	.word	0x200404d0

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20040008 	.word	0x20040008

08001810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3360      	adds	r3, #96	@ 0x60
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <LL_ADC_SetOffset+0x44>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	4313      	orrs	r3, r2
 80018a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018b0:	bf00      	nop
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	03fff000 	.word	0x03fff000

080018c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3360      	adds	r3, #96	@ 0x60
 80018ce:	461a      	mov	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3360      	adds	r3, #96	@ 0x60
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	615a      	str	r2, [r3, #20]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3330      	adds	r3, #48	@ 0x30
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	211f      	movs	r1, #31
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 011f 	and.w	r1, r3, #31
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3314      	adds	r3, #20
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	0e5b      	lsrs	r3, r3, #25
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0d1b      	lsrs	r3, r3, #20
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2107      	movs	r1, #7
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	0d1b      	lsrs	r3, r3, #20
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0318 	and.w	r3, r3, #24
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a1c:	40d9      	lsrs	r1, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	400b      	ands	r3, r1
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	0007ffff 	.word	0x0007ffff

08001a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_IsEnabled+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_IsEnabled+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e129      	b.n	8001dbe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fa3b 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff67 	bl	8001a64 <LL_ADC_IsDeepPowerDownEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff4d 	bl	8001a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff82 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d115      	bne.n	8001be2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff66 	bl	8001a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc0:	4b81      	ldr	r3, [pc, #516]	@ (8001dc8 <HAL_ADC_Init+0x278>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4a81      	ldr	r2, [pc, #516]	@ (8001dcc <HAL_ADC_Init+0x27c>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff64 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	f043 0210 	orr.w	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff75 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001c18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80c2 	bne.w	8001dac <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80be 	bne.w	8001dac <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c34:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff49 	bl	8001adc <LL_ADC_IsEnabled>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c50:	485f      	ldr	r0, [pc, #380]	@ (8001dd0 <HAL_ADC_Init+0x280>)
 8001c52:	f7ff ff43 	bl	8001adc <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4619      	mov	r1, r3
 8001c62:	485c      	ldr	r0, [pc, #368]	@ (8001dd4 <HAL_ADC_Init+0x284>)
 8001c64:	f7ff fdd4 	bl	8001810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e5b      	ldrb	r3, [r3, #25]
 8001c6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	045b      	lsls	r3, r3, #17
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b44      	ldr	r3, [pc, #272]	@ (8001dd8 <HAL_ADC_Init+0x288>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff25 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001cde:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d140      	bne.n	8001d68 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d13d      	bne.n	8001d68 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cfe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d0e:	f023 0306 	bic.w	r3, r3, #6
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	69b9      	ldr	r1, [r7, #24]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10c      	bne.n	8001d8a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f023 010f 	bic.w	r1, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d88:	e007      	b.n	8001d9a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020f 	bic.w	r2, r2, #15
 8001d98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20040000 	.word	0x20040000
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	50040000 	.word	0x50040000
 8001dd4:	50040300 	.word	0x50040300
 8001dd8:	fff0c007 	.word	0xfff0c007

08001ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0b6      	sub	sp, #216	@ 0xd8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e3d5      	b.n	80025aa <HAL_ADC_ConfigChannel+0x7ce>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe79 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 83ba 	bne.w	800258c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d824      	bhi.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	3b02      	subs	r3, #2
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d81b      	bhi.n	8001e6a <HAL_ADC_ConfigChannel+0x8e>
 8001e32:	a201      	add	r2, pc, #4	@ (adr r2, 8001e38 <HAL_ADC_ConfigChannel+0x5c>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e61 	.word	0x08001e61
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e4e:	e010      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e50:	2312      	movs	r3, #18
 8001e52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e56:	e00c      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e58:	2318      	movs	r3, #24
 8001e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e5e:	e008      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e70:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e80:	f7ff fd62 	bl	8001948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe3a 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001e8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe46 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001e9c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 81bf 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 81ba 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ebc:	d10f      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7ff fd69 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fd23 	bl	8001922 <LL_ADC_SetSamplingTimeCommonConfig>
 8001edc:	e00e      	b.n	8001efc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f7ff fd58 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd13 	bl	8001922 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00a      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f2e:	f7ff fca3 	bl	8001878 <LL_ADC_SetOffset>
 8001f32:	e179      	b.n	8002228 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fcc0 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x184>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fcb5 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1c2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fcaa 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x1da>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e018      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x20c>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001fd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001fde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc79 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fc5d 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x24a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fc52 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	e01e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x288>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fc47 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800204c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002058:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x2a0>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	e018      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2d2>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002090:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002098:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e004      	b.n	80020ae <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc16 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fbfa 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x310>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fbef 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	e01e      	b.n	800212a <HAL_ADC_ConfigChannel+0x34e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fbe4 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800210a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x366>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	e014      	b.n	800216c <HAL_ADC_ConfigChannel+0x390>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002156:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e004      	b.n	800216c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fbb7 	bl	80018ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2103      	movs	r1, #3
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fb9b 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 800218a:	4603      	mov	r3, r0
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x3ce>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2103      	movs	r1, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fb90 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	e017      	b.n	80021da <HAL_ADC_ConfigChannel+0x3fe>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2103      	movs	r1, #3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fb85 	bl	80018c0 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80021c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80021c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80021d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x416>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	e011      	b.n	8002216 <HAL_ADC_ConfigChannel+0x43a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002200:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002202:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e003      	b.n	8002216 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800220e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002216:	429a      	cmp	r2, r3
 8002218:	d106      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	2103      	movs	r1, #3
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fb62 	bl	80018ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fc55 	bl	8001adc <LL_ADC_IsEnabled>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 813f 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f7ff fbd6 	bl	80019f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a8e      	ldr	r2, [pc, #568]	@ (800248c <HAL_ADC_ConfigChannel+0x6b0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f040 8130 	bne.w	80024b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x4a4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	3301      	adds	r3, #1
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	2b09      	cmp	r3, #9
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e019      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x4d8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800228e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002290:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800229c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	bf94      	ite	ls
 80022ae:	2301      	movls	r3, #1
 80022b0:	2300      	movhi	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d079      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x4f8>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	069b      	lsls	r3, r3, #26
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d2:	e015      	b.n	8002300 <HAL_ADC_ConfigChannel+0x524>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80022e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80022e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e003      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80022f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x544>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	e017      	b.n	8002350 <HAL_ADC_ConfigChannel+0x574>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800232e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002330:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800233c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	ea42 0103 	orr.w	r1, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x59a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	e018      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x5cc>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a8:	430b      	orrs	r3, r1
 80023aa:	e080      	b.n	80024ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x5ec>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	069b      	lsls	r3, r3, #26
 80023c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c6:	e015      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x618>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80023da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80023e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x638>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	3301      	adds	r3, #1
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	e017      	b.n	8002444 <HAL_ADC_ConfigChannel+0x668>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	61bb      	str	r3, [r7, #24]
  return result;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	ea42 0103 	orr.w	r1, r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x694>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	3301      	adds	r3, #1
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3b1e      	subs	r3, #30
 8002468:	051b      	lsls	r3, r3, #20
 800246a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800246e:	e01d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x6d0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	60fb      	str	r3, [r7, #12]
  return result;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e005      	b.n	8002498 <HAL_ADC_ConfigChannel+0x6bc>
 800248c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7ff fa74 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_ADC_ConfigChannel+0x7d8>)
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d06c      	beq.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c4:	483c      	ldr	r0, [pc, #240]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024c6:	f7ff f9c9 	bl	800185c <LL_ADC_GetCommonPathInternalCh>
 80024ca:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3a      	ldr	r2, [pc, #232]	@ (80025bc <HAL_ADC_ConfigChannel+0x7e0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d127      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d121      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d157      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024f6:	4619      	mov	r1, r3
 80024f8:	482f      	ldr	r0, [pc, #188]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 80024fa:	f7ff f99c 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	4a30      	ldr	r2, [pc, #192]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002526:	e03a      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a27      	ldr	r2, [pc, #156]	@ (80025cc <HAL_ADC_ConfigChannel+0x7f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d113      	bne.n	800255a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002536:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1f      	ldr	r2, [pc, #124]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d12a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800254c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002550:	4619      	mov	r1, r3
 8002552:	4819      	ldr	r0, [pc, #100]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002554:	f7ff f96f 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002558:	e021      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d11c      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d111      	bne.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800257e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002586:	f7ff f956 	bl	8001836 <LL_ADC_SetCommonPathInternalCh>
 800258a:	e008      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80025a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	37d8      	adds	r7, #216	@ 0xd8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	80080000 	.word	0x80080000
 80025b8:	50040300 	.word	0x50040300
 80025bc:	c7520000 	.word	0xc7520000
 80025c0:	50040000 	.word	0x50040000
 80025c4:	20040000 	.word	0x20040000
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	cb840000 	.word	0xcb840000
 80025d0:	80000001 	.word	0x80000001

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	@ (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	@ (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	@ (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff47 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff5c 	bl	800261c <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffb0 	bl	80026f4 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	e166      	b.n	8002a7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8158 	beq.w	8002a78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d005      	beq.n	80027e0 <HAL_GPIO_Init+0x40>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d130      	bne.n	8002842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002816:	2201      	movs	r2, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0201 	and.w	r2, r3, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d017      	beq.n	800287e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d123      	bne.n	80028d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0203 	and.w	r2, r3, #3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80b2 	beq.w	8002a78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002914:	4b61      	ldr	r3, [pc, #388]	@ (8002a9c <HAL_GPIO_Init+0x2fc>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	4a60      	ldr	r2, [pc, #384]	@ (8002a9c <HAL_GPIO_Init+0x2fc>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002920:	4b5e      	ldr	r3, [pc, #376]	@ (8002a9c <HAL_GPIO_Init+0x2fc>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800292c:	4a5c      	ldr	r2, [pc, #368]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002956:	d02b      	beq.n	80029b0 <HAL_GPIO_Init+0x210>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d025      	beq.n	80029ac <HAL_GPIO_Init+0x20c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a51      	ldr	r2, [pc, #324]	@ (8002aa8 <HAL_GPIO_Init+0x308>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d01f      	beq.n	80029a8 <HAL_GPIO_Init+0x208>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a50      	ldr	r2, [pc, #320]	@ (8002aac <HAL_GPIO_Init+0x30c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d019      	beq.n	80029a4 <HAL_GPIO_Init+0x204>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab0 <HAL_GPIO_Init+0x310>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_GPIO_Init+0x200>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab4 <HAL_GPIO_Init+0x314>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_Init+0x1fc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab8 <HAL_GPIO_Init+0x318>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1f8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a4c      	ldr	r2, [pc, #304]	@ (8002abc <HAL_GPIO_Init+0x31c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_Init+0x1f4>
 8002990:	2307      	movs	r3, #7
 8002992:	e00e      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 8002994:	2308      	movs	r3, #8
 8002996:	e00c      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 8002998:	2306      	movs	r3, #6
 800299a:	e00a      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 800299c:	2305      	movs	r3, #5
 800299e:	e008      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e006      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 80029a4:	2303      	movs	r3, #3
 80029a6:	e004      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e002      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_GPIO_Init+0x212>
 80029b0:	2300      	movs	r3, #0
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	f002 0203 	and.w	r2, r2, #3
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	4093      	lsls	r3, r2
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029c2:	4937      	ldr	r1, [pc, #220]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029f4:	4a32      	ldr	r2, [pc, #200]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029fa:	4b31      	ldr	r3, [pc, #196]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a72:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <HAL_GPIO_Init+0x320>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f ae91 	bne.w	80027b0 <HAL_GPIO_Init+0x10>
  }
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	48000400 	.word	0x48000400
 8002aa8:	48000800 	.word	0x48000800
 8002aac:	48000c00 	.word	0x48000c00
 8002ab0:	48001000 	.word	0x48001000
 8002ab4:	48001400 	.word	0x48001400
 8002ab8:	48001800 	.word	0x48001800
 8002abc:	48001c00 	.word	0x48001c00
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b04:	d102      	bne.n	8002b0c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b0a:	e00b      	b.n	8002b24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b20:	e000      	b.n	8002b24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b22:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d141      	bne.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4e:	d131      	bne.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b50:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b56:	4a46      	ldr	r2, [pc, #280]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b60:	4b43      	ldr	r3, [pc, #268]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b68:	4a41      	ldr	r2, [pc, #260]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b70:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2232      	movs	r2, #50	@ 0x32
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0c9b      	lsrs	r3, r3, #18
 8002b82:	3301      	adds	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b86:	e002      	b.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8e:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9a:	d102      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f2      	bne.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba2:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bae:	d158      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e057      	b.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bba:	4a2d      	ldr	r2, [pc, #180]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bc4:	e04d      	b.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bcc:	d141      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bce:	4b28      	ldr	r3, [pc, #160]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d131      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be2:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2232      	movs	r2, #50	@ 0x32
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c12:	e002      	b.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c26:	d102      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f2      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d112      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e011      	b.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c50:	e007      	b.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c60:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40007000 	.word	0x40007000
 8002c74:	20040000 	.word	0x20040000
 8002c78:	431bde83 	.word	0x431bde83

08002c7c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6053      	str	r3, [r2, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 bc08 	b.w	80034c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b96      	ldr	r3, [pc, #600]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4b94      	ldr	r3, [pc, #592]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80e4 	beq.w	8002e9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4c>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	f040 808b 	bne.w	8002df6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	f040 8087 	bne.w	8002df6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce8:	4b88      	ldr	r3, [pc, #544]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x64>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e3df      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	4b81      	ldr	r3, [pc, #516]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_RCC_OscConfig+0x7e>
 8002d10:	4b7e      	ldr	r3, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d18:	e005      	b.n	8002d26 <HAL_RCC_OscConfig+0x8a>
 8002d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d223      	bcs.n	8002d72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fdcc 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e3c0      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a72      	ldr	r2, [pc, #456]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b70      	ldr	r3, [pc, #448]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	496d      	ldr	r1, [pc, #436]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	4968      	ldr	r1, [pc, #416]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e025      	b.n	8002dbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d72:	4b66      	ldr	r3, [pc, #408]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b63      	ldr	r3, [pc, #396]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4960      	ldr	r1, [pc, #384]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	495b      	ldr	r1, [pc, #364]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd8c 	bl	80038cc <RCC_SetFlashLatencyFromMSIRange>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e380      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbe:	f000 fcc1 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b51      	ldr	r3, [pc, #324]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4950      	ldr	r1, [pc, #320]	@ (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a4e      	ldr	r2, [pc, #312]	@ (8002f14 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dde:	4b4e      	ldr	r3, [pc, #312]	@ (8002f18 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fc94 	bl	8001710 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	e364      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d032      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dfe:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fcd1 	bl	80017b0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e12:	f7fe fccd 	bl	80017b0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e34d      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e24:	4b39      	ldr	r3, [pc, #228]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e30:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a35      	ldr	r2, [pc, #212]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b33      	ldr	r3, [pc, #204]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4930      	ldr	r1, [pc, #192]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	492b      	ldr	r1, [pc, #172]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e01a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e64:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fc9e 	bl	80017b0 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e78:	f7fe fc9a 	bl	80017b0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e31a      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1dc>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d073      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x21c>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d063      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d15f      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2f7      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0b      	ldr	r2, [pc, #44]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e025      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef0:	d114      	bne.n	8002f1c <HAL_RCC_OscConfig+0x280>
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a02      	ldr	r2, [pc, #8]	@ (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e013      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	0800a124 	.word	0x0800a124
 8002f14:	20040000 	.word	0x20040000
 8002f18:	20040004 	.word	0x20040004
 8002f1c:	4ba0      	ldr	r3, [pc, #640]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a9f      	ldr	r2, [pc, #636]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b9d      	ldr	r3, [pc, #628]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a9c      	ldr	r2, [pc, #624]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fc38 	bl	80017b0 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fc34 	bl	80017b0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e2b4      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	4b92      	ldr	r3, [pc, #584]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2a8>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fc24 	bl	80017b0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fc20 	bl	80017b0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e2a0      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d0>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d060      	beq.n	800305c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x310>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d119      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d116      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fac:	4b7c      	ldr	r3, [pc, #496]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x328>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e27d      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b76      	ldr	r3, [pc, #472]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	4973      	ldr	r1, [pc, #460]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	e040      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d023      	beq.n	800302a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6e      	ldr	r2, [pc, #440]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe fbdf 	bl	80017b0 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fbdb 	bl	80017b0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e25b      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	4b65      	ldr	r3, [pc, #404]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b62      	ldr	r3, [pc, #392]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	495f      	ldr	r1, [pc, #380]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b5d      	ldr	r3, [pc, #372]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fbbb 	bl	80017b0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe fbb7 	bl	80017b0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e237      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003050:	4b53      	ldr	r3, [pc, #332]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d03c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003070:	4b4b      	ldr	r3, [pc, #300]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003076:	4a4a      	ldr	r2, [pc, #296]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fb96 	bl	80017b0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fb92 	bl	80017b0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e212      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309a:	4b41      	ldr	r3, [pc, #260]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCC_OscConfig+0x3ec>
 80030a8:	e01b      	b.n	80030e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b0:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe fb79 	bl	80017b0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe fb75 	bl	80017b0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1f5      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d4:	4b32      	ldr	r3, [pc, #200]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a6 	beq.w	800323c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f4:	4b2a      	ldr	r3, [pc, #168]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	4a26      	ldr	r2, [pc, #152]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	@ 0x58
 800310c:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311c:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <HAL_RCC_OscConfig+0x508>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d118      	bne.n	800315a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003128:	4b1e      	ldr	r3, [pc, #120]	@ (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7fe fb3c 	bl	80017b0 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fe fb38 	bl	80017b0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1b8      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_RCC_OscConfig+0x508>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_RCC_OscConfig+0x4d8>
 8003162:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d115      	bne.n	80031a8 <HAL_RCC_OscConfig+0x50c>
 800317c:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	4a03      	ldr	r2, [pc, #12]	@ (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	4b9d      	ldr	r3, [pc, #628]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	4a9c      	ldr	r2, [pc, #624]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031b8:	4b99      	ldr	r3, [pc, #612]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	4a98      	ldr	r2, [pc, #608]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fe faee 	bl	80017b0 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe faea 	bl	80017b0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e168      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ed      	beq.n	80031d8 <HAL_RCC_OscConfig+0x53c>
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe fad7 	bl	80017b0 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fad3 	bl	80017b0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e151      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321c:	4b80      	ldr	r3, [pc, #512]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ed      	bne.n	8003206 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7ffb      	ldrb	r3, [r7, #31]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b7b      	ldr	r3, [pc, #492]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	4a7a      	ldr	r2, [pc, #488]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003250:	4b73      	ldr	r3, [pc, #460]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003256:	4a72      	ldr	r2, [pc, #456]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe faa6 	bl	80017b0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003268:	f7fe faa2 	bl	80017b0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e122      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800327a:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800327c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <HAL_RCC_OscConfig+0x5cc>
 8003288:	e01b      	b.n	80032c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328a:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003290:	4a63      	ldr	r2, [pc, #396]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe fa89 	bl	80017b0 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a2:	f7fe fa85 	bl	80017b0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e105      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80032b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80f9 	beq.w	80034be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	f040 80cf 	bne.w	8003474 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032d6:	4b52      	ldr	r3, [pc, #328]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d12c      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	3b01      	subs	r3, #1
 80032f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d123      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d11b      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d113      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d109      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d071      	beq.n	8003428 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d068      	beq.n	800341c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800334a:	4b35      	ldr	r3, [pc, #212]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003356:	4b32      	ldr	r3, [pc, #200]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0ac      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003366:	4b2e      	ldr	r3, [pc, #184]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2d      	ldr	r2, [pc, #180]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800336c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003370:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003372:	f7fe fa1d 	bl	80017b0 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe fa19 	bl	80017b0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e099      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	4b24      	ldr	r3, [pc, #144]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003398:	4b21      	ldr	r3, [pc, #132]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCC_OscConfig+0x788>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033a8:	3a01      	subs	r2, #1
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033b2:	0212      	lsls	r2, r2, #8
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	0552      	lsls	r2, r2, #21
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033c6:	0852      	lsrs	r2, r2, #1
 80033c8:	3a01      	subs	r2, #1
 80033ca:	0652      	lsls	r2, r2, #25
 80033cc:	4311      	orrs	r1, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d2:	06d2      	lsls	r2, r2, #27
 80033d4:	430a      	orrs	r2, r1
 80033d6:	4912      	ldr	r1, [pc, #72]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033dc:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 80033ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f4:	f7fe f9dc 	bl	80017b0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe f9d8 	bl	80017b0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e058      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <HAL_RCC_OscConfig+0x784>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341a:	e050      	b.n	80034be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e04f      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
 8003420:	40021000 	.word	0x40021000
 8003424:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d144      	bne.n	80034be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800344c:	f7fe f9b0 	bl	80017b0 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f9ac 	bl	80017b0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e02c      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x7b8>
 8003472:	e024      	b.n	80034be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d01f      	beq.n	80034ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe f993 	bl	80017b0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe f98f 	bl	80017b0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e00f      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	4905      	ldr	r1, [pc, #20]	@ (80034c8 <HAL_RCC_OscConfig+0x82c>)
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCC_OscConfig+0x830>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
 80034b8:	e001      	b.n	80034be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	feeefffc 	.word	0xfeeefffc

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e11d      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b90      	ldr	r3, [pc, #576]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d910      	bls.n	8003518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b8d      	ldr	r3, [pc, #564]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	498b      	ldr	r1, [pc, #556]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b89      	ldr	r3, [pc, #548]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e105      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b81      	ldr	r3, [pc, #516]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003530:	429a      	cmp	r2, r3
 8003532:	d908      	bls.n	8003546 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b7e      	ldr	r3, [pc, #504]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	497b      	ldr	r1, [pc, #492]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d079      	beq.n	8003646 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d11e      	bne.n	8003598 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b75      	ldr	r3, [pc, #468]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0dc      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800356a:	f000 fa09 	bl	8003980 <RCC_GetSysClockFreqFromPLLSource>
 800356e:	4603      	mov	r3, r0
 8003570:	4a70      	ldr	r2, [pc, #448]	@ (8003734 <HAL_RCC_ClockConfig+0x264>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d946      	bls.n	8003604 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003576:	4b6e      	ldr	r3, [pc, #440]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d140      	bne.n	8003604 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003582:	4b6b      	ldr	r3, [pc, #428]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800358a:	4a69      	ldr	r2, [pc, #420]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 800358c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003590:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e035      	b.n	8003604 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a0:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d115      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b9      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ad      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c8:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0a5      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80035d8:	f000 f8b4 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a55      	ldr	r2, [pc, #340]	@ (8003734 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d90f      	bls.n	8003604 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035e4:	4b52      	ldr	r3, [pc, #328]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80035fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003604:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 0203 	bic.w	r2, r3, #3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4947      	ldr	r1, [pc, #284]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003616:	f7fe f8cb 	bl	80017b0 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361c:	e00a      	b.n	8003634 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361e:	f7fe f8c7 	bl	80017b0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e077      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003634:	4b3e      	ldr	r3, [pc, #248]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 020c 	and.w	r2, r3, #12
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	429a      	cmp	r2, r3
 8003644:	d1eb      	bne.n	800361e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d105      	bne.n	8003658 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800364c:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a37      	ldr	r2, [pc, #220]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003656:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d010      	beq.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003670:	429a      	cmp	r2, r3
 8003672:	d208      	bcs.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b2e      	ldr	r3, [pc, #184]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	492b      	ldr	r1, [pc, #172]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003686:	4b29      	ldr	r3, [pc, #164]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d210      	bcs.n	80036b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003694:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 020f 	bic.w	r2, r3, #15
 800369c:	4923      	ldr	r1, [pc, #140]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a4:	4b21      	ldr	r3, [pc, #132]	@ (800372c <HAL_RCC_ClockConfig+0x25c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e036      	b.n	8003724 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4918      	ldr	r1, [pc, #96]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e0:	4b13      	ldr	r3, [pc, #76]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4910      	ldr	r1, [pc, #64]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f4:	f000 f826 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	490c      	ldr	r1, [pc, #48]	@ (8003738 <HAL_RCC_ClockConfig+0x268>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	4a0a      	ldr	r2, [pc, #40]	@ (800373c <HAL_RCC_ClockConfig+0x26c>)
 8003712:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_RCC_ClockConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fff9 	bl	8001710 <HAL_InitTick>
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]

  return status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40022000 	.word	0x40022000
 8003730:	40021000 	.word	0x40021000
 8003734:	04c4b400 	.word	0x04c4b400
 8003738:	0800a124 	.word	0x0800a124
 800373c:	20040000 	.word	0x20040000
 8003740:	20040004 	.word	0x20040004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	@ 0x24
 8003748:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003752:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375c:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d121      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d11e      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003778:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003784:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e005      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037bc:	4b25      	ldr	r3, [pc, #148]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x110>)
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e004      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037c8:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x114>)
 80037ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d134      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0xa6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0xac>
 80037e8:	e005      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ec:	617b      	str	r3, [r7, #20]
      break;
 80037ee:	e005      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x114>)
 80037f2:	617b      	str	r3, [r7, #20]
      break;
 80037f4:	e002      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	617b      	str	r3, [r7, #20]
      break;
 80037fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fc:	4b13      	ldr	r3, [pc, #76]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3301      	adds	r3, #1
 8003808:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_RCC_GetSysClockFreq+0x108>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	0e5b      	lsrs	r3, r3, #25
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	3301      	adds	r3, #1
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800383c:	69bb      	ldr	r3, [r7, #24]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	0800a13c 	.word	0x0800a13c
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20040000 	.word	0x20040000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	@ (800389c <HAL_RCC_GetPCLK1Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	0800a134 	.word	0x0800a134

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038a4:	f7ff ffda 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0adb      	lsrs	r3, r3, #11
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4904      	ldr	r1, [pc, #16]	@ (80038c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	0800a134 	.word	0x0800a134

080038cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f906 	bl	8002af4 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
 80038ea:	e014      	b.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003904:	f7ff f8f6 	bl	8002af4 <HAL_PWREx_GetVoltageRange>
 8003908:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391c:	d10b      	bne.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d913      	bls.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2ba0      	cmp	r3, #160	@ 0xa0
 8003928:	d902      	bls.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392a:	2302      	movs	r3, #2
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e00d      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003930:	2301      	movs	r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e00a      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b7f      	cmp	r3, #127	@ 0x7f
 800393a:	d902      	bls.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800393c:	2302      	movs	r3, #2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e004      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b70      	cmp	r3, #112	@ 0x70
 8003946:	d101      	bne.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003948:	2301      	movs	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 020f 	bic.w	r2, r3, #15
 8003954:	4909      	ldr	r1, [pc, #36]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800395c:	4b07      	ldr	r3, [pc, #28]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	40022000 	.word	0x40022000

08003980 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b2d      	ldr	r3, [pc, #180]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d00b      	beq.n	80039ae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d825      	bhi.n	80039e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d008      	beq.n	80039b4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d11f      	bne.n	80039e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80039a8:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039aa:	613b      	str	r3, [r7, #16]
    break;
 80039ac:	e01f      	b.n	80039ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80039ae:	4b25      	ldr	r3, [pc, #148]	@ (8003a44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80039b0:	613b      	str	r3, [r7, #16]
    break;
 80039b2:	e01c      	b.n	80039ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b4:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d107      	bne.n	80039d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039c0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	e005      	b.n	80039dc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039d0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80039dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	613b      	str	r3, [r7, #16]
    break;
 80039e6:	e002      	b.n	80039ee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
    break;
 80039ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ee:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	3301      	adds	r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	fb03 f202 	mul.w	r2, r3, r2
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	0e5b      	lsrs	r3, r3, #25
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a2e:	683b      	ldr	r3, [r7, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	0800a13c 	.word	0x0800a13c

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d040      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a6c:	2b80      	cmp	r3, #128	@ 0x80
 8003a6e:	d02a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a70:	2b80      	cmp	r3, #128	@ 0x80
 8003a72:	d825      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a74:	2b60      	cmp	r3, #96	@ 0x60
 8003a76:	d026      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a78:	2b60      	cmp	r3, #96	@ 0x60
 8003a7a:	d821      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d006      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d81d      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d010      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a8c:	e018      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a8e:	4b89      	ldr	r3, [pc, #548]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4a88      	ldr	r2, [pc, #544]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fb02 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aac:	e00c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fbed 	bl	8004294 <RCCEx_PLLSAI2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ace:	4b79      	ldr	r3, [pc, #484]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003adc:	4975      	ldr	r1, [pc, #468]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003ae4:	e001      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d047      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afe:	d030      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b04:	d82a      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0a:	d02a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b10:	d824      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1c:	d81e      	bhi.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b26:	d010      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b28:	e018      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b2a:	4b62      	ldr	r3, [pc, #392]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a61      	ldr	r2, [pc, #388]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b36:	e015      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fab4 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fb9f 	bl	8004294 <RCCEx_PLLSAI2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	74fb      	strb	r3, [r7, #19]
      break;
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b6a:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	494e      	ldr	r1, [pc, #312]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b80:	e001      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 809f 	beq.w	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b94:	2300      	movs	r3, #0
 8003b96:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b98:	4b46      	ldr	r3, [pc, #280]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	4b41      	ldr	r3, [pc, #260]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	4a40      	ldr	r2, [pc, #256]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bba:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bca:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd fdeb 	bl	80017b0 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd fde7 	bl	80017b0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	74fb      	strb	r3, [r7, #19]
        break;
 8003bf0:	e005      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d15b      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d019      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2e:	4b21      	ldr	r3, [pc, #132]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c4e:	4a19      	ldr	r2, [pc, #100]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d016      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fda6 	bl	80017b0 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c66:	e00b      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd fda2 	bl	80017b0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c7e:	e006      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c80:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ec      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10c      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca4:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cac:	e008      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	74bb      	strb	r3, [r7, #18]
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc0:	7c7b      	ldrb	r3, [r7, #17]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	4a9f      	ldr	r2, [pc, #636]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cde:	4b9a      	ldr	r3, [pc, #616]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	f023 0203 	bic.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	4996      	ldr	r1, [pc, #600]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d00:	4b91      	ldr	r3, [pc, #580]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 020c 	bic.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	498e      	ldr	r1, [pc, #568]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d22:	4b89      	ldr	r3, [pc, #548]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	4985      	ldr	r1, [pc, #532]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d44:	4b80      	ldr	r3, [pc, #512]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d52:	497d      	ldr	r1, [pc, #500]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d66:	4b78      	ldr	r3, [pc, #480]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d74:	4974      	ldr	r1, [pc, #464]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d88:	4b6f      	ldr	r3, [pc, #444]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d96:	496c      	ldr	r1, [pc, #432]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003daa:	4b67      	ldr	r3, [pc, #412]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db8:	4963      	ldr	r1, [pc, #396]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dda:	495b      	ldr	r1, [pc, #364]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dee:	4b56      	ldr	r3, [pc, #344]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	4952      	ldr	r1, [pc, #328]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e10:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	494a      	ldr	r1, [pc, #296]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e32:	4b45      	ldr	r3, [pc, #276]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	4941      	ldr	r1, [pc, #260]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e54:	4b3c      	ldr	r3, [pc, #240]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e62:	4939      	ldr	r1, [pc, #228]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e76:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e84:	4930      	ldr	r1, [pc, #192]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e96:	4b2c      	ldr	r3, [pc, #176]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	60d3      	str	r3, [r2, #12]
 8003ea2:	e011      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f8f9 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d04d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003edc:	d108      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003ede:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003eee:	e012      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ef0:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ef6:	4a14      	ldr	r2, [pc, #80]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003efc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f0e:	490e      	ldr	r1, [pc, #56]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a08      	ldr	r2, [pc, #32]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2a:	60d3      	str	r3, [r2, #12]
 8003f2c:	e020      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f36:	d109      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f38:	4b03      	ldr	r3, [pc, #12]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a02      	ldr	r2, [pc, #8]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f42:	60d3      	str	r3, [r2, #12]
 8003f44:	e014      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f8a5 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d028      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f8a:	4947      	ldr	r1, [pc, #284]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b42      	ldr	r3, [pc, #264]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a41      	ldr	r2, [pc, #260]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]
 8003fa8:	e011      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb2:	d10c      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f876 	bl	80040ac <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01e      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fda:	4b33      	ldr	r3, [pc, #204]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fea:	492f      	ldr	r1, [pc, #188]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f851 	bl	80040ac <RCCEx_PLLSAI1_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004024:	4b20      	ldr	r3, [pc, #128]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800402a:	f023 0204 	bic.w	r2, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004034:	491c      	ldr	r1, [pc, #112]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00b      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004048:	4b17      	ldr	r3, [pc, #92]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800404e:	f023 0218 	bic.w	r2, r3, #24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	4913      	ldr	r1, [pc, #76]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d017      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800406c:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004072:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800407c:	490a      	ldr	r1, [pc, #40]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800408a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800409c:	7cbb      	ldrb	r3, [r7, #18]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000

080040ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ba:	4b72      	ldr	r3, [pc, #456]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00e      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d103      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
       ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d142      	bne.n	8004164 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	e03f      	b.n	8004164 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d018      	beq.n	800411e <RCCEx_PLLSAI1_Config+0x72>
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d825      	bhi.n	800413c <RCCEx_PLLSAI1_Config+0x90>
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d002      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x4e>
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d009      	beq.n	800410c <RCCEx_PLLSAI1_Config+0x60>
 80040f8:	e020      	b.n	800413c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fa:	4b62      	ldr	r3, [pc, #392]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11d      	bne.n	8004142 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410a:	e01a      	b.n	8004142 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800410c:	4b5d      	ldr	r3, [pc, #372]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d116      	bne.n	8004146 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e013      	b.n	8004146 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800411e:	4b59      	ldr	r3, [pc, #356]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800412a:	4b56      	ldr	r3, [pc, #344]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800413a:	e006      	b.n	800414a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e004      	b.n	800414c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800414a:	bf00      	nop
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004152:	4b4c      	ldr	r3, [pc, #304]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4949      	ldr	r1, [pc, #292]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004160:	4313      	orrs	r3, r2
 8004162:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 8086 	bne.w	8004278 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800416c:	4b45      	ldr	r3, [pc, #276]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a44      	ldr	r2, [pc, #272]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd fb1a 	bl	80017b0 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800417e:	e009      	b.n	8004194 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004180:	f7fd fb16 	bl	80017b0 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	73fb      	strb	r3, [r7, #15]
        break;
 8004192:	e005      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ef      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d168      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ac:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	4b35      	ldr	r3, [pc, #212]	@ (8004288 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	06d2      	lsls	r2, r2, #27
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	3a01      	subs	r2, #1
 80041c8:	0112      	lsls	r2, r2, #4
 80041ca:	430a      	orrs	r2, r1
 80041cc:	492d      	ldr	r1, [pc, #180]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	610b      	str	r3, [r1, #16]
 80041d2:	e02d      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d115      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041da:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	4b2b      	ldr	r3, [pc, #172]	@ (800428c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	0211      	lsls	r1, r2, #8
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6912      	ldr	r2, [r2, #16]
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	0552      	lsls	r2, r2, #21
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6852      	ldr	r2, [r2, #4]
 80041f8:	3a01      	subs	r2, #1
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	430a      	orrs	r2, r1
 80041fe:	4921      	ldr	r1, [pc, #132]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	610b      	str	r3, [r1, #16]
 8004204:	e014      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004206:	4b1f      	ldr	r3, [pc, #124]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6892      	ldr	r2, [r2, #8]
 8004212:	0211      	lsls	r1, r2, #8
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6952      	ldr	r2, [r2, #20]
 8004218:	0852      	lsrs	r2, r2, #1
 800421a:	3a01      	subs	r2, #1
 800421c:	0652      	lsls	r2, r2, #25
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6852      	ldr	r2, [r2, #4]
 8004224:	3a01      	subs	r2, #1
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	430a      	orrs	r2, r1
 800422a:	4916      	ldr	r1, [pc, #88]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004236:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800423a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd fab8 	bl	80017b0 <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004242:	e009      	b.n	8004258 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004244:	f7fd fab4 	bl	80017b0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	73fb      	strb	r3, [r7, #15]
          break;
 8004256:	e005      	b.n	8004264 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004258:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ef      	beq.n	8004244 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	4904      	ldr	r1, [pc, #16]	@ (8004284 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	07ff800f 	.word	0x07ff800f
 800428c:	ff9f800f 	.word	0xff9f800f
 8004290:	f9ff800f 	.word	0xf9ff800f

08004294 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042a2:	4b72      	ldr	r3, [pc, #456]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00e      	beq.n	80042cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ae:	4b6f      	ldr	r3, [pc, #444]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0203 	and.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d103      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
       ||
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d142      	bne.n	800434c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	e03f      	b.n	800434c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d018      	beq.n	8004306 <RCCEx_PLLSAI2_Config+0x72>
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d825      	bhi.n	8004324 <RCCEx_PLLSAI2_Config+0x90>
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d002      	beq.n	80042e2 <RCCEx_PLLSAI2_Config+0x4e>
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d009      	beq.n	80042f4 <RCCEx_PLLSAI2_Config+0x60>
 80042e0:	e020      	b.n	8004324 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042e2:	4b62      	ldr	r3, [pc, #392]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d11d      	bne.n	800432a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f2:	e01a      	b.n	800432a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042f4:	4b5d      	ldr	r3, [pc, #372]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d116      	bne.n	800432e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004304:	e013      	b.n	800432e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004306:	4b59      	ldr	r3, [pc, #356]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004312:	4b56      	ldr	r3, [pc, #344]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004322:	e006      	b.n	8004332 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e004      	b.n	8004334 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004332:	bf00      	nop
    }

    if(status == HAL_OK)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800433a:	4b4c      	ldr	r3, [pc, #304]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4949      	ldr	r1, [pc, #292]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004348:	4313      	orrs	r3, r2
 800434a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8086 	bne.w	8004460 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004354:	4b45      	ldr	r3, [pc, #276]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a44      	ldr	r2, [pc, #272]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fd fa26 	bl	80017b0 <HAL_GetTick>
 8004364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004366:	e009      	b.n	800437c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004368:	f7fd fa22 	bl	80017b0 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d902      	bls.n	800437c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e005      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800437c:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1ef      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d168      	bne.n	8004460 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d113      	bne.n	80043bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004394:	4b35      	ldr	r3, [pc, #212]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	4b35      	ldr	r3, [pc, #212]	@ (8004470 <RCCEx_PLLSAI2_Config+0x1dc>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	0211      	lsls	r1, r2, #8
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	06d2      	lsls	r2, r2, #27
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6852      	ldr	r2, [r2, #4]
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0112      	lsls	r2, r2, #4
 80043b2:	430a      	orrs	r2, r1
 80043b4:	492d      	ldr	r1, [pc, #180]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	614b      	str	r3, [r1, #20]
 80043ba:	e02d      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d115      	bne.n	80043ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043c2:	4b2a      	ldr	r3, [pc, #168]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <RCCEx_PLLSAI2_Config+0x1e0>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6892      	ldr	r2, [r2, #8]
 80043ce:	0211      	lsls	r1, r2, #8
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6912      	ldr	r2, [r2, #16]
 80043d4:	0852      	lsrs	r2, r2, #1
 80043d6:	3a01      	subs	r2, #1
 80043d8:	0552      	lsls	r2, r2, #21
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6852      	ldr	r2, [r2, #4]
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4921      	ldr	r1, [pc, #132]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	614b      	str	r3, [r1, #20]
 80043ec:	e014      	b.n	8004418 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043ee:	4b1f      	ldr	r3, [pc, #124]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1e4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6892      	ldr	r2, [r2, #8]
 80043fa:	0211      	lsls	r1, r2, #8
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6952      	ldr	r2, [r2, #20]
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	3a01      	subs	r2, #1
 8004404:	0652      	lsls	r2, r2, #25
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6852      	ldr	r2, [r2, #4]
 800440c:	3a01      	subs	r2, #1
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	430a      	orrs	r2, r1
 8004412:	4916      	ldr	r1, [pc, #88]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004414:	4313      	orrs	r3, r2
 8004416:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004418:	4b14      	ldr	r3, [pc, #80]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a13      	ldr	r2, [pc, #76]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800441e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004422:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004424:	f7fd f9c4 	bl	80017b0 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800442a:	e009      	b.n	8004440 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800442c:	f7fd f9c0 	bl	80017b0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	73fb      	strb	r3, [r7, #15]
          break;
 800443e:	e005      	b.n	800444c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004440:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ef      	beq.n	800442c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	4904      	ldr	r1, [pc, #16]	@ (800446c <RCCEx_PLLSAI2_Config+0x1d8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	07ff800f 	.word	0x07ff800f
 8004474:	ff9f800f 	.word	0xff9f800f
 8004478:	f9ff800f 	.word	0xf9ff800f

0800447c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e095      	b.n	80045ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800449e:	d009      	beq.n	80044b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
 80044a6:	e005      	b.n	80044b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc fdf8 	bl	80010c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044f4:	d902      	bls.n	80044fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e002      	b.n	8004502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800450a:	d007      	beq.n	800451c <HAL_SPI_Init+0xa0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004514:	d002      	beq.n	800451c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	ea42 0103 	orr.w	r1, r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f003 0204 	and.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b088      	sub	sp, #32
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045d2:	f7fd f8ed 	bl	80017b0 <HAL_GetTick>
 80045d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
 80045ea:	e15c      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_SPI_Transmit+0x36>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e154      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_SPI_Transmit+0x48>
 8004606:	2302      	movs	r3, #2
 8004608:	e14d      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800465c:	d10f      	bne.n	800467e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800466c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800467c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d007      	beq.n	800469c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800469a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a4:	d952      	bls.n	800474c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_SPI_Transmit+0xf2>
 80046ae:	8b7b      	ldrh	r3, [r7, #26]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d145      	bne.n	8004740 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046d8:	e032      	b.n	8004740 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d112      	bne.n	800470e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800470c:	e018      	b.n	8004740 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800470e:	f7fd f84f 	bl	80017b0 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d803      	bhi.n	8004726 <HAL_SPI_Transmit+0x164>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d102      	bne.n	800472c <HAL_SPI_Transmit+0x16a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0b2      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1c7      	bne.n	80046da <HAL_SPI_Transmit+0x118>
 800474a:	e083      	b.n	8004854 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_SPI_Transmit+0x198>
 8004754:	8b7b      	ldrh	r3, [r7, #26]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d177      	bne.n	800484a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d912      	bls.n	800478a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b02      	subs	r3, #2
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004788:	e05f      	b.n	800484a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047b0:	e04b      	b.n	800484a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d12b      	bne.n	8004818 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d912      	bls.n	80047f0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b02      	subs	r3, #2
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ee:	e02c      	b.n	800484a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004816:	e018      	b.n	800484a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004818:	f7fc ffca 	bl	80017b0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d803      	bhi.n	8004830 <HAL_SPI_Transmit+0x26e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d102      	bne.n	8004836 <HAL_SPI_Transmit+0x274>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e02d      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ae      	bne.n	80047b2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fb65 	bl	8004f28 <SPI_EndRxTxTransaction>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b08a      	sub	sp, #40	@ 0x28
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048bc:	2301      	movs	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048c0:	f7fc ff76 	bl	80017b0 <HAL_GetTick>
 80048c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048d4:	887b      	ldrh	r3, [r7, #2]
 80048d6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d00c      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x4e>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e8:	d106      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x4a>
 80048f2:	7ffb      	ldrb	r3, [r7, #31]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d001      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
 80048fa:	e1f3      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_SPI_TransmitReceive+0x60>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_SPI_TransmitReceive+0x60>
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1e8      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_SPI_TransmitReceive+0x72>
 800491c:	2302      	movs	r3, #2
 800491e:	e1e1      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b04      	cmp	r3, #4
 8004932:	d003      	beq.n	800493c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2205      	movs	r2, #5
 8004938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	887a      	ldrh	r2, [r7, #2]
 8004962:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800497e:	d802      	bhi.n	8004986 <HAL_SPI_TransmitReceive+0xd8>
 8004980:	8abb      	ldrh	r3, [r7, #20]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d908      	bls.n	8004998 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	e007      	b.n	80049a8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d007      	beq.n	80049c6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049ce:	f240 8083 	bls.w	8004ad8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0x132>
 80049da:	8afb      	ldrh	r3, [r7, #22]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d16f      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a04:	e05c      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d11b      	bne.n	8004a4c <HAL_SPI_TransmitReceive+0x19e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d016      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0x19e>
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d113      	bne.n	8004a4c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	1c9a      	adds	r2, r3, #2
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d11c      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x1e6>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	b292      	uxth	r2, r2
 8004a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a90:	2301      	movs	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a94:	f7fc fe8c 	bl	80017b0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d80d      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x212>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d009      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e111      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d19d      	bne.n	8004a06 <HAL_SPI_TransmitReceive+0x158>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d197      	bne.n	8004a06 <HAL_SPI_TransmitReceive+0x158>
 8004ad6:	e0e5      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x23a>
 8004ae0:	8afb      	ldrh	r3, [r7, #22]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	f040 80d1 	bne.w	8004c8a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d912      	bls.n	8004b18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	1c9a      	adds	r2, r3, #2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b02      	subs	r3, #2
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b16:	e0b8      	b.n	8004c8a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b3e:	e0a4      	b.n	8004c8a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d134      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x30a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02f      	beq.n	8004bb8 <HAL_SPI_TransmitReceive+0x30a>
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d12c      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d912      	bls.n	8004b8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b02      	subs	r3, #2
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b8c:	e012      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	7812      	ldrb	r2, [r2, #0]
 8004b9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d148      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x3aa>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d042      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d923      	bls.n	8004c26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	b292      	uxth	r2, r2
 8004bea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b02      	subs	r3, #2
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d81f      	bhi.n	8004c54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	e016      	b.n	8004c54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f103 020c 	add.w	r2, r3, #12
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c54:	2301      	movs	r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c58:	f7fc fdaa 	bl	80017b0 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d803      	bhi.n	8004c70 <HAL_SPI_TransmitReceive+0x3c2>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d102      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x3c8>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e02c      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af55 	bne.w	8004b40 <HAL_SPI_TransmitReceive+0x292>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f af4e 	bne.w	8004b40 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f93d 	bl	8004f28 <SPI_EndRxTxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00e      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3728      	adds	r7, #40	@ 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cfc:	f7fc fd58 	bl	80017b0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d0c:	f7fc fd50 	bl	80017b0 <HAL_GetTick>
 8004d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d12:	4b39      	ldr	r3, [pc, #228]	@ (8004df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	015b      	lsls	r3, r3, #5
 8004d18:	0d1b      	lsrs	r3, r3, #20
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d22:	e054      	b.n	8004dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d050      	beq.n	8004dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d2c:	f7fc fd40 	bl	80017b0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d902      	bls.n	8004d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d13d      	bne.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d5a:	d111      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d64:	d004      	beq.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6e:	d107      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d88:	d10f      	bne.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e017      	b.n	8004dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d19b      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20040000 	.word	0x20040000

08004dfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	@ 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e0e:	f7fc fccf 	bl	80017b0 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e1e:	f7fc fcc7 	bl	80017b0 <HAL_GetTick>
 8004e22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	00da      	lsls	r2, r3, #3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	0d1b      	lsrs	r3, r3, #20
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e44:	e060      	b.n	8004f08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e4c:	d107      	bne.n	8004e5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d050      	beq.n	8004f08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e66:	f7fc fca3 	bl	80017b0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d902      	bls.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d13d      	bne.n	8004ef8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e94:	d111      	bne.n	8004eba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e9e:	d004      	beq.n	8004eaa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	d107      	bne.n	8004eba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	d10f      	bne.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ee2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e010      	b.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d196      	bne.n	8004e46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	@ 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20040000 	.word	0x20040000

08004f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff ff5b 	bl	8004dfc <SPI_WaitFifoStateUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e027      	b.n	8004fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2180      	movs	r1, #128	@ 0x80
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff fec0 	bl	8004cec <SPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e014      	b.n	8004fac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ff34 	bl	8004dfc <SPI_WaitFifoStateUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e000      	b.n	8004fac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e042      	b.n	800504c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc f8e9 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2224      	movs	r2, #36	@ 0x24
 8004fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fc7c 	bl	80058fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f97d 	bl	8005304 <UART_SetConfig>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e01b      	b.n	800504c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fcfb 	bl	8005a40 <UART_CheckIdleState>
 800504a:	4603      	mov	r3, r0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	@ 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506a:	2b20      	cmp	r3, #32
 800506c:	d17b      	bne.n	8005166 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_UART_Transmit+0x26>
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e074      	b.n	8005168 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508e:	f7fc fb8f 	bl	80017b0 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ac:	d108      	bne.n	80050c0 <HAL_UART_Transmit+0x6c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e003      	b.n	80050c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050c8:	e030      	b.n	800512c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2180      	movs	r1, #128	@ 0x80
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fd5d 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e03d      	b.n	8005168 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	881a      	ldrh	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fe:	b292      	uxth	r2, r2
 8005100:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3302      	adds	r3, #2
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e007      	b.n	800511a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1c8      	bne.n	80050ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2200      	movs	r2, #0
 8005140:	2140      	movs	r1, #64	@ 0x40
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fd26 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e006      	b.n	8005168 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	@ 0x28
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005186:	2b20      	cmp	r3, #32
 8005188:	f040 80b6 	bne.w	80052f8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Receive+0x28>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0ae      	b.n	80052fa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2222      	movs	r2, #34	@ 0x22
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b2:	f7fc fafd 	bl	80017b0 <HAL_GetTick>
 80051b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d0:	d10e      	bne.n	80051f0 <HAL_UART_Receive+0x80>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <HAL_UART_Receive+0x76>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051e4:	e02d      	b.n	8005242 <HAL_UART_Receive+0xd2>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	22ff      	movs	r2, #255	@ 0xff
 80051ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051ee:	e028      	b.n	8005242 <HAL_UART_Receive+0xd2>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <HAL_UART_Receive+0xa4>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <HAL_UART_Receive+0x9a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	@ 0xff
 8005204:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005208:	e01b      	b.n	8005242 <HAL_UART_Receive+0xd2>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	227f      	movs	r2, #127	@ 0x7f
 800520e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005212:	e016      	b.n	8005242 <HAL_UART_Receive+0xd2>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521c:	d10d      	bne.n	800523a <HAL_UART_Receive+0xca>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_UART_Receive+0xc0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	227f      	movs	r2, #127	@ 0x7f
 800522a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800522e:	e008      	b.n	8005242 <HAL_UART_Receive+0xd2>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	223f      	movs	r2, #63	@ 0x3f
 8005234:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005238:	e003      	b.n	8005242 <HAL_UART_Receive+0xd2>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005248:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	d108      	bne.n	8005266 <HAL_UART_Receive+0xf6>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e003      	b.n	800526e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800526e:	e037      	b.n	80052e0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	2120      	movs	r1, #32
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fc8a 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e033      	b.n	80052fa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800529e:	b29a      	uxth	r2, r3
 80052a0:	8a7b      	ldrh	r3, [r7, #18]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	3302      	adds	r3, #2
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	e00d      	b.n	80052ce <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	8a7b      	ldrh	r3, [r7, #18]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	4013      	ands	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1c1      	bne.n	8005270 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e000      	b.n	80052fa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b08c      	sub	sp, #48	@ 0x30
 800530a:	af00      	add	r7, sp, #0
 800530c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4baa      	ldr	r3, [pc, #680]	@ (80055dc <UART_SetConfig+0x2d8>)
 8005334:	4013      	ands	r3, r2
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800533c:	430b      	orrs	r3, r1
 800533e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a9f      	ldr	r2, [pc, #636]	@ (80055e0 <UART_SetConfig+0x2dc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536c:	4313      	orrs	r3, r2
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800537a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005384:	430b      	orrs	r3, r1
 8005386:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	f023 010f 	bic.w	r1, r3, #15
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a90      	ldr	r2, [pc, #576]	@ (80055e4 <UART_SetConfig+0x2e0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d125      	bne.n	80053f4 <UART_SetConfig+0xf0>
 80053a8:	4b8f      	ldr	r3, [pc, #572]	@ (80055e8 <UART_SetConfig+0x2e4>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d81a      	bhi.n	80053ec <UART_SetConfig+0xe8>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <UART_SetConfig+0xb8>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	080053cd 	.word	0x080053cd
 80053c0:	080053dd 	.word	0x080053dd
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e5 	.word	0x080053e5
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e116      	b.n	8005602 <UART_SetConfig+0x2fe>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e112      	b.n	8005602 <UART_SetConfig+0x2fe>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e10e      	b.n	8005602 <UART_SetConfig+0x2fe>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e10a      	b.n	8005602 <UART_SetConfig+0x2fe>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e106      	b.n	8005602 <UART_SetConfig+0x2fe>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7c      	ldr	r2, [pc, #496]	@ (80055ec <UART_SetConfig+0x2e8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d138      	bne.n	8005470 <UART_SetConfig+0x16c>
 80053fe:	4b7a      	ldr	r3, [pc, #488]	@ (80055e8 <UART_SetConfig+0x2e4>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005404:	f003 030c 	and.w	r3, r3, #12
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d82d      	bhi.n	8005468 <UART_SetConfig+0x164>
 800540c:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <UART_SetConfig+0x110>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005449 	.word	0x08005449
 8005418:	08005469 	.word	0x08005469
 800541c:	08005469 	.word	0x08005469
 8005420:	08005469 	.word	0x08005469
 8005424:	08005459 	.word	0x08005459
 8005428:	08005469 	.word	0x08005469
 800542c:	08005469 	.word	0x08005469
 8005430:	08005469 	.word	0x08005469
 8005434:	08005451 	.word	0x08005451
 8005438:	08005469 	.word	0x08005469
 800543c:	08005469 	.word	0x08005469
 8005440:	08005469 	.word	0x08005469
 8005444:	08005461 	.word	0x08005461
 8005448:	2300      	movs	r3, #0
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e0d8      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005450:	2302      	movs	r3, #2
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e0d4      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005458:	2304      	movs	r3, #4
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e0d0      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005460:	2308      	movs	r3, #8
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e0cc      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005468:	2310      	movs	r3, #16
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e0c8      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5e      	ldr	r2, [pc, #376]	@ (80055f0 <UART_SetConfig+0x2ec>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d125      	bne.n	80054c6 <UART_SetConfig+0x1c2>
 800547a:	4b5b      	ldr	r3, [pc, #364]	@ (80055e8 <UART_SetConfig+0x2e4>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005480:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005484:	2b30      	cmp	r3, #48	@ 0x30
 8005486:	d016      	beq.n	80054b6 <UART_SetConfig+0x1b2>
 8005488:	2b30      	cmp	r3, #48	@ 0x30
 800548a:	d818      	bhi.n	80054be <UART_SetConfig+0x1ba>
 800548c:	2b20      	cmp	r3, #32
 800548e:	d00a      	beq.n	80054a6 <UART_SetConfig+0x1a2>
 8005490:	2b20      	cmp	r3, #32
 8005492:	d814      	bhi.n	80054be <UART_SetConfig+0x1ba>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <UART_SetConfig+0x19a>
 8005498:	2b10      	cmp	r3, #16
 800549a:	d008      	beq.n	80054ae <UART_SetConfig+0x1aa>
 800549c:	e00f      	b.n	80054be <UART_SetConfig+0x1ba>
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a4:	e0ad      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054a6:	2302      	movs	r3, #2
 80054a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ac:	e0a9      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054ae:	2304      	movs	r3, #4
 80054b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b4:	e0a5      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054b6:	2308      	movs	r3, #8
 80054b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054bc:	e0a1      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054be:	2310      	movs	r3, #16
 80054c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c4:	e09d      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a4a      	ldr	r2, [pc, #296]	@ (80055f4 <UART_SetConfig+0x2f0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d125      	bne.n	800551c <UART_SetConfig+0x218>
 80054d0:	4b45      	ldr	r3, [pc, #276]	@ (80055e8 <UART_SetConfig+0x2e4>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054da:	2bc0      	cmp	r3, #192	@ 0xc0
 80054dc:	d016      	beq.n	800550c <UART_SetConfig+0x208>
 80054de:	2bc0      	cmp	r3, #192	@ 0xc0
 80054e0:	d818      	bhi.n	8005514 <UART_SetConfig+0x210>
 80054e2:	2b80      	cmp	r3, #128	@ 0x80
 80054e4:	d00a      	beq.n	80054fc <UART_SetConfig+0x1f8>
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d814      	bhi.n	8005514 <UART_SetConfig+0x210>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <UART_SetConfig+0x1f0>
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	d008      	beq.n	8005504 <UART_SetConfig+0x200>
 80054f2:	e00f      	b.n	8005514 <UART_SetConfig+0x210>
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fa:	e082      	b.n	8005602 <UART_SetConfig+0x2fe>
 80054fc:	2302      	movs	r3, #2
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e07e      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005504:	2304      	movs	r3, #4
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550a:	e07a      	b.n	8005602 <UART_SetConfig+0x2fe>
 800550c:	2308      	movs	r3, #8
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005512:	e076      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005514:	2310      	movs	r3, #16
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551a:	e072      	b.n	8005602 <UART_SetConfig+0x2fe>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a35      	ldr	r2, [pc, #212]	@ (80055f8 <UART_SetConfig+0x2f4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d12a      	bne.n	800557c <UART_SetConfig+0x278>
 8005526:	4b30      	ldr	r3, [pc, #192]	@ (80055e8 <UART_SetConfig+0x2e4>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005530:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005534:	d01a      	beq.n	800556c <UART_SetConfig+0x268>
 8005536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800553a:	d81b      	bhi.n	8005574 <UART_SetConfig+0x270>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005540:	d00c      	beq.n	800555c <UART_SetConfig+0x258>
 8005542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005546:	d815      	bhi.n	8005574 <UART_SetConfig+0x270>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <UART_SetConfig+0x250>
 800554c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005550:	d008      	beq.n	8005564 <UART_SetConfig+0x260>
 8005552:	e00f      	b.n	8005574 <UART_SetConfig+0x270>
 8005554:	2300      	movs	r3, #0
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e052      	b.n	8005602 <UART_SetConfig+0x2fe>
 800555c:	2302      	movs	r3, #2
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e04e      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e04a      	b.n	8005602 <UART_SetConfig+0x2fe>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e046      	b.n	8005602 <UART_SetConfig+0x2fe>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e042      	b.n	8005602 <UART_SetConfig+0x2fe>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a17      	ldr	r2, [pc, #92]	@ (80055e0 <UART_SetConfig+0x2dc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d13a      	bne.n	80055fc <UART_SetConfig+0x2f8>
 8005586:	4b18      	ldr	r3, [pc, #96]	@ (80055e8 <UART_SetConfig+0x2e4>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005590:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005594:	d01a      	beq.n	80055cc <UART_SetConfig+0x2c8>
 8005596:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800559a:	d81b      	bhi.n	80055d4 <UART_SetConfig+0x2d0>
 800559c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a0:	d00c      	beq.n	80055bc <UART_SetConfig+0x2b8>
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a6:	d815      	bhi.n	80055d4 <UART_SetConfig+0x2d0>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <UART_SetConfig+0x2b0>
 80055ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b0:	d008      	beq.n	80055c4 <UART_SetConfig+0x2c0>
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x2d0>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	e022      	b.n	8005602 <UART_SetConfig+0x2fe>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c2:	e01e      	b.n	8005602 <UART_SetConfig+0x2fe>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ca:	e01a      	b.n	8005602 <UART_SetConfig+0x2fe>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d2:	e016      	b.n	8005602 <UART_SetConfig+0x2fe>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055da:	e012      	b.n	8005602 <UART_SetConfig+0x2fe>
 80055dc:	cfff69f3 	.word	0xcfff69f3
 80055e0:	40008000 	.word	0x40008000
 80055e4:	40013800 	.word	0x40013800
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40004400 	.word	0x40004400
 80055f0:	40004800 	.word	0x40004800
 80055f4:	40004c00 	.word	0x40004c00
 80055f8:	40005000 	.word	0x40005000
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4aae      	ldr	r2, [pc, #696]	@ (80058c0 <UART_SetConfig+0x5bc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	f040 8097 	bne.w	800573c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800560e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005612:	2b08      	cmp	r3, #8
 8005614:	d823      	bhi.n	800565e <UART_SetConfig+0x35a>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x318>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005641 	.word	0x08005641
 8005620:	0800565f 	.word	0x0800565f
 8005624:	08005649 	.word	0x08005649
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800564f 	.word	0x0800564f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800565f 	.word	0x0800565f
 800563c:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe f918 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005646:	e010      	b.n	800566a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b9e      	ldr	r3, [pc, #632]	@ (80058c4 <UART_SetConfig+0x5c0>)
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800564c:	e00d      	b.n	800566a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe f879 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005654:	e009      	b.n	800566a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800565c:	e005      	b.n	800566a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8130 	beq.w	80058d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	4a94      	ldr	r2, [pc, #592]	@ (80058c8 <UART_SetConfig+0x5c4>)
 8005678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567c:	461a      	mov	r2, r3
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	fbb3 f3f2 	udiv	r3, r3, r2
 8005684:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	429a      	cmp	r2, r3
 8005694:	d305      	bcc.n	80056a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d903      	bls.n	80056aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056a8:	e113      	b.n	80058d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	2200      	movs	r2, #0
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	60fa      	str	r2, [r7, #12]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	4a84      	ldr	r2, [pc, #528]	@ (80058c8 <UART_SetConfig+0x5c4>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2200      	movs	r2, #0
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056cc:	f7fa fde8 	bl	80002a0 <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	020b      	lsls	r3, r1, #8
 80056e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056e6:	0202      	lsls	r2, r0, #8
 80056e8:	6979      	ldr	r1, [r7, #20]
 80056ea:	6849      	ldr	r1, [r1, #4]
 80056ec:	0849      	lsrs	r1, r1, #1
 80056ee:	2000      	movs	r0, #0
 80056f0:	460c      	mov	r4, r1
 80056f2:	4605      	mov	r5, r0
 80056f4:	eb12 0804 	adds.w	r8, r2, r4
 80056f8:	eb43 0905 	adc.w	r9, r3, r5
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	469a      	mov	sl, r3
 8005704:	4693      	mov	fp, r2
 8005706:	4652      	mov	r2, sl
 8005708:	465b      	mov	r3, fp
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fdc7 	bl	80002a0 <__aeabi_uldivmod>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4613      	mov	r3, r2
 8005718:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005720:	d308      	bcc.n	8005734 <UART_SetConfig+0x430>
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005728:	d204      	bcs.n	8005734 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6a3a      	ldr	r2, [r7, #32]
 8005730:	60da      	str	r2, [r3, #12]
 8005732:	e0ce      	b.n	80058d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800573a:	e0ca      	b.n	80058d2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005744:	d166      	bne.n	8005814 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005746:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800574a:	2b08      	cmp	r3, #8
 800574c:	d827      	bhi.n	800579e <UART_SetConfig+0x49a>
 800574e:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <UART_SetConfig+0x450>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	0800579f 	.word	0x0800579f
 8005764:	0800578f 	.word	0x0800578f
 8005768:	0800579f 	.word	0x0800579f
 800576c:	0800579f 	.word	0x0800579f
 8005770:	0800579f 	.word	0x0800579f
 8005774:	08005797 	.word	0x08005797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005778:	f7fe f87c 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800577e:	e014      	b.n	80057aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005780:	f7fe f88e 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005786:	e010      	b.n	80057aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005788:	4b4e      	ldr	r3, [pc, #312]	@ (80058c4 <UART_SetConfig+0x5c0>)
 800578a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800578c:	e00d      	b.n	80057aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578e:	f7fd ffd9 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005794:	e009      	b.n	80057aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800579c:	e005      	b.n	80057aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8090 	beq.w	80058d2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	4a44      	ldr	r2, [pc, #272]	@ (80058c8 <UART_SetConfig+0x5c4>)
 80057b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057bc:	461a      	mov	r2, r3
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c4:	005a      	lsls	r2, r3, #1
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	441a      	add	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d916      	bls.n	800580c <UART_SetConfig+0x508>
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e4:	d212      	bcs.n	800580c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f023 030f 	bic.w	r3, r3, #15
 80057ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	8bfb      	ldrh	r3, [r7, #30]
 80057fe:	4313      	orrs	r3, r2
 8005800:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	8bfa      	ldrh	r2, [r7, #30]
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	e062      	b.n	80058d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005812:	e05e      	b.n	80058d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005814:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005818:	2b08      	cmp	r3, #8
 800581a:	d828      	bhi.n	800586e <UART_SetConfig+0x56a>
 800581c:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <UART_SetConfig+0x520>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005849 	.word	0x08005849
 8005828:	08005851 	.word	0x08005851
 800582c:	08005859 	.word	0x08005859
 8005830:	0800586f 	.word	0x0800586f
 8005834:	0800585f 	.word	0x0800585f
 8005838:	0800586f 	.word	0x0800586f
 800583c:	0800586f 	.word	0x0800586f
 8005840:	0800586f 	.word	0x0800586f
 8005844:	08005867 	.word	0x08005867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005848:	f7fe f814 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 800584c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800584e:	e014      	b.n	800587a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fe f826 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8005854:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005856:	e010      	b.n	800587a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b1a      	ldr	r3, [pc, #104]	@ (80058c4 <UART_SetConfig+0x5c0>)
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7fd ff71 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8005862:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005864:	e009      	b.n	800587a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800586c:	e005      	b.n	800587a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005878:	bf00      	nop
    }

    if (pclk != 0U)
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d028      	beq.n	80058d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005884:	4a10      	ldr	r2, [pc, #64]	@ (80058c8 <UART_SetConfig+0x5c4>)
 8005886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800588a:	461a      	mov	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d910      	bls.n	80058cc <UART_SetConfig+0x5c8>
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b0:	d20c      	bcs.n	80058cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	e009      	b.n	80058d2 <UART_SetConfig+0x5ce>
 80058be:	bf00      	nop
 80058c0:	40008000 	.word	0x40008000
 80058c4:	00f42400 	.word	0x00f42400
 80058c8:	0800a16c 	.word	0x0800a16c
      }
      else
      {
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2201      	movs	r2, #1
 80058de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3730      	adds	r7, #48	@ 0x30
 80058f6:	46bd      	mov	sp, r7
 80058f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01a      	beq.n	8005a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fa:	d10a      	bne.n	8005a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
  }
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b098      	sub	sp, #96	@ 0x60
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a50:	f7fb feae 	bl	80017b0 <HAL_GetTick>
 8005a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d12f      	bne.n	8005ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f88e 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e6      	bne.n	8005a7e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e063      	b.n	8005b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d149      	bne.n	8005b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f857 	bl	8005b94 <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03c      	beq.n	8005b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	623b      	str	r3, [r7, #32]
   return(result);
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3308      	adds	r3, #8
 8005b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e012      	b.n	8005b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3758      	adds	r7, #88	@ 0x58
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba4:	e04f      	b.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d04b      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7fb fdff 	bl	80017b0 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e04e      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d037      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b80      	cmp	r3, #128	@ 0x80
 8005bda:	d034      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d031      	beq.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d110      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f838 	bl	8005c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2208      	movs	r2, #8
 8005c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e029      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c20:	d111      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f81e 	bl	8005c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e00f      	b.n	8005c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d0a0      	beq.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b095      	sub	sp, #84	@ 0x54
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e3      	bne.n	8005ca8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d118      	bne.n	8005d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f023 0310 	bic.w	r3, r3, #16
 8005cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	613b      	str	r3, [r7, #16]
   return(result);
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e6      	bne.n	8005ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d2e:	bf00      	nop
 8005d30:	3754      	adds	r7, #84	@ 0x54
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e027      	b.n	8005da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	@ 0x24
 8005d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e02d      	b.n	8005e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2224      	movs	r2, #36	@ 0x24
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f84f 	bl	8005ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e02d      	b.n	8005e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2224      	movs	r2, #36	@ 0x24
 8005e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f811 	bl	8005ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d108      	bne.n	8005ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ec4:	e031      	b.n	8005f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005eca:	2308      	movs	r3, #8
 8005ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	0e5b      	lsrs	r3, r3, #25
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	0f5b      	lsrs	r3, r3, #29
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	7b3a      	ldrb	r2, [r7, #12]
 8005ef2:	4911      	ldr	r1, [pc, #68]	@ (8005f38 <UARTEx_SetNbDataToProcess+0x94>)
 8005ef4:	5c8a      	ldrb	r2, [r1, r2]
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005efa:	7b3a      	ldrb	r2, [r7, #12]
 8005efc:	490f      	ldr	r1, [pc, #60]	@ (8005f3c <UARTEx_SetNbDataToProcess+0x98>)
 8005efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	7b7a      	ldrb	r2, [r7, #13]
 8005f10:	4909      	ldr	r1, [pc, #36]	@ (8005f38 <UARTEx_SetNbDataToProcess+0x94>)
 8005f12:	5c8a      	ldrb	r2, [r1, r2]
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f18:	7b7a      	ldrb	r2, [r7, #13]
 8005f1a:	4908      	ldr	r1, [pc, #32]	@ (8005f3c <UARTEx_SetNbDataToProcess+0x98>)
 8005f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	0800a184 	.word	0x0800a184
 8005f3c:	0800a18c 	.word	0x0800a18c

08005f40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005f44:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <MX_FATFS_Init+0x18>)
 8005f46:	4805      	ldr	r0, [pc, #20]	@ (8005f5c <MX_FATFS_Init+0x1c>)
 8005f48:	f002 feec 	bl	8008d24 <FATFS_LinkDriver>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <MX_FATFS_Init+0x20>)
 8005f52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f54:	bf00      	nop
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200404d8 	.word	0x200404d8
 8005f5c:	2004000c 	.word	0x2004000c
 8005f60:	200404d4 	.word	0x200404d4

08005f64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005f68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f9d7 	bl	8006334 <USER_SPI_initialize>
 8005f86:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fab5 	bl	800650c <USER_SPI_status>
 8005fa2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005fbc:	7bf8      	ldrb	r0, [r7, #15]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	f000 fab8 	bl	8006538 <USER_SPI_read>
 8005fc8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005fe2:	7bf8      	ldrb	r0, [r7, #15]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	f000 fb0b 	bl	8006604 <USER_SPI_write>
 8005fee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	603a      	str	r2, [r7, #0]
 8006002:	71fb      	strb	r3, [r7, #7]
 8006004:	460b      	mov	r3, r1
 8006006:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006008:	79b9      	ldrb	r1, [r7, #6]
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fb74 	bl	80066fc <USER_SPI_ioctl>
 8006014:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006028:	f7fb fbc2 	bl	80017b0 <HAL_GetTick>
 800602c:	4603      	mov	r3, r0
 800602e:	4a04      	ldr	r2, [pc, #16]	@ (8006040 <SPI_Timer_On+0x20>)
 8006030:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006032:	4a04      	ldr	r2, [pc, #16]	@ (8006044 <SPI_Timer_On+0x24>)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6013      	str	r3, [r2, #0]
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200404e0 	.word	0x200404e0
 8006044:	200404e4 	.word	0x200404e4

08006048 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800604c:	f7fb fbb0 	bl	80017b0 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	4b06      	ldr	r3, [pc, #24]	@ (800606c <SPI_Timer_Status+0x24>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <SPI_Timer_Status+0x28>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	bf34      	ite	cc
 8006060:	2301      	movcc	r3, #1
 8006062:	2300      	movcs	r3, #0
 8006064:	b2db      	uxtb	r3, r3
}
 8006066:	4618      	mov	r0, r3
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	200404e0 	.word	0x200404e0
 8006070:	200404e4 	.word	0x200404e4

08006074 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af02      	add	r7, sp, #8
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800607e:	f107 020f 	add.w	r2, r7, #15
 8006082:	1df9      	adds	r1, r7, #7
 8006084:	2332      	movs	r3, #50	@ 0x32
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2301      	movs	r3, #1
 800608a:	4804      	ldr	r0, [pc, #16]	@ (800609c <xchg_spi+0x28>)
 800608c:	f7fe fc0f 	bl	80048ae <HAL_SPI_TransmitReceive>
    return rxDat;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200403d4 	.word	0x200403d4

080060a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e00a      	b.n	80060c6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	18d4      	adds	r4, r2, r3
 80060b6:	20ff      	movs	r0, #255	@ 0xff
 80060b8:	f7ff ffdc 	bl	8006074 <xchg_spi>
 80060bc:	4603      	mov	r3, r0
 80060be:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d3f0      	bcc.n	80060b0 <rcvr_spi_multi+0x10>
	}
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}

080060d8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4803      	ldr	r0, [pc, #12]	@ (80060fc <xmit_spi_multi+0x24>)
 80060ee:	f7fe fa68 	bl	80045c2 <HAL_SPI_Transmit>
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200403d4 	.word	0x200403d4

08006100 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006108:	f7fb fb52 	bl	80017b0 <HAL_GetTick>
 800610c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006112:	20ff      	movs	r0, #255	@ 0xff
 8006114:	f7ff ffae 	bl	8006074 <xchg_spi>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2bff      	cmp	r3, #255	@ 0xff
 8006120:	d007      	beq.n	8006132 <wait_ready+0x32>
 8006122:	f7fb fb45 	bl	80017b0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d8ef      	bhi.n	8006112 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2bff      	cmp	r3, #255	@ 0xff
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800614c:	2201      	movs	r2, #1
 800614e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006152:	4804      	ldr	r0, [pc, #16]	@ (8006164 <despiselect+0x1c>)
 8006154:	f7fc fcb6 	bl	8002ac4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006158:	20ff      	movs	r0, #255	@ 0xff
 800615a:	f7ff ff8b 	bl	8006074 <xchg_spi>

}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	48000800 	.word	0x48000800

08006168 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006172:	480a      	ldr	r0, [pc, #40]	@ (800619c <spiselect+0x34>)
 8006174:	f7fc fca6 	bl	8002ac4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006178:	20ff      	movs	r0, #255	@ 0xff
 800617a:	f7ff ff7b 	bl	8006074 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800617e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006182:	f7ff ffbd 	bl	8006100 <wait_ready>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <spiselect+0x28>
 800618c:	2301      	movs	r3, #1
 800618e:	e002      	b.n	8006196 <spiselect+0x2e>

	despiselect();
 8006190:	f7ff ffda 	bl	8006148 <despiselect>
	return 0;	/* Timeout */
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	48000800 	.word	0x48000800

080061a0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80061aa:	20c8      	movs	r0, #200	@ 0xc8
 80061ac:	f7ff ff38 	bl	8006020 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80061b0:	20ff      	movs	r0, #255	@ 0xff
 80061b2:	f7ff ff5f 	bl	8006074 <xchg_spi>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2bff      	cmp	r3, #255	@ 0xff
 80061be:	d104      	bne.n	80061ca <rcvr_datablock+0x2a>
 80061c0:	f7ff ff42 	bl	8006048 <SPI_Timer_Status>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f2      	bne.n	80061b0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80061ce:	d001      	beq.n	80061d4 <rcvr_datablock+0x34>
 80061d0:	2300      	movs	r3, #0
 80061d2:	e00a      	b.n	80061ea <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff62 	bl	80060a0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80061dc:	20ff      	movs	r0, #255	@ 0xff
 80061de:	f7ff ff49 	bl	8006074 <xchg_spi>
 80061e2:	20ff      	movs	r0, #255	@ 0xff
 80061e4:	f7ff ff46 	bl	8006074 <xchg_spi>

	return 1;						/* Function succeeded */
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80061fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006202:	f7ff ff7d 	bl	8006100 <wait_ready>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <xmit_datablock+0x1e>
 800620c:	2300      	movs	r3, #0
 800620e:	e01e      	b.n	800624e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ff2e 	bl	8006074 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	2bfd      	cmp	r3, #253	@ 0xfd
 800621c:	d016      	beq.n	800624c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800621e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ff58 	bl	80060d8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006228:	20ff      	movs	r0, #255	@ 0xff
 800622a:	f7ff ff23 	bl	8006074 <xchg_spi>
 800622e:	20ff      	movs	r0, #255	@ 0xff
 8006230:	f7ff ff20 	bl	8006074 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006234:	20ff      	movs	r0, #255	@ 0xff
 8006236:	f7ff ff1d 	bl	8006074 <xchg_spi>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	2b05      	cmp	r3, #5
 8006246:	d001      	beq.n	800624c <xmit_datablock+0x5a>
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <xmit_datablock+0x5c>
	}
	return 1;
 800624c:	2301      	movs	r3, #1
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	4603      	mov	r3, r0
 800625e:	6039      	str	r1, [r7, #0]
 8006260:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0e      	bge.n	8006288 <send_cmd+0x32>
		cmd &= 0x7F;
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006270:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006272:	2100      	movs	r1, #0
 8006274:	2037      	movs	r0, #55	@ 0x37
 8006276:	f7ff ffee 	bl	8006256 <send_cmd>
 800627a:	4603      	mov	r3, r0
 800627c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d901      	bls.n	8006288 <send_cmd+0x32>
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	e051      	b.n	800632c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b0c      	cmp	r3, #12
 800628c:	d008      	beq.n	80062a0 <send_cmd+0x4a>
		despiselect();
 800628e:	f7ff ff5b 	bl	8006148 <despiselect>
		if (!spiselect()) return 0xFF;
 8006292:	f7ff ff69 	bl	8006168 <spiselect>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <send_cmd+0x4a>
 800629c:	23ff      	movs	r3, #255	@ 0xff
 800629e:	e045      	b.n	800632c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fee3 	bl	8006074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	0e1b      	lsrs	r3, r3, #24
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fedd 	bl	8006074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fed7 	bl	8006074 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fed1 	bl	8006074 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fecc 	bl	8006074 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <send_cmd+0x94>
 80062e6:	2395      	movs	r3, #149	@ 0x95
 80062e8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d101      	bne.n	80062f4 <send_cmd+0x9e>
 80062f0:	2387      	movs	r3, #135	@ 0x87
 80062f2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff febc 	bl	8006074 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	2b0c      	cmp	r3, #12
 8006300:	d102      	bne.n	8006308 <send_cmd+0xb2>
 8006302:	20ff      	movs	r0, #255	@ 0xff
 8006304:	f7ff feb6 	bl	8006074 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006308:	230a      	movs	r3, #10
 800630a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800630c:	20ff      	movs	r0, #255	@ 0xff
 800630e:	f7ff feb1 	bl	8006074 <xchg_spi>
 8006312:	4603      	mov	r3, r0
 8006314:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	da05      	bge.n	800632a <send_cmd+0xd4>
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	3b01      	subs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <send_cmd+0xb6>

	return res;							/* Return received response */
 800632a:	7bbb      	ldrb	r3, [r7, #14]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <USER_SPI_initialize+0x14>
 8006344:	2301      	movs	r3, #1
 8006346:	e0d6      	b.n	80064f6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006348:	4b6d      	ldr	r3, [pc, #436]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <USER_SPI_initialize+0x2a>
 8006356:	4b6a      	ldr	r3, [pc, #424]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e0cb      	b.n	80064f6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800635e:	4b69      	ldr	r3, [pc, #420]	@ (8006504 <USER_SPI_initialize+0x1d0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006368:	4b66      	ldr	r3, [pc, #408]	@ (8006504 <USER_SPI_initialize+0x1d0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006370:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006372:	230a      	movs	r3, #10
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	e005      	b.n	8006384 <USER_SPI_initialize+0x50>
 8006378:	20ff      	movs	r0, #255	@ 0xff
 800637a:	f7ff fe7b 	bl	8006074 <xchg_spi>
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	3b01      	subs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f6      	bne.n	8006378 <USER_SPI_initialize+0x44>

	ty = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800638e:	2100      	movs	r1, #0
 8006390:	2000      	movs	r0, #0
 8006392:	f7ff ff60 	bl	8006256 <send_cmd>
 8006396:	4603      	mov	r3, r0
 8006398:	2b01      	cmp	r3, #1
 800639a:	f040 808b 	bne.w	80064b4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800639e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80063a2:	f7ff fe3d 	bl	8006020 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80063a6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80063aa:	2008      	movs	r0, #8
 80063ac:	f7ff ff53 	bl	8006256 <send_cmd>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d151      	bne.n	800645a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
 80063ba:	e00d      	b.n	80063d8 <USER_SPI_initialize+0xa4>
 80063bc:	7bfc      	ldrb	r4, [r7, #15]
 80063be:	20ff      	movs	r0, #255	@ 0xff
 80063c0:	f7ff fe58 	bl	8006074 <xchg_spi>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	f104 0310 	add.w	r3, r4, #16
 80063cc:	443b      	add	r3, r7
 80063ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	3301      	adds	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d9ee      	bls.n	80063bc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80063de:	7abb      	ldrb	r3, [r7, #10]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d167      	bne.n	80064b4 <USER_SPI_initialize+0x180>
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	2baa      	cmp	r3, #170	@ 0xaa
 80063e8:	d164      	bne.n	80064b4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80063ea:	bf00      	nop
 80063ec:	f7ff fe2c 	bl	8006048 <SPI_Timer_Status>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <USER_SPI_initialize+0xd2>
 80063f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80063fa:	20a9      	movs	r0, #169	@ 0xa9
 80063fc:	f7ff ff2b 	bl	8006256 <send_cmd>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f2      	bne.n	80063ec <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006406:	f7ff fe1f 	bl	8006048 <SPI_Timer_Status>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d051      	beq.n	80064b4 <USER_SPI_initialize+0x180>
 8006410:	2100      	movs	r1, #0
 8006412:	203a      	movs	r0, #58	@ 0x3a
 8006414:	f7ff ff1f 	bl	8006256 <send_cmd>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d14a      	bne.n	80064b4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]
 8006422:	e00d      	b.n	8006440 <USER_SPI_initialize+0x10c>
 8006424:	7bfc      	ldrb	r4, [r7, #15]
 8006426:	20ff      	movs	r0, #255	@ 0xff
 8006428:	f7ff fe24 	bl	8006074 <xchg_spi>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	f104 0310 	add.w	r3, r4, #16
 8006434:	443b      	add	r3, r7
 8006436:	f803 2c08 	strb.w	r2, [r3, #-8]
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	3301      	adds	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d9ee      	bls.n	8006424 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006446:	7a3b      	ldrb	r3, [r7, #8]
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <USER_SPI_initialize+0x120>
 8006450:	230c      	movs	r3, #12
 8006452:	e000      	b.n	8006456 <USER_SPI_initialize+0x122>
 8006454:	2304      	movs	r3, #4
 8006456:	737b      	strb	r3, [r7, #13]
 8006458:	e02c      	b.n	80064b4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800645a:	2100      	movs	r1, #0
 800645c:	20a9      	movs	r0, #169	@ 0xa9
 800645e:	f7ff fefa 	bl	8006256 <send_cmd>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d804      	bhi.n	8006472 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006468:	2302      	movs	r3, #2
 800646a:	737b      	strb	r3, [r7, #13]
 800646c:	23a9      	movs	r3, #169	@ 0xa9
 800646e:	73bb      	strb	r3, [r7, #14]
 8006470:	e003      	b.n	800647a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006472:	2301      	movs	r3, #1
 8006474:	737b      	strb	r3, [r7, #13]
 8006476:	2301      	movs	r3, #1
 8006478:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800647a:	bf00      	nop
 800647c:	f7ff fde4 	bl	8006048 <SPI_Timer_Status>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <USER_SPI_initialize+0x162>
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fee3 	bl	8006256 <send_cmd>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f2      	bne.n	800647c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006496:	f7ff fdd7 	bl	8006048 <SPI_Timer_Status>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <USER_SPI_initialize+0x17c>
 80064a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064a4:	2010      	movs	r0, #16
 80064a6:	f7ff fed6 	bl	8006256 <send_cmd>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <USER_SPI_initialize+0x180>
				ty = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80064b4:	4a14      	ldr	r2, [pc, #80]	@ (8006508 <USER_SPI_initialize+0x1d4>)
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
 80064b8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80064ba:	f7ff fe45 	bl	8006148 <despiselect>

	if (ty) {			/* OK */
 80064be:	7b7b      	ldrb	r3, [r7, #13]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d012      	beq.n	80064ea <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80064c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <USER_SPI_initialize+0x1d0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <USER_SPI_initialize+0x1d0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0210 	orr.w	r2, r2, #16
 80064d6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80064d8:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f023 0301 	bic.w	r3, r3, #1
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e002      	b.n	80064f0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80064ea:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80064f0:	4b03      	ldr	r3, [pc, #12]	@ (8006500 <USER_SPI_initialize+0x1cc>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	b2db      	uxtb	r3, r3
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd90      	pop	{r4, r7, pc}
 80064fe:	bf00      	nop
 8006500:	20040020 	.word	0x20040020
 8006504:	200403d4 	.word	0x200403d4
 8006508:	200404dc 	.word	0x200404dc

0800650c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USER_SPI_status+0x14>
 800651c:	2301      	movs	r3, #1
 800651e:	e002      	b.n	8006526 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006520:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <USER_SPI_status+0x28>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20040020 	.word	0x20040020

08006538 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <USER_SPI_read+0x1c>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USER_SPI_read+0x20>
 8006554:	2304      	movs	r3, #4
 8006556:	e04d      	b.n	80065f4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006558:	4b28      	ldr	r3, [pc, #160]	@ (80065fc <USER_SPI_read+0xc4>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USER_SPI_read+0x32>
 8006566:	2303      	movs	r3, #3
 8006568:	e044      	b.n	80065f4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800656a:	4b25      	ldr	r3, [pc, #148]	@ (8006600 <USER_SPI_read+0xc8>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <USER_SPI_read+0x44>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	025b      	lsls	r3, r3, #9
 800657a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d111      	bne.n	80065a6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	2011      	movs	r0, #17
 8006586:	f7ff fe66 	bl	8006256 <send_cmd>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d129      	bne.n	80065e4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f7ff fe03 	bl	80061a0 <rcvr_datablock>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d021      	beq.n	80065e4 <USER_SPI_read+0xac>
			count = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	e01e      	b.n	80065e4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	2012      	movs	r0, #18
 80065aa:	f7ff fe54 	bl	8006256 <send_cmd>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d117      	bne.n	80065e4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80065b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065b8:	68b8      	ldr	r0, [r7, #8]
 80065ba:	f7ff fdf1 	bl	80061a0 <rcvr_datablock>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <USER_SPI_read+0xa2>
				buff += 512;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80065ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1ed      	bne.n	80065b4 <USER_SPI_read+0x7c>
 80065d8:	e000      	b.n	80065dc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80065da:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80065dc:	2100      	movs	r1, #0
 80065de:	200c      	movs	r0, #12
 80065e0:	f7ff fe39 	bl	8006256 <send_cmd>
		}
	}
	despiselect();
 80065e4:	f7ff fdb0 	bl	8006148 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20040020 	.word	0x20040020
 8006600:	200404dc 	.word	0x200404dc

08006604 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <USER_SPI_write+0x1c>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USER_SPI_write+0x20>
 8006620:	2304      	movs	r3, #4
 8006622:	e063      	b.n	80066ec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006624:	4b33      	ldr	r3, [pc, #204]	@ (80066f4 <USER_SPI_write+0xf0>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <USER_SPI_write+0x32>
 8006632:	2303      	movs	r3, #3
 8006634:	e05a      	b.n	80066ec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006636:	4b2f      	ldr	r3, [pc, #188]	@ (80066f4 <USER_SPI_write+0xf0>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USER_SPI_write+0x44>
 8006644:	2302      	movs	r3, #2
 8006646:	e051      	b.n	80066ec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006648:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <USER_SPI_write+0xf4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <USER_SPI_write+0x56>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	025b      	lsls	r3, r3, #9
 8006658:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d110      	bne.n	8006682 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	2018      	movs	r0, #24
 8006664:	f7ff fdf7 	bl	8006256 <send_cmd>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d136      	bne.n	80066dc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800666e:	21fe      	movs	r1, #254	@ 0xfe
 8006670:	68b8      	ldr	r0, [r7, #8]
 8006672:	f7ff fdbe 	bl	80061f2 <xmit_datablock>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02f      	beq.n	80066dc <USER_SPI_write+0xd8>
			count = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	e02c      	b.n	80066dc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006682:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <USER_SPI_write+0xf4>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 0306 	and.w	r3, r3, #6
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <USER_SPI_write+0x92>
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	2097      	movs	r0, #151	@ 0x97
 8006692:	f7ff fde0 	bl	8006256 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	2019      	movs	r0, #25
 800669a:	f7ff fddc 	bl	8006256 <send_cmd>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11b      	bne.n	80066dc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80066a4:	21fc      	movs	r1, #252	@ 0xfc
 80066a6:	68b8      	ldr	r0, [r7, #8]
 80066a8:	f7ff fda3 	bl	80061f2 <xmit_datablock>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <USER_SPI_write+0xc4>
				buff += 512;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80066b8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	3b01      	subs	r3, #1
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ee      	bne.n	80066a4 <USER_SPI_write+0xa0>
 80066c6:	e000      	b.n	80066ca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80066c8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80066ca:	21fd      	movs	r1, #253	@ 0xfd
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7ff fd90 	bl	80061f2 <xmit_datablock>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <USER_SPI_write+0xd8>
 80066d8:	2301      	movs	r3, #1
 80066da:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80066dc:	f7ff fd34 	bl	8006148 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20040020 	.word	0x20040020
 80066f8:	200404dc 	.word	0x200404dc

080066fc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	603a      	str	r2, [r7, #0]
 8006706:	71fb      	strb	r3, [r7, #7]
 8006708:	460b      	mov	r3, r1
 800670a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <USER_SPI_ioctl+0x1a>
 8006712:	2304      	movs	r3, #4
 8006714:	e15a      	b.n	80069cc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006716:	4baf      	ldr	r3, [pc, #700]	@ (80069d4 <USER_SPI_ioctl+0x2d8>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USER_SPI_ioctl+0x2c>
 8006724:	2303      	movs	r3, #3
 8006726:	e151      	b.n	80069cc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800672e:	79bb      	ldrb	r3, [r7, #6]
 8006730:	2b04      	cmp	r3, #4
 8006732:	f200 8136 	bhi.w	80069a2 <USER_SPI_ioctl+0x2a6>
 8006736:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <USER_SPI_ioctl+0x40>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006751 	.word	0x08006751
 8006740:	08006765 	.word	0x08006765
 8006744:	080069a3 	.word	0x080069a3
 8006748:	08006811 	.word	0x08006811
 800674c:	08006907 	.word	0x08006907
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006750:	f7ff fd0a 	bl	8006168 <spiselect>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8127 	beq.w	80069aa <USER_SPI_ioctl+0x2ae>
 800675c:	2300      	movs	r3, #0
 800675e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006762:	e122      	b.n	80069aa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006764:	2100      	movs	r1, #0
 8006766:	2009      	movs	r0, #9
 8006768:	f7ff fd75 	bl	8006256 <send_cmd>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 811d 	bne.w	80069ae <USER_SPI_ioctl+0x2b2>
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	2110      	movs	r1, #16
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fd10 	bl	80061a0 <rcvr_datablock>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8113 	beq.w	80069ae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006788:	7b3b      	ldrb	r3, [r7, #12]
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d111      	bne.n	80067b6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006792:	7d7b      	ldrb	r3, [r7, #21]
 8006794:	461a      	mov	r2, r3
 8006796:	7d3b      	ldrb	r3, [r7, #20]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	4413      	add	r3, r2
 800679c:	461a      	mov	r2, r3
 800679e:	7cfb      	ldrb	r3, [r7, #19]
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80067a6:	4413      	add	r3, r2
 80067a8:	3301      	adds	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	029a      	lsls	r2, r3, #10
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	e028      	b.n	8006808 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80067b6:	7c7b      	ldrb	r3, [r7, #17]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	09db      	lsrs	r3, r3, #7
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	4413      	add	r3, r2
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	7d7b      	ldrb	r3, [r7, #21]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0306 	and.w	r3, r3, #6
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	3302      	adds	r3, #2
 80067da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80067de:	7d3b      	ldrb	r3, [r7, #20]
 80067e0:	099b      	lsrs	r3, r3, #6
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	7cbb      	ldrb	r3, [r7, #18]
 80067ee:	029b      	lsls	r3, r3, #10
 80067f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067f4:	4413      	add	r3, r2
 80067f6:	3301      	adds	r3, #1
 80067f8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80067fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067fe:	3b09      	subs	r3, #9
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	409a      	lsls	r2, r3
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800680e:	e0ce      	b.n	80069ae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006810:	4b71      	ldr	r3, [pc, #452]	@ (80069d8 <USER_SPI_ioctl+0x2dc>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d031      	beq.n	8006880 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800681c:	2100      	movs	r1, #0
 800681e:	208d      	movs	r0, #141	@ 0x8d
 8006820:	f7ff fd19 	bl	8006256 <send_cmd>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 80c3 	bne.w	80069b2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800682c:	20ff      	movs	r0, #255	@ 0xff
 800682e:	f7ff fc21 	bl	8006074 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006832:	f107 030c 	add.w	r3, r7, #12
 8006836:	2110      	movs	r1, #16
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fcb1 	bl	80061a0 <rcvr_datablock>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80b6 	beq.w	80069b2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006846:	2330      	movs	r3, #48	@ 0x30
 8006848:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800684c:	e007      	b.n	800685e <USER_SPI_ioctl+0x162>
 800684e:	20ff      	movs	r0, #255	@ 0xff
 8006850:	f7ff fc10 	bl	8006074 <xchg_spi>
 8006854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006858:	3b01      	subs	r3, #1
 800685a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800685e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f3      	bne.n	800684e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006866:	7dbb      	ldrb	r3, [r7, #22]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	2310      	movs	r3, #16
 8006870:	fa03 f202 	lsl.w	r2, r3, r2
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800687e:	e098      	b.n	80069b2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006880:	2100      	movs	r1, #0
 8006882:	2009      	movs	r0, #9
 8006884:	f7ff fce7 	bl	8006256 <send_cmd>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8091 	bne.w	80069b2 <USER_SPI_ioctl+0x2b6>
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	2110      	movs	r1, #16
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fc82 	bl	80061a0 <rcvr_datablock>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8087 	beq.w	80069b2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80068a4:	4b4c      	ldr	r3, [pc, #304]	@ (80069d8 <USER_SPI_ioctl+0x2dc>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80068b0:	7dbb      	ldrb	r3, [r7, #22]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80068b8:	7dfa      	ldrb	r2, [r7, #23]
 80068ba:	09d2      	lsrs	r2, r2, #7
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	4413      	add	r3, r2
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	7e7b      	ldrb	r3, [r7, #25]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e013      	b.n	80068fe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80068d6:	7dbb      	ldrb	r3, [r7, #22]
 80068d8:	109b      	asrs	r3, r3, #2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	3301      	adds	r3, #1
 80068e2:	7dfa      	ldrb	r2, [r7, #23]
 80068e4:	00d2      	lsls	r2, r2, #3
 80068e6:	f002 0218 	and.w	r2, r2, #24
 80068ea:	7df9      	ldrb	r1, [r7, #23]
 80068ec:	0949      	lsrs	r1, r1, #5
 80068ee:	b2c9      	uxtb	r1, r1
 80068f0:	440a      	add	r2, r1
 80068f2:	3201      	adds	r2, #1
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006904:	e055      	b.n	80069b2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006906:	4b34      	ldr	r3, [pc, #208]	@ (80069d8 <USER_SPI_ioctl+0x2dc>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f003 0306 	and.w	r3, r3, #6
 800690e:	2b00      	cmp	r3, #0
 8006910:	d051      	beq.n	80069b6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006912:	f107 020c 	add.w	r2, r7, #12
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	210b      	movs	r1, #11
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff feee 	bl	80066fc <USER_SPI_ioctl>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d149      	bne.n	80069ba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006926:	7b3b      	ldrb	r3, [r7, #12]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <USER_SPI_ioctl+0x23e>
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d041      	beq.n	80069be <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	623b      	str	r3, [r7, #32]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800694a:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <USER_SPI_ioctl+0x2dc>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	025b      	lsls	r3, r3, #9
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	025b      	lsls	r3, r3, #9
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006964:	2020      	movs	r0, #32
 8006966:	f7ff fc76 	bl	8006256 <send_cmd>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d128      	bne.n	80069c2 <USER_SPI_ioctl+0x2c6>
 8006970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006972:	2021      	movs	r0, #33	@ 0x21
 8006974:	f7ff fc6f 	bl	8006256 <send_cmd>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d121      	bne.n	80069c2 <USER_SPI_ioctl+0x2c6>
 800697e:	2100      	movs	r1, #0
 8006980:	2026      	movs	r0, #38	@ 0x26
 8006982:	f7ff fc68 	bl	8006256 <send_cmd>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11a      	bne.n	80069c2 <USER_SPI_ioctl+0x2c6>
 800698c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006990:	f7ff fbb6 	bl	8006100 <wait_ready>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d013      	beq.n	80069c2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800699a:	2300      	movs	r3, #0
 800699c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80069a0:	e00f      	b.n	80069c2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80069a2:	2304      	movs	r3, #4
 80069a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80069a8:	e00c      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		break;
 80069aa:	bf00      	nop
 80069ac:	e00a      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		break;
 80069ae:	bf00      	nop
 80069b0:	e008      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		break;
 80069b2:	bf00      	nop
 80069b4:	e006      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <USER_SPI_ioctl+0x2c8>
		break;
 80069c2:	bf00      	nop
	}

	despiselect();
 80069c4:	f7ff fbc0 	bl	8006148 <despiselect>

	return res;
 80069c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3730      	adds	r7, #48	@ 0x30
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20040020 	.word	0x20040020
 80069d8:	200404dc 	.word	0x200404dc

080069dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	4a08      	ldr	r2, [pc, #32]	@ (8006a0c <disk_status+0x30>)
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	79fa      	ldrb	r2, [r7, #7]
 80069f4:	4905      	ldr	r1, [pc, #20]	@ (8006a0c <disk_status+0x30>)
 80069f6:	440a      	add	r2, r1
 80069f8:	7a12      	ldrb	r2, [r2, #8]
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20040510 	.word	0x20040510

08006a10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	4a0d      	ldr	r2, [pc, #52]	@ (8006a58 <disk_initialize+0x48>)
 8006a22:	5cd3      	ldrb	r3, [r2, r3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d111      	bne.n	8006a4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006a58 <disk_initialize+0x48>)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <disk_initialize+0x48>)
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	4906      	ldr	r1, [pc, #24]	@ (8006a58 <disk_initialize+0x48>)
 8006a40:	440a      	add	r2, r1
 8006a42:	7a12      	ldrb	r2, [r2, #8]
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20040510 	.word	0x20040510

08006a5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a98 <disk_read+0x3c>)
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	689c      	ldr	r4, [r3, #8]
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	4a07      	ldr	r2, [pc, #28]	@ (8006a98 <disk_read+0x3c>)
 8006a7c:	4413      	add	r3, r2
 8006a7e:	7a18      	ldrb	r0, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	47a0      	blx	r4
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20040510 	.word	0x20040510

08006a9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad8 <disk_write+0x3c>)
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	68dc      	ldr	r4, [r3, #12]
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4a07      	ldr	r2, [pc, #28]	@ (8006ad8 <disk_write+0x3c>)
 8006abc:	4413      	add	r3, r2
 8006abe:	7a18      	ldrb	r0, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	47a0      	blx	r4
 8006ac8:	4603      	mov	r3, r0
 8006aca:	75fb      	strb	r3, [r7, #23]
  return res;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20040510 	.word	0x20040510

08006adc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	603a      	str	r2, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	4a09      	ldr	r2, [pc, #36]	@ (8006b14 <disk_ioctl+0x38>)
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	79fa      	ldrb	r2, [r7, #7]
 8006afa:	4906      	ldr	r1, [pc, #24]	@ (8006b14 <disk_ioctl+0x38>)
 8006afc:	440a      	add	r2, r1
 8006afe:	7a10      	ldrb	r0, [r2, #8]
 8006b00:	79b9      	ldrb	r1, [r7, #6]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4798      	blx	r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]
  return res;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20040510 	.word	0x20040510

08006b18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006b28:	89fb      	ldrh	r3, [r7, #14]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	b21a      	sxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b21b      	sxth	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3303      	adds	r3, #3
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	3202      	adds	r2, #2
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	3201      	adds	r2, #1
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	887a      	ldrh	r2, [r7, #2]
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	887b      	ldrh	r3, [r7, #2]
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	0a1b      	lsrs	r3, r3, #8
 8006bde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	1c53      	adds	r3, r2, #1
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	6179      	str	r1, [r7, #20]
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f1      	bne.n	8006c36 <mem_cpy+0x1a>
	}
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	617a      	str	r2, [r7, #20]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f3      	bne.n	8006c6e <mem_set+0x10>
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006c94:	b480      	push	{r7}
 8006c96:	b089      	sub	sp, #36	@ 0x24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	61fb      	str	r3, [r7, #28]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	61fa      	str	r2, [r7, #28]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	61ba      	str	r2, [r7, #24]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	1acb      	subs	r3, r1, r3
 8006cc0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <mem_cmp+0x40>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0eb      	beq.n	8006cac <mem_cmp+0x18>

	return r;
 8006cd4:	697b      	ldr	r3, [r7, #20]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	@ 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cec:	e002      	b.n	8006cf4 <chk_chr+0x12>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	607b      	str	r3, [r7, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d005      	beq.n	8006d08 <chk_chr+0x26>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d1f2      	bne.n	8006cee <chk_chr+0xc>
	return *str;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d22:	2300      	movs	r3, #0
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e029      	b.n	8006d80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006d2c:	4a27      	ldr	r2, [pc, #156]	@ (8006dcc <chk_lock+0xb4>)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	4413      	add	r3, r2
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01d      	beq.n	8006d76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d3a:	4a24      	ldr	r2, [pc, #144]	@ (8006dcc <chk_lock+0xb4>)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	4413      	add	r3, r2
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d116      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <chk_lock+0xb4>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	4413      	add	r3, r2
 8006d54:	3304      	adds	r3, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d10c      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d60:	4a1a      	ldr	r2, [pc, #104]	@ (8006dcc <chk_lock+0xb4>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	4413      	add	r3, r2
 8006d68:	3308      	adds	r3, #8
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d102      	bne.n	8006d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006d74:	e007      	b.n	8006d86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d9d2      	bls.n	8006d2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d109      	bne.n	8006da0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <chk_lock+0x80>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d101      	bne.n	8006d9c <chk_lock+0x84>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e010      	b.n	8006dbe <chk_lock+0xa6>
 8006d9c:	2312      	movs	r3, #18
 8006d9e:	e00e      	b.n	8006dbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d108      	bne.n	8006db8 <chk_lock+0xa0>
 8006da6:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <chk_lock+0xb4>)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	4413      	add	r3, r2
 8006dae:	330c      	adds	r3, #12
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db6:	d101      	bne.n	8006dbc <chk_lock+0xa4>
 8006db8:	2310      	movs	r3, #16
 8006dba:	e000      	b.n	8006dbe <chk_lock+0xa6>
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	200404f0 	.word	0x200404f0

08006dd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	e002      	b.n	8006de2 <enq_lock+0x12>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3301      	adds	r3, #1
 8006de0:	607b      	str	r3, [r7, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d806      	bhi.n	8006df6 <enq_lock+0x26>
 8006de8:	4a09      	ldr	r2, [pc, #36]	@ (8006e10 <enq_lock+0x40>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4413      	add	r3, r2
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f2      	bne.n	8006ddc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	bf14      	ite	ne
 8006dfc:	2301      	movne	r3, #1
 8006dfe:	2300      	moveq	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	200404f0 	.word	0x200404f0

08006e14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e01f      	b.n	8006e64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006e24:	4a41      	ldr	r2, [pc, #260]	@ (8006f2c <inc_lock+0x118>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	4413      	add	r3, r2
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d113      	bne.n	8006e5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006e36:	4a3d      	ldr	r2, [pc, #244]	@ (8006f2c <inc_lock+0x118>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3304      	adds	r3, #4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d109      	bne.n	8006e5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006e4a:	4a38      	ldr	r2, [pc, #224]	@ (8006f2c <inc_lock+0x118>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	4413      	add	r3, r2
 8006e52:	3308      	adds	r3, #8
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d006      	beq.n	8006e6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d9dc      	bls.n	8006e24 <inc_lock+0x10>
 8006e6a:	e000      	b.n	8006e6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006e6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d132      	bne.n	8006eda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e002      	b.n	8006e80 <inc_lock+0x6c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d806      	bhi.n	8006e94 <inc_lock+0x80>
 8006e86:	4a29      	ldr	r2, [pc, #164]	@ (8006f2c <inc_lock+0x118>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	4413      	add	r3, r2
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f2      	bne.n	8006e7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d101      	bne.n	8006e9e <inc_lock+0x8a>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e040      	b.n	8006f20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4922      	ldr	r1, [pc, #136]	@ (8006f2c <inc_lock+0x118>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	440b      	add	r3, r1
 8006eaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	491e      	ldr	r1, [pc, #120]	@ (8006f2c <inc_lock+0x118>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3304      	adds	r3, #4
 8006eba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	491a      	ldr	r1, [pc, #104]	@ (8006f2c <inc_lock+0x118>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3308      	adds	r3, #8
 8006eca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ecc:	4a17      	ldr	r2, [pc, #92]	@ (8006f2c <inc_lock+0x118>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d009      	beq.n	8006ef4 <inc_lock+0xe0>
 8006ee0:	4a12      	ldr	r2, [pc, #72]	@ (8006f2c <inc_lock+0x118>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	330c      	adds	r3, #12
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <inc_lock+0xe0>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e015      	b.n	8006f20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <inc_lock+0xf8>
 8006efa:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <inc_lock+0x118>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	4413      	add	r3, r2
 8006f02:	330c      	adds	r3, #12
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	e001      	b.n	8006f10 <inc_lock+0xfc>
 8006f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f10:	4906      	ldr	r1, [pc, #24]	@ (8006f2c <inc_lock+0x118>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	440b      	add	r3, r1
 8006f18:	330c      	adds	r3, #12
 8006f1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	200404f0 	.word	0x200404f0

08006f30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d825      	bhi.n	8006f90 <dec_lock+0x60>
		n = Files[i].ctr;
 8006f44:	4a17      	ldr	r2, [pc, #92]	@ (8006fa4 <dec_lock+0x74>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4413      	add	r3, r2
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006f52:	89fb      	ldrh	r3, [r7, #14]
 8006f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f58:	d101      	bne.n	8006f5e <dec_lock+0x2e>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006f5e:	89fb      	ldrh	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <dec_lock+0x3a>
 8006f64:	89fb      	ldrh	r3, [r7, #14]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa4 <dec_lock+0x74>)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	4413      	add	r3, r2
 8006f72:	330c      	adds	r3, #12
 8006f74:	89fa      	ldrh	r2, [r7, #14]
 8006f76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <dec_lock+0x5a>
 8006f7e:	4a09      	ldr	r2, [pc, #36]	@ (8006fa4 <dec_lock+0x74>)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4413      	add	r3, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	737b      	strb	r3, [r7, #13]
 8006f8e:	e001      	b.n	8006f94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006f90:	2302      	movs	r3, #2
 8006f92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006f94:	7b7b      	ldrb	r3, [r7, #13]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	200404f0 	.word	0x200404f0

08006fa8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e010      	b.n	8006fd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006fec <clear_lock+0x44>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	4413      	add	r3, r2
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d105      	bne.n	8006fd2 <clear_lock+0x2a>
 8006fc6:	4a09      	ldr	r2, [pc, #36]	@ (8006fec <clear_lock+0x44>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d9eb      	bls.n	8006fb6 <clear_lock+0xe>
	}
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	200404f0 	.word	0x200404f0

08006ff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	78db      	ldrb	r3, [r3, #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d034      	beq.n	800706e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007008:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7858      	ldrb	r0, [r3, #1]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007014:	2301      	movs	r3, #1
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	f7ff fd40 	bl	8006a9c <disk_write>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007022:	2301      	movs	r3, #1
 8007024:	73fb      	strb	r3, [r7, #15]
 8007026:	e022      	b.n	800706e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	1ad2      	subs	r2, r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	429a      	cmp	r2, r3
 800703c:	d217      	bcs.n	800706e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	789b      	ldrb	r3, [r3, #2]
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	e010      	b.n	8007068 <sync_window+0x78>
					wsect += fs->fsize;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7858      	ldrb	r0, [r3, #1]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800705a:	2301      	movs	r3, #1
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	f7ff fd1d 	bl	8006a9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3b01      	subs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d8eb      	bhi.n	8007046 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d01b      	beq.n	80070c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff ffad 	bl	8006ff0 <sync_window>
 8007096:	4603      	mov	r3, r0
 8007098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d113      	bne.n	80070c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7858      	ldrb	r0, [r3, #1]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070aa:	2301      	movs	r3, #1
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	f7ff fcd5 	bl	8006a5c <disk_read>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80070b8:	f04f 33ff 	mov.w	r3, #4294967295
 80070bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff87 	bl	8006ff0 <sync_window>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d158      	bne.n	800719e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d148      	bne.n	8007186 <sync_fs+0xb2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	791b      	ldrb	r3, [r3, #4]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d144      	bne.n	8007186 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3330      	adds	r3, #48	@ 0x30
 8007100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff fda9 	bl	8006c5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3330      	adds	r3, #48	@ 0x30
 8007110:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007114:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fd38 	bl	8006b8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3330      	adds	r3, #48	@ 0x30
 8007122:	4921      	ldr	r1, [pc, #132]	@ (80071a8 <sync_fs+0xd4>)
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fd4d 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3330      	adds	r3, #48	@ 0x30
 800712e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007132:	491e      	ldr	r1, [pc, #120]	@ (80071ac <sync_fs+0xd8>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fd45 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3330      	adds	r3, #48	@ 0x30
 800713e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7ff fd3b 	bl	8006bc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3330      	adds	r3, #48	@ 0x30
 8007152:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7ff fd31 	bl	8006bc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7858      	ldrb	r0, [r3, #1]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717a:	2301      	movs	r3, #1
 800717c:	f7ff fc8e 	bl	8006a9c <disk_write>
			fs->fsi_flag = 0;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff fca4 	bl	8006adc <disk_ioctl>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <sync_fs+0xca>
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	41615252 	.word	0x41615252
 80071ac:	61417272 	.word	0x61417272

080071b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	3b02      	subs	r3, #2
 80071be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	3b02      	subs	r3, #2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d301      	bcc.n	80071d0 <clust2sect+0x20>
 80071cc:	2300      	movs	r3, #0
 80071ce:	e008      	b.n	80071e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	461a      	mov	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	fb03 f202 	mul.w	r2, r3, r2
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	4413      	add	r3, r2
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d904      	bls.n	800720e <get_fat+0x20>
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <get_fat+0x26>
		val = 1;	/* Internal error */
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e08e      	b.n	8007332 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007214:	f04f 33ff 	mov.w	r3, #4294967295
 8007218:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d061      	beq.n	80072e6 <get_fat+0xf8>
 8007222:	2b03      	cmp	r3, #3
 8007224:	dc7b      	bgt.n	800731e <get_fat+0x130>
 8007226:	2b01      	cmp	r3, #1
 8007228:	d002      	beq.n	8007230 <get_fat+0x42>
 800722a:	2b02      	cmp	r3, #2
 800722c:	d041      	beq.n	80072b2 <get_fat+0xc4>
 800722e:	e076      	b.n	800731e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	0a5b      	lsrs	r3, r3, #9
 8007246:	4413      	add	r3, r2
 8007248:	4619      	mov	r1, r3
 800724a:	6938      	ldr	r0, [r7, #16]
 800724c:	f7ff ff14 	bl	8007078 <move_window>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d166      	bne.n	8007324 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	60fa      	str	r2, [r7, #12]
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007268:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6a1a      	ldr	r2, [r3, #32]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	0a5b      	lsrs	r3, r3, #9
 8007272:	4413      	add	r3, r2
 8007274:	4619      	mov	r1, r3
 8007276:	6938      	ldr	r0, [r7, #16]
 8007278:	f7ff fefe 	bl	8007078 <move_window>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d152      	bne.n	8007328 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4313      	orrs	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <get_fat+0xba>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	091b      	lsrs	r3, r3, #4
 80072a6:	e002      	b.n	80072ae <get_fat+0xc0>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ae:	617b      	str	r3, [r7, #20]
			break;
 80072b0:	e03f      	b.n	8007332 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	4413      	add	r3, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	6938      	ldr	r0, [r7, #16]
 80072c0:	f7ff feda 	bl	8007078 <move_window>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d130      	bne.n	800732c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80072d8:	4413      	add	r3, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fc1c 	bl	8006b18 <ld_word>
 80072e0:	4603      	mov	r3, r0
 80072e2:	617b      	str	r3, [r7, #20]
			break;
 80072e4:	e025      	b.n	8007332 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6a1a      	ldr	r2, [r3, #32]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	09db      	lsrs	r3, r3, #7
 80072ee:	4413      	add	r3, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	6938      	ldr	r0, [r7, #16]
 80072f4:	f7ff fec0 	bl	8007078 <move_window>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d118      	bne.n	8007330 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800730c:	4413      	add	r3, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fc1a 	bl	8006b48 <ld_dword>
 8007314:	4603      	mov	r3, r0
 8007316:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800731a:	617b      	str	r3, [r7, #20]
			break;
 800731c:	e009      	b.n	8007332 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e006      	b.n	8007332 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007324:	bf00      	nop
 8007326:	e004      	b.n	8007332 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007328:	bf00      	nop
 800732a:	e002      	b.n	8007332 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800732c:	bf00      	nop
 800732e:	e000      	b.n	8007332 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007330:	bf00      	nop
		}
	}

	return val;
 8007332:	697b      	ldr	r3, [r7, #20]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b089      	sub	sp, #36	@ 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007348:	2302      	movs	r3, #2
 800734a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b01      	cmp	r3, #1
 8007350:	f240 80d9 	bls.w	8007506 <put_fat+0x1ca>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	f080 80d3 	bcs.w	8007506 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b03      	cmp	r3, #3
 8007366:	f000 8096 	beq.w	8007496 <put_fat+0x15a>
 800736a:	2b03      	cmp	r3, #3
 800736c:	f300 80cb 	bgt.w	8007506 <put_fat+0x1ca>
 8007370:	2b01      	cmp	r3, #1
 8007372:	d002      	beq.n	800737a <put_fat+0x3e>
 8007374:	2b02      	cmp	r3, #2
 8007376:	d06e      	beq.n	8007456 <put_fat+0x11a>
 8007378:	e0c5      	b.n	8007506 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	085b      	lsrs	r3, r3, #1
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4413      	add	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	0a5b      	lsrs	r3, r3, #9
 8007390:	4413      	add	r3, r2
 8007392:	4619      	mov	r1, r3
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff fe6f 	bl	8007078 <move_window>
 800739a:	4603      	mov	r3, r0
 800739c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800739e:	7ffb      	ldrb	r3, [r7, #31]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 80a9 	bne.w	80074f8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	61b9      	str	r1, [r7, #24]
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	4413      	add	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00d      	beq.n	80073e0 <put_fat+0xa4>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b25b      	sxtb	r3, r3
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	b25a      	sxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	4313      	orrs	r3, r2
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e001      	b.n	80073e4 <put_fat+0xa8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	0a5b      	lsrs	r3, r3, #9
 80073f6:	4413      	add	r3, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fe3c 	bl	8007078 <move_window>
 8007400:	4603      	mov	r3, r0
 8007402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007404:	7ffb      	ldrb	r3, [r7, #31]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d178      	bne.n	80074fc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	4413      	add	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <put_fat+0xf0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	091b      	lsrs	r3, r3, #4
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e00e      	b.n	800744a <put_fat+0x10e>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b25b      	sxtb	r3, r3
 8007432:	f023 030f 	bic.w	r3, r3, #15
 8007436:	b25a      	sxtb	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	b25b      	sxtb	r3, r3
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	b25b      	sxtb	r3, r3
 8007444:	4313      	orrs	r3, r2
 8007446:	b25b      	sxtb	r3, r3
 8007448:	b2db      	uxtb	r3, r3
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	70da      	strb	r2, [r3, #3]
			break;
 8007454:	e057      	b.n	8007506 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	0a1b      	lsrs	r3, r3, #8
 800745e:	4413      	add	r3, r2
 8007460:	4619      	mov	r1, r3
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff fe08 	bl	8007078 <move_window>
 8007468:	4603      	mov	r3, r0
 800746a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800746c:	7ffb      	ldrb	r3, [r7, #31]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d146      	bne.n	8007500 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007480:	4413      	add	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	b292      	uxth	r2, r2
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fb80 	bl	8006b8e <st_word>
			fs->wflag = 1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	70da      	strb	r2, [r3, #3]
			break;
 8007494:	e037      	b.n	8007506 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	09db      	lsrs	r3, r3, #7
 800749e:	4413      	add	r3, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fde8 	bl	8007078 <move_window>
 80074a8:	4603      	mov	r3, r0
 80074aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074ac:	7ffb      	ldrb	r3, [r7, #31]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d128      	bne.n	8007504 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074c6:	4413      	add	r3, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fb3d 	bl	8006b48 <ld_dword>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80074d4:	4323      	orrs	r3, r4
 80074d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80074e6:	4413      	add	r3, r2
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fb6a 	bl	8006bc4 <st_dword>
			fs->wflag = 1;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	70da      	strb	r2, [r3, #3]
			break;
 80074f6:	e006      	b.n	8007506 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80074f8:	bf00      	nop
 80074fa:	e004      	b.n	8007506 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80074fc:	bf00      	nop
 80074fe:	e002      	b.n	8007506 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007504:	bf00      	nop
		}
	}
	return res;
 8007506:	7ffb      	ldrb	r3, [r7, #31]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3724      	adds	r7, #36	@ 0x24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d904      	bls.n	8007536 <remove_chain+0x26>
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	429a      	cmp	r2, r3
 8007534:	d301      	bcc.n	800753a <remove_chain+0x2a>
 8007536:	2302      	movs	r3, #2
 8007538:	e04b      	b.n	80075d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00c      	beq.n	800755a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	69b8      	ldr	r0, [r7, #24]
 8007548:	f7ff fef8 	bl	800733c <put_fat>
 800754c:	4603      	mov	r3, r0
 800754e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007550:	7ffb      	ldrb	r3, [r7, #31]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <remove_chain+0x4a>
 8007556:	7ffb      	ldrb	r3, [r7, #31]
 8007558:	e03b      	b.n	80075d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff fe46 	bl	80071ee <get_fat>
 8007562:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d031      	beq.n	80075ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <remove_chain+0x64>
 8007570:	2302      	movs	r3, #2
 8007572:	e02e      	b.n	80075d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d101      	bne.n	8007580 <remove_chain+0x70>
 800757c:	2301      	movs	r3, #1
 800757e:	e028      	b.n	80075d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007580:	2200      	movs	r2, #0
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	69b8      	ldr	r0, [r7, #24]
 8007586:	f7ff fed9 	bl	800733c <put_fat>
 800758a:	4603      	mov	r3, r0
 800758c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800758e:	7ffb      	ldrb	r3, [r7, #31]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <remove_chain+0x88>
 8007594:	7ffb      	ldrb	r3, [r7, #31]
 8007596:	e01c      	b.n	80075d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	3b02      	subs	r3, #2
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d20b      	bcs.n	80075be <remove_chain+0xae>
			fs->free_clst++;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d3c6      	bcc.n	800755a <remove_chain+0x4a>
 80075cc:	e000      	b.n	80075d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80075ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b088      	sub	sp, #32
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10d      	bne.n	800760c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <create_chain+0x2c>
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d31b      	bcc.n	800763e <create_chain+0x64>
 8007606:	2301      	movs	r3, #1
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	e018      	b.n	800763e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff fded 	bl	80071ee <get_fat>
 8007614:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d801      	bhi.n	8007620 <create_chain+0x46>
 800761c:	2301      	movs	r3, #1
 800761e:	e070      	b.n	8007702 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d101      	bne.n	800762c <create_chain+0x52>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	e06a      	b.n	8007702 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	d201      	bcs.n	800763a <create_chain+0x60>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	e063      	b.n	8007702 <create_chain+0x128>
		scl = clst;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3301      	adds	r3, #1
 8007646:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	429a      	cmp	r2, r3
 8007650:	d307      	bcc.n	8007662 <create_chain+0x88>
				ncl = 2;
 8007652:	2302      	movs	r3, #2
 8007654:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	429a      	cmp	r2, r3
 800765c:	d901      	bls.n	8007662 <create_chain+0x88>
 800765e:	2300      	movs	r3, #0
 8007660:	e04f      	b.n	8007702 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007662:	69f9      	ldr	r1, [r7, #28]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fdc2 	bl	80071ee <get_fat>
 800766a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d003      	beq.n	8007680 <create_chain+0xa6>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d101      	bne.n	8007684 <create_chain+0xaa>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	e03e      	b.n	8007702 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d1da      	bne.n	8007642 <create_chain+0x68>
 800768c:	2300      	movs	r3, #0
 800768e:	e038      	b.n	8007702 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007690:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007692:	f04f 32ff 	mov.w	r2, #4294967295
 8007696:	69f9      	ldr	r1, [r7, #28]
 8007698:	6938      	ldr	r0, [r7, #16]
 800769a:	f7ff fe4f 	bl	800733c <put_fat>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <create_chain+0xe2>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6938      	ldr	r0, [r7, #16]
 80076b4:	f7ff fe42 	bl	800733c <put_fat>
 80076b8:	4603      	mov	r3, r0
 80076ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d116      	bne.n	80076f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	3b02      	subs	r3, #2
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d804      	bhi.n	80076e0 <create_chain+0x106>
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	1e5a      	subs	r2, r3, #1
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	711a      	strb	r2, [r3, #4]
 80076ee:	e007      	b.n	8007700 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d102      	bne.n	80076fc <create_chain+0x122>
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e000      	b.n	80076fe <create_chain+0x124>
 80076fc:	2301      	movs	r3, #1
 80076fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007700:	69fb      	ldr	r3, [r7, #28]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800770a:	b480      	push	{r7}
 800770c:	b087      	sub	sp, #28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	3304      	adds	r3, #4
 8007720:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	0a5b      	lsrs	r3, r3, #9
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	8952      	ldrh	r2, [r2, #10]
 800772a:	fbb3 f3f2 	udiv	r3, r3, r2
 800772e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1d1a      	adds	r2, r3, #4
 8007734:	613a      	str	r2, [r7, #16]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <clmt_clust+0x3a>
 8007740:	2300      	movs	r3, #0
 8007742:	e010      	b.n	8007766 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	d307      	bcc.n	800775c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	3304      	adds	r3, #4
 8007758:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800775a:	e7e9      	b.n	8007730 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800775c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	4413      	add	r3, r2
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b086      	sub	sp, #24
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007788:	d204      	bcs.n	8007794 <dir_sdi+0x22>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007794:	2302      	movs	r3, #2
 8007796:	e063      	b.n	8007860 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <dir_sdi+0x46>
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d902      	bls.n	80077b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	8912      	ldrh	r2, [r2, #8]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d301      	bcc.n	80077ce <dir_sdi+0x5c>
 80077ca:	2302      	movs	r3, #2
 80077cc:	e048      	b.n	8007860 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	61da      	str	r2, [r3, #28]
 80077d6:	e029      	b.n	800782c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	895b      	ldrh	r3, [r3, #10]
 80077dc:	025b      	lsls	r3, r3, #9
 80077de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80077e0:	e019      	b.n	8007816 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6979      	ldr	r1, [r7, #20]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fd01 	bl	80071ee <get_fat>
 80077ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d101      	bne.n	80077fa <dir_sdi+0x88>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e032      	b.n	8007860 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d904      	bls.n	800780a <dir_sdi+0x98>
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	429a      	cmp	r2, r3
 8007808:	d301      	bcc.n	800780e <dir_sdi+0x9c>
 800780a:	2302      	movs	r3, #2
 800780c:	e028      	b.n	8007860 <dir_sdi+0xee>
			ofs -= csz;
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	429a      	cmp	r2, r3
 800781c:	d2e1      	bcs.n	80077e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800781e:	6979      	ldr	r1, [r7, #20]
 8007820:	6938      	ldr	r0, [r7, #16]
 8007822:	f7ff fcc5 	bl	80071b0 <clust2sect>
 8007826:	4602      	mov	r2, r0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <dir_sdi+0xcc>
 800783a:	2302      	movs	r3, #2
 800783c:	e010      	b.n	8007860 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	0a5b      	lsrs	r3, r3, #9
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007858:	441a      	add	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	3320      	adds	r3, #32
 800787e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <dir_next+0x28>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800788e:	d301      	bcc.n	8007894 <dir_next+0x2c>
 8007890:	2304      	movs	r3, #4
 8007892:	e0aa      	b.n	80079ea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 8098 	bne.w	80079d0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	095b      	lsrs	r3, r3, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	8912      	ldrh	r2, [r2, #8]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f0c0 8088 	bcc.w	80079d0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	61da      	str	r2, [r3, #28]
 80078c6:	2304      	movs	r3, #4
 80078c8:	e08f      	b.n	80079ea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	0a5b      	lsrs	r3, r3, #9
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	8952      	ldrh	r2, [r2, #10]
 80078d2:	3a01      	subs	r2, #1
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d17a      	bne.n	80079d0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f7ff fc83 	bl	80071ee <get_fat>
 80078e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d801      	bhi.n	80078f4 <dir_next+0x8c>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e07a      	b.n	80079ea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d101      	bne.n	8007900 <dir_next+0x98>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e074      	b.n	80079ea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	429a      	cmp	r2, r3
 8007908:	d358      	bcc.n	80079bc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	61da      	str	r2, [r3, #28]
 8007916:	2304      	movs	r3, #4
 8007918:	e067      	b.n	80079ea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7ff fe59 	bl	80075da <create_chain>
 8007928:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <dir_next+0xcc>
 8007930:	2307      	movs	r3, #7
 8007932:	e05a      	b.n	80079ea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <dir_next+0xd6>
 800793a:	2302      	movs	r3, #2
 800793c:	e055      	b.n	80079ea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d101      	bne.n	800794a <dir_next+0xe2>
 8007946:	2301      	movs	r3, #1
 8007948:	e04f      	b.n	80079ea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fb50 	bl	8006ff0 <sync_window>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <dir_next+0xf2>
 8007956:	2301      	movs	r3, #1
 8007958:	e047      	b.n	80079ea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3330      	adds	r3, #48	@ 0x30
 800795e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff f97a 	bl	8006c5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fc1d 	bl	80071b0 <clust2sect>
 8007976:	4602      	mov	r2, r0
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800797c:	e012      	b.n	80079a4 <dir_next+0x13c>
						fs->wflag = 1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fb33 	bl	8006ff0 <sync_window>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <dir_next+0x12c>
 8007990:	2301      	movs	r3, #1
 8007992:	e02a      	b.n	80079ea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	3301      	adds	r3, #1
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	895b      	ldrh	r3, [r3, #10]
 80079a8:	461a      	mov	r2, r3
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d3e6      	bcc.n	800797e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80079c2:	6979      	ldr	r1, [r7, #20]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fbf3 	bl	80071b0 <clust2sect>
 80079ca:	4602      	mov	r2, r0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e2:	441a      	add	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007a02:	2100      	movs	r1, #0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff feb4 	bl	8007772 <dir_sdi>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d12b      	bne.n	8007a6c <dir_alloc+0x7a>
		n = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff fb2a 	bl	8007078 <move_window>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d11d      	bne.n	8007a6a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2be5      	cmp	r3, #229	@ 0xe5
 8007a36:	d004      	beq.n	8007a42 <dir_alloc+0x50>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3301      	adds	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d102      	bne.n	8007a56 <dir_alloc+0x64>
 8007a50:	e00c      	b.n	8007a6c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007a56:	2101      	movs	r1, #1
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff05 	bl	8007868 <dir_next>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0d7      	beq.n	8007a18 <dir_alloc+0x26>
 8007a68:	e000      	b.n	8007a6c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007a6a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d101      	bne.n	8007a76 <dir_alloc+0x84>
 8007a72:	2307      	movs	r3, #7
 8007a74:	75fb      	strb	r3, [r7, #23]
	return res;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	331a      	adds	r3, #26
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff f842 	bl	8006b18 <ld_word>
 8007a94:	4603      	mov	r3, r0
 8007a96:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d109      	bne.n	8007ab4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff f837 	bl	8006b18 <ld_word>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	331a      	adds	r3, #26
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	b292      	uxth	r2, r2
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff f85a 	bl	8006b8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d109      	bne.n	8007af6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f103 0214 	add.w	r2, r3, #20
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f7ff f84c 	bl	8006b8e <st_word>
	}
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fe2f 	bl	8007772 <dir_sdi>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <dir_find+0x24>
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	e03e      	b.n	8007ba0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6938      	ldr	r0, [r7, #16]
 8007b2a:	f7ff faa5 	bl	8007078 <move_window>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d12f      	bne.n	8007b98 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <dir_find+0x4e>
 8007b46:	2304      	movs	r3, #4
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e028      	b.n	8007b9e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	330b      	adds	r3, #11
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	330b      	adds	r3, #11
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <dir_find+0x86>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a18      	ldr	r0, [r3, #32]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3324      	adds	r3, #36	@ 0x24
 8007b76:	220b      	movs	r2, #11
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7ff f88b 	bl	8006c94 <mem_cmp>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b84:	2100      	movs	r1, #0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fe6e 	bl	8007868 <dir_next>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0c5      	beq.n	8007b22 <dir_find+0x24>
 8007b96:	e002      	b.n	8007b9e <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b98:	bf00      	nop
 8007b9a:	e000      	b.n	8007b9e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b9c:	bf00      	nop

	return res;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ff1a 	bl	80079f2 <dir_alloc>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11c      	bne.n	8007c02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68b8      	ldr	r0, [r7, #8]
 8007bd0:	f7ff fa52 	bl	8007078 <move_window>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d111      	bne.n	8007c02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	2220      	movs	r2, #32
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff f839 	bl	8006c5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a18      	ldr	r0, [r3, #32]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	@ 0x24
 8007bf4:	220b      	movs	r2, #11
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f7ff f810 	bl	8006c1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3324      	adds	r3, #36	@ 0x24
 8007c20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c22:	220b      	movs	r2, #11
 8007c24:	2120      	movs	r1, #32
 8007c26:	68b8      	ldr	r0, [r7, #8]
 8007c28:	f7ff f819 	bl	8006c5e <mem_set>
	si = i = 0; ni = 8;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	2308      	movs	r3, #8
 8007c36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	61fa      	str	r2, [r7, #28]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c46:	7efb      	ldrb	r3, [r7, #27]
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d94e      	bls.n	8007cea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c4c:	7efb      	ldrb	r3, [r7, #27]
 8007c4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c50:	d006      	beq.n	8007c60 <create_name+0x54>
 8007c52:	7efb      	ldrb	r3, [r7, #27]
 8007c54:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c56:	d110      	bne.n	8007c7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c58:	e002      	b.n	8007c60 <create_name+0x54>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c6a:	d0f6      	beq.n	8007c5a <create_name+0x4e>
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c76:	d0f0      	beq.n	8007c5a <create_name+0x4e>
			break;
 8007c78:	e038      	b.n	8007cec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007c7a:	7efb      	ldrb	r3, [r7, #27]
 8007c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c7e:	d003      	beq.n	8007c88 <create_name+0x7c>
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d30c      	bcc.n	8007ca2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b0b      	cmp	r3, #11
 8007c8c:	d002      	beq.n	8007c94 <create_name+0x88>
 8007c8e:	7efb      	ldrb	r3, [r7, #27]
 8007c90:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c92:	d001      	beq.n	8007c98 <create_name+0x8c>
 8007c94:	2306      	movs	r3, #6
 8007c96:	e044      	b.n	8007d22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007c98:	2308      	movs	r3, #8
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	230b      	movs	r3, #11
 8007c9e:	617b      	str	r3, [r7, #20]
			continue;
 8007ca0:	e022      	b.n	8007ce8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	da04      	bge.n	8007cb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007caa:	7efb      	ldrb	r3, [r7, #27]
 8007cac:	3b80      	subs	r3, #128	@ 0x80
 8007cae:	4a1f      	ldr	r2, [pc, #124]	@ (8007d2c <create_name+0x120>)
 8007cb0:	5cd3      	ldrb	r3, [r2, r3]
 8007cb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cb4:	7efb      	ldrb	r3, [r7, #27]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	481d      	ldr	r0, [pc, #116]	@ (8007d30 <create_name+0x124>)
 8007cba:	f7ff f812 	bl	8006ce2 <chk_chr>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <create_name+0xbc>
 8007cc4:	2306      	movs	r3, #6
 8007cc6:	e02c      	b.n	8007d22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007cc8:	7efb      	ldrb	r3, [r7, #27]
 8007cca:	2b60      	cmp	r3, #96	@ 0x60
 8007ccc:	d905      	bls.n	8007cda <create_name+0xce>
 8007cce:	7efb      	ldrb	r3, [r7, #27]
 8007cd0:	2b7a      	cmp	r3, #122	@ 0x7a
 8007cd2:	d802      	bhi.n	8007cda <create_name+0xce>
 8007cd4:	7efb      	ldrb	r3, [r7, #27]
 8007cd6:	3b20      	subs	r3, #32
 8007cd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	613a      	str	r2, [r7, #16]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	7efa      	ldrb	r2, [r7, #27]
 8007ce6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ce8:	e7a6      	b.n	8007c38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007cea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <create_name+0xf4>
 8007cfc:	2306      	movs	r3, #6
 8007cfe:	e010      	b.n	8007d22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2be5      	cmp	r3, #229	@ 0xe5
 8007d06:	d102      	bne.n	8007d0e <create_name+0x102>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d0e:	7efb      	ldrb	r3, [r7, #27]
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d801      	bhi.n	8007d18 <create_name+0x10c>
 8007d14:	2204      	movs	r2, #4
 8007d16:	e000      	b.n	8007d1a <create_name+0x10e>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	330b      	adds	r3, #11
 8007d1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3720      	adds	r7, #32
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	0800a194 	.word	0x0800a194
 8007d30:	0800a0e0 	.word	0x0800a0e0

08007d34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d48:	e002      	b.n	8007d50 <follow_path+0x1c>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d56:	d0f8      	beq.n	8007d4a <follow_path+0x16>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d5e:	d0f4      	beq.n	8007d4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b1f      	cmp	r3, #31
 8007d6c:	d80a      	bhi.n	8007d84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2280      	movs	r2, #128	@ 0x80
 8007d72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fcfa 	bl	8007772 <dir_sdi>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]
 8007d82:	e043      	b.n	8007e0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d84:	463b      	mov	r3, r7
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff ff3f 	bl	8007c0c <create_name>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d134      	bne.n	8007e02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff feb0 	bl	8007afe <dir_find>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007da8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d127      	bne.n	8007e06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d122      	bne.n	8007e06 <follow_path+0xd2>
 8007dc0:	2305      	movs	r3, #5
 8007dc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007dc4:	e01f      	b.n	8007e06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11c      	bne.n	8007e0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ddc:	2305      	movs	r3, #5
 8007dde:	75fb      	strb	r3, [r7, #23]
 8007de0:	e014      	b.n	8007e0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df0:	4413      	add	r3, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fe43 	bl	8007a80 <ld_clust>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e00:	e7c0      	b.n	8007d84 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e02:	bf00      	nop
 8007e04:	e002      	b.n	8007e0c <follow_path+0xd8>
				break;
 8007e06:	bf00      	nop
 8007e08:	e000      	b.n	8007e0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e0a:	bf00      	nop
			}
		}
	}

	return res;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b087      	sub	sp, #28
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d031      	beq.n	8007e90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	e002      	b.n	8007e3a <get_ldnumber+0x24>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	3301      	adds	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	d903      	bls.n	8007e4a <get_ldnumber+0x34>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e48:	d1f4      	bne.n	8007e34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e50:	d11c      	bne.n	8007e8c <get_ldnumber+0x76>
			tp = *path;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	60fa      	str	r2, [r7, #12]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	3b30      	subs	r3, #48	@ 0x30
 8007e62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d80e      	bhi.n	8007e88 <get_ldnumber+0x72>
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d10a      	bne.n	8007e88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <get_ldnumber+0x72>
					vol = (int)i;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e002      	b.n	8007e92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e90:	693b      	ldr	r3, [r7, #16]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	70da      	strb	r2, [r3, #3]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff f8dc 	bl	8007078 <move_window>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <check_fs+0x2a>
 8007ec6:	2304      	movs	r3, #4
 8007ec8:	e038      	b.n	8007f3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3330      	adds	r3, #48	@ 0x30
 8007ece:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fe20 	bl	8006b18 <ld_word>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <check_fs+0x48>
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e029      	b.n	8007f3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007eee:	2be9      	cmp	r3, #233	@ 0xe9
 8007ef0:	d009      	beq.n	8007f06 <check_fs+0x66>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ef8:	2beb      	cmp	r3, #235	@ 0xeb
 8007efa:	d11e      	bne.n	8007f3a <check_fs+0x9a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007f02:	2b90      	cmp	r3, #144	@ 0x90
 8007f04:	d119      	bne.n	8007f3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3330      	adds	r3, #48	@ 0x30
 8007f0a:	3336      	adds	r3, #54	@ 0x36
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fe1b 	bl	8006b48 <ld_dword>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f18:	4a0a      	ldr	r2, [pc, #40]	@ (8007f44 <check_fs+0xa4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <check_fs+0x82>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e00c      	b.n	8007f3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3330      	adds	r3, #48	@ 0x30
 8007f26:	3352      	adds	r3, #82	@ 0x52
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fe0d 	bl	8006b48 <ld_dword>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4a05      	ldr	r2, [pc, #20]	@ (8007f48 <check_fs+0xa8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <check_fs+0x9a>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f3a:	2302      	movs	r3, #2
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	00544146 	.word	0x00544146
 8007f48:	33544146 	.word	0x33544146

08007f4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b096      	sub	sp, #88	@ 0x58
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff ff58 	bl	8007e16 <get_ldnumber>
 8007f66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da01      	bge.n	8007f72 <find_volume+0x26>
 8007f6e:	230b      	movs	r3, #11
 8007f70:	e22d      	b.n	80083ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f72:	4aa1      	ldr	r2, [pc, #644]	@ (80081f8 <find_volume+0x2ac>)
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <find_volume+0x3a>
 8007f82:	230c      	movs	r3, #12
 8007f84:	e223      	b.n	80083ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01a      	beq.n	8007fd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fd1b 	bl	80069dc <disk_status>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <find_volume+0x82>
 8007fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fca:	230a      	movs	r3, #10
 8007fcc:	e1ff      	b.n	80083ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e1fd      	b.n	80083ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fe fd13 	bl	8006a10 <disk_initialize>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e1e6      	b.n	80083ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <find_volume+0xca>
 8008006:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008012:	230a      	movs	r3, #10
 8008014:	e1db      	b.n	80083ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800801a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800801c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800801e:	f7ff ff3f 	bl	8007ea0 <check_fs>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008028:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800802c:	2b02      	cmp	r3, #2
 800802e:	d149      	bne.n	80080c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008030:	2300      	movs	r3, #0
 8008032:	643b      	str	r3, [r7, #64]	@ 0x40
 8008034:	e01e      	b.n	8008074 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800803c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008044:	4413      	add	r3, r2
 8008046:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	3304      	adds	r3, #4
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d006      	beq.n	8008060 <find_volume+0x114>
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	3308      	adds	r3, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fd76 	bl	8006b48 <ld_dword>
 800805c:	4602      	mov	r2, r0
 800805e:	e000      	b.n	8008062 <find_volume+0x116>
 8008060:	2200      	movs	r2, #0
 8008062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	3358      	adds	r3, #88	@ 0x58
 8008068:	443b      	add	r3, r7
 800806a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800806e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008070:	3301      	adds	r3, #1
 8008072:	643b      	str	r3, [r7, #64]	@ 0x40
 8008074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008076:	2b03      	cmp	r3, #3
 8008078:	d9dd      	bls.n	8008036 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800807a:	2300      	movs	r3, #0
 800807c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <find_volume+0x13e>
 8008084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008086:	3b01      	subs	r3, #1
 8008088:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800808a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	3358      	adds	r3, #88	@ 0x58
 8008090:	443b      	add	r3, r7
 8008092:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008096:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <find_volume+0x15e>
 800809e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080a2:	f7ff fefd 	bl	8007ea0 <check_fs>
 80080a6:	4603      	mov	r3, r0
 80080a8:	e000      	b.n	80080ac <find_volume+0x160>
 80080aa:	2303      	movs	r3, #3
 80080ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d905      	bls.n	80080c4 <find_volume+0x178>
 80080b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ba:	3301      	adds	r3, #1
 80080bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80080be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d9e2      	bls.n	800808a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d101      	bne.n	80080d0 <find_volume+0x184>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e17e      	b.n	80083ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d901      	bls.n	80080dc <find_volume+0x190>
 80080d8:	230d      	movs	r3, #13
 80080da:	e178      	b.n	80083ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	3330      	adds	r3, #48	@ 0x30
 80080e0:	330b      	adds	r3, #11
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe fd18 	bl	8006b18 <ld_word>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ee:	d001      	beq.n	80080f4 <find_volume+0x1a8>
 80080f0:	230d      	movs	r3, #13
 80080f2:	e16c      	b.n	80083ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	3330      	adds	r3, #48	@ 0x30
 80080f8:	3316      	adds	r3, #22
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fd0c 	bl	8006b18 <ld_word>
 8008100:	4603      	mov	r3, r0
 8008102:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d106      	bne.n	8008118 <find_volume+0x1cc>
 800810a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810c:	3330      	adds	r3, #48	@ 0x30
 800810e:	3324      	adds	r3, #36	@ 0x24
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fd19 	bl	8006b48 <ld_dword>
 8008116:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800811c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008126:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	789b      	ldrb	r3, [r3, #2]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d005      	beq.n	800813c <find_volume+0x1f0>
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	789b      	ldrb	r3, [r3, #2]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d001      	beq.n	800813c <find_volume+0x1f0>
 8008138:	230d      	movs	r3, #13
 800813a:	e148      	b.n	80083ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800813c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813e:	789b      	ldrb	r3, [r3, #2]
 8008140:	461a      	mov	r2, r3
 8008142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008150:	461a      	mov	r2, r3
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	895b      	ldrh	r3, [r3, #10]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <find_volume+0x224>
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	895b      	ldrh	r3, [r3, #10]
 8008162:	461a      	mov	r2, r3
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	895b      	ldrh	r3, [r3, #10]
 8008168:	3b01      	subs	r3, #1
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <find_volume+0x228>
 8008170:	230d      	movs	r3, #13
 8008172:	e12c      	b.n	80083ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	3330      	adds	r3, #48	@ 0x30
 8008178:	3311      	adds	r3, #17
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe fccc 	bl	8006b18 <ld_word>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	891b      	ldrh	r3, [r3, #8]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <find_volume+0x24e>
 8008196:	230d      	movs	r3, #13
 8008198:	e119      	b.n	80083ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	3330      	adds	r3, #48	@ 0x30
 800819e:	3313      	adds	r3, #19
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fcb9 	bl	8006b18 <ld_word>
 80081a6:	4603      	mov	r3, r0
 80081a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <find_volume+0x272>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	3330      	adds	r3, #48	@ 0x30
 80081b4:	3320      	adds	r3, #32
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fcc6 	bl	8006b48 <ld_dword>
 80081bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	3330      	adds	r3, #48	@ 0x30
 80081c2:	330e      	adds	r3, #14
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fca7 	bl	8006b18 <ld_word>
 80081ca:	4603      	mov	r3, r0
 80081cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <find_volume+0x28c>
 80081d4:	230d      	movs	r3, #13
 80081d6:	e0fa      	b.n	80083ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80081da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081dc:	4413      	add	r3, r2
 80081de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081e0:	8912      	ldrh	r2, [r2, #8]
 80081e2:	0912      	lsrs	r2, r2, #4
 80081e4:	b292      	uxth	r2, r2
 80081e6:	4413      	add	r3, r2
 80081e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80081ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d204      	bcs.n	80081fc <find_volume+0x2b0>
 80081f2:	230d      	movs	r3, #13
 80081f4:	e0eb      	b.n	80083ce <find_volume+0x482>
 80081f6:	bf00      	nop
 80081f8:	200404e8 	.word	0x200404e8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80081fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008204:	8952      	ldrh	r2, [r2, #10]
 8008206:	fbb3 f3f2 	udiv	r3, r3, r2
 800820a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <find_volume+0x2ca>
 8008212:	230d      	movs	r3, #13
 8008214:	e0db      	b.n	80083ce <find_volume+0x482>
		fmt = FS_FAT32;
 8008216:	2303      	movs	r3, #3
 8008218:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008222:	4293      	cmp	r3, r2
 8008224:	d802      	bhi.n	800822c <find_volume+0x2e0>
 8008226:	2302      	movs	r3, #2
 8008228:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008232:	4293      	cmp	r3, r2
 8008234:	d802      	bhi.n	800823c <find_volume+0x2f0>
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008246:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008248:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800824a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800824c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800824e:	441a      	add	r2, r3
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008254:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	441a      	add	r2, r3
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800825e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008262:	2b03      	cmp	r3, #3
 8008264:	d11e      	bne.n	80082a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008268:	3330      	adds	r3, #48	@ 0x30
 800826a:	332a      	adds	r3, #42	@ 0x2a
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fc53 	bl	8006b18 <ld_word>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <find_volume+0x330>
 8008278:	230d      	movs	r3, #13
 800827a:	e0a8      	b.n	80083ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	891b      	ldrh	r3, [r3, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <find_volume+0x33c>
 8008284:	230d      	movs	r3, #13
 8008286:	e0a2      	b.n	80083ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	3330      	adds	r3, #48	@ 0x30
 800828c:	332c      	adds	r3, #44	@ 0x2c
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fc5a 	bl	8006b48 <ld_dword>
 8008294:	4602      	mov	r2, r0
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082a2:	e01f      	b.n	80082e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a6:	891b      	ldrh	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <find_volume+0x364>
 80082ac:	230d      	movs	r3, #13
 80082ae:	e08e      	b.n	80083ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	6a1a      	ldr	r2, [r3, #32]
 80082b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082b6:	441a      	add	r2, r3
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d103      	bne.n	80082cc <find_volume+0x380>
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	e00a      	b.n	80082e2 <find_volume+0x396>
 80082cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ce:	695a      	ldr	r2, [r3, #20]
 80082d0:	4613      	mov	r3, r2
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	4413      	add	r3, r2
 80082d6:	085a      	lsrs	r2, r3, #1
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80082ee:	0a5b      	lsrs	r3, r3, #9
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d201      	bcs.n	80082f8 <find_volume+0x3ac>
 80082f4:	230d      	movs	r3, #13
 80082f6:	e06a      	b.n	80083ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	611a      	str	r2, [r3, #16]
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	2280      	movs	r2, #128	@ 0x80
 800830c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800830e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008312:	2b03      	cmp	r3, #3
 8008314:	d149      	bne.n	80083aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	3330      	adds	r3, #48	@ 0x30
 800831a:	3330      	adds	r3, #48	@ 0x30
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe fbfb 	bl	8006b18 <ld_word>
 8008322:	4603      	mov	r3, r0
 8008324:	2b01      	cmp	r3, #1
 8008326:	d140      	bne.n	80083aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832a:	3301      	adds	r3, #1
 800832c:	4619      	mov	r1, r3
 800832e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008330:	f7fe fea2 	bl	8007078 <move_window>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d137      	bne.n	80083aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	2200      	movs	r2, #0
 800833e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	3330      	adds	r3, #48	@ 0x30
 8008344:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fbe5 	bl	8006b18 <ld_word>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008356:	429a      	cmp	r2, r3
 8008358:	d127      	bne.n	80083aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	3330      	adds	r3, #48	@ 0x30
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fbf2 	bl	8006b48 <ld_dword>
 8008364:	4603      	mov	r3, r0
 8008366:	4a1c      	ldr	r2, [pc, #112]	@ (80083d8 <find_volume+0x48c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d11e      	bne.n	80083aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800836c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836e:	3330      	adds	r3, #48	@ 0x30
 8008370:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe fbe7 	bl	8006b48 <ld_dword>
 800837a:	4603      	mov	r3, r0
 800837c:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <find_volume+0x490>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d113      	bne.n	80083aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	3330      	adds	r3, #48	@ 0x30
 8008386:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fbdc 	bl	8006b48 <ld_dword>
 8008390:	4602      	mov	r2, r0
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008398:	3330      	adds	r3, #48	@ 0x30
 800839a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fbd2 	bl	8006b48 <ld_dword>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80083b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083b2:	4b0b      	ldr	r3, [pc, #44]	@ (80083e0 <find_volume+0x494>)
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	4b09      	ldr	r3, [pc, #36]	@ (80083e0 <find_volume+0x494>)
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	4b08      	ldr	r3, [pc, #32]	@ (80083e0 <find_volume+0x494>)
 80083c0:	881a      	ldrh	r2, [r3, #0]
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083c8:	f7fe fdee 	bl	8006fa8 <clear_lock>
#endif
	return FR_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3758      	adds	r7, #88	@ 0x58
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	41615252 	.word	0x41615252
 80083dc:	61417272 	.word	0x61417272
 80083e0:	200404ec 	.word	0x200404ec

080083e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80083ee:	2309      	movs	r3, #9
 80083f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01c      	beq.n	8008432 <validate+0x4e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d018      	beq.n	8008432 <validate+0x4e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d013      	beq.n	8008432 <validate+0x4e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	889a      	ldrh	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	88db      	ldrh	r3, [r3, #6]
 8008414:	429a      	cmp	r2, r3
 8008416:	d10c      	bne.n	8008432 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fadc 	bl	80069dc <disk_status>
 8008424:	4603      	mov	r3, r0
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <validate+0x4e>
			res = FR_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <validate+0x5a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	e000      	b.n	8008440 <validate+0x5c>
 800843e:	2300      	movs	r3, #0
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	6013      	str	r3, [r2, #0]
	return res;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008462:	f107 0310 	add.w	r3, r7, #16
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fcd5 	bl	8007e16 <get_ldnumber>
 800846c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	da01      	bge.n	8008478 <f_mount+0x28>
 8008474:	230b      	movs	r3, #11
 8008476:	e02b      	b.n	80084d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008478:	4a17      	ldr	r2, [pc, #92]	@ (80084d8 <f_mount+0x88>)
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008480:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008488:	69b8      	ldr	r0, [r7, #24]
 800848a:	f7fe fd8d 	bl	8006fa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	490d      	ldr	r1, [pc, #52]	@ (80084d8 <f_mount+0x88>)
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <f_mount+0x66>
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d001      	beq.n	80084ba <f_mount+0x6a>
 80084b6:	2300      	movs	r3, #0
 80084b8:	e00a      	b.n	80084d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084ba:	f107 010c 	add.w	r1, r7, #12
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	2200      	movs	r2, #0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fd41 	bl	8007f4c <find_volume>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3720      	adds	r7, #32
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	200404e8 	.word	0x200404e8

080084dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b098      	sub	sp, #96	@ 0x60
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <f_open+0x18>
 80084f0:	2309      	movs	r3, #9
 80084f2:	e1a9      	b.n	8008848 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	f107 0110 	add.w	r1, r7, #16
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff fd20 	bl	8007f4c <find_volume>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008512:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 818d 	bne.w	8008836 <f_open+0x35a>
		dj.obj.fs = fs;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff fc03 	bl	8007d34 <follow_path>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008534:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008538:	2b00      	cmp	r3, #0
 800853a:	d118      	bne.n	800856e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800853c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008540:	b25b      	sxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	da03      	bge.n	800854e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008546:	2306      	movs	r3, #6
 8008548:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800854c:	e00f      	b.n	800856e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf8c      	ite	hi
 8008554:	2301      	movhi	r3, #1
 8008556:	2300      	movls	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fbd8 	bl	8006d18 <chk_lock>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	f003 031c 	and.w	r3, r3, #28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d07f      	beq.n	8008678 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800857c:	2b00      	cmp	r3, #0
 800857e:	d017      	beq.n	80085b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008584:	2b04      	cmp	r3, #4
 8008586:	d10e      	bne.n	80085a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008588:	f7fe fc22 	bl	8006dd0 <enq_lock>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d006      	beq.n	80085a0 <f_open+0xc4>
 8008592:	f107 0314 	add.w	r3, r7, #20
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fb06 	bl	8007ba8 <dir_register>
 800859c:	4603      	mov	r3, r0
 800859e:	e000      	b.n	80085a2 <f_open+0xc6>
 80085a0:	2312      	movs	r3, #18
 80085a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	f043 0308 	orr.w	r3, r3, #8
 80085ac:	71fb      	strb	r3, [r7, #7]
 80085ae:	e010      	b.n	80085d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085b0:	7ebb      	ldrb	r3, [r7, #26]
 80085b2:	f003 0311 	and.w	r3, r3, #17
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <f_open+0xe6>
					res = FR_DENIED;
 80085ba:	2307      	movs	r3, #7
 80085bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80085c0:	e007      	b.n	80085d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <f_open+0xf6>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d168      	bne.n	80086ac <f_open+0x1d0>
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d063      	beq.n	80086ac <f_open+0x1d0>
				dw = GET_FATTIME();
 80085e4:	f7fd fcbe 	bl	8005f64 <get_fattime>
 80085e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80085ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ec:	330e      	adds	r3, #14
 80085ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fae7 	bl	8006bc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	3316      	adds	r3, #22
 80085fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fae1 	bl	8006bc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008604:	330b      	adds	r3, #11
 8008606:	2220      	movs	r2, #32
 8008608:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fa35 	bl	8007a80 <ld_clust>
 8008616:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800861c:	2200      	movs	r2, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f7ff fa4d 	bl	8007abe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008626:	331c      	adds	r3, #28
 8008628:	2100      	movs	r1, #0
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe faca 	bl	8006bc4 <st_dword>
					fs->wflag = 1;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2201      	movs	r2, #1
 8008634:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d037      	beq.n	80086ac <f_open+0x1d0>
						dw = fs->winsect;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008642:	f107 0314 	add.w	r3, r7, #20
 8008646:	2200      	movs	r2, #0
 8008648:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe ff60 	bl	8007510 <remove_chain>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008656:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800865a:	2b00      	cmp	r3, #0
 800865c:	d126      	bne.n	80086ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd08 	bl	8007078 <move_window>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008672:	3a01      	subs	r2, #1
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e019      	b.n	80086ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800867c:	2b00      	cmp	r3, #0
 800867e:	d115      	bne.n	80086ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008680:	7ebb      	ldrb	r3, [r7, #26]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <f_open+0x1b6>
					res = FR_NO_FILE;
 800868a:	2304      	movs	r3, #4
 800868c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008690:	e00c      	b.n	80086ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <f_open+0x1d0>
 800869c:	7ebb      	ldrb	r3, [r7, #26]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <f_open+0x1d0>
						res = FR_DENIED;
 80086a6:	2307      	movs	r3, #7
 80086a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80086ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d126      	bne.n	8008702 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80086ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	bf8c      	ite	hi
 80086da:	2301      	movhi	r3, #1
 80086dc:	2300      	movls	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fb93 	bl	8006e14 <inc_lock>
 80086ee:	4602      	mov	r2, r0
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <f_open+0x226>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 8095 	bne.w	8008836 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff f9b4 	bl	8007a80 <ld_clust>
 8008718:	4602      	mov	r2, r0
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	331c      	adds	r3, #28
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fa10 	bl	8006b48 <ld_dword>
 8008728:	4602      	mov	r2, r0
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	88da      	ldrh	r2, [r3, #6]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	79fa      	ldrb	r2, [r7, #7]
 8008746:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3330      	adds	r3, #48	@ 0x30
 800875e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fa7a 	bl	8006c5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d060      	beq.n	8008836 <f_open+0x35a>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d05c      	beq.n	8008836 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	895b      	ldrh	r3, [r3, #10]
 8008788:	025b      	lsls	r3, r3, #9
 800878a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	657b      	str	r3, [r7, #84]	@ 0x54
 8008798:	e016      	b.n	80087c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd25 	bl	80071ee <get_fat>
 80087a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80087a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d802      	bhi.n	80087b2 <f_open+0x2d6>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b8:	d102      	bne.n	80087c0 <f_open+0x2e4>
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80087c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <f_open+0x2fc>
 80087d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d8e0      	bhi.n	800879a <f_open+0x2be>
				}
				fp->clust = clst;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d127      	bne.n	8008836 <f_open+0x35a>
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d022      	beq.n	8008836 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fcdb 	bl	80071b0 <clust2sect>
 80087fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80087fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <f_open+0x32e>
						res = FR_INT_ERR;
 8008802:	2302      	movs	r3, #2
 8008804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008808:	e015      	b.n	8008836 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800880a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800880c:	0a5a      	lsrs	r2, r3, #9
 800880e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	7858      	ldrb	r0, [r3, #1]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	2301      	movs	r3, #1
 8008826:	f7fe f919 	bl	8006a5c <disk_read>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <f_open+0x35a>
 8008830:	2301      	movs	r3, #1
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <f_open+0x368>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008844:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008848:	4618      	mov	r0, r3
 800884a:	3760      	adds	r7, #96	@ 0x60
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	@ 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f107 0210 	add.w	r2, r7, #16
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fdb7 	bl	80083e4 <validate>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800887c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008880:	2b00      	cmp	r3, #0
 8008882:	d107      	bne.n	8008894 <f_write+0x44>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	7d5b      	ldrb	r3, [r3, #21]
 8008888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800888c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <f_write+0x4a>
 8008894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008898:	e14b      	b.n	8008b32 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	7d1b      	ldrb	r3, [r3, #20]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <f_write+0x5a>
 80088a6:	2307      	movs	r3, #7
 80088a8:	e143      	b.n	8008b32 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	441a      	add	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f080 812d 	bcs.w	8008b16 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088c4:	e127      	b.n	8008b16 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f040 80e3 	bne.w	8008a9a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	0a5b      	lsrs	r3, r3, #9
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	8952      	ldrh	r2, [r2, #10]
 80088de:	3a01      	subs	r2, #1
 80088e0:	4013      	ands	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d143      	bne.n	8008972 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10c      	bne.n	800890c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d11a      	bne.n	8008934 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fe69 	bl	80075da <create_chain>
 8008908:	62b8      	str	r0, [r7, #40]	@ 0x28
 800890a:	e013      	b.n	8008934 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	4619      	mov	r1, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7fe fef5 	bl	800770a <clmt_clust>
 8008920:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008922:	e007      	b.n	8008934 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fe fe54 	bl	80075da <create_chain>
 8008932:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80f2 	beq.w	8008b20 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	2b01      	cmp	r3, #1
 8008940:	d104      	bne.n	800894c <f_write+0xfc>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2202      	movs	r2, #2
 8008946:	755a      	strb	r2, [r3, #21]
 8008948:	2302      	movs	r3, #2
 800894a:	e0f2      	b.n	8008b32 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d104      	bne.n	800895e <f_write+0x10e>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	755a      	strb	r2, [r3, #21]
 800895a:	2301      	movs	r3, #1
 800895c:	e0e9      	b.n	8008b32 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008962:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <f_write+0x122>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008970:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	7d1b      	ldrb	r3, [r3, #20]
 8008976:	b25b      	sxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	da18      	bge.n	80089ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	7858      	ldrb	r0, [r3, #1]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1a      	ldr	r2, [r3, #32]
 800898a:	2301      	movs	r3, #1
 800898c:	f7fe f886 	bl	8006a9c <disk_write>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <f_write+0x150>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2201      	movs	r2, #1
 800899a:	755a      	strb	r2, [r3, #21]
 800899c:	2301      	movs	r3, #1
 800899e:	e0c8      	b.n	8008b32 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	7d1b      	ldrb	r3, [r3, #20]
 80089a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f7fe fbfa 	bl	80071b0 <clust2sect>
 80089bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <f_write+0x17e>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2202      	movs	r2, #2
 80089c8:	755a      	strb	r2, [r3, #21]
 80089ca:	2302      	movs	r3, #2
 80089cc:	e0b1      	b.n	8008b32 <f_write+0x2e2>
			sect += csect;
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	4413      	add	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	0a5b      	lsrs	r3, r3, #9
 80089da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03c      	beq.n	8008a5c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	4413      	add	r3, r2
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	8952      	ldrh	r2, [r2, #10]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d905      	bls.n	80089fc <f_write+0x1ac>
					cc = fs->csize - csect;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	895b      	ldrh	r3, [r3, #10]
 80089f4:	461a      	mov	r2, r3
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	7858      	ldrb	r0, [r3, #1]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	f7fe f849 	bl	8006a9c <disk_write>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <f_write+0x1ca>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	755a      	strb	r2, [r3, #21]
 8008a16:	2301      	movs	r3, #1
 8008a18:	e08b      	b.n	8008b32 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d915      	bls.n	8008a54 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a1a      	ldr	r2, [r3, #32]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	025b      	lsls	r3, r3, #9
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fe f8eb 	bl	8006c1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	7d1b      	ldrb	r3, [r3, #20]
 8008a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	025b      	lsls	r3, r3, #9
 8008a58:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008a5a:	e03f      	b.n	8008adc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d016      	beq.n	8008a94 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699a      	ldr	r2, [r3, #24]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d210      	bcs.n	8008a94 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	7858      	ldrb	r0, [r3, #1]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	f7fd ffec 	bl	8006a5c <disk_read>
 8008a84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d004      	beq.n	8008a94 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	755a      	strb	r2, [r3, #21]
 8008a90:	2301      	movs	r3, #1
 8008a92:	e04e      	b.n	8008b32 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008aa6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d901      	bls.n	8008ab4 <f_write+0x264>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	4413      	add	r3, r2
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac6:	69f9      	ldr	r1, [r7, #28]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe f8a7 	bl	8006c1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	7d1b      	ldrb	r3, [r3, #20]
 8008ad2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae0:	4413      	add	r3, r2
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	699a      	ldr	r2, [r3, #24]
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	441a      	add	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	619a      	str	r2, [r3, #24]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	bf38      	it	cc
 8008afc:	461a      	movcc	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	60da      	str	r2, [r3, #12]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	441a      	add	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f47f aed4 	bne.w	80088c6 <f_write+0x76>
 8008b1e:	e000      	b.n	8008b22 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	7d1b      	ldrb	r3, [r3, #20]
 8008b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3730      	adds	r7, #48	@ 0x30
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b086      	sub	sp, #24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f107 0208 	add.w	r2, r7, #8
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fc4a 	bl	80083e4 <validate>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d168      	bne.n	8008c2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	7d1b      	ldrb	r3, [r3, #20]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d062      	beq.n	8008c2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	b25b      	sxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da15      	bge.n	8008b9c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	7858      	ldrb	r0, [r3, #1]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f7fd ff8c 	bl	8006a9c <disk_write>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <f_sync+0x54>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e04f      	b.n	8008c2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	7d1b      	ldrb	r3, [r3, #20]
 8008b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008b9c:	f7fd f9e2 	bl	8005f64 <get_fattime>
 8008ba0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fe fa64 	bl	8007078 <move_window>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d138      	bne.n	8008c2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	330b      	adds	r3, #11
 8008bc4:	781a      	ldrb	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	330b      	adds	r3, #11
 8008bca:	f042 0220 	orr.w	r2, r2, #32
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68f9      	ldr	r1, [r7, #12]
 8008bde:	f7fe ff6e 	bl	8007abe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f103 021c 	add.w	r2, r3, #28
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	4619      	mov	r1, r3
 8008bee:	4610      	mov	r0, r2
 8008bf0:	f7fd ffe8 	bl	8006bc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3316      	adds	r3, #22
 8008bf8:	6939      	ldr	r1, [r7, #16]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd ffe2 	bl	8006bc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3312      	adds	r3, #18
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fd ffc1 	bl	8006b8e <st_word>
					fs->wflag = 1;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fa5d 	bl	80070d4 <sync_fs>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff7b 	bl	8008b3a <f_sync>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d118      	bne.n	8008c80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f107 0208 	add.w	r2, r7, #8
 8008c54:	4611      	mov	r1, r2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fbc4 	bl	80083e4 <validate>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10c      	bne.n	8008c80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe f960 	bl	8006f30 <dec_lock>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4613      	mov	r3, r2
 8008c98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008ca4:	7a5b      	ldrb	r3, [r3, #9]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d131      	bne.n	8008d10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cac:	4b1c      	ldr	r3, [pc, #112]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cae:	7a5b      	ldrb	r3, [r3, #9]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008cba:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cbc:	7a5b      	ldrb	r3, [r3, #9]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4a17      	ldr	r2, [pc, #92]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008cca:	4b15      	ldr	r3, [pc, #84]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008ccc:	7a5b      	ldrb	r3, [r3, #9]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4b13      	ldr	r3, [pc, #76]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	79fa      	ldrb	r2, [r7, #7]
 8008cd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008cda:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008cdc:	7a5b      	ldrb	r3, [r3, #9]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	b2d1      	uxtb	r1, r2
 8008ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8008d20 <FATFS_LinkDriverEx+0x94>)
 8008ce6:	7251      	strb	r1, [r2, #9]
 8008ce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
 8008cec:	3330      	adds	r3, #48	@ 0x30
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	223a      	movs	r2, #58	@ 0x3a
 8008cfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3302      	adds	r3, #2
 8008d00:	222f      	movs	r2, #47	@ 0x2f
 8008d02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3303      	adds	r3, #3
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20040510 	.word	0x20040510

08008d24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff ffaa 	bl	8008c8c <FATFS_LinkDriverEx>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <rand>:
 8008d44:	4b16      	ldr	r3, [pc, #88]	@ (8008da0 <rand+0x5c>)
 8008d46:	b510      	push	{r4, lr}
 8008d48:	681c      	ldr	r4, [r3, #0]
 8008d4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008d4c:	b9b3      	cbnz	r3, 8008d7c <rand+0x38>
 8008d4e:	2018      	movs	r0, #24
 8008d50:	f000 fa40 	bl	80091d4 <malloc>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6320      	str	r0, [r4, #48]	@ 0x30
 8008d58:	b920      	cbnz	r0, 8008d64 <rand+0x20>
 8008d5a:	4b12      	ldr	r3, [pc, #72]	@ (8008da4 <rand+0x60>)
 8008d5c:	4812      	ldr	r0, [pc, #72]	@ (8008da8 <rand+0x64>)
 8008d5e:	2152      	movs	r1, #82	@ 0x52
 8008d60:	f000 f9d0 	bl	8009104 <__assert_func>
 8008d64:	4911      	ldr	r1, [pc, #68]	@ (8008dac <rand+0x68>)
 8008d66:	4b12      	ldr	r3, [pc, #72]	@ (8008db0 <rand+0x6c>)
 8008d68:	e9c0 1300 	strd	r1, r3, [r0]
 8008d6c:	4b11      	ldr	r3, [pc, #68]	@ (8008db4 <rand+0x70>)
 8008d6e:	6083      	str	r3, [r0, #8]
 8008d70:	230b      	movs	r3, #11
 8008d72:	8183      	strh	r3, [r0, #12]
 8008d74:	2100      	movs	r1, #0
 8008d76:	2001      	movs	r0, #1
 8008d78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d7e:	480e      	ldr	r0, [pc, #56]	@ (8008db8 <rand+0x74>)
 8008d80:	690b      	ldr	r3, [r1, #16]
 8008d82:	694c      	ldr	r4, [r1, #20]
 8008d84:	4a0d      	ldr	r2, [pc, #52]	@ (8008dbc <rand+0x78>)
 8008d86:	4358      	muls	r0, r3
 8008d88:	fb02 0004 	mla	r0, r2, r4, r0
 8008d8c:	fba3 3202 	umull	r3, r2, r3, r2
 8008d90:	3301      	adds	r3, #1
 8008d92:	eb40 0002 	adc.w	r0, r0, r2
 8008d96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008d9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008d9e:	bd10      	pop	{r4, pc}
 8008da0:	20040030 	.word	0x20040030
 8008da4:	0800a214 	.word	0x0800a214
 8008da8:	0800a22b 	.word	0x0800a22b
 8008dac:	abcd330e 	.word	0xabcd330e
 8008db0:	e66d1234 	.word	0xe66d1234
 8008db4:	0005deec 	.word	0x0005deec
 8008db8:	5851f42d 	.word	0x5851f42d
 8008dbc:	4c957f2d 	.word	0x4c957f2d

08008dc0 <std>:
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dce:	6083      	str	r3, [r0, #8]
 8008dd0:	8181      	strh	r1, [r0, #12]
 8008dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dd4:	81c2      	strh	r2, [r0, #14]
 8008dd6:	6183      	str	r3, [r0, #24]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	2208      	movs	r2, #8
 8008ddc:	305c      	adds	r0, #92	@ 0x5c
 8008dde:	f000 f914 	bl	800900a <memset>
 8008de2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <std+0x58>)
 8008de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008de6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <std+0x5c>)
 8008de8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dea:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <std+0x60>)
 8008dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dee:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <std+0x64>)
 8008df0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008df2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e28 <std+0x68>)
 8008df4:	6224      	str	r4, [r4, #32]
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d006      	beq.n	8008e08 <std+0x48>
 8008dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dfe:	4294      	cmp	r4, r2
 8008e00:	d002      	beq.n	8008e08 <std+0x48>
 8008e02:	33d0      	adds	r3, #208	@ 0xd0
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d105      	bne.n	8008e14 <std+0x54>
 8008e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	f000 b974 	b.w	80090fc <__retarget_lock_init_recursive>
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	bf00      	nop
 8008e18:	08008f85 	.word	0x08008f85
 8008e1c:	08008fa7 	.word	0x08008fa7
 8008e20:	08008fdf 	.word	0x08008fdf
 8008e24:	08009003 	.word	0x08009003
 8008e28:	2004051c 	.word	0x2004051c

08008e2c <stdio_exit_handler>:
 8008e2c:	4a02      	ldr	r2, [pc, #8]	@ (8008e38 <stdio_exit_handler+0xc>)
 8008e2e:	4903      	ldr	r1, [pc, #12]	@ (8008e3c <stdio_exit_handler+0x10>)
 8008e30:	4803      	ldr	r0, [pc, #12]	@ (8008e40 <stdio_exit_handler+0x14>)
 8008e32:	f000 b869 	b.w	8008f08 <_fwalk_sglue>
 8008e36:	bf00      	nop
 8008e38:	20040024 	.word	0x20040024
 8008e3c:	08009a15 	.word	0x08009a15
 8008e40:	20040034 	.word	0x20040034

08008e44 <cleanup_stdio>:
 8008e44:	6841      	ldr	r1, [r0, #4]
 8008e46:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <cleanup_stdio+0x34>)
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	d001      	beq.n	8008e54 <cleanup_stdio+0x10>
 8008e50:	f000 fde0 	bl	8009a14 <_fflush_r>
 8008e54:	68a1      	ldr	r1, [r4, #8]
 8008e56:	4b09      	ldr	r3, [pc, #36]	@ (8008e7c <cleanup_stdio+0x38>)
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	d002      	beq.n	8008e62 <cleanup_stdio+0x1e>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 fdd9 	bl	8009a14 <_fflush_r>
 8008e62:	68e1      	ldr	r1, [r4, #12]
 8008e64:	4b06      	ldr	r3, [pc, #24]	@ (8008e80 <cleanup_stdio+0x3c>)
 8008e66:	4299      	cmp	r1, r3
 8008e68:	d004      	beq.n	8008e74 <cleanup_stdio+0x30>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e70:	f000 bdd0 	b.w	8009a14 <_fflush_r>
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	bf00      	nop
 8008e78:	2004051c 	.word	0x2004051c
 8008e7c:	20040584 	.word	0x20040584
 8008e80:	200405ec 	.word	0x200405ec

08008e84 <global_stdio_init.part.0>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb4 <global_stdio_init.part.0+0x30>)
 8008e88:	4c0b      	ldr	r4, [pc, #44]	@ (8008eb8 <global_stdio_init.part.0+0x34>)
 8008e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008ebc <global_stdio_init.part.0+0x38>)
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	2200      	movs	r2, #0
 8008e92:	2104      	movs	r1, #4
 8008e94:	f7ff ff94 	bl	8008dc0 <std>
 8008e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	2109      	movs	r1, #9
 8008ea0:	f7ff ff8e 	bl	8008dc0 <std>
 8008ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eae:	2112      	movs	r1, #18
 8008eb0:	f7ff bf86 	b.w	8008dc0 <std>
 8008eb4:	20040654 	.word	0x20040654
 8008eb8:	2004051c 	.word	0x2004051c
 8008ebc:	08008e2d 	.word	0x08008e2d

08008ec0 <__sfp_lock_acquire>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	@ (8008ec8 <__sfp_lock_acquire+0x8>)
 8008ec2:	f000 b91c 	b.w	80090fe <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	2004065d 	.word	0x2004065d

08008ecc <__sfp_lock_release>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	@ (8008ed4 <__sfp_lock_release+0x8>)
 8008ece:	f000 b917 	b.w	8009100 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	2004065d 	.word	0x2004065d

08008ed8 <__sinit>:
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4604      	mov	r4, r0
 8008edc:	f7ff fff0 	bl	8008ec0 <__sfp_lock_acquire>
 8008ee0:	6a23      	ldr	r3, [r4, #32]
 8008ee2:	b11b      	cbz	r3, 8008eec <__sinit+0x14>
 8008ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee8:	f7ff bff0 	b.w	8008ecc <__sfp_lock_release>
 8008eec:	4b04      	ldr	r3, [pc, #16]	@ (8008f00 <__sinit+0x28>)
 8008eee:	6223      	str	r3, [r4, #32]
 8008ef0:	4b04      	ldr	r3, [pc, #16]	@ (8008f04 <__sinit+0x2c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f5      	bne.n	8008ee4 <__sinit+0xc>
 8008ef8:	f7ff ffc4 	bl	8008e84 <global_stdio_init.part.0>
 8008efc:	e7f2      	b.n	8008ee4 <__sinit+0xc>
 8008efe:	bf00      	nop
 8008f00:	08008e45 	.word	0x08008e45
 8008f04:	20040654 	.word	0x20040654

08008f08 <_fwalk_sglue>:
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	4688      	mov	r8, r1
 8008f10:	4614      	mov	r4, r2
 8008f12:	2600      	movs	r6, #0
 8008f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f18:	f1b9 0901 	subs.w	r9, r9, #1
 8008f1c:	d505      	bpl.n	8008f2a <_fwalk_sglue+0x22>
 8008f1e:	6824      	ldr	r4, [r4, #0]
 8008f20:	2c00      	cmp	r4, #0
 8008f22:	d1f7      	bne.n	8008f14 <_fwalk_sglue+0xc>
 8008f24:	4630      	mov	r0, r6
 8008f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d907      	bls.n	8008f40 <_fwalk_sglue+0x38>
 8008f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f34:	3301      	adds	r3, #1
 8008f36:	d003      	beq.n	8008f40 <_fwalk_sglue+0x38>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	47c0      	blx	r8
 8008f3e:	4306      	orrs	r6, r0
 8008f40:	3568      	adds	r5, #104	@ 0x68
 8008f42:	e7e9      	b.n	8008f18 <_fwalk_sglue+0x10>

08008f44 <siprintf>:
 8008f44:	b40e      	push	{r1, r2, r3}
 8008f46:	b500      	push	{lr}
 8008f48:	b09c      	sub	sp, #112	@ 0x70
 8008f4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	9006      	str	r0, [sp, #24]
 8008f50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f54:	4809      	ldr	r0, [pc, #36]	@ (8008f7c <siprintf+0x38>)
 8008f56:	9107      	str	r1, [sp, #28]
 8008f58:	9104      	str	r1, [sp, #16]
 8008f5a:	4909      	ldr	r1, [pc, #36]	@ (8008f80 <siprintf+0x3c>)
 8008f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f60:	9105      	str	r1, [sp, #20]
 8008f62:	6800      	ldr	r0, [r0, #0]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	a902      	add	r1, sp, #8
 8008f68:	f000 fa46 	bl	80093f8 <_svfiprintf_r>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	b01c      	add	sp, #112	@ 0x70
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b003      	add	sp, #12
 8008f7a:	4770      	bx	lr
 8008f7c:	20040030 	.word	0x20040030
 8008f80:	ffff0208 	.word	0xffff0208

08008f84 <__sread>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	f000 f868 	bl	8009060 <_read_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	bfab      	itete	ge
 8008f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f96:	89a3      	ldrhlt	r3, [r4, #12]
 8008f98:	181b      	addge	r3, r3, r0
 8008f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f9e:	bfac      	ite	ge
 8008fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fa2:	81a3      	strhlt	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__swrite>:
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	461f      	mov	r7, r3
 8008fac:	898b      	ldrh	r3, [r1, #12]
 8008fae:	05db      	lsls	r3, r3, #23
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	d505      	bpl.n	8008fc4 <__swrite+0x1e>
 8008fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f000 f83c 	bl	800903c <_lseek_r>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f000 b853 	b.w	8009084 <_write_r>

08008fde <__sseek>:
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe6:	f000 f829 	bl	800903c <_lseek_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	bf15      	itete	ne
 8008ff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ffa:	81a3      	strheq	r3, [r4, #12]
 8008ffc:	bf18      	it	ne
 8008ffe:	81a3      	strhne	r3, [r4, #12]
 8009000:	bd10      	pop	{r4, pc}

08009002 <__sclose>:
 8009002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009006:	f000 b809 	b.w	800901c <_close_r>

0800900a <memset>:
 800900a:	4402      	add	r2, r0
 800900c:	4603      	mov	r3, r0
 800900e:	4293      	cmp	r3, r2
 8009010:	d100      	bne.n	8009014 <memset+0xa>
 8009012:	4770      	bx	lr
 8009014:	f803 1b01 	strb.w	r1, [r3], #1
 8009018:	e7f9      	b.n	800900e <memset+0x4>
	...

0800901c <_close_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	@ (8009038 <_close_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 f9ab 	bl	8001382 <_close>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_close_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_close_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20040658 	.word	0x20040658

0800903c <_lseek_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d07      	ldr	r5, [pc, #28]	@ (800905c <_lseek_r+0x20>)
 8009040:	4604      	mov	r4, r0
 8009042:	4608      	mov	r0, r1
 8009044:	4611      	mov	r1, r2
 8009046:	2200      	movs	r2, #0
 8009048:	602a      	str	r2, [r5, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f7f8 f9c0 	bl	80013d0 <_lseek>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_lseek_r+0x1e>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_lseek_r+0x1e>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20040658 	.word	0x20040658

08009060 <_read_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	@ (8009080 <_read_r+0x20>)
 8009064:	4604      	mov	r4, r0
 8009066:	4608      	mov	r0, r1
 8009068:	4611      	mov	r1, r2
 800906a:	2200      	movs	r2, #0
 800906c:	602a      	str	r2, [r5, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	f7f8 f94e 	bl	8001310 <_read>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_read_r+0x1e>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_read_r+0x1e>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20040658 	.word	0x20040658

08009084 <_write_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	@ (80090a4 <_write_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f8 f959 	bl	800134a <_write>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_write_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_write_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20040658 	.word	0x20040658

080090a8 <__errno>:
 80090a8:	4b01      	ldr	r3, [pc, #4]	@ (80090b0 <__errno+0x8>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20040030 	.word	0x20040030

080090b4 <__libc_init_array>:
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	4d0d      	ldr	r5, [pc, #52]	@ (80090ec <__libc_init_array+0x38>)
 80090b8:	4c0d      	ldr	r4, [pc, #52]	@ (80090f0 <__libc_init_array+0x3c>)
 80090ba:	1b64      	subs	r4, r4, r5
 80090bc:	10a4      	asrs	r4, r4, #2
 80090be:	2600      	movs	r6, #0
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	d109      	bne.n	80090d8 <__libc_init_array+0x24>
 80090c4:	4d0b      	ldr	r5, [pc, #44]	@ (80090f4 <__libc_init_array+0x40>)
 80090c6:	4c0c      	ldr	r4, [pc, #48]	@ (80090f8 <__libc_init_array+0x44>)
 80090c8:	f000 fff0 	bl	800a0ac <_init>
 80090cc:	1b64      	subs	r4, r4, r5
 80090ce:	10a4      	asrs	r4, r4, #2
 80090d0:	2600      	movs	r6, #0
 80090d2:	42a6      	cmp	r6, r4
 80090d4:	d105      	bne.n	80090e2 <__libc_init_array+0x2e>
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090dc:	4798      	blx	r3
 80090de:	3601      	adds	r6, #1
 80090e0:	e7ee      	b.n	80090c0 <__libc_init_array+0xc>
 80090e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e6:	4798      	blx	r3
 80090e8:	3601      	adds	r6, #1
 80090ea:	e7f2      	b.n	80090d2 <__libc_init_array+0x1e>
 80090ec:	0800a2fc 	.word	0x0800a2fc
 80090f0:	0800a2fc 	.word	0x0800a2fc
 80090f4:	0800a2fc 	.word	0x0800a2fc
 80090f8:	0800a300 	.word	0x0800a300

080090fc <__retarget_lock_init_recursive>:
 80090fc:	4770      	bx	lr

080090fe <__retarget_lock_acquire_recursive>:
 80090fe:	4770      	bx	lr

08009100 <__retarget_lock_release_recursive>:
 8009100:	4770      	bx	lr
	...

08009104 <__assert_func>:
 8009104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009106:	4614      	mov	r4, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <__assert_func+0x2c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4605      	mov	r5, r0
 8009110:	68d8      	ldr	r0, [r3, #12]
 8009112:	b954      	cbnz	r4, 800912a <__assert_func+0x26>
 8009114:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <__assert_func+0x30>)
 8009116:	461c      	mov	r4, r3
 8009118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800911c:	9100      	str	r1, [sp, #0]
 800911e:	462b      	mov	r3, r5
 8009120:	4905      	ldr	r1, [pc, #20]	@ (8009138 <__assert_func+0x34>)
 8009122:	f000 fc9f 	bl	8009a64 <fiprintf>
 8009126:	f000 fce7 	bl	8009af8 <abort>
 800912a:	4b04      	ldr	r3, [pc, #16]	@ (800913c <__assert_func+0x38>)
 800912c:	e7f4      	b.n	8009118 <__assert_func+0x14>
 800912e:	bf00      	nop
 8009130:	20040030 	.word	0x20040030
 8009134:	0800a2be 	.word	0x0800a2be
 8009138:	0800a290 	.word	0x0800a290
 800913c:	0800a283 	.word	0x0800a283

08009140 <_free_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	d041      	beq.n	80091cc <_free_r+0x8c>
 8009148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914c:	1f0c      	subs	r4, r1, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	18e4      	addlt	r4, r4, r3
 8009154:	f000 f8e8 	bl	8009328 <__malloc_lock>
 8009158:	4a1d      	ldr	r2, [pc, #116]	@ (80091d0 <_free_r+0x90>)
 800915a:	6813      	ldr	r3, [r2, #0]
 800915c:	b933      	cbnz	r3, 800916c <_free_r+0x2c>
 800915e:	6063      	str	r3, [r4, #4]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009168:	f000 b8e4 	b.w	8009334 <__malloc_unlock>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d908      	bls.n	8009182 <_free_r+0x42>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	1821      	adds	r1, r4, r0
 8009174:	428b      	cmp	r3, r1
 8009176:	bf01      	itttt	eq
 8009178:	6819      	ldreq	r1, [r3, #0]
 800917a:	685b      	ldreq	r3, [r3, #4]
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	e7ed      	b.n	800915e <_free_r+0x1e>
 8009182:	461a      	mov	r2, r3
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <_free_r+0x4c>
 8009188:	42a3      	cmp	r3, r4
 800918a:	d9fa      	bls.n	8009182 <_free_r+0x42>
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	1850      	adds	r0, r2, r1
 8009190:	42a0      	cmp	r0, r4
 8009192:	d10b      	bne.n	80091ac <_free_r+0x6c>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	4401      	add	r1, r0
 8009198:	1850      	adds	r0, r2, r1
 800919a:	4283      	cmp	r3, r0
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	d1e0      	bne.n	8009162 <_free_r+0x22>
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	4408      	add	r0, r1
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	e7da      	b.n	8009162 <_free_r+0x22>
 80091ac:	d902      	bls.n	80091b4 <_free_r+0x74>
 80091ae:	230c      	movs	r3, #12
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	e7d6      	b.n	8009162 <_free_r+0x22>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	1821      	adds	r1, r4, r0
 80091b8:	428b      	cmp	r3, r1
 80091ba:	bf04      	itt	eq
 80091bc:	6819      	ldreq	r1, [r3, #0]
 80091be:	685b      	ldreq	r3, [r3, #4]
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	bf04      	itt	eq
 80091c4:	1809      	addeq	r1, r1, r0
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	6054      	str	r4, [r2, #4]
 80091ca:	e7ca      	b.n	8009162 <_free_r+0x22>
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20040664 	.word	0x20040664

080091d4 <malloc>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <malloc+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f000 b825 	b.w	8009228 <_malloc_r>
 80091de:	bf00      	nop
 80091e0:	20040030 	.word	0x20040030

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009224 <sbrk_aligned+0x40>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f000 fc64 	bl	8009abc <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 fc5f 	bl	8009abc <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d103      	bne.n	800920a <sbrk_aligned+0x26>
 8009202:	f04f 34ff 	mov.w	r4, #4294967295
 8009206:	4620      	mov	r0, r4
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	1cc4      	adds	r4, r0, #3
 800920c:	f024 0403 	bic.w	r4, r4, #3
 8009210:	42a0      	cmp	r0, r4
 8009212:	d0f8      	beq.n	8009206 <sbrk_aligned+0x22>
 8009214:	1a21      	subs	r1, r4, r0
 8009216:	4628      	mov	r0, r5
 8009218:	f000 fc50 	bl	8009abc <_sbrk_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d1f2      	bne.n	8009206 <sbrk_aligned+0x22>
 8009220:	e7ef      	b.n	8009202 <sbrk_aligned+0x1e>
 8009222:	bf00      	nop
 8009224:	20040660 	.word	0x20040660

08009228 <_malloc_r>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4606      	mov	r6, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d904      	bls.n	800924e <_malloc_r+0x26>
 8009244:	230c      	movs	r3, #12
 8009246:	6033      	str	r3, [r6, #0]
 8009248:	2000      	movs	r0, #0
 800924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009324 <_malloc_r+0xfc>
 8009252:	f000 f869 	bl	8009328 <__malloc_lock>
 8009256:	f8d8 3000 	ldr.w	r3, [r8]
 800925a:	461c      	mov	r4, r3
 800925c:	bb44      	cbnz	r4, 80092b0 <_malloc_r+0x88>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ffbf 	bl	80091e4 <sbrk_aligned>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	4604      	mov	r4, r0
 800926a:	d158      	bne.n	800931e <_malloc_r+0xf6>
 800926c:	f8d8 4000 	ldr.w	r4, [r8]
 8009270:	4627      	mov	r7, r4
 8009272:	2f00      	cmp	r7, #0
 8009274:	d143      	bne.n	80092fe <_malloc_r+0xd6>
 8009276:	2c00      	cmp	r4, #0
 8009278:	d04b      	beq.n	8009312 <_malloc_r+0xea>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	4639      	mov	r1, r7
 800927e:	4630      	mov	r0, r6
 8009280:	eb04 0903 	add.w	r9, r4, r3
 8009284:	f000 fc1a 	bl	8009abc <_sbrk_r>
 8009288:	4581      	cmp	r9, r0
 800928a:	d142      	bne.n	8009312 <_malloc_r+0xea>
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	1a6d      	subs	r5, r5, r1
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7ff ffa6 	bl	80091e4 <sbrk_aligned>
 8009298:	3001      	adds	r0, #1
 800929a:	d03a      	beq.n	8009312 <_malloc_r+0xea>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	442b      	add	r3, r5
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	f8d8 3000 	ldr.w	r3, [r8]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	bb62      	cbnz	r2, 8009304 <_malloc_r+0xdc>
 80092aa:	f8c8 7000 	str.w	r7, [r8]
 80092ae:	e00f      	b.n	80092d0 <_malloc_r+0xa8>
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	1b52      	subs	r2, r2, r5
 80092b4:	d420      	bmi.n	80092f8 <_malloc_r+0xd0>
 80092b6:	2a0b      	cmp	r2, #11
 80092b8:	d917      	bls.n	80092ea <_malloc_r+0xc2>
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	42a3      	cmp	r3, r4
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	bf18      	it	ne
 80092c2:	6059      	strne	r1, [r3, #4]
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	bf08      	it	eq
 80092c8:	f8c8 1000 	streq.w	r1, [r8]
 80092cc:	5162      	str	r2, [r4, r5]
 80092ce:	604b      	str	r3, [r1, #4]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f82f 	bl	8009334 <__malloc_unlock>
 80092d6:	f104 000b 	add.w	r0, r4, #11
 80092da:	1d23      	adds	r3, r4, #4
 80092dc:	f020 0007 	bic.w	r0, r0, #7
 80092e0:	1ac2      	subs	r2, r0, r3
 80092e2:	bf1c      	itt	ne
 80092e4:	1a1b      	subne	r3, r3, r0
 80092e6:	50a3      	strne	r3, [r4, r2]
 80092e8:	e7af      	b.n	800924a <_malloc_r+0x22>
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	bf0c      	ite	eq
 80092f0:	f8c8 2000 	streq.w	r2, [r8]
 80092f4:	605a      	strne	r2, [r3, #4]
 80092f6:	e7eb      	b.n	80092d0 <_malloc_r+0xa8>
 80092f8:	4623      	mov	r3, r4
 80092fa:	6864      	ldr	r4, [r4, #4]
 80092fc:	e7ae      	b.n	800925c <_malloc_r+0x34>
 80092fe:	463c      	mov	r4, r7
 8009300:	687f      	ldr	r7, [r7, #4]
 8009302:	e7b6      	b.n	8009272 <_malloc_r+0x4a>
 8009304:	461a      	mov	r2, r3
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	42a3      	cmp	r3, r4
 800930a:	d1fb      	bne.n	8009304 <_malloc_r+0xdc>
 800930c:	2300      	movs	r3, #0
 800930e:	6053      	str	r3, [r2, #4]
 8009310:	e7de      	b.n	80092d0 <_malloc_r+0xa8>
 8009312:	230c      	movs	r3, #12
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f80c 	bl	8009334 <__malloc_unlock>
 800931c:	e794      	b.n	8009248 <_malloc_r+0x20>
 800931e:	6005      	str	r5, [r0, #0]
 8009320:	e7d6      	b.n	80092d0 <_malloc_r+0xa8>
 8009322:	bf00      	nop
 8009324:	20040664 	.word	0x20040664

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	@ (8009330 <__malloc_lock+0x8>)
 800932a:	f7ff bee8 	b.w	80090fe <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	2004065c 	.word	0x2004065c

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	@ (800933c <__malloc_unlock+0x8>)
 8009336:	f7ff bee3 	b.w	8009100 <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	2004065c 	.word	0x2004065c

08009340 <__ssputs_r>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	688e      	ldr	r6, [r1, #8]
 8009346:	461f      	mov	r7, r3
 8009348:	42be      	cmp	r6, r7
 800934a:	680b      	ldr	r3, [r1, #0]
 800934c:	4682      	mov	sl, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4690      	mov	r8, r2
 8009352:	d82d      	bhi.n	80093b0 <__ssputs_r+0x70>
 8009354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009358:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800935c:	d026      	beq.n	80093ac <__ssputs_r+0x6c>
 800935e:	6965      	ldr	r5, [r4, #20]
 8009360:	6909      	ldr	r1, [r1, #16]
 8009362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009366:	eba3 0901 	sub.w	r9, r3, r1
 800936a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800936e:	1c7b      	adds	r3, r7, #1
 8009370:	444b      	add	r3, r9
 8009372:	106d      	asrs	r5, r5, #1
 8009374:	429d      	cmp	r5, r3
 8009376:	bf38      	it	cc
 8009378:	461d      	movcc	r5, r3
 800937a:	0553      	lsls	r3, r2, #21
 800937c:	d527      	bpl.n	80093ce <__ssputs_r+0x8e>
 800937e:	4629      	mov	r1, r5
 8009380:	f7ff ff52 	bl	8009228 <_malloc_r>
 8009384:	4606      	mov	r6, r0
 8009386:	b360      	cbz	r0, 80093e2 <__ssputs_r+0xa2>
 8009388:	6921      	ldr	r1, [r4, #16]
 800938a:	464a      	mov	r2, r9
 800938c:	f000 fba6 	bl	8009adc <memcpy>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	6126      	str	r6, [r4, #16]
 800939e:	6165      	str	r5, [r4, #20]
 80093a0:	444e      	add	r6, r9
 80093a2:	eba5 0509 	sub.w	r5, r5, r9
 80093a6:	6026      	str	r6, [r4, #0]
 80093a8:	60a5      	str	r5, [r4, #8]
 80093aa:	463e      	mov	r6, r7
 80093ac:	42be      	cmp	r6, r7
 80093ae:	d900      	bls.n	80093b2 <__ssputs_r+0x72>
 80093b0:	463e      	mov	r6, r7
 80093b2:	6820      	ldr	r0, [r4, #0]
 80093b4:	4632      	mov	r2, r6
 80093b6:	4641      	mov	r1, r8
 80093b8:	f000 fb66 	bl	8009a88 <memmove>
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	1b9b      	subs	r3, r3, r6
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	4433      	add	r3, r6
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	2000      	movs	r0, #0
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	462a      	mov	r2, r5
 80093d0:	f000 fb99 	bl	8009b06 <_realloc_r>
 80093d4:	4606      	mov	r6, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d1e0      	bne.n	800939c <__ssputs_r+0x5c>
 80093da:	6921      	ldr	r1, [r4, #16]
 80093dc:	4650      	mov	r0, sl
 80093de:	f7ff feaf 	bl	8009140 <_free_r>
 80093e2:	230c      	movs	r3, #12
 80093e4:	f8ca 3000 	str.w	r3, [sl]
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e7e9      	b.n	80093ca <__ssputs_r+0x8a>
	...

080093f8 <_svfiprintf_r>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4698      	mov	r8, r3
 80093fe:	898b      	ldrh	r3, [r1, #12]
 8009400:	061b      	lsls	r3, r3, #24
 8009402:	b09d      	sub	sp, #116	@ 0x74
 8009404:	4607      	mov	r7, r0
 8009406:	460d      	mov	r5, r1
 8009408:	4614      	mov	r4, r2
 800940a:	d510      	bpl.n	800942e <_svfiprintf_r+0x36>
 800940c:	690b      	ldr	r3, [r1, #16]
 800940e:	b973      	cbnz	r3, 800942e <_svfiprintf_r+0x36>
 8009410:	2140      	movs	r1, #64	@ 0x40
 8009412:	f7ff ff09 	bl	8009228 <_malloc_r>
 8009416:	6028      	str	r0, [r5, #0]
 8009418:	6128      	str	r0, [r5, #16]
 800941a:	b930      	cbnz	r0, 800942a <_svfiprintf_r+0x32>
 800941c:	230c      	movs	r3, #12
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	b01d      	add	sp, #116	@ 0x74
 8009426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942a:	2340      	movs	r3, #64	@ 0x40
 800942c:	616b      	str	r3, [r5, #20]
 800942e:	2300      	movs	r3, #0
 8009430:	9309      	str	r3, [sp, #36]	@ 0x24
 8009432:	2320      	movs	r3, #32
 8009434:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009438:	f8cd 800c 	str.w	r8, [sp, #12]
 800943c:	2330      	movs	r3, #48	@ 0x30
 800943e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095dc <_svfiprintf_r+0x1e4>
 8009442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009446:	f04f 0901 	mov.w	r9, #1
 800944a:	4623      	mov	r3, r4
 800944c:	469a      	mov	sl, r3
 800944e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009452:	b10a      	cbz	r2, 8009458 <_svfiprintf_r+0x60>
 8009454:	2a25      	cmp	r2, #37	@ 0x25
 8009456:	d1f9      	bne.n	800944c <_svfiprintf_r+0x54>
 8009458:	ebba 0b04 	subs.w	fp, sl, r4
 800945c:	d00b      	beq.n	8009476 <_svfiprintf_r+0x7e>
 800945e:	465b      	mov	r3, fp
 8009460:	4622      	mov	r2, r4
 8009462:	4629      	mov	r1, r5
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff ff6b 	bl	8009340 <__ssputs_r>
 800946a:	3001      	adds	r0, #1
 800946c:	f000 80a7 	beq.w	80095be <_svfiprintf_r+0x1c6>
 8009470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009472:	445a      	add	r2, fp
 8009474:	9209      	str	r2, [sp, #36]	@ 0x24
 8009476:	f89a 3000 	ldrb.w	r3, [sl]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 809f 	beq.w	80095be <_svfiprintf_r+0x1c6>
 8009480:	2300      	movs	r3, #0
 8009482:	f04f 32ff 	mov.w	r2, #4294967295
 8009486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800948a:	f10a 0a01 	add.w	sl, sl, #1
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	9307      	str	r3, [sp, #28]
 8009492:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009496:	931a      	str	r3, [sp, #104]	@ 0x68
 8009498:	4654      	mov	r4, sl
 800949a:	2205      	movs	r2, #5
 800949c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a0:	484e      	ldr	r0, [pc, #312]	@ (80095dc <_svfiprintf_r+0x1e4>)
 80094a2:	f7f6 fead 	bl	8000200 <memchr>
 80094a6:	9a04      	ldr	r2, [sp, #16]
 80094a8:	b9d8      	cbnz	r0, 80094e2 <_svfiprintf_r+0xea>
 80094aa:	06d0      	lsls	r0, r2, #27
 80094ac:	bf44      	itt	mi
 80094ae:	2320      	movmi	r3, #32
 80094b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094b4:	0711      	lsls	r1, r2, #28
 80094b6:	bf44      	itt	mi
 80094b8:	232b      	movmi	r3, #43	@ 0x2b
 80094ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094be:	f89a 3000 	ldrb.w	r3, [sl]
 80094c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094c4:	d015      	beq.n	80094f2 <_svfiprintf_r+0xfa>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	4654      	mov	r4, sl
 80094ca:	2000      	movs	r0, #0
 80094cc:	f04f 0c0a 	mov.w	ip, #10
 80094d0:	4621      	mov	r1, r4
 80094d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d6:	3b30      	subs	r3, #48	@ 0x30
 80094d8:	2b09      	cmp	r3, #9
 80094da:	d94b      	bls.n	8009574 <_svfiprintf_r+0x17c>
 80094dc:	b1b0      	cbz	r0, 800950c <_svfiprintf_r+0x114>
 80094de:	9207      	str	r2, [sp, #28]
 80094e0:	e014      	b.n	800950c <_svfiprintf_r+0x114>
 80094e2:	eba0 0308 	sub.w	r3, r0, r8
 80094e6:	fa09 f303 	lsl.w	r3, r9, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	46a2      	mov	sl, r4
 80094f0:	e7d2      	b.n	8009498 <_svfiprintf_r+0xa0>
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	1d19      	adds	r1, r3, #4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	9103      	str	r1, [sp, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfbb      	ittet	lt
 80094fe:	425b      	neglt	r3, r3
 8009500:	f042 0202 	orrlt.w	r2, r2, #2
 8009504:	9307      	strge	r3, [sp, #28]
 8009506:	9307      	strlt	r3, [sp, #28]
 8009508:	bfb8      	it	lt
 800950a:	9204      	strlt	r2, [sp, #16]
 800950c:	7823      	ldrb	r3, [r4, #0]
 800950e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009510:	d10a      	bne.n	8009528 <_svfiprintf_r+0x130>
 8009512:	7863      	ldrb	r3, [r4, #1]
 8009514:	2b2a      	cmp	r3, #42	@ 0x2a
 8009516:	d132      	bne.n	800957e <_svfiprintf_r+0x186>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	9203      	str	r2, [sp, #12]
 8009520:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009524:	3402      	adds	r4, #2
 8009526:	9305      	str	r3, [sp, #20]
 8009528:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095ec <_svfiprintf_r+0x1f4>
 800952c:	7821      	ldrb	r1, [r4, #0]
 800952e:	2203      	movs	r2, #3
 8009530:	4650      	mov	r0, sl
 8009532:	f7f6 fe65 	bl	8000200 <memchr>
 8009536:	b138      	cbz	r0, 8009548 <_svfiprintf_r+0x150>
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	eba0 000a 	sub.w	r0, r0, sl
 800953e:	2240      	movs	r2, #64	@ 0x40
 8009540:	4082      	lsls	r2, r0
 8009542:	4313      	orrs	r3, r2
 8009544:	3401      	adds	r4, #1
 8009546:	9304      	str	r3, [sp, #16]
 8009548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954c:	4824      	ldr	r0, [pc, #144]	@ (80095e0 <_svfiprintf_r+0x1e8>)
 800954e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009552:	2206      	movs	r2, #6
 8009554:	f7f6 fe54 	bl	8000200 <memchr>
 8009558:	2800      	cmp	r0, #0
 800955a:	d036      	beq.n	80095ca <_svfiprintf_r+0x1d2>
 800955c:	4b21      	ldr	r3, [pc, #132]	@ (80095e4 <_svfiprintf_r+0x1ec>)
 800955e:	bb1b      	cbnz	r3, 80095a8 <_svfiprintf_r+0x1b0>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	3307      	adds	r3, #7
 8009564:	f023 0307 	bic.w	r3, r3, #7
 8009568:	3308      	adds	r3, #8
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956e:	4433      	add	r3, r6
 8009570:	9309      	str	r3, [sp, #36]	@ 0x24
 8009572:	e76a      	b.n	800944a <_svfiprintf_r+0x52>
 8009574:	fb0c 3202 	mla	r2, ip, r2, r3
 8009578:	460c      	mov	r4, r1
 800957a:	2001      	movs	r0, #1
 800957c:	e7a8      	b.n	80094d0 <_svfiprintf_r+0xd8>
 800957e:	2300      	movs	r3, #0
 8009580:	3401      	adds	r4, #1
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	4619      	mov	r1, r3
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4620      	mov	r0, r4
 800958c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009590:	3a30      	subs	r2, #48	@ 0x30
 8009592:	2a09      	cmp	r2, #9
 8009594:	d903      	bls.n	800959e <_svfiprintf_r+0x1a6>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c6      	beq.n	8009528 <_svfiprintf_r+0x130>
 800959a:	9105      	str	r1, [sp, #20]
 800959c:	e7c4      	b.n	8009528 <_svfiprintf_r+0x130>
 800959e:	fb0c 2101 	mla	r1, ip, r1, r2
 80095a2:	4604      	mov	r4, r0
 80095a4:	2301      	movs	r3, #1
 80095a6:	e7f0      	b.n	800958a <_svfiprintf_r+0x192>
 80095a8:	ab03      	add	r3, sp, #12
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	462a      	mov	r2, r5
 80095ae:	4b0e      	ldr	r3, [pc, #56]	@ (80095e8 <_svfiprintf_r+0x1f0>)
 80095b0:	a904      	add	r1, sp, #16
 80095b2:	4638      	mov	r0, r7
 80095b4:	f3af 8000 	nop.w
 80095b8:	1c42      	adds	r2, r0, #1
 80095ba:	4606      	mov	r6, r0
 80095bc:	d1d6      	bne.n	800956c <_svfiprintf_r+0x174>
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	065b      	lsls	r3, r3, #25
 80095c2:	f53f af2d 	bmi.w	8009420 <_svfiprintf_r+0x28>
 80095c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095c8:	e72c      	b.n	8009424 <_svfiprintf_r+0x2c>
 80095ca:	ab03      	add	r3, sp, #12
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	462a      	mov	r2, r5
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <_svfiprintf_r+0x1f0>)
 80095d2:	a904      	add	r1, sp, #16
 80095d4:	4638      	mov	r0, r7
 80095d6:	f000 f879 	bl	80096cc <_printf_i>
 80095da:	e7ed      	b.n	80095b8 <_svfiprintf_r+0x1c0>
 80095dc:	0800a2bf 	.word	0x0800a2bf
 80095e0:	0800a2c9 	.word	0x0800a2c9
 80095e4:	00000000 	.word	0x00000000
 80095e8:	08009341 	.word	0x08009341
 80095ec:	0800a2c5 	.word	0x0800a2c5

080095f0 <_printf_common>:
 80095f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	4616      	mov	r6, r2
 80095f6:	4698      	mov	r8, r3
 80095f8:	688a      	ldr	r2, [r1, #8]
 80095fa:	690b      	ldr	r3, [r1, #16]
 80095fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009600:	4293      	cmp	r3, r2
 8009602:	bfb8      	it	lt
 8009604:	4613      	movlt	r3, r2
 8009606:	6033      	str	r3, [r6, #0]
 8009608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800960c:	4607      	mov	r7, r0
 800960e:	460c      	mov	r4, r1
 8009610:	b10a      	cbz	r2, 8009616 <_printf_common+0x26>
 8009612:	3301      	adds	r3, #1
 8009614:	6033      	str	r3, [r6, #0]
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	0699      	lsls	r1, r3, #26
 800961a:	bf42      	ittt	mi
 800961c:	6833      	ldrmi	r3, [r6, #0]
 800961e:	3302      	addmi	r3, #2
 8009620:	6033      	strmi	r3, [r6, #0]
 8009622:	6825      	ldr	r5, [r4, #0]
 8009624:	f015 0506 	ands.w	r5, r5, #6
 8009628:	d106      	bne.n	8009638 <_printf_common+0x48>
 800962a:	f104 0a19 	add.w	sl, r4, #25
 800962e:	68e3      	ldr	r3, [r4, #12]
 8009630:	6832      	ldr	r2, [r6, #0]
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	42ab      	cmp	r3, r5
 8009636:	dc26      	bgt.n	8009686 <_printf_common+0x96>
 8009638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	3b00      	subs	r3, #0
 8009640:	bf18      	it	ne
 8009642:	2301      	movne	r3, #1
 8009644:	0692      	lsls	r2, r2, #26
 8009646:	d42b      	bmi.n	80096a0 <_printf_common+0xb0>
 8009648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800964c:	4641      	mov	r1, r8
 800964e:	4638      	mov	r0, r7
 8009650:	47c8      	blx	r9
 8009652:	3001      	adds	r0, #1
 8009654:	d01e      	beq.n	8009694 <_printf_common+0xa4>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	f003 0306 	and.w	r3, r3, #6
 800965e:	2b04      	cmp	r3, #4
 8009660:	bf02      	ittt	eq
 8009662:	68e5      	ldreq	r5, [r4, #12]
 8009664:	6833      	ldreq	r3, [r6, #0]
 8009666:	1aed      	subeq	r5, r5, r3
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	bf0c      	ite	eq
 800966c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009670:	2500      	movne	r5, #0
 8009672:	4293      	cmp	r3, r2
 8009674:	bfc4      	itt	gt
 8009676:	1a9b      	subgt	r3, r3, r2
 8009678:	18ed      	addgt	r5, r5, r3
 800967a:	2600      	movs	r6, #0
 800967c:	341a      	adds	r4, #26
 800967e:	42b5      	cmp	r5, r6
 8009680:	d11a      	bne.n	80096b8 <_printf_common+0xc8>
 8009682:	2000      	movs	r0, #0
 8009684:	e008      	b.n	8009698 <_printf_common+0xa8>
 8009686:	2301      	movs	r3, #1
 8009688:	4652      	mov	r2, sl
 800968a:	4641      	mov	r1, r8
 800968c:	4638      	mov	r0, r7
 800968e:	47c8      	blx	r9
 8009690:	3001      	adds	r0, #1
 8009692:	d103      	bne.n	800969c <_printf_common+0xac>
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969c:	3501      	adds	r5, #1
 800969e:	e7c6      	b.n	800962e <_printf_common+0x3e>
 80096a0:	18e1      	adds	r1, r4, r3
 80096a2:	1c5a      	adds	r2, r3, #1
 80096a4:	2030      	movs	r0, #48	@ 0x30
 80096a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096aa:	4422      	add	r2, r4
 80096ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096b4:	3302      	adds	r3, #2
 80096b6:	e7c7      	b.n	8009648 <_printf_common+0x58>
 80096b8:	2301      	movs	r3, #1
 80096ba:	4622      	mov	r2, r4
 80096bc:	4641      	mov	r1, r8
 80096be:	4638      	mov	r0, r7
 80096c0:	47c8      	blx	r9
 80096c2:	3001      	adds	r0, #1
 80096c4:	d0e6      	beq.n	8009694 <_printf_common+0xa4>
 80096c6:	3601      	adds	r6, #1
 80096c8:	e7d9      	b.n	800967e <_printf_common+0x8e>
	...

080096cc <_printf_i>:
 80096cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	7e0f      	ldrb	r7, [r1, #24]
 80096d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096d4:	2f78      	cmp	r7, #120	@ 0x78
 80096d6:	4691      	mov	r9, r2
 80096d8:	4680      	mov	r8, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	469a      	mov	sl, r3
 80096de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096e2:	d807      	bhi.n	80096f4 <_printf_i+0x28>
 80096e4:	2f62      	cmp	r7, #98	@ 0x62
 80096e6:	d80a      	bhi.n	80096fe <_printf_i+0x32>
 80096e8:	2f00      	cmp	r7, #0
 80096ea:	f000 80d2 	beq.w	8009892 <_printf_i+0x1c6>
 80096ee:	2f58      	cmp	r7, #88	@ 0x58
 80096f0:	f000 80b9 	beq.w	8009866 <_printf_i+0x19a>
 80096f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096fc:	e03a      	b.n	8009774 <_printf_i+0xa8>
 80096fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009702:	2b15      	cmp	r3, #21
 8009704:	d8f6      	bhi.n	80096f4 <_printf_i+0x28>
 8009706:	a101      	add	r1, pc, #4	@ (adr r1, 800970c <_printf_i+0x40>)
 8009708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800970c:	08009765 	.word	0x08009765
 8009710:	08009779 	.word	0x08009779
 8009714:	080096f5 	.word	0x080096f5
 8009718:	080096f5 	.word	0x080096f5
 800971c:	080096f5 	.word	0x080096f5
 8009720:	080096f5 	.word	0x080096f5
 8009724:	08009779 	.word	0x08009779
 8009728:	080096f5 	.word	0x080096f5
 800972c:	080096f5 	.word	0x080096f5
 8009730:	080096f5 	.word	0x080096f5
 8009734:	080096f5 	.word	0x080096f5
 8009738:	08009879 	.word	0x08009879
 800973c:	080097a3 	.word	0x080097a3
 8009740:	08009833 	.word	0x08009833
 8009744:	080096f5 	.word	0x080096f5
 8009748:	080096f5 	.word	0x080096f5
 800974c:	0800989b 	.word	0x0800989b
 8009750:	080096f5 	.word	0x080096f5
 8009754:	080097a3 	.word	0x080097a3
 8009758:	080096f5 	.word	0x080096f5
 800975c:	080096f5 	.word	0x080096f5
 8009760:	0800983b 	.word	0x0800983b
 8009764:	6833      	ldr	r3, [r6, #0]
 8009766:	1d1a      	adds	r2, r3, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6032      	str	r2, [r6, #0]
 800976c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009774:	2301      	movs	r3, #1
 8009776:	e09d      	b.n	80098b4 <_printf_i+0x1e8>
 8009778:	6833      	ldr	r3, [r6, #0]
 800977a:	6820      	ldr	r0, [r4, #0]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	6031      	str	r1, [r6, #0]
 8009780:	0606      	lsls	r6, r0, #24
 8009782:	d501      	bpl.n	8009788 <_printf_i+0xbc>
 8009784:	681d      	ldr	r5, [r3, #0]
 8009786:	e003      	b.n	8009790 <_printf_i+0xc4>
 8009788:	0645      	lsls	r5, r0, #25
 800978a:	d5fb      	bpl.n	8009784 <_printf_i+0xb8>
 800978c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009790:	2d00      	cmp	r5, #0
 8009792:	da03      	bge.n	800979c <_printf_i+0xd0>
 8009794:	232d      	movs	r3, #45	@ 0x2d
 8009796:	426d      	negs	r5, r5
 8009798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979c:	4859      	ldr	r0, [pc, #356]	@ (8009904 <_printf_i+0x238>)
 800979e:	230a      	movs	r3, #10
 80097a0:	e011      	b.n	80097c6 <_printf_i+0xfa>
 80097a2:	6821      	ldr	r1, [r4, #0]
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	0608      	lsls	r0, r1, #24
 80097a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80097ac:	d402      	bmi.n	80097b4 <_printf_i+0xe8>
 80097ae:	0649      	lsls	r1, r1, #25
 80097b0:	bf48      	it	mi
 80097b2:	b2ad      	uxthmi	r5, r5
 80097b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80097b6:	4853      	ldr	r0, [pc, #332]	@ (8009904 <_printf_i+0x238>)
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	bf14      	ite	ne
 80097bc:	230a      	movne	r3, #10
 80097be:	2308      	moveq	r3, #8
 80097c0:	2100      	movs	r1, #0
 80097c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097c6:	6866      	ldr	r6, [r4, #4]
 80097c8:	60a6      	str	r6, [r4, #8]
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	bfa2      	ittt	ge
 80097ce:	6821      	ldrge	r1, [r4, #0]
 80097d0:	f021 0104 	bicge.w	r1, r1, #4
 80097d4:	6021      	strge	r1, [r4, #0]
 80097d6:	b90d      	cbnz	r5, 80097dc <_printf_i+0x110>
 80097d8:	2e00      	cmp	r6, #0
 80097da:	d04b      	beq.n	8009874 <_printf_i+0x1a8>
 80097dc:	4616      	mov	r6, r2
 80097de:	fbb5 f1f3 	udiv	r1, r5, r3
 80097e2:	fb03 5711 	mls	r7, r3, r1, r5
 80097e6:	5dc7      	ldrb	r7, [r0, r7]
 80097e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097ec:	462f      	mov	r7, r5
 80097ee:	42bb      	cmp	r3, r7
 80097f0:	460d      	mov	r5, r1
 80097f2:	d9f4      	bls.n	80097de <_printf_i+0x112>
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d10b      	bne.n	8009810 <_printf_i+0x144>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	07df      	lsls	r7, r3, #31
 80097fc:	d508      	bpl.n	8009810 <_printf_i+0x144>
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	6861      	ldr	r1, [r4, #4]
 8009802:	4299      	cmp	r1, r3
 8009804:	bfde      	ittt	le
 8009806:	2330      	movle	r3, #48	@ 0x30
 8009808:	f806 3c01 	strble.w	r3, [r6, #-1]
 800980c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009810:	1b92      	subs	r2, r2, r6
 8009812:	6122      	str	r2, [r4, #16]
 8009814:	f8cd a000 	str.w	sl, [sp]
 8009818:	464b      	mov	r3, r9
 800981a:	aa03      	add	r2, sp, #12
 800981c:	4621      	mov	r1, r4
 800981e:	4640      	mov	r0, r8
 8009820:	f7ff fee6 	bl	80095f0 <_printf_common>
 8009824:	3001      	adds	r0, #1
 8009826:	d14a      	bne.n	80098be <_printf_i+0x1f2>
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	b004      	add	sp, #16
 800982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	4833      	ldr	r0, [pc, #204]	@ (8009908 <_printf_i+0x23c>)
 800983c:	2778      	movs	r7, #120	@ 0x78
 800983e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6831      	ldr	r1, [r6, #0]
 8009846:	061f      	lsls	r7, r3, #24
 8009848:	f851 5b04 	ldr.w	r5, [r1], #4
 800984c:	d402      	bmi.n	8009854 <_printf_i+0x188>
 800984e:	065f      	lsls	r7, r3, #25
 8009850:	bf48      	it	mi
 8009852:	b2ad      	uxthmi	r5, r5
 8009854:	6031      	str	r1, [r6, #0]
 8009856:	07d9      	lsls	r1, r3, #31
 8009858:	bf44      	itt	mi
 800985a:	f043 0320 	orrmi.w	r3, r3, #32
 800985e:	6023      	strmi	r3, [r4, #0]
 8009860:	b11d      	cbz	r5, 800986a <_printf_i+0x19e>
 8009862:	2310      	movs	r3, #16
 8009864:	e7ac      	b.n	80097c0 <_printf_i+0xf4>
 8009866:	4827      	ldr	r0, [pc, #156]	@ (8009904 <_printf_i+0x238>)
 8009868:	e7e9      	b.n	800983e <_printf_i+0x172>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	f023 0320 	bic.w	r3, r3, #32
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	e7f6      	b.n	8009862 <_printf_i+0x196>
 8009874:	4616      	mov	r6, r2
 8009876:	e7bd      	b.n	80097f4 <_printf_i+0x128>
 8009878:	6833      	ldr	r3, [r6, #0]
 800987a:	6825      	ldr	r5, [r4, #0]
 800987c:	6961      	ldr	r1, [r4, #20]
 800987e:	1d18      	adds	r0, r3, #4
 8009880:	6030      	str	r0, [r6, #0]
 8009882:	062e      	lsls	r6, r5, #24
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	d501      	bpl.n	800988c <_printf_i+0x1c0>
 8009888:	6019      	str	r1, [r3, #0]
 800988a:	e002      	b.n	8009892 <_printf_i+0x1c6>
 800988c:	0668      	lsls	r0, r5, #25
 800988e:	d5fb      	bpl.n	8009888 <_printf_i+0x1bc>
 8009890:	8019      	strh	r1, [r3, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	4616      	mov	r6, r2
 8009898:	e7bc      	b.n	8009814 <_printf_i+0x148>
 800989a:	6833      	ldr	r3, [r6, #0]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	6032      	str	r2, [r6, #0]
 80098a0:	681e      	ldr	r6, [r3, #0]
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	2100      	movs	r1, #0
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7f6 fcaa 	bl	8000200 <memchr>
 80098ac:	b108      	cbz	r0, 80098b2 <_printf_i+0x1e6>
 80098ae:	1b80      	subs	r0, r0, r6
 80098b0:	6060      	str	r0, [r4, #4]
 80098b2:	6863      	ldr	r3, [r4, #4]
 80098b4:	6123      	str	r3, [r4, #16]
 80098b6:	2300      	movs	r3, #0
 80098b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098bc:	e7aa      	b.n	8009814 <_printf_i+0x148>
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	4632      	mov	r2, r6
 80098c2:	4649      	mov	r1, r9
 80098c4:	4640      	mov	r0, r8
 80098c6:	47d0      	blx	sl
 80098c8:	3001      	adds	r0, #1
 80098ca:	d0ad      	beq.n	8009828 <_printf_i+0x15c>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	079b      	lsls	r3, r3, #30
 80098d0:	d413      	bmi.n	80098fa <_printf_i+0x22e>
 80098d2:	68e0      	ldr	r0, [r4, #12]
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	4298      	cmp	r0, r3
 80098d8:	bfb8      	it	lt
 80098da:	4618      	movlt	r0, r3
 80098dc:	e7a6      	b.n	800982c <_printf_i+0x160>
 80098de:	2301      	movs	r3, #1
 80098e0:	4632      	mov	r2, r6
 80098e2:	4649      	mov	r1, r9
 80098e4:	4640      	mov	r0, r8
 80098e6:	47d0      	blx	sl
 80098e8:	3001      	adds	r0, #1
 80098ea:	d09d      	beq.n	8009828 <_printf_i+0x15c>
 80098ec:	3501      	adds	r5, #1
 80098ee:	68e3      	ldr	r3, [r4, #12]
 80098f0:	9903      	ldr	r1, [sp, #12]
 80098f2:	1a5b      	subs	r3, r3, r1
 80098f4:	42ab      	cmp	r3, r5
 80098f6:	dcf2      	bgt.n	80098de <_printf_i+0x212>
 80098f8:	e7eb      	b.n	80098d2 <_printf_i+0x206>
 80098fa:	2500      	movs	r5, #0
 80098fc:	f104 0619 	add.w	r6, r4, #25
 8009900:	e7f5      	b.n	80098ee <_printf_i+0x222>
 8009902:	bf00      	nop
 8009904:	0800a2d0 	.word	0x0800a2d0
 8009908:	0800a2e1 	.word	0x0800a2e1

0800990c <__sflush_r>:
 800990c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	0716      	lsls	r6, r2, #28
 8009916:	4605      	mov	r5, r0
 8009918:	460c      	mov	r4, r1
 800991a:	d454      	bmi.n	80099c6 <__sflush_r+0xba>
 800991c:	684b      	ldr	r3, [r1, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	dc02      	bgt.n	8009928 <__sflush_r+0x1c>
 8009922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	dd48      	ble.n	80099ba <__sflush_r+0xae>
 8009928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800992a:	2e00      	cmp	r6, #0
 800992c:	d045      	beq.n	80099ba <__sflush_r+0xae>
 800992e:	2300      	movs	r3, #0
 8009930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009934:	682f      	ldr	r7, [r5, #0]
 8009936:	6a21      	ldr	r1, [r4, #32]
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	d030      	beq.n	800999e <__sflush_r+0x92>
 800993c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	0759      	lsls	r1, r3, #29
 8009942:	d505      	bpl.n	8009950 <__sflush_r+0x44>
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800994a:	b10b      	cbz	r3, 8009950 <__sflush_r+0x44>
 800994c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	2300      	movs	r3, #0
 8009952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	4628      	mov	r0, r5
 8009958:	47b0      	blx	r6
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	d106      	bne.n	800996e <__sflush_r+0x62>
 8009960:	6829      	ldr	r1, [r5, #0]
 8009962:	291d      	cmp	r1, #29
 8009964:	d82b      	bhi.n	80099be <__sflush_r+0xb2>
 8009966:	4a2a      	ldr	r2, [pc, #168]	@ (8009a10 <__sflush_r+0x104>)
 8009968:	410a      	asrs	r2, r1
 800996a:	07d6      	lsls	r6, r2, #31
 800996c:	d427      	bmi.n	80099be <__sflush_r+0xb2>
 800996e:	2200      	movs	r2, #0
 8009970:	6062      	str	r2, [r4, #4]
 8009972:	04d9      	lsls	r1, r3, #19
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	d504      	bpl.n	8009984 <__sflush_r+0x78>
 800997a:	1c42      	adds	r2, r0, #1
 800997c:	d101      	bne.n	8009982 <__sflush_r+0x76>
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	b903      	cbnz	r3, 8009984 <__sflush_r+0x78>
 8009982:	6560      	str	r0, [r4, #84]	@ 0x54
 8009984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009986:	602f      	str	r7, [r5, #0]
 8009988:	b1b9      	cbz	r1, 80099ba <__sflush_r+0xae>
 800998a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800998e:	4299      	cmp	r1, r3
 8009990:	d002      	beq.n	8009998 <__sflush_r+0x8c>
 8009992:	4628      	mov	r0, r5
 8009994:	f7ff fbd4 	bl	8009140 <_free_r>
 8009998:	2300      	movs	r3, #0
 800999a:	6363      	str	r3, [r4, #52]	@ 0x34
 800999c:	e00d      	b.n	80099ba <__sflush_r+0xae>
 800999e:	2301      	movs	r3, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	4602      	mov	r2, r0
 80099a6:	1c50      	adds	r0, r2, #1
 80099a8:	d1c9      	bne.n	800993e <__sflush_r+0x32>
 80099aa:	682b      	ldr	r3, [r5, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0c6      	beq.n	800993e <__sflush_r+0x32>
 80099b0:	2b1d      	cmp	r3, #29
 80099b2:	d001      	beq.n	80099b8 <__sflush_r+0xac>
 80099b4:	2b16      	cmp	r3, #22
 80099b6:	d11e      	bne.n	80099f6 <__sflush_r+0xea>
 80099b8:	602f      	str	r7, [r5, #0]
 80099ba:	2000      	movs	r0, #0
 80099bc:	e022      	b.n	8009a04 <__sflush_r+0xf8>
 80099be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c2:	b21b      	sxth	r3, r3
 80099c4:	e01b      	b.n	80099fe <__sflush_r+0xf2>
 80099c6:	690f      	ldr	r7, [r1, #16]
 80099c8:	2f00      	cmp	r7, #0
 80099ca:	d0f6      	beq.n	80099ba <__sflush_r+0xae>
 80099cc:	0793      	lsls	r3, r2, #30
 80099ce:	680e      	ldr	r6, [r1, #0]
 80099d0:	bf08      	it	eq
 80099d2:	694b      	ldreq	r3, [r1, #20]
 80099d4:	600f      	str	r7, [r1, #0]
 80099d6:	bf18      	it	ne
 80099d8:	2300      	movne	r3, #0
 80099da:	eba6 0807 	sub.w	r8, r6, r7
 80099de:	608b      	str	r3, [r1, #8]
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	dde9      	ble.n	80099ba <__sflush_r+0xae>
 80099e6:	6a21      	ldr	r1, [r4, #32]
 80099e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ea:	4643      	mov	r3, r8
 80099ec:	463a      	mov	r2, r7
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b0      	blx	r6
 80099f2:	2800      	cmp	r0, #0
 80099f4:	dc08      	bgt.n	8009a08 <__sflush_r+0xfc>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	4407      	add	r7, r0
 8009a0a:	eba8 0800 	sub.w	r8, r8, r0
 8009a0e:	e7e7      	b.n	80099e0 <__sflush_r+0xd4>
 8009a10:	dfbffffe 	.word	0xdfbffffe

08009a14 <_fflush_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	690b      	ldr	r3, [r1, #16]
 8009a18:	4605      	mov	r5, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	b913      	cbnz	r3, 8009a24 <_fflush_r+0x10>
 8009a1e:	2500      	movs	r5, #0
 8009a20:	4628      	mov	r0, r5
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	b118      	cbz	r0, 8009a2e <_fflush_r+0x1a>
 8009a26:	6a03      	ldr	r3, [r0, #32]
 8009a28:	b90b      	cbnz	r3, 8009a2e <_fflush_r+0x1a>
 8009a2a:	f7ff fa55 	bl	8008ed8 <__sinit>
 8009a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0f3      	beq.n	8009a1e <_fflush_r+0xa>
 8009a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a38:	07d0      	lsls	r0, r2, #31
 8009a3a:	d404      	bmi.n	8009a46 <_fflush_r+0x32>
 8009a3c:	0599      	lsls	r1, r3, #22
 8009a3e:	d402      	bmi.n	8009a46 <_fflush_r+0x32>
 8009a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a42:	f7ff fb5c 	bl	80090fe <__retarget_lock_acquire_recursive>
 8009a46:	4628      	mov	r0, r5
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f7ff ff5f 	bl	800990c <__sflush_r>
 8009a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a50:	07da      	lsls	r2, r3, #31
 8009a52:	4605      	mov	r5, r0
 8009a54:	d4e4      	bmi.n	8009a20 <_fflush_r+0xc>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	059b      	lsls	r3, r3, #22
 8009a5a:	d4e1      	bmi.n	8009a20 <_fflush_r+0xc>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a5e:	f7ff fb4f 	bl	8009100 <__retarget_lock_release_recursive>
 8009a62:	e7dd      	b.n	8009a20 <_fflush_r+0xc>

08009a64 <fiprintf>:
 8009a64:	b40e      	push	{r1, r2, r3}
 8009a66:	b503      	push	{r0, r1, lr}
 8009a68:	4601      	mov	r1, r0
 8009a6a:	ab03      	add	r3, sp, #12
 8009a6c:	4805      	ldr	r0, [pc, #20]	@ (8009a84 <fiprintf+0x20>)
 8009a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a72:	6800      	ldr	r0, [r0, #0]
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	f000 f89d 	bl	8009bb4 <_vfiprintf_r>
 8009a7a:	b002      	add	sp, #8
 8009a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a80:	b003      	add	sp, #12
 8009a82:	4770      	bx	lr
 8009a84:	20040030 	.word	0x20040030

08009a88 <memmove>:
 8009a88:	4288      	cmp	r0, r1
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	eb01 0402 	add.w	r4, r1, r2
 8009a90:	d902      	bls.n	8009a98 <memmove+0x10>
 8009a92:	4284      	cmp	r4, r0
 8009a94:	4623      	mov	r3, r4
 8009a96:	d807      	bhi.n	8009aa8 <memmove+0x20>
 8009a98:	1e43      	subs	r3, r0, #1
 8009a9a:	42a1      	cmp	r1, r4
 8009a9c:	d008      	beq.n	8009ab0 <memmove+0x28>
 8009a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aa6:	e7f8      	b.n	8009a9a <memmove+0x12>
 8009aa8:	4402      	add	r2, r0
 8009aaa:	4601      	mov	r1, r0
 8009aac:	428a      	cmp	r2, r1
 8009aae:	d100      	bne.n	8009ab2 <memmove+0x2a>
 8009ab0:	bd10      	pop	{r4, pc}
 8009ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aba:	e7f7      	b.n	8009aac <memmove+0x24>

08009abc <_sbrk_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4d06      	ldr	r5, [pc, #24]	@ (8009ad8 <_sbrk_r+0x1c>)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	f7f7 fc90 	bl	80013ec <_sbrk>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_sbrk_r+0x1a>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_sbrk_r+0x1a>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20040658 	.word	0x20040658

08009adc <memcpy>:
 8009adc:	440a      	add	r2, r1
 8009ade:	4291      	cmp	r1, r2
 8009ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	4770      	bx	lr
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af2:	4291      	cmp	r1, r2
 8009af4:	d1f9      	bne.n	8009aea <memcpy+0xe>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <abort>:
 8009af8:	b508      	push	{r3, lr}
 8009afa:	2006      	movs	r0, #6
 8009afc:	f000 fa2e 	bl	8009f5c <raise>
 8009b00:	2001      	movs	r0, #1
 8009b02:	f7f7 fbfa 	bl	80012fa <_exit>

08009b06 <_realloc_r>:
 8009b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	4615      	mov	r5, r2
 8009b0e:	460c      	mov	r4, r1
 8009b10:	b921      	cbnz	r1, 8009b1c <_realloc_r+0x16>
 8009b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	4611      	mov	r1, r2
 8009b18:	f7ff bb86 	b.w	8009228 <_malloc_r>
 8009b1c:	b92a      	cbnz	r2, 8009b2a <_realloc_r+0x24>
 8009b1e:	f7ff fb0f 	bl	8009140 <_free_r>
 8009b22:	2400      	movs	r4, #0
 8009b24:	4620      	mov	r0, r4
 8009b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2a:	f000 fa33 	bl	8009f94 <_malloc_usable_size_r>
 8009b2e:	4285      	cmp	r5, r0
 8009b30:	4606      	mov	r6, r0
 8009b32:	d802      	bhi.n	8009b3a <_realloc_r+0x34>
 8009b34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b38:	d8f4      	bhi.n	8009b24 <_realloc_r+0x1e>
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	f7ff fb73 	bl	8009228 <_malloc_r>
 8009b42:	4607      	mov	r7, r0
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d0ec      	beq.n	8009b22 <_realloc_r+0x1c>
 8009b48:	42b5      	cmp	r5, r6
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	bf28      	it	cs
 8009b50:	4632      	movcs	r2, r6
 8009b52:	f7ff ffc3 	bl	8009adc <memcpy>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4640      	mov	r0, r8
 8009b5a:	f7ff faf1 	bl	8009140 <_free_r>
 8009b5e:	463c      	mov	r4, r7
 8009b60:	e7e0      	b.n	8009b24 <_realloc_r+0x1e>

08009b62 <__sfputc_r>:
 8009b62:	6893      	ldr	r3, [r2, #8]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	b410      	push	{r4}
 8009b6a:	6093      	str	r3, [r2, #8]
 8009b6c:	da08      	bge.n	8009b80 <__sfputc_r+0x1e>
 8009b6e:	6994      	ldr	r4, [r2, #24]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	db01      	blt.n	8009b78 <__sfputc_r+0x16>
 8009b74:	290a      	cmp	r1, #10
 8009b76:	d103      	bne.n	8009b80 <__sfputc_r+0x1e>
 8009b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b7c:	f000 b932 	b.w	8009de4 <__swbuf_r>
 8009b80:	6813      	ldr	r3, [r2, #0]
 8009b82:	1c58      	adds	r0, r3, #1
 8009b84:	6010      	str	r0, [r2, #0]
 8009b86:	7019      	strb	r1, [r3, #0]
 8009b88:	4608      	mov	r0, r1
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <__sfputs_r>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	4614      	mov	r4, r2
 8009b98:	18d5      	adds	r5, r2, r3
 8009b9a:	42ac      	cmp	r4, r5
 8009b9c:	d101      	bne.n	8009ba2 <__sfputs_r+0x12>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e007      	b.n	8009bb2 <__sfputs_r+0x22>
 8009ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7ff ffda 	bl	8009b62 <__sfputc_r>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	d1f3      	bne.n	8009b9a <__sfputs_r+0xa>
 8009bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bb4 <_vfiprintf_r>:
 8009bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	460d      	mov	r5, r1
 8009bba:	b09d      	sub	sp, #116	@ 0x74
 8009bbc:	4614      	mov	r4, r2
 8009bbe:	4698      	mov	r8, r3
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	b118      	cbz	r0, 8009bcc <_vfiprintf_r+0x18>
 8009bc4:	6a03      	ldr	r3, [r0, #32]
 8009bc6:	b90b      	cbnz	r3, 8009bcc <_vfiprintf_r+0x18>
 8009bc8:	f7ff f986 	bl	8008ed8 <__sinit>
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x2a>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x2a>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bda:	f7ff fa90 	bl	80090fe <__retarget_lock_acquire_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	071b      	lsls	r3, r3, #28
 8009be2:	d501      	bpl.n	8009be8 <_vfiprintf_r+0x34>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	b99b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x5c>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 f938 	bl	8009e60 <__swsetup_r>
 8009bf0:	b170      	cbz	r0, 8009c10 <_vfiprintf_r+0x5c>
 8009bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf4:	07dc      	lsls	r4, r3, #31
 8009bf6:	d504      	bpl.n	8009c02 <_vfiprintf_r+0x4e>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	b01d      	add	sp, #116	@ 0x74
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	0598      	lsls	r0, r3, #22
 8009c06:	d4f7      	bmi.n	8009bf8 <_vfiprintf_r+0x44>
 8009c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c0a:	f7ff fa79 	bl	8009100 <__retarget_lock_release_recursive>
 8009c0e:	e7f3      	b.n	8009bf8 <_vfiprintf_r+0x44>
 8009c10:	2300      	movs	r3, #0
 8009c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c14:	2320      	movs	r3, #32
 8009c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c1e:	2330      	movs	r3, #48	@ 0x30
 8009c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009dd0 <_vfiprintf_r+0x21c>
 8009c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c28:	f04f 0901 	mov.w	r9, #1
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	469a      	mov	sl, r3
 8009c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c34:	b10a      	cbz	r2, 8009c3a <_vfiprintf_r+0x86>
 8009c36:	2a25      	cmp	r2, #37	@ 0x25
 8009c38:	d1f9      	bne.n	8009c2e <_vfiprintf_r+0x7a>
 8009c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c3e:	d00b      	beq.n	8009c58 <_vfiprintf_r+0xa4>
 8009c40:	465b      	mov	r3, fp
 8009c42:	4622      	mov	r2, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7ff ffa2 	bl	8009b90 <__sfputs_r>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f000 80a7 	beq.w	8009da0 <_vfiprintf_r+0x1ec>
 8009c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c54:	445a      	add	r2, fp
 8009c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c58:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 809f 	beq.w	8009da0 <_vfiprintf_r+0x1ec>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6c:	f10a 0a01 	add.w	sl, sl, #1
 8009c70:	9304      	str	r3, [sp, #16]
 8009c72:	9307      	str	r3, [sp, #28]
 8009c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c7a:	4654      	mov	r4, sl
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c82:	4853      	ldr	r0, [pc, #332]	@ (8009dd0 <_vfiprintf_r+0x21c>)
 8009c84:	f7f6 fabc 	bl	8000200 <memchr>
 8009c88:	9a04      	ldr	r2, [sp, #16]
 8009c8a:	b9d8      	cbnz	r0, 8009cc4 <_vfiprintf_r+0x110>
 8009c8c:	06d1      	lsls	r1, r2, #27
 8009c8e:	bf44      	itt	mi
 8009c90:	2320      	movmi	r3, #32
 8009c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c96:	0713      	lsls	r3, r2, #28
 8009c98:	bf44      	itt	mi
 8009c9a:	232b      	movmi	r3, #43	@ 0x2b
 8009c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca6:	d015      	beq.n	8009cd4 <_vfiprintf_r+0x120>
 8009ca8:	9a07      	ldr	r2, [sp, #28]
 8009caa:	4654      	mov	r4, sl
 8009cac:	2000      	movs	r0, #0
 8009cae:	f04f 0c0a 	mov.w	ip, #10
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb8:	3b30      	subs	r3, #48	@ 0x30
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d94b      	bls.n	8009d56 <_vfiprintf_r+0x1a2>
 8009cbe:	b1b0      	cbz	r0, 8009cee <_vfiprintf_r+0x13a>
 8009cc0:	9207      	str	r2, [sp, #28]
 8009cc2:	e014      	b.n	8009cee <_vfiprintf_r+0x13a>
 8009cc4:	eba0 0308 	sub.w	r3, r0, r8
 8009cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	46a2      	mov	sl, r4
 8009cd2:	e7d2      	b.n	8009c7a <_vfiprintf_r+0xc6>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	1d19      	adds	r1, r3, #4
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	9103      	str	r1, [sp, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfbb      	ittet	lt
 8009ce0:	425b      	neglt	r3, r3
 8009ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce6:	9307      	strge	r3, [sp, #28]
 8009ce8:	9307      	strlt	r3, [sp, #28]
 8009cea:	bfb8      	it	lt
 8009cec:	9204      	strlt	r2, [sp, #16]
 8009cee:	7823      	ldrb	r3, [r4, #0]
 8009cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cf2:	d10a      	bne.n	8009d0a <_vfiprintf_r+0x156>
 8009cf4:	7863      	ldrb	r3, [r4, #1]
 8009cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf8:	d132      	bne.n	8009d60 <_vfiprintf_r+0x1ac>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	1d1a      	adds	r2, r3, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9203      	str	r2, [sp, #12]
 8009d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d06:	3402      	adds	r4, #2
 8009d08:	9305      	str	r3, [sp, #20]
 8009d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009de0 <_vfiprintf_r+0x22c>
 8009d0e:	7821      	ldrb	r1, [r4, #0]
 8009d10:	2203      	movs	r2, #3
 8009d12:	4650      	mov	r0, sl
 8009d14:	f7f6 fa74 	bl	8000200 <memchr>
 8009d18:	b138      	cbz	r0, 8009d2a <_vfiprintf_r+0x176>
 8009d1a:	9b04      	ldr	r3, [sp, #16]
 8009d1c:	eba0 000a 	sub.w	r0, r0, sl
 8009d20:	2240      	movs	r2, #64	@ 0x40
 8009d22:	4082      	lsls	r2, r0
 8009d24:	4313      	orrs	r3, r2
 8009d26:	3401      	adds	r4, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d2e:	4829      	ldr	r0, [pc, #164]	@ (8009dd4 <_vfiprintf_r+0x220>)
 8009d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d34:	2206      	movs	r2, #6
 8009d36:	f7f6 fa63 	bl	8000200 <memchr>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d03f      	beq.n	8009dbe <_vfiprintf_r+0x20a>
 8009d3e:	4b26      	ldr	r3, [pc, #152]	@ (8009dd8 <_vfiprintf_r+0x224>)
 8009d40:	bb1b      	cbnz	r3, 8009d8a <_vfiprintf_r+0x1d6>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	3307      	adds	r3, #7
 8009d46:	f023 0307 	bic.w	r3, r3, #7
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	443b      	add	r3, r7
 8009d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d54:	e76a      	b.n	8009c2c <_vfiprintf_r+0x78>
 8009d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	e7a8      	b.n	8009cb2 <_vfiprintf_r+0xfe>
 8009d60:	2300      	movs	r3, #0
 8009d62:	3401      	adds	r4, #1
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	4619      	mov	r1, r3
 8009d68:	f04f 0c0a 	mov.w	ip, #10
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d72:	3a30      	subs	r2, #48	@ 0x30
 8009d74:	2a09      	cmp	r2, #9
 8009d76:	d903      	bls.n	8009d80 <_vfiprintf_r+0x1cc>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0c6      	beq.n	8009d0a <_vfiprintf_r+0x156>
 8009d7c:	9105      	str	r1, [sp, #20]
 8009d7e:	e7c4      	b.n	8009d0a <_vfiprintf_r+0x156>
 8009d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d84:	4604      	mov	r4, r0
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7f0      	b.n	8009d6c <_vfiprintf_r+0x1b8>
 8009d8a:	ab03      	add	r3, sp, #12
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4b12      	ldr	r3, [pc, #72]	@ (8009ddc <_vfiprintf_r+0x228>)
 8009d92:	a904      	add	r1, sp, #16
 8009d94:	4630      	mov	r0, r6
 8009d96:	f3af 8000 	nop.w
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	1c78      	adds	r0, r7, #1
 8009d9e:	d1d6      	bne.n	8009d4e <_vfiprintf_r+0x19a>
 8009da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009da2:	07d9      	lsls	r1, r3, #31
 8009da4:	d405      	bmi.n	8009db2 <_vfiprintf_r+0x1fe>
 8009da6:	89ab      	ldrh	r3, [r5, #12]
 8009da8:	059a      	lsls	r2, r3, #22
 8009daa:	d402      	bmi.n	8009db2 <_vfiprintf_r+0x1fe>
 8009dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dae:	f7ff f9a7 	bl	8009100 <__retarget_lock_release_recursive>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	065b      	lsls	r3, r3, #25
 8009db6:	f53f af1f 	bmi.w	8009bf8 <_vfiprintf_r+0x44>
 8009dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dbc:	e71e      	b.n	8009bfc <_vfiprintf_r+0x48>
 8009dbe:	ab03      	add	r3, sp, #12
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <_vfiprintf_r+0x228>)
 8009dc6:	a904      	add	r1, sp, #16
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f7ff fc7f 	bl	80096cc <_printf_i>
 8009dce:	e7e4      	b.n	8009d9a <_vfiprintf_r+0x1e6>
 8009dd0:	0800a2bf 	.word	0x0800a2bf
 8009dd4:	0800a2c9 	.word	0x0800a2c9
 8009dd8:	00000000 	.word	0x00000000
 8009ddc:	08009b91 	.word	0x08009b91
 8009de0:	0800a2c5 	.word	0x0800a2c5

08009de4 <__swbuf_r>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	460e      	mov	r6, r1
 8009de8:	4614      	mov	r4, r2
 8009dea:	4605      	mov	r5, r0
 8009dec:	b118      	cbz	r0, 8009df6 <__swbuf_r+0x12>
 8009dee:	6a03      	ldr	r3, [r0, #32]
 8009df0:	b90b      	cbnz	r3, 8009df6 <__swbuf_r+0x12>
 8009df2:	f7ff f871 	bl	8008ed8 <__sinit>
 8009df6:	69a3      	ldr	r3, [r4, #24]
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	071a      	lsls	r2, r3, #28
 8009dfe:	d501      	bpl.n	8009e04 <__swbuf_r+0x20>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	b943      	cbnz	r3, 8009e16 <__swbuf_r+0x32>
 8009e04:	4621      	mov	r1, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 f82a 	bl	8009e60 <__swsetup_r>
 8009e0c:	b118      	cbz	r0, 8009e16 <__swbuf_r+0x32>
 8009e0e:	f04f 37ff 	mov.w	r7, #4294967295
 8009e12:	4638      	mov	r0, r7
 8009e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	6922      	ldr	r2, [r4, #16]
 8009e1a:	1a98      	subs	r0, r3, r2
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	b2f6      	uxtb	r6, r6
 8009e20:	4283      	cmp	r3, r0
 8009e22:	4637      	mov	r7, r6
 8009e24:	dc05      	bgt.n	8009e32 <__swbuf_r+0x4e>
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7ff fdf3 	bl	8009a14 <_fflush_r>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1ed      	bne.n	8009e0e <__swbuf_r+0x2a>
 8009e32:	68a3      	ldr	r3, [r4, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	60a3      	str	r3, [r4, #8]
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	6022      	str	r2, [r4, #0]
 8009e3e:	701e      	strb	r6, [r3, #0]
 8009e40:	6962      	ldr	r2, [r4, #20]
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d004      	beq.n	8009e52 <__swbuf_r+0x6e>
 8009e48:	89a3      	ldrh	r3, [r4, #12]
 8009e4a:	07db      	lsls	r3, r3, #31
 8009e4c:	d5e1      	bpl.n	8009e12 <__swbuf_r+0x2e>
 8009e4e:	2e0a      	cmp	r6, #10
 8009e50:	d1df      	bne.n	8009e12 <__swbuf_r+0x2e>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f7ff fddd 	bl	8009a14 <_fflush_r>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d0d9      	beq.n	8009e12 <__swbuf_r+0x2e>
 8009e5e:	e7d6      	b.n	8009e0e <__swbuf_r+0x2a>

08009e60 <__swsetup_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4b29      	ldr	r3, [pc, #164]	@ (8009f08 <__swsetup_r+0xa8>)
 8009e64:	4605      	mov	r5, r0
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	460c      	mov	r4, r1
 8009e6a:	b118      	cbz	r0, 8009e74 <__swsetup_r+0x14>
 8009e6c:	6a03      	ldr	r3, [r0, #32]
 8009e6e:	b90b      	cbnz	r3, 8009e74 <__swsetup_r+0x14>
 8009e70:	f7ff f832 	bl	8008ed8 <__sinit>
 8009e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e78:	0719      	lsls	r1, r3, #28
 8009e7a:	d422      	bmi.n	8009ec2 <__swsetup_r+0x62>
 8009e7c:	06da      	lsls	r2, r3, #27
 8009e7e:	d407      	bmi.n	8009e90 <__swsetup_r+0x30>
 8009e80:	2209      	movs	r2, #9
 8009e82:	602a      	str	r2, [r5, #0]
 8009e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	e033      	b.n	8009ef8 <__swsetup_r+0x98>
 8009e90:	0758      	lsls	r0, r3, #29
 8009e92:	d512      	bpl.n	8009eba <__swsetup_r+0x5a>
 8009e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e96:	b141      	cbz	r1, 8009eaa <__swsetup_r+0x4a>
 8009e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e9c:	4299      	cmp	r1, r3
 8009e9e:	d002      	beq.n	8009ea6 <__swsetup_r+0x46>
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7ff f94d 	bl	8009140 <_free_r>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6063      	str	r3, [r4, #4]
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	f043 0308 	orr.w	r3, r3, #8
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	b94b      	cbnz	r3, 8009eda <__swsetup_r+0x7a>
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed0:	d003      	beq.n	8009eda <__swsetup_r+0x7a>
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f000 f88b 	bl	8009ff0 <__smakebuf_r>
 8009eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ede:	f013 0201 	ands.w	r2, r3, #1
 8009ee2:	d00a      	beq.n	8009efa <__swsetup_r+0x9a>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	60a2      	str	r2, [r4, #8]
 8009ee8:	6962      	ldr	r2, [r4, #20]
 8009eea:	4252      	negs	r2, r2
 8009eec:	61a2      	str	r2, [r4, #24]
 8009eee:	6922      	ldr	r2, [r4, #16]
 8009ef0:	b942      	cbnz	r2, 8009f04 <__swsetup_r+0xa4>
 8009ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ef6:	d1c5      	bne.n	8009e84 <__swsetup_r+0x24>
 8009ef8:	bd38      	pop	{r3, r4, r5, pc}
 8009efa:	0799      	lsls	r1, r3, #30
 8009efc:	bf58      	it	pl
 8009efe:	6962      	ldrpl	r2, [r4, #20]
 8009f00:	60a2      	str	r2, [r4, #8]
 8009f02:	e7f4      	b.n	8009eee <__swsetup_r+0x8e>
 8009f04:	2000      	movs	r0, #0
 8009f06:	e7f7      	b.n	8009ef8 <__swsetup_r+0x98>
 8009f08:	20040030 	.word	0x20040030

08009f0c <_raise_r>:
 8009f0c:	291f      	cmp	r1, #31
 8009f0e:	b538      	push	{r3, r4, r5, lr}
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	d904      	bls.n	8009f20 <_raise_r+0x14>
 8009f16:	2316      	movs	r3, #22
 8009f18:	6003      	str	r3, [r0, #0]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f22:	b112      	cbz	r2, 8009f2a <_raise_r+0x1e>
 8009f24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f28:	b94b      	cbnz	r3, 8009f3e <_raise_r+0x32>
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f830 	bl	8009f90 <_getpid_r>
 8009f30:	4622      	mov	r2, r4
 8009f32:	4601      	mov	r1, r0
 8009f34:	4628      	mov	r0, r5
 8009f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f3a:	f000 b817 	b.w	8009f6c <_kill_r>
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d00a      	beq.n	8009f58 <_raise_r+0x4c>
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	d103      	bne.n	8009f4e <_raise_r+0x42>
 8009f46:	2316      	movs	r3, #22
 8009f48:	6003      	str	r3, [r0, #0]
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	e7e7      	b.n	8009f1e <_raise_r+0x12>
 8009f4e:	2100      	movs	r1, #0
 8009f50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f54:	4620      	mov	r0, r4
 8009f56:	4798      	blx	r3
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e7e0      	b.n	8009f1e <_raise_r+0x12>

08009f5c <raise>:
 8009f5c:	4b02      	ldr	r3, [pc, #8]	@ (8009f68 <raise+0xc>)
 8009f5e:	4601      	mov	r1, r0
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	f7ff bfd3 	b.w	8009f0c <_raise_r>
 8009f66:	bf00      	nop
 8009f68:	20040030 	.word	0x20040030

08009f6c <_kill_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	@ (8009f8c <_kill_r+0x20>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	f7f7 f9ae 	bl	80012da <_kill>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d102      	bne.n	8009f88 <_kill_r+0x1c>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	b103      	cbz	r3, 8009f88 <_kill_r+0x1c>
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	bd38      	pop	{r3, r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20040658 	.word	0x20040658

08009f90 <_getpid_r>:
 8009f90:	f7f7 b99b 	b.w	80012ca <_getpid>

08009f94 <_malloc_usable_size_r>:
 8009f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f98:	1f18      	subs	r0, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bfbc      	itt	lt
 8009f9e:	580b      	ldrlt	r3, [r1, r0]
 8009fa0:	18c0      	addlt	r0, r0, r3
 8009fa2:	4770      	bx	lr

08009fa4 <__swhatbuf_r>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fac:	2900      	cmp	r1, #0
 8009fae:	b096      	sub	sp, #88	@ 0x58
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	461e      	mov	r6, r3
 8009fb4:	da0d      	bge.n	8009fd2 <__swhatbuf_r+0x2e>
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	bf14      	ite	ne
 8009fc2:	2340      	movne	r3, #64	@ 0x40
 8009fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fc8:	2000      	movs	r0, #0
 8009fca:	6031      	str	r1, [r6, #0]
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	b016      	add	sp, #88	@ 0x58
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	466a      	mov	r2, sp
 8009fd4:	f000 f848 	bl	800a068 <_fstat_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	dbec      	blt.n	8009fb6 <__swhatbuf_r+0x12>
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fe6:	4259      	negs	r1, r3
 8009fe8:	4159      	adcs	r1, r3
 8009fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fee:	e7eb      	b.n	8009fc8 <__swhatbuf_r+0x24>

08009ff0 <__smakebuf_r>:
 8009ff0:	898b      	ldrh	r3, [r1, #12]
 8009ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ff4:	079d      	lsls	r5, r3, #30
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	d507      	bpl.n	800a00c <__smakebuf_r+0x1c>
 8009ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	2301      	movs	r3, #1
 800a006:	6163      	str	r3, [r4, #20]
 800a008:	b003      	add	sp, #12
 800a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00c:	ab01      	add	r3, sp, #4
 800a00e:	466a      	mov	r2, sp
 800a010:	f7ff ffc8 	bl	8009fa4 <__swhatbuf_r>
 800a014:	9f00      	ldr	r7, [sp, #0]
 800a016:	4605      	mov	r5, r0
 800a018:	4639      	mov	r1, r7
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff f904 	bl	8009228 <_malloc_r>
 800a020:	b948      	cbnz	r0, 800a036 <__smakebuf_r+0x46>
 800a022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a026:	059a      	lsls	r2, r3, #22
 800a028:	d4ee      	bmi.n	800a008 <__smakebuf_r+0x18>
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	e7e2      	b.n	8009ffc <__smakebuf_r+0xc>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	6020      	str	r0, [r4, #0]
 800a03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a046:	b15b      	cbz	r3, 800a060 <__smakebuf_r+0x70>
 800a048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 f81d 	bl	800a08c <_isatty_r>
 800a052:	b128      	cbz	r0, 800a060 <__smakebuf_r+0x70>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	431d      	orrs	r5, r3
 800a064:	81a5      	strh	r5, [r4, #12]
 800a066:	e7cf      	b.n	800a008 <__smakebuf_r+0x18>

0800a068 <_fstat_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	@ (800a088 <_fstat_r+0x20>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	f7f7 f990 	bl	800139a <_fstat>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	d102      	bne.n	800a084 <_fstat_r+0x1c>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	b103      	cbz	r3, 800a084 <_fstat_r+0x1c>
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	20040658 	.word	0x20040658

0800a08c <_isatty_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d06      	ldr	r5, [pc, #24]	@ (800a0a8 <_isatty_r+0x1c>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	f7f7 f98f 	bl	80013ba <_isatty>
 800a09c:	1c43      	adds	r3, r0, #1
 800a09e:	d102      	bne.n	800a0a6 <_isatty_r+0x1a>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	b103      	cbz	r3, 800a0a6 <_isatty_r+0x1a>
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	20040658 	.word	0x20040658

0800a0ac <_init>:
 800a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ae:	bf00      	nop
 800a0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b2:	bc08      	pop	{r3}
 800a0b4:	469e      	mov	lr, r3
 800a0b6:	4770      	bx	lr

0800a0b8 <_fini>:
 800a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ba:	bf00      	nop
 800a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0be:	bc08      	pop	{r3}
 800a0c0:	469e      	mov	lr, r3
 800a0c2:	4770      	bx	lr
