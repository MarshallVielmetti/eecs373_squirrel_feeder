
squirrel_feeder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d0  080093d0  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080093d0  080093d0  0000a3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093d8  080093d8  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093d8  080093d8  0000a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093dc  080093dc  0000a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20040000  080093e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  2004007c  0800945c  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004088c  0800945c  0000b88c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016da0  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  00021e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00025170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3c  00000000  00000000  00026410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030c67  00000000  00000000  0002724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ef0  00000000  00000000  00057eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001160c7  00000000  00000000  00071da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  00187eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0018d66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004007c 	.word	0x2004007c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009160 	.word	0x08009160

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040080 	.word	0x20040080
 80001fc:	08009160 	.word	0x08009160

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <CAMERA_Init>:
	 */
	void finish_image(void);
} CAMERA;


void CAMERA_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	CAMERA.init();
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <CAMERA_Init+0x10>)
 80005a6:	f000 f819 	bl	80005dc <_ZN6Camera4initEv>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20040098 	.word	0x20040098

080005b4 <CAMERA_Take_Photo>:

uint8_t CAMERA_Take_Photo(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	return CAMERA.take_photo();
 80005b8:	4802      	ldr	r0, [pc, #8]	@ (80005c4 <CAMERA_Take_Photo+0x10>)
 80005ba:	f000 f837 	bl	800062c <_ZN6Camera10take_photoEv>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20040098 	.word	0x20040098

080005c8 <CAMERA_Process>:

uint8_t CAMERA_Process(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	return CAMERA.process();
 80005cc:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <CAMERA_Process+0x10>)
 80005ce:	f000 f877 	bl	80006c0 <_ZN6Camera7processEv>
 80005d2:	4603      	mov	r3, r0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20040098 	.word	0x20040098

080005dc <_ZN6Camera4initEv>:


void Camera::init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	this->ready = false;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]

	this->cur_image_size = 0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
	this->cur_image_idx = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]

	this->pic_index = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	819a      	strh	r2, [r3, #12]
	this->rand_seed = rand() % 1000;
 80005fc:	f007 fbfc 	bl	8007df8 <rand>
 8000600:	4603      	mov	r3, r0
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <_ZN6Camera4initEv+0x4c>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	1191      	asrs	r1, r2, #6
 800060a:	17da      	asrs	r2, r3, #31
 800060c:	1a8a      	subs	r2, r1, r2
 800060e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	1a9a      	subs	r2, r3, r2
 8000618:	b292      	uxth	r2, r2
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	81da      	strh	r2, [r3, #14]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	10624dd3 	.word	0x10624dd3

0800062c <_ZN6Camera10take_photoEv>:


uint8_t Camera::take_photo(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (!this->ready) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <_ZN6Camera10take_photoEv+0x1a>
		return 0; // camera not ready, return failure
 8000642:	2300      	movs	r3, #0
 8000644:	e036      	b.n	80006b4 <_ZN6Camera10take_photoEv+0x88>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_TakePhoto();
 8000646:	f000 ff6f 	bl	8001528 <_Z16VC0706_TakePhotov>
 800064a:	4603      	mov	r3, r0
 800064c:	77fb      	strb	r3, [r7, #31]

	// Verify success and update state
	if (!success) {
 800064e:	7ffb      	ldrb	r3, [r7, #31]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <_ZN6Camera10take_photoEv+0x2c>
		return 0;
 8000654:	2300      	movs	r3, #0
 8000656:	e02d      	b.n	80006b4 <_ZN6Camera10take_photoEv+0x88>
	}

	success = VC0706_StopCapture();
 8000658:	f000 ffa2 	bl	80015a0 <_Z18VC0706_StopCapturev>
 800065c:	4603      	mov	r3, r0
 800065e:	77fb      	strb	r3, [r7, #31]

	if (!success) {
 8000660:	7ffb      	ldrb	r3, [r7, #31]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <_ZN6Camera10take_photoEv+0x3e>
		return 0;
 8000666:	2300      	movs	r3, #0
 8000668:	e024      	b.n	80006b4 <_ZN6Camera10take_photoEv+0x88>
	}

	/*
	 * Read in the length of the image
	 */
	this->cur_image_size = VC0706_ReadImageDataLength();
 800066a:	f000 ffcf 	bl	800160c <_Z26VC0706_ReadImageDataLengthv>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	605a      	str	r2, [r3, #4]

	/*
	 * Now initialize the file handle
	 */
	char img_name[20];
	sprintf(img_name, "%d-%d.jpg", this->pic_index, this->rand_seed);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	899b      	ldrh	r3, [r3, #12]
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	89db      	ldrh	r3, [r3, #14]
 8000680:	f107 0008 	add.w	r0, r7, #8
 8000684:	490d      	ldr	r1, [pc, #52]	@ (80006bc <_ZN6Camera10take_photoEv+0x90>)
 8000686:	f007 fcb7 	bl	8007ff8 <siprintf>
	f_open(&this->file_writer, img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	333c      	adds	r3, #60	@ 0x3c
 800068e:	f107 0108 	add.w	r1, r7, #8
 8000692:	221a      	movs	r2, #26
 8000694:	4618      	mov	r0, r3
 8000696:	f006 fd73 	bl	8007180 <f_open>

	this->pic_index++;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	899b      	ldrh	r3, [r3, #12]
 800069e:	3301      	adds	r3, #1
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	819a      	strh	r2, [r3, #12]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	this->cur_image_idx = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
	this->ready = 0; // no longer ready to take a new photo
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

	return 1;
 80006b2:	2301      	movs	r3, #1
};
 80006b4:	4618      	mov	r0, r3
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	08009178 	.word	0x08009178

080006c0 <_ZN6Camera7processEv>:


uint8_t Camera::process(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint8_t end_flag = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
	uint8_t num_chunks_processed = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80006d0:	e004      	b.n	80006dc <_ZN6Camera7processEv+0x1c>
		end_flag = process_chunk();
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f814 	bl	8000700 <_ZN6Camera13process_chunkEv>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d106      	bne.n	80006f0 <_ZN6Camera7processEv+0x30>
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	73ba      	strb	r2, [r7, #14]
 80006e8:	2b31      	cmp	r3, #49	@ 0x31
 80006ea:	d801      	bhi.n	80006f0 <_ZN6Camera7processEv+0x30>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <_ZN6Camera7processEv+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1ed      	bne.n	80006d2 <_ZN6Camera7processEv+0x12>
	}

	return end_flag; // 1 means the last chunk was read
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <_ZN6Camera13process_chunkEv>:

uint8_t Camera::process_chunk(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	uint8_t status = VC0706_ReadImageBlock(this->img_read_buf, this->cur_image_idx);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f103 0210 	add.w	r2, r3, #16
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f000 ffa3 	bl	8001660 <_Z21VC0706_ReadImageBlockPhm>
 800071a:	4603      	mov	r3, r0
 800071c:	73fb      	strb	r3, [r7, #15]

	if (!status) {
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <_ZN6Camera13process_chunkEv+0x28>
		return 0;
 8000724:	2300      	movs	r3, #0
 8000726:	e01c      	b.n	8000762 <_ZN6Camera13process_chunkEv+0x62>
	}

	UINT bytes_wrote;
	f_write(&this->file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3310      	adds	r3, #16
 8000732:	1d59      	adds	r1, r3, #5
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2220      	movs	r2, #32
 800073a:	f006 fedb 	bl	80074f4 <f_write>

	this->cur_image_idx += 0x20;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	f103 0220 	add.w	r2, r3, #32
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	609a      	str	r2, [r3, #8]

	if (this->cur_image_idx >= this->cur_image_size) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	d304      	bcc.n	8000760 <_ZN6Camera13process_chunkEv+0x60>
		this->finish_image(); // needs to perform the final processing in this->finish_image
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f807 	bl	800076a <_ZN6Camera12finish_imageEv>
		return 1;
 800075c:	2301      	movs	r3, #1
 800075e:	e000      	b.n	8000762 <_ZN6Camera13process_chunkEv+0x62>
	}

	return 0; //normal case
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_ZN6Camera12finish_imageEv>:

void Camera::finish_image() {
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	VC0706_ReadImageBlock(this->img_read_buf, this->cur_image_idx);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f103 0210 	add.w	r2, r3, #16
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4619      	mov	r1, r3
 800077e:	4610      	mov	r0, r2
 8000780:	f000 ff6e 	bl	8001660 <_Z21VC0706_ReadImageBlockPhm>

	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8000784:	2301      	movs	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e01d      	b.n	80007c6 <_ZN6Camera12finish_imageEv+0x5c>
		if (this->img_read_buf[i-1 + 5] == 0xFF && this->img_read_buf[i + 5] == 0xD9) {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3304      	adds	r3, #4
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	7c1b      	ldrb	r3, [r3, #16]
 8000794:	2bff      	cmp	r3, #255	@ 0xff
 8000796:	d113      	bne.n	80007c0 <_ZN6Camera12finish_imageEv+0x56>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3305      	adds	r3, #5
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	7c1b      	ldrb	r3, [r3, #16]
 80007a2:	2bd9      	cmp	r3, #217	@ 0xd9
 80007a4:	d10c      	bne.n	80007c0 <_ZN6Camera12finish_imageEv+0x56>
			// found end sequence
			f_write(&this->file_writer, this->img_read_buf + 5, i + 1, &bytes_wrote);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3310      	adds	r3, #16
 80007b0:	1d59      	adds	r1, r3, #5
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	f006 fe9b 	bl	80074f4 <f_write>
			break;
 80007be:	e005      	b.n	80007cc <_ZN6Camera12finish_imageEv+0x62>
	for (uint32_t i = 1; i < 32; i++) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	d9de      	bls.n	800078a <_ZN6Camera12finish_imageEv+0x20>
		}
	}

	f_close(&this->file_writer);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	333c      	adds	r3, #60	@ 0x3c
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 f882 	bl	80078da <f_close>

	this->ready = true; // ready to take a new image
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	701a      	strb	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN6LOGGER3LOGEPc>:
};

FIL LOGGER::fil;
FRESULT LOGGER::fres;

void LOGGER::LOG(char* DATA) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	LOGGER::fres = f_open(&LOGGER::fil, "log.txt", FA_WRITE | FA_OPEN_ALWAYS);
 80007ec:	2212      	movs	r2, #18
 80007ee:	4911      	ldr	r1, [pc, #68]	@ (8000834 <_ZN6LOGGER3LOGEPc+0x50>)
 80007f0:	4811      	ldr	r0, [pc, #68]	@ (8000838 <_ZN6LOGGER3LOGEPc+0x54>)
 80007f2:	f006 fcc5 	bl	8007180 <f_open>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <_ZN6LOGGER3LOGEPc+0x58>)
 80007fc:	701a      	strb	r2, [r3, #0]
	LOGGER::fres = f_lseek(&LOGGER::fil, f_size(&LOGGER::fil));
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <_ZN6LOGGER3LOGEPc+0x54>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <_ZN6LOGGER3LOGEPc+0x54>)
 8000806:	f007 f892 	bl	800792e <f_lseek>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <_ZN6LOGGER3LOGEPc+0x58>)
 8000810:	701a      	strb	r2, [r3, #0]

	UINT bytesWrote;
	f_write(&LOGGER::fil, DATA, strlen(DATA), &bytesWrote);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fcf4 	bl	8000200 <strlen>
 8000818:	4602      	mov	r2, r0
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <_ZN6LOGGER3LOGEPc+0x54>)
 8000822:	f006 fe67 	bl	80074f4 <f_write>
	f_close(&LOGGER::fil);
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <_ZN6LOGGER3LOGEPc+0x54>)
 8000828:	f007 f857 	bl	80078da <f_close>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08009184 	.word	0x08009184
 8000838:	20040304 	.word	0x20040304
 800083c:	20040534 	.word	0x20040534

08000840 <LOG>:
//	f_open(&fil, "log.txt", FA_WRITE | FA_OPEN_ALWAYS);
//	f_lseek(&fil, f_size(&fil));
	LOGGER::LOG_EVENT(event);
}

void LOG(char* DATA) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	LOGGER::LOG(DATA);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ffcb 	bl	80007e4 <_ZN6LOGGER3LOGEPc>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 ff68 	bl	800172e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f821 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f991 	bl	8000b88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000866:	f000 f8c7 	bl	80009f8 <MX_SPI1_Init>
  MX_SPI3_Init();
 800086a:	f000 f903 	bl	8000a74 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800086e:	f000 f93f 	bl	8000af0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000872:	f004 fe93 	bl	800559c <MX_FATFS_Init>
  MX_ADC1_Init();
 8000876:	f000 f85b 	bl	8000930 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // initialize file system
  FS_Init();
 800087a:	f000 fb8d 	bl	8000f98 <FS_Init>
  CAMERA_Init();
 800087e:	f7ff fe8f 	bl	80005a0 <CAMERA_Init>

  // required camera startup delay
  HAL_Delay(2500);
 8000882:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000886:	f000 ffc7 	bl	8001818 <HAL_Delay>

  CAMERA_Take_Photo();
 800088a:	f7ff fe93 	bl	80005b4 <CAMERA_Take_Photo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (!CAMERA_Process())
 800088e:	bf00      	nop
 8000890:	f7ff fe9a 	bl	80005c8 <CAMERA_Process>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0fa      	beq.n	8000890 <main+0x3a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  FS_Cleanup();
 800089a:	f000 fb97 	bl	8000fcc <FS_Cleanup>
 800089e:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b096      	sub	sp, #88	@ 0x58
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2244      	movs	r2, #68	@ 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f007 fc03 	bl	80080be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008ca:	f002 f95b 	bl	8002b84 <HAL_PWREx_ControlVoltageScaling>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d4:	f000 fb86 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008d8:	2310      	movs	r3, #16
 80008da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e4:	2360      	movs	r3, #96	@ 0x60
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 f9fb 	bl	8002cec <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fb72 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fe01 	bl	8003520 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000924:	f000 fb5e 	bl	8000fe4 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3758      	adds	r7, #88	@ 0x58
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000946:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000948:	4a29      	ldr	r2, [pc, #164]	@ (80009f0 <MX_ADC1_Init+0xc0>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800094c:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095e:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000964:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000966:	2204      	movs	r2, #4
 8000968:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800096c:	2200      	movs	r2, #0
 800096e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000970:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000972:	2200      	movs	r2, #0
 8000974:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000976:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000978:	2201      	movs	r2, #1
 800097a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_ADC1_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_ADC1_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_ADC1_Init+0xbc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_ADC1_Init+0xbc>)
 80009a8:	f001 f8fa 	bl	8001ba0 <HAL_ADC_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80009b2:	f000 fb17 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_ADC1_Init+0xc4>)
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ba:	2306      	movs	r3, #6
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c2:	237f      	movs	r3, #127	@ 0x7f
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c6:	2304      	movs	r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_ADC1_Init+0xbc>)
 80009d4:	f001 fa2a 	bl	8001e2c <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009de:	f000 fb01 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20040538 	.word	0x20040538
 80009f0:	50040000 	.word	0x50040000
 80009f4:	1d500080 	.word	0x1d500080

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_SPI1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_SPI1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a2e:	2220      	movs	r2, #32
 8000a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_SPI1_Init+0x74>)
 8000a58:	f003 fd38 	bl	80044cc <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fabf 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200405a0 	.word	0x200405a0
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <MX_SPI3_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000aaa:	2218      	movs	r2, #24
 8000aac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_SPI3_Init+0x74>)
 8000ad4:	f003 fcfa 	bl	80044cc <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fa81 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20040604 	.word	0x20040604
 8000aec:	40003c00 	.word	0x40003c00

08000af0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_USART3_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000afc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b3a:	f003 fd6a 	bl	8004612 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fa4e 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b4c:	f004 fc5c 	bl	8005408 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fa45 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f004 fc91 	bl	8005484 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fa3c 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f004 fc12 	bl	8005396 <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fa34 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20040668 	.word	0x20040668
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	4bb4      	ldr	r3, [pc, #720]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4ab3      	ldr	r2, [pc, #716]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4bb1      	ldr	r3, [pc, #708]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4bae      	ldr	r3, [pc, #696]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4aad      	ldr	r2, [pc, #692]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4bab      	ldr	r3, [pc, #684]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bce:	4ba8      	ldr	r3, [pc, #672]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4aa7      	ldr	r2, [pc, #668]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4ba5      	ldr	r3, [pc, #660]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	4ba2      	ldr	r3, [pc, #648]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	4aa1      	ldr	r2, [pc, #644]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	4a9b      	ldr	r2, [pc, #620]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0a:	4b99      	ldr	r3, [pc, #612]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b96      	ldr	r3, [pc, #600]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1a:	4a95      	ldr	r2, [pc, #596]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c22:	4b93      	ldr	r3, [pc, #588]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b90      	ldr	r3, [pc, #576]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	4a8f      	ldr	r2, [pc, #572]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c46:	4b8a      	ldr	r3, [pc, #552]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a89      	ldr	r2, [pc, #548]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b87      	ldr	r3, [pc, #540]	@ (8000e70 <MX_GPIO_Init+0x2e8>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c5e:	f002 f835 	bl	8002ccc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_0_0_Pin|MOTOR_0_1_Pin|MOTOR_0_2_Pin|MOTOR_0_3_Pin
 8000c62:	2200      	movs	r2, #0
 8000c64:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000c68:	4882      	ldr	r0, [pc, #520]	@ (8000e74 <MX_GPIO_Init+0x2ec>)
 8000c6a:	f001 ff53 	bl	8002b14 <HAL_GPIO_WritePin>
                          |MOTOR_1_0_Pin|MOTOR_1_1_Pin|MOTOR_1_2_Pin|MOTOR_1_3_Pin
                          |SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f001 ff4d 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_DC_Pin|PS1_CLK_Pin|PS0_CLK_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f242 2103 	movw	r1, #8707	@ 0x2203
 8000c80:	487d      	ldr	r0, [pc, #500]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000c82:	f001 ff47 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c86:	230c      	movs	r3, #12
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c96:	230d      	movs	r3, #13
 8000c98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4876      	ldr	r0, [pc, #472]	@ (8000e7c <MX_GPIO_Init+0x2f4>)
 8000ca2:	f001 fda5 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	486f      	ldr	r0, [pc, #444]	@ (8000e80 <MX_GPIO_Init+0x2f8>)
 8000cc2:	f001 fd95 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cd6:	230d      	movs	r3, #13
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4867      	ldr	r0, [pc, #412]	@ (8000e80 <MX_GPIO_Init+0x2f8>)
 8000ce2:	f001 fd85 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_0_0_Pin MOTOR_0_1_Pin MOTOR_0_2_Pin MOTOR_0_3_Pin
                           MOTOR_1_0_Pin MOTOR_1_1_Pin MOTOR_1_2_Pin MOTOR_1_3_Pin
                           SD_CS_Pin */
  GPIO_InitStruct.Pin = MOTOR_0_0_Pin|MOTOR_0_1_Pin|MOTOR_0_2_Pin|MOTOR_0_3_Pin
 8000ce6:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |MOTOR_1_0_Pin|MOTOR_1_1_Pin|MOTOR_1_2_Pin|MOTOR_1_3_Pin
                          |SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	485d      	ldr	r0, [pc, #372]	@ (8000e74 <MX_GPIO_Init+0x2ec>)
 8000d00:	f001 fd76 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d14:	2301      	movs	r3, #1
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d22:	f001 fd65 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d40:	f001 fd56 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_DC_Pin PS1_CLK_Pin PS0_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_DC_Pin|PS1_CLK_Pin|PS0_CLK_Pin;
 8000d44:	f242 2303 	movw	r3, #8707	@ 0x2203
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4846      	ldr	r0, [pc, #280]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000d5e:	f001 fd47 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000d62:	2344      	movs	r3, #68	@ 0x44
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4840      	ldr	r0, [pc, #256]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000d76:	f001 fd3b 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d7a:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4839      	ldr	r0, [pc, #228]	@ (8000e7c <MX_GPIO_Init+0x2f4>)
 8000d98:	f001 fd2a 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d9c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000dae:	2303      	movs	r3, #3
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4830      	ldr	r0, [pc, #192]	@ (8000e7c <MX_GPIO_Init+0x2f4>)
 8000dba:	f001 fd19 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4827      	ldr	r0, [pc, #156]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000ddc:	f001 fd08 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_DATA_Pin PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin|PS0_DATA_Pin;
 8000de0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000df6:	f001 fcfb 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e0c:	230e      	movs	r3, #14
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4818      	ldr	r0, [pc, #96]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000e18:	f001 fcea 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e2e:	230d      	movs	r3, #13
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	@ (8000e78 <MX_GPIO_Init+0x2f0>)
 8000e3a:	f001 fcd9 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e3e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e50:	2302      	movs	r3, #2
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <MX_GPIO_Init+0x2fc>)
 8000e5c:	f001 fcc8 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e60:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e00c      	b.n	8000e88 <MX_GPIO_Init+0x300>
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000800 	.word	0x48000800
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48001000 	.word	0x48001000
 8000e80:	48001400 	.word	0x48001400
 8000e84:	48000c00 	.word	0x48000c00
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	483b      	ldr	r0, [pc, #236]	@ (8000f88 <MX_GPIO_Init+0x400>)
 8000e9a:	f001 fca9 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4834      	ldr	r0, [pc, #208]	@ (8000f8c <MX_GPIO_Init+0x404>)
 8000ebc:	f001 fc98 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ec0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f001 fc86 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 fc78 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f00:	2301      	movs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f10:	2309      	movs	r3, #9
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481d      	ldr	r0, [pc, #116]	@ (8000f90 <MX_GPIO_Init+0x408>)
 8000f1c:	f001 fc68 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f20:	2304      	movs	r3, #4
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f30:	230c      	movs	r3, #12
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <MX_GPIO_Init+0x408>)
 8000f3c:	f001 fc58 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f40:	2378      	movs	r3, #120	@ 0x78
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f50:	2307      	movs	r3, #7
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_GPIO_Init+0x408>)
 8000f5c:	f001 fc48 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f60:	2301      	movs	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f70:	2302      	movs	r3, #2
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_GPIO_Init+0x40c>)
 8000f7c:	f001 fc38 	bl	80027f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f80:	bf00      	nop
 8000f82:	3738      	adds	r7, #56	@ 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48001800 	.word	0x48001800
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000c00 	.word	0x48000c00
 8000f94:	48001000 	.word	0x48001000

08000f98 <FS_Init>:
/* USER CODE BEGIN 4 */

/*
 * mounts the sd card -- if its not found, it blocks forever
 */
static void FS_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8000f9e:	af00      	add	r7, sp, #0
	FATFS FatFs; 	//Fatfs handle
	FRESULT fres; 	//Result after operations
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <FS_Init+0x30>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 f8a4 	bl	80070f4 <f_mount>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
	if (fres != FR_OK) {
 8000fb2:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <FS_Init+0x26>
		while(1);
 8000fba:	bf00      	nop
 8000fbc:	e7fd      	b.n	8000fba <FS_Init+0x22>
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	080091a4 	.word	0x080091a4

08000fcc <FS_Cleanup>:

/*
 * Unmounts the sd card
 */
static void FS_Cleanup(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4903      	ldr	r1, [pc, #12]	@ (8000fe0 <FS_Cleanup+0x14>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f006 f88d 	bl	80070f4 <f_mount>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080091a4 	.word	0x080091a4

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_MspInit+0x44>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6613      	str	r3, [r2, #96]	@ 0x60
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_MspInit+0x44>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	6593      	str	r3, [r2, #88]	@ 0x58
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ae      	sub	sp, #184	@ 0xb8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2294      	movs	r2, #148	@ 0x94
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f830 	bl	80080be <memset>
  if(hadc->Instance==ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <HAL_ADC_MspInit+0xc8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d147      	bne.n	80010f8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001068:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800106c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800106e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800107e:	2310      	movs	r3, #16
 8001080:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800108e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fcff 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010a4:	f7ff ff9e 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_ADC_MspInit+0xcc>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010d8:	2306      	movs	r3, #6
 80010da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010de:	230b      	movs	r3, #11
 80010e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f4:	f001 fb7c 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010f8:	bf00      	nop
 80010fa:	37b8      	adds	r7, #184	@ 0xb8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	50040000 	.word	0x50040000
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <HAL_SPI_MspInit+0xdc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d129      	bne.n	800117e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001134:	6613      	str	r3, [r2, #96]	@ 0x60
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a28      	ldr	r2, [pc, #160]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800115a:	23e0      	movs	r3, #224	@ 0xe0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116a:	2305      	movs	r3, #5
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001178:	f001 fb3a 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800117c:	e02d      	b.n	80011da <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1a      	ldr	r2, [pc, #104]	@ (80011ec <HAL_SPI_MspInit+0xe4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d128      	bne.n	80011da <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 800118e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001192:	6593      	str	r3, [r2, #88]	@ 0x58
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_SPI_MspInit+0xe0>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ca:	2306      	movs	r3, #6
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <HAL_SPI_MspInit+0xe8>)
 80011d6:	f001 fb0b 	bl	80027f0 <HAL_GPIO_Init>
}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	@ 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40013000 	.word	0x40013000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40003c00 	.word	0x40003c00
 80011f0:	48000800 	.word	0x48000800

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ae      	sub	sp, #184	@ 0xb8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2294      	movs	r2, #148	@ 0x94
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f006 ff52 	bl	80080be <memset>
  if(huart->Instance==USART3)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a21      	ldr	r2, [pc, #132]	@ (80012a4 <HAL_UART_MspInit+0xb0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d13b      	bne.n	800129c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001224:	2304      	movs	r3, #4
 8001226:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001228:	2300      	movs	r3, #0
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fc33 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800123c:	f7ff fed2 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 8001246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124a:	6593      	str	r3, [r2, #88]	@ 0x58
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 800124e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_UART_MspInit+0xb4>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8001270:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128a:	2307      	movs	r3, #7
 800128c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <HAL_UART_MspInit+0xb8>)
 8001298:	f001 faaa 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800129c:	bf00      	nop
 800129e:	37b8      	adds	r7, #184	@ 0xb8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000c00 	.word	0x48000c00

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001306:	f000 fa67 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}

0800130e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_kill>:

int _kill(int pid, int sig)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001328:	f006 ff18 	bl	800815c <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	2216      	movs	r2, #22
 8001330:	601a      	str	r2, [r3, #0]
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_exit>:

void _exit (int status)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffe7 	bl	800131e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <_exit+0x12>

08001354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
  }

  return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
  }
  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	@ (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f006 fe7c 	bl	800815c <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200a0000 	.word	0x200a0000
 8001490:	00000400 	.word	0x00000400
 8001494:	200406fc 	.word	0x200406fc
 8001498:	20040890 	.word	0x20040890

0800149c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <_Z18VC0706_SendCommandhPhh>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 80014d0:	2356      	movs	r3, #86	@ 0x56
 80014d2:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 80014d4:	2300      	movs	r3, #0
 80014d6:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
 80014e0:	e00c      	b.n	80014fc <_Z18VC0706_SendCommandhPhh+0x3c>
        buffer[3 + i] = params[i];
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	441a      	add	r2, r3
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	3303      	adds	r3, #3
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	3320      	adds	r3, #32
 80014f0:	443b      	add	r3, r7
 80014f2:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	3301      	adds	r3, #1
 80014fa:	77fb      	strb	r3, [r7, #31]
 80014fc:	7ffa      	ldrb	r2, [r7, #31]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3ee      	bcc.n	80014e2 <_Z18VC0706_SendCommandhPhh+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	b29b      	uxth	r3, r3
 8001508:	3303      	adds	r3, #3
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 010c 	add.w	r1, r7, #12
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <_Z18VC0706_SendCommandhPhh+0x64>)
 8001516:	f003 f8cc 	bl	80046b2 <HAL_UART_Transmit>
}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20040668 	.word	0x20040668

08001528 <_Z16VC0706_TakePhotov>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
	LOG("VC0706_TakePhoto");
 800152e:	481a      	ldr	r0, [pc, #104]	@ (8001598 <_Z16VC0706_TakePhotov+0x70>)
 8001530:	f7ff f986 	bl	8000840 <LOG>
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 8001534:	2301      	movs	r3, #1
 8001536:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2202      	movs	r2, #2
 800153e:	4619      	mov	r1, r3
 8001540:	2036      	movs	r0, #54	@ 0x36
 8001542:	f7ff ffbd 	bl	80014c0 <_Z18VC0706_SendCommandhPhh>

    // response array
    uint8_t response[5]={0};
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 800154e:	1d39      	adds	r1, r7, #4
 8001550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001554:	2205      	movs	r2, #5
 8001556:	4811      	ldr	r0, [pc, #68]	@ (800159c <_Z16VC0706_TakePhotov+0x74>)
 8001558:	f003 f939 	bl	80047ce <HAL_UART_Receive>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_Z16VC0706_TakePhotov+0x42>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8001566:	2300      	movs	r3, #0
 8001568:	e011      	b.n	800158e <_Z16VC0706_TakePhotov+0x66>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 800156a:	793b      	ldrb	r3, [r7, #4]
 800156c:	2b76      	cmp	r3, #118	@ 0x76
 800156e:	d10d      	bne.n	800158c <_Z16VC0706_TakePhotov+0x64>
 8001570:	797b      	ldrb	r3, [r7, #5]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <_Z16VC0706_TakePhotov+0x64>
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b36      	cmp	r3, #54	@ 0x36
 800157a:	d107      	bne.n	800158c <_Z16VC0706_TakePhotov+0x64>
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <_Z16VC0706_TakePhotov+0x64>
 8001582:	7a3b      	ldrb	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <_Z16VC0706_TakePhotov+0x64>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <_Z16VC0706_TakePhotov+0x66>
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	080091a8 	.word	0x080091a8
 800159c:	20040668 	.word	0x20040668

080015a0 <_Z18VC0706_StopCapturev>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 80015a6:	f240 3301 	movw	r3, #769	@ 0x301
 80015aa:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	2300      	movs	r3, #0
 80015b2:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2202      	movs	r2, #2
 80015ba:	4619      	mov	r1, r3
 80015bc:	2036      	movs	r0, #54	@ 0x36
 80015be:	f7ff ff7f 	bl	80014c0 <_Z18VC0706_SendCommandhPhh>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 80015c2:	1d39      	adds	r1, r7, #4
 80015c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c8:	2205      	movs	r2, #5
 80015ca:	480f      	ldr	r0, [pc, #60]	@ (8001608 <_Z18VC0706_StopCapturev+0x68>)
 80015cc:	f003 f8ff 	bl	80047ce <HAL_UART_Receive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d110      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015da:	793b      	ldrb	r3, [r7, #4]
 80015dc:	2b76      	cmp	r3, #118	@ 0x76
 80015de:	d10d      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10a      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b36      	cmp	r3, #54	@ 0x36
 80015ea:	d107      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d104      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015f2:	7a3b      	ldrb	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <_Z18VC0706_StopCapturev+0x5c>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <_Z18VC0706_StopCapturev+0x5e>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20040668 	.word	0x20040668

0800160c <_Z26VC0706_ReadImageDataLengthv>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 8001612:	2301      	movs	r3, #1
 8001614:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2202      	movs	r2, #2
 800161c:	4619      	mov	r1, r3
 800161e:	2034      	movs	r0, #52	@ 0x34
 8001620:	f7ff ff4e 	bl	80014c0 <_Z18VC0706_SendCommandhPhh>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8001624:	1d39      	adds	r1, r7, #4
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	2209      	movs	r2, #9
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <_Z26VC0706_ReadImageDataLengthv+0x50>)
 800162e:	f003 f8ce 	bl	80047ce <HAL_UART_Receive>
 8001632:	4603      	mov	r3, r0
 8001634:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <_Z26VC0706_ReadImageDataLengthv+0x34>
    	return 0;
 800163c:	2300      	movs	r3, #0
 800163e:	e008      	b.n	8001652 <_Z26VC0706_ReadImageDataLengthv+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8001650:	8abb      	ldrh	r3, [r7, #20]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20040668 	.word	0x20040668

08001660 <_Z21VC0706_ReadImageBlockPhm>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 800166a:	230c      	movs	r3, #12
 800166c:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8001672:	230a      	movs	r3, #10
 8001674:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b2db      	uxtb	r3, r3
 8001684:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8001698:	2320      	movs	r3, #32
 800169a:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 800169c:	2300      	movs	r3, #0
 800169e:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 80016a0:	23ff      	movs	r3, #255	@ 0xff
 80016a2:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	220d      	movs	r2, #13
 80016aa:	4619      	mov	r1, r3
 80016ac:	2032      	movs	r0, #50	@ 0x32
 80016ae:	f7ff ff07 	bl	80014c0 <_Z18VC0706_SendCommandhPhh>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	222a      	movs	r2, #42	@ 0x2a
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <_Z21VC0706_ReadImageBlockPhm+0x78>)
 80016bc:	f003 f887 	bl	80047ce <HAL_UART_Receive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	75fb      	strb	r3, [r7, #23]

    return status == HAL_OK;
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf0c      	ite	eq
 80016ca:	2301      	moveq	r3, #1
 80016cc:	2300      	movne	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20040668 	.word	0x20040668

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e0:	f7ff fedc 	bl	800149c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f006 fd2d 	bl	8008168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170e:	f7ff f8a2 	bl	8000856 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001718:	20040000 	.word	0x20040000
  ldr r1, =_edata
 800171c:	2004007c 	.word	0x2004007c
  ldr r2, =_sidata
 8001720:	080093e0 	.word	0x080093e0
  ldr r2, =_sbss
 8001724:	2004007c 	.word	0x2004007c
  ldr r4, =_ebss
 8001728:	2004088c 	.word	0x2004088c

0800172c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_IRQHandler>

0800172e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f001 f825 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f80e 	bl	8001760 <HAL_InitTick>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	e001      	b.n	8001754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001750:	f7ff fc4e 	bl	8000ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_InitTick+0x70>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_InitTick+0x6c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f001 f823 	bl	80027d6 <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d809      	bhi.n	80017b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 fffb 	bl	800279e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a8:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_InitTick+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e004      	b.n	80017c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e001      	b.n	80017c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20040008 	.word	0x20040008
 80017d0:	20040000 	.word	0x20040000
 80017d4:	20040004 	.word	0x20040004

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20040008 	.word	0x20040008
 80017fc:	20040700 	.word	0x20040700

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20040700 	.word	0x20040700

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20040008 	.word	0x20040008

08001860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3360      	adds	r3, #96	@ 0x60
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <LL_ADC_SetOffset+0x44>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	4313      	orrs	r3, r2
 80018f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	03fff000 	.word	0x03fff000

08001910 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3360      	adds	r3, #96	@ 0x60
 800191e:	461a      	mov	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3360      	adds	r3, #96	@ 0x60
 800194c:	461a      	mov	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	431a      	orrs	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001966:	bf00      	nop
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	615a      	str	r2, [r3, #20]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3330      	adds	r3, #48	@ 0x30
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	211f      	movs	r1, #31
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 011f 	and.w	r1, r3, #31
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3314      	adds	r3, #20
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	0e5b      	lsrs	r3, r3, #25
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	0d1b      	lsrs	r3, r3, #20
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2107      	movs	r1, #7
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	401a      	ands	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	0d1b      	lsrs	r3, r3, #20
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0318 	and.w	r3, r3, #24
 8001a6a:	4908      	ldr	r1, [pc, #32]	@ (8001a8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a6c:	40d9      	lsrs	r1, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	400b      	ands	r3, r1
 8001a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	0007ffff 	.word	0x0007ffff

08001a90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6093      	str	r3, [r2, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001aec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <LL_ADC_IsEnabled+0x18>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <LL_ADC_IsEnabled+0x1a>
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e129      	b.n	8001e0e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fa35 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff67 	bl	8001ab4 <LL_ADC_IsDeepPowerDownEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff4d 	bl	8001a90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff82 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff66 	bl	8001adc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c10:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_ADC_Init+0x278>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	4a81      	ldr	r2, [pc, #516]	@ (8001e1c <HAL_ADC_Init+0x27c>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f9      	bne.n	8001c26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff64 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff75 	bl	8001b52 <LL_ADC_REG_IsConversionOngoing>
 8001c68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 80c2 	bne.w	8001dfc <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80be 	bne.w	8001dfc <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c88:	f043 0202 	orr.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff49 	bl	8001b2c <LL_ADC_IsEnabled>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca0:	485f      	ldr	r0, [pc, #380]	@ (8001e20 <HAL_ADC_Init+0x280>)
 8001ca2:	f7ff ff43 	bl	8001b2c <LL_ADC_IsEnabled>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	485c      	ldr	r0, [pc, #368]	@ (8001e24 <HAL_ADC_Init+0x284>)
 8001cb4:	f7ff fdd4 	bl	8001860 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e5b      	ldrb	r3, [r3, #25]
 8001cbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	3b01      	subs	r3, #1
 8001cec:	045b      	lsls	r3, r3, #17
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b44      	ldr	r3, [pc, #272]	@ (8001e28 <HAL_ADC_Init+0x288>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff25 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 8001d2e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d140      	bne.n	8001db8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d13d      	bne.n	8001db8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d46:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d5e:	f023 0306 	bic.w	r3, r3, #6
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d118      	bne.n	8001da8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	e007      	b.n	8001db8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d10c      	bne.n	8001dda <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f023 010f 	bic.w	r1, r3, #15
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd8:	e007      	b.n	8001dea <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 020f 	bic.w	r2, r2, #15
 8001de8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dfa:	e007      	b.n	8001e0c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f043 0210 	orr.w	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20040000 	.word	0x20040000
 8001e1c:	053e2d63 	.word	0x053e2d63
 8001e20:	50040000 	.word	0x50040000
 8001e24:	50040300 	.word	0x50040300
 8001e28:	fff0c007 	.word	0xfff0c007

08001e2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x22>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e3d5      	b.n	80025fa <HAL_ADC_ConfigChannel+0x7ce>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fe79 	bl	8001b52 <LL_ADC_REG_IsConversionOngoing>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 83ba 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d824      	bhi.n	8001ec2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	3b02      	subs	r3, #2
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d81b      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x8e>
 8001e82:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <HAL_ADC_ConfigChannel+0x5c>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea1 	.word	0x08001ea1
 8001e90:	08001ea9 	.word	0x08001ea9
 8001e94:	08001eb1 	.word	0x08001eb1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e98:	230c      	movs	r3, #12
 8001e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e9e:	e010      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea6:	e00c      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ea8:	2318      	movs	r3, #24
 8001eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eae:	e008      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ec0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ed0:	f7ff fd62 	bl	8001998 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fe3a 	bl	8001b52 <LL_ADC_REG_IsConversionOngoing>
 8001ede:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe46 	bl	8001b78 <LL_ADC_INJ_IsConversionOngoing>
 8001eec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 81bf 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 81ba 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f0c:	d10f      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7ff fd69 	bl	80019f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd23 	bl	8001972 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f2c:	e00e      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f7ff fd58 	bl	80019f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fd13 	bl	8001972 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d00a      	beq.n	8001f84 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6919      	ldr	r1, [r3, #16]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f7e:	f7ff fca3 	bl	80018c8 <LL_ADC_SetOffset>
 8001f82:	e179      	b.n	8002278 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fcc0 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10a      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x184>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fcb5 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	f003 021f 	and.w	r2, r3, #31
 8001fae:	e01e      	b.n	8001fee <HAL_ADC_ConfigChannel+0x1c2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fcaa 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e004      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001fe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x1da>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	e018      	b.n	8002038 <HAL_ADC_ConfigChannel+0x20c>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800201a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800201e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e004      	b.n	8002038 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800202e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002038:	429a      	cmp	r2, r3
 800203a:	d106      	bne.n	800204a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fc79 	bl	800193c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fc5d 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x24a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc52 	bl	8001910 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	e01e      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x288>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fc47 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002094:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800209c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e004      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80020a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x2a0>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	e018      	b.n	80020fe <HAL_ADC_ConfigChannel+0x2d2>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80020e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e004      	b.n	80020fe <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020fe:	429a      	cmp	r2, r3
 8002100:	d106      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	2101      	movs	r1, #1
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc16 	bl	800193c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fbfa 	bl	8001910 <LL_ADC_GetOffsetChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_ADC_ConfigChannel+0x310>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fbef 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	f003 021f 	and.w	r2, r3, #31
 800213a:	e01e      	b.n	800217a <HAL_ADC_ConfigChannel+0x34e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2102      	movs	r1, #2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fbe4 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800215a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800215e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e004      	b.n	8002178 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800216e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x366>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	e014      	b.n	80021bc <HAL_ADC_ConfigChannel+0x390>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e004      	b.n	80021bc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80021b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2102      	movs	r1, #2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fbb7 	bl	800193c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2103      	movs	r1, #3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fb9b 	bl	8001910 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x3ce>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2103      	movs	r1, #3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fb90 	bl	8001910 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	e017      	b.n	800222a <HAL_ADC_ConfigChannel+0x3fe>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2103      	movs	r1, #3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fb85 	bl	8001910 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002214:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x416>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	e011      	b.n	8002266 <HAL_ADC_ConfigChannel+0x43a>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002252:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800225e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2103      	movs	r1, #3
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fb62 	bl	800193c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc55 	bl	8001b2c <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 813f 	bne.w	8002508 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f7ff fbd6 	bl	8001a48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a8e      	ldr	r2, [pc, #568]	@ (80024dc <HAL_ADC_ConfigChannel+0x6b0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 8130 	bne.w	8002508 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x4a4>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e019      	b.n	8002304 <HAL_ADC_ConfigChannel+0x4d8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80022ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	bf94      	ite	ls
 80022fe:	2301      	movls	r3, #1
 8002300:	2300      	movhi	r3, #0
 8002302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002304:	2b00      	cmp	r3, #0
 8002306:	d079      	beq.n	80023fc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x4f8>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	3301      	adds	r3, #1
 800231c:	069b      	lsls	r3, r3, #26
 800231e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002322:	e015      	b.n	8002350 <HAL_ADC_ConfigChannel+0x524>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002334:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x544>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2101      	movs	r1, #1
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	e017      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x574>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800237e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002388:	2320      	movs	r3, #32
 800238a:	e003      	b.n	8002394 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800238c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	ea42 0103 	orr.w	r1, r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x59a>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	e018      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5cc>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	e080      	b.n	80024fe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d107      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x5ec>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	069b      	lsls	r3, r3, #26
 8002412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002416:	e015      	b.n	8002444 <HAL_ADC_ConfigChannel+0x618>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800242a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	069b      	lsls	r3, r3, #26
 8002440:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x638>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	e017      	b.n	8002494 <HAL_ADC_ConfigChannel+0x668>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	61bb      	str	r3, [r7, #24]
  return result;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e003      	b.n	8002488 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x694>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	3b1e      	subs	r3, #30
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024be:	e01d      	b.n	80024fc <HAL_ADC_ConfigChannel+0x6d0>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	60fb      	str	r3, [r7, #12]
  return result;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e005      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x6bc>
 80024dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	f003 021f 	and.w	r2, r3, #31
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	051b      	lsls	r3, r3, #20
 80024f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002502:	4619      	mov	r1, r3
 8002504:	f7ff fa74 	bl	80019f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_ADC_ConfigChannel+0x7d8>)
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d06c      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002514:	483c      	ldr	r0, [pc, #240]	@ (8002608 <HAL_ADC_ConfigChannel+0x7dc>)
 8002516:	f7ff f9c9 	bl	80018ac <LL_ADC_GetCommonPathInternalCh>
 800251a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3a      	ldr	r2, [pc, #232]	@ (800260c <HAL_ADC_ConfigChannel+0x7e0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d127      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800252c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d121      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <HAL_ADC_ConfigChannel+0x7e4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d157      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002542:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002546:	4619      	mov	r1, r3
 8002548:	482f      	ldr	r0, [pc, #188]	@ (8002608 <HAL_ADC_ConfigChannel+0x7dc>)
 800254a:	f7ff f99c 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254e:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_ADC_ConfigChannel+0x7e8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	4a30      	ldr	r2, [pc, #192]	@ (8002618 <HAL_ADC_ConfigChannel+0x7ec>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002568:	e002      	b.n	8002570 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3b01      	subs	r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f9      	bne.n	800256a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002576:	e03a      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_ADC_ConfigChannel+0x7f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d113      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002586:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_ADC_ConfigChannel+0x7e4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d12a      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800259c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a0:	4619      	mov	r1, r3
 80025a2:	4819      	ldr	r0, [pc, #100]	@ (8002608 <HAL_ADC_ConfigChannel+0x7dc>)
 80025a4:	f7ff f96f 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a8:	e021      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <HAL_ADC_ConfigChannel+0x7f4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d11c      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <HAL_ADC_ConfigChannel+0x7e4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d111      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025d2:	4619      	mov	r1, r3
 80025d4:	480c      	ldr	r0, [pc, #48]	@ (8002608 <HAL_ADC_ConfigChannel+0x7dc>)
 80025d6:	f7ff f956 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
 80025da:	e008      	b.n	80025ee <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80025f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	37d8      	adds	r7, #216	@ 0xd8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	80080000 	.word	0x80080000
 8002608:	50040300 	.word	0x50040300
 800260c:	c7520000 	.word	0xc7520000
 8002610:	50040000 	.word	0x50040000
 8002614:	20040000 	.word	0x20040000
 8002618:	053e2d63 	.word	0x053e2d63
 800261c:	cb840000 	.word	0xcb840000
 8002620:	80000001 	.word	0x80000001

08002624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800264c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002656:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <__NVIC_SetPriorityGrouping+0x44>)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	60d3      	str	r3, [r2, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <__NVIC_GetPriorityGrouping+0x18>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	f003 0307 	and.w	r3, r3, #7
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	@ (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	@ (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	@ 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	@ 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff47 	bl	8002624 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff5c 	bl	800266c <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff8e 	bl	80026dc <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffb0 	bl	8002744 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e166      	b.n	8002ace <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8158 	beq.w	8002ac8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x40>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d017      	beq.n	80028ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80b2 	beq.w	8002ac8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b61      	ldr	r3, [pc, #388]	@ (8002aec <HAL_GPIO_Init+0x2fc>)
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	4a60      	ldr	r2, [pc, #384]	@ (8002aec <HAL_GPIO_Init+0x2fc>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002970:	4b5e      	ldr	r3, [pc, #376]	@ (8002aec <HAL_GPIO_Init+0x2fc>)
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800297c:	4a5c      	ldr	r2, [pc, #368]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a6:	d02b      	beq.n	8002a00 <HAL_GPIO_Init+0x210>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_GPIO_Init+0x304>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d025      	beq.n	80029fc <HAL_GPIO_Init+0x20c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a51      	ldr	r2, [pc, #324]	@ (8002af8 <HAL_GPIO_Init+0x308>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01f      	beq.n	80029f8 <HAL_GPIO_Init+0x208>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a50      	ldr	r2, [pc, #320]	@ (8002afc <HAL_GPIO_Init+0x30c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d019      	beq.n	80029f4 <HAL_GPIO_Init+0x204>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002b00 <HAL_GPIO_Init+0x310>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x200>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002b04 <HAL_GPIO_Init+0x314>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1fc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b08 <HAL_GPIO_Init+0x318>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1f8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4c      	ldr	r2, [pc, #304]	@ (8002b0c <HAL_GPIO_Init+0x31c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1f4>
 80029e0:	2307      	movs	r3, #7
 80029e2:	e00e      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e4:	2308      	movs	r3, #8
 80029e6:	e00c      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e8:	2306      	movs	r3, #6
 80029ea:	e00a      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029ec:	2305      	movs	r3, #5
 80029ee:	e008      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e006      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029f4:	2303      	movs	r3, #3
 80029f6:	e004      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e002      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_GPIO_Init+0x212>
 8002a00:	2300      	movs	r3, #0
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	f002 0203 	and.w	r2, r2, #3
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	4093      	lsls	r3, r2
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a12:	4937      	ldr	r1, [pc, #220]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a20:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a44:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a4a:	4b31      	ldr	r3, [pc, #196]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a6e:	4a28      	ldr	r2, [pc, #160]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a74:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a98:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac2:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <HAL_GPIO_Init+0x320>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f ae91 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	48000400 	.word	0x48000400
 8002af8:	48000800 	.word	0x48000800
 8002afc:	48000c00 	.word	0x48000c00
 8002b00:	48001000 	.word	0x48001000
 8002b04:	48001400 	.word	0x48001400
 8002b08:	48001800 	.word	0x48001800
 8002b0c:	48001c00 	.word	0x48001c00
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b54:	d102      	bne.n	8002b5c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b5a:	e00b      	b.n	8002b74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b6a:	d102      	bne.n	8002b72 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b70:	e000      	b.n	8002b74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b72:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40007000 	.word	0x40007000

08002b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d141      	bne.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b92:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d131      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba0:	4b47      	ldr	r3, [pc, #284]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba6:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb0:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bb8:	4a41      	ldr	r2, [pc, #260]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002bc0:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2232      	movs	r2, #50	@ 0x32
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	4a3f      	ldr	r2, [pc, #252]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0c9b      	lsrs	r3, r3, #18
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd6:	e002      	b.n	8002bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bde:	4b38      	ldr	r3, [pc, #224]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bea:	d102      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f2      	bne.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bf2:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d158      	bne.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e057      	b.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c04:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c14:	e04d      	b.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c1c:	d141      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1e:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d131      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c2c:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c32:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3c:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c44:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2232      	movs	r2, #50	@ 0x32
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c62:	e002      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d102      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	d112      	bne.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e011      	b.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ca0:	e007      	b.n	8002cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	20040000 	.word	0x20040000
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cda:	6053      	str	r3, [r2, #4]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f000 bc08 	b.w	8003510 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d00:	4b96      	ldr	r3, [pc, #600]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d0a:	4b94      	ldr	r3, [pc, #592]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80e4 	beq.w	8002eea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4c>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	f040 808b 	bne.w	8002e46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 8087 	bne.w	8002e46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d38:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x64>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e3df      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	4b81      	ldr	r3, [pc, #516]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_RCC_OscConfig+0x7e>
 8002d60:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d68:	e005      	b.n	8002d76 <HAL_RCC_OscConfig+0x8a>
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d223      	bcs.n	8002dc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fdcc 	bl	800391c <RCC_SetFlashLatencyFromMSIRange>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e3c0      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d8e:	4b73      	ldr	r3, [pc, #460]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a72      	ldr	r2, [pc, #456]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b70      	ldr	r3, [pc, #448]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	496d      	ldr	r1, [pc, #436]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dac:	4b6b      	ldr	r3, [pc, #428]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	4968      	ldr	r1, [pc, #416]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
 8002dc0:	e025      	b.n	8002e0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc2:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b63      	ldr	r3, [pc, #396]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4960      	ldr	r1, [pc, #384]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	495b      	ldr	r1, [pc, #364]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fd8c 	bl	800391c <RCC_SetFlashLatencyFromMSIRange>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e380      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e0e:	f000 fcc1 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b51      	ldr	r3, [pc, #324]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4950      	ldr	r1, [pc, #320]	@ (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002f64 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f68 <HAL_RCC_OscConfig+0x27c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fc94 	bl	8001760 <HAL_InitTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d052      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	e364      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d032      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e4e:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a42      	ldr	r2, [pc, #264]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fcd1 	bl	8001800 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e62:	f7fe fccd 	bl	8001800 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e34d      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e74:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e80:	4b36      	ldr	r3, [pc, #216]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a35      	ldr	r2, [pc, #212]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4930      	ldr	r1, [pc, #192]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	492b      	ldr	r1, [pc, #172]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 8002eb2:	e01a      	b.n	8002eea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eb4:	4b29      	ldr	r3, [pc, #164]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fc9e 	bl	8001800 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fc9a 	bl	8001800 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e31a      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1dc>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d073      	beq.n	8002fde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x21c>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d10e      	bne.n	8002f20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d063      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d15f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e2f7      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f28:	d106      	bne.n	8002f38 <HAL_RCC_OscConfig+0x24c>
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e025      	b.n	8002f84 <HAL_RCC_OscConfig+0x298>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f40:	d114      	bne.n	8002f6c <HAL_RCC_OscConfig+0x280>
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a02      	ldr	r2, [pc, #8]	@ (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e013      	b.n	8002f84 <HAL_RCC_OscConfig+0x298>
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08009200 	.word	0x08009200
 8002f64:	20040000 	.word	0x20040000
 8002f68:	20040004 	.word	0x20040004
 8002f6c:	4ba0      	ldr	r3, [pc, #640]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a9f      	ldr	r2, [pc, #636]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4b9d      	ldr	r3, [pc, #628]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a9c      	ldr	r2, [pc, #624]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fc38 	bl	8001800 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe fc34 	bl	8001800 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e2b4      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa6:	4b92      	ldr	r3, [pc, #584]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2a8>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fc24 	bl	8001800 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fc20 	bl	8001800 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e2a0      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fce:	4b88      	ldr	r3, [pc, #544]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2d0>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d060      	beq.n	80030ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x310>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d116      	bne.n	800302a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffc:	4b7c      	ldr	r3, [pc, #496]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_OscConfig+0x328>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e27d      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	4973      	ldr	r1, [pc, #460]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003028:	e040      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d023      	beq.n	800307a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003032:	4b6f      	ldr	r3, [pc, #444]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6e      	ldr	r2, [pc, #440]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fbdf 	bl	8001800 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fbdb 	bl	8001800 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e25b      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003058:	4b65      	ldr	r3, [pc, #404]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b62      	ldr	r3, [pc, #392]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	495f      	ldr	r1, [pc, #380]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e018      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b5d      	ldr	r3, [pc, #372]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5c      	ldr	r2, [pc, #368]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe fbbb 	bl	8001800 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe fbb7 	bl	8001800 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e237      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03c      	beq.n	8003132 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c0:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c6:	4a4a      	ldr	r2, [pc, #296]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fb96 	bl	8001800 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fb92 	bl	8001800 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e212      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCC_OscConfig+0x3ec>
 80030f8:	e01b      	b.n	8003132 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003100:	4a3b      	ldr	r2, [pc, #236]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fb79 	bl	8001800 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fb75 	bl	8001800 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e1f5      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003124:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ef      	bne.n	8003112 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a6 	beq.w	800328c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003140:	2300      	movs	r3, #0
 8003142:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003144:	4b2a      	ldr	r3, [pc, #168]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10d      	bne.n	800316c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	4a26      	ldr	r2, [pc, #152]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315a:	6593      	str	r3, [r2, #88]	@ 0x58
 800315c:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003168:	2301      	movs	r3, #1
 800316a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316c:	4b21      	ldr	r3, [pc, #132]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d118      	bne.n	80031aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003178:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003184:	f7fe fb3c 	bl	8001800 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318c:	f7fe fb38 	bl	8001800 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1b8      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319e:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4d8>
 80031b2:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b8:	4a0d      	ldr	r2, [pc, #52]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c2:	e029      	b.n	8003218 <HAL_RCC_OscConfig+0x52c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d115      	bne.n	80031f8 <HAL_RCC_OscConfig+0x50c>
 80031cc:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	4a07      	ldr	r2, [pc, #28]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	4a03      	ldr	r2, [pc, #12]	@ (80031f0 <HAL_RCC_OscConfig+0x504>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ec:	e014      	b.n	8003218 <HAL_RCC_OscConfig+0x52c>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40007000 	.word	0x40007000
 80031f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a9c      	ldr	r2, [pc, #624]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003208:	4b99      	ldr	r3, [pc, #612]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	4a98      	ldr	r2, [pc, #608]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d016      	beq.n	800324e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe faee 	bl	8001800 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fe faea 	bl	8001800 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e168      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	4b8c      	ldr	r3, [pc, #560]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ed      	beq.n	8003228 <HAL_RCC_OscConfig+0x53c>
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fad7 	bl	8001800 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe fad3 	bl	8001800 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e151      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800326c:	4b80      	ldr	r3, [pc, #512]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ed      	bne.n	8003256 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b7b      	ldr	r3, [pc, #492]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	4a7a      	ldr	r2, [pc, #488]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d03c      	beq.n	8003312 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01c      	beq.n	80032da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032a0:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80032a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a6:	4a72      	ldr	r2, [pc, #456]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe faa6 	bl	8001800 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b8:	f7fe faa2 	bl	8001800 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e122      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ca:	4b69      	ldr	r3, [pc, #420]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80032cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCC_OscConfig+0x5cc>
 80032d8:	e01b      	b.n	8003312 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032da:	4b65      	ldr	r3, [pc, #404]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80032dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032e0:	4a63      	ldr	r2, [pc, #396]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fa89 	bl	8001800 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f2:	f7fe fa85 	bl	8001800 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e105      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003304:	4b5a      	ldr	r3, [pc, #360]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ef      	bne.n	80032f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80f9 	beq.w	800350e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	2b02      	cmp	r3, #2
 8003322:	f040 80cf 	bne.w	80034c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003326:	4b52      	ldr	r3, [pc, #328]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0203 	and.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	429a      	cmp	r2, r3
 8003338:	d12c      	bne.n	8003394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	3b01      	subs	r3, #1
 8003346:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d123      	bne.n	8003394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d11b      	bne.n	8003394 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003366:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d113      	bne.n	8003394 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d109      	bne.n	8003394 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d071      	beq.n	8003478 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d068      	beq.n	800346c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800339a:	4b35      	ldr	r3, [pc, #212]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033a6:	4b32      	ldr	r3, [pc, #200]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0ac      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80033bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033c2:	f7fe fa1d 	bl	8001800 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fa19 	bl	8001800 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e099      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e8:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <HAL_RCC_OscConfig+0x788>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003402:	0212      	lsls	r2, r2, #8
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800340a:	0852      	lsrs	r2, r2, #1
 800340c:	3a01      	subs	r2, #1
 800340e:	0552      	lsls	r2, r2, #21
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003416:	0852      	lsrs	r2, r2, #1
 8003418:	3a01      	subs	r2, #1
 800341a:	0652      	lsls	r2, r2, #25
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003422:	06d2      	lsls	r2, r2, #27
 8003424:	430a      	orrs	r2, r1
 8003426:	4912      	ldr	r1, [pc, #72]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0f      	ldr	r2, [pc, #60]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003436:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003438:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a0c      	ldr	r2, [pc, #48]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003444:	f7fe f9dc 	bl	8001800 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe f9d8 	bl	8001800 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e058      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_RCC_OscConfig+0x784>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346a:	e050      	b.n	800350e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04f      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
 8003470:	40021000 	.word	0x40021000
 8003474:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003478:	4b27      	ldr	r3, [pc, #156]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d144      	bne.n	800350e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003484:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a23      	ldr	r2, [pc, #140]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003490:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a20      	ldr	r2, [pc, #128]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800349c:	f7fe f9b0 	bl	8001800 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f9ac 	bl	8001800 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e02c      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x7b8>
 80034c2:	e024      	b.n	800350e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	d01f      	beq.n	800350a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a12      	ldr	r2, [pc, #72]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 80034d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe f993 	bl	8001800 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe f98f 	bl	8001800 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e00f      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4905      	ldr	r1, [pc, #20]	@ (8003518 <HAL_RCC_OscConfig+0x82c>)
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_OscConfig+0x830>)
 8003504:	4013      	ands	r3, r2
 8003506:	60cb      	str	r3, [r1, #12]
 8003508:	e001      	b.n	800350e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	feeefffc 	.word	0xfeeefffc

08003520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e11d      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b90      	ldr	r3, [pc, #576]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d910      	bls.n	8003568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b8d      	ldr	r3, [pc, #564]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	498b      	ldr	r1, [pc, #556]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e105      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b81      	ldr	r3, [pc, #516]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	429a      	cmp	r2, r3
 8003582:	d908      	bls.n	8003596 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b7e      	ldr	r3, [pc, #504]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	497b      	ldr	r1, [pc, #492]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d079      	beq.n	8003696 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d11e      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	4b75      	ldr	r3, [pc, #468]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0dc      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035ba:	f000 fa09 	bl	80039d0 <RCC_GetSysClockFreqFromPLLSource>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a70      	ldr	r2, [pc, #448]	@ (8003784 <HAL_RCC_ClockConfig+0x264>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d946      	bls.n	8003654 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d140      	bne.n	8003654 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035da:	4a69      	ldr	r2, [pc, #420]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e035      	b.n	8003654 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f0:	4b63      	ldr	r3, [pc, #396]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d115      	bne.n	8003628 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b9      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003608:	4b5d      	ldr	r3, [pc, #372]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0ad      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0a5      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003628:	f000 f8b4 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 800362c:	4603      	mov	r3, r0
 800362e:	4a55      	ldr	r2, [pc, #340]	@ (8003784 <HAL_RCC_ClockConfig+0x264>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d90f      	bls.n	8003654 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003634:	4b52      	ldr	r3, [pc, #328]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003640:	4b4f      	ldr	r3, [pc, #316]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003648:	4a4d      	ldr	r2, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800364a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800364e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003650:	2380      	movs	r3, #128	@ 0x80
 8003652:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003654:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4947      	ldr	r1, [pc, #284]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003666:	f7fe f8cb 	bl	8001800 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366c:	e00a      	b.n	8003684 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366e:	f7fe f8c7 	bl	8001800 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e077      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003684:	4b3e      	ldr	r3, [pc, #248]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 020c 	and.w	r2, r3, #12
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	429a      	cmp	r2, r3
 8003694:	d1eb      	bne.n	800366e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b80      	cmp	r3, #128	@ 0x80
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800369c:	4b38      	ldr	r3, [pc, #224]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a37      	ldr	r2, [pc, #220]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b31      	ldr	r3, [pc, #196]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d208      	bcs.n	80036d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	492b      	ldr	r1, [pc, #172]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d6:	4b29      	ldr	r3, [pc, #164]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d210      	bcs.n	8003706 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 020f 	bic.w	r2, r3, #15
 80036ec:	4923      	ldr	r1, [pc, #140]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f4:	4b21      	ldr	r3, [pc, #132]	@ (800377c <HAL_RCC_ClockConfig+0x25c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e036      	b.n	8003774 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4918      	ldr	r1, [pc, #96]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003730:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4910      	ldr	r1, [pc, #64]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003744:	f000 f826 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <HAL_RCC_ClockConfig+0x260>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	490c      	ldr	r1, [pc, #48]	@ (8003788 <HAL_RCC_ClockConfig+0x268>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <HAL_RCC_ClockConfig+0x26c>)
 8003762:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_RCC_ClockConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fff9 	bl	8001760 <HAL_InitTick>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]

  return status;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40022000 	.word	0x40022000
 8003780:	40021000 	.word	0x40021000
 8003784:	04c4b400 	.word	0x04c4b400
 8003788:	08009200 	.word	0x08009200
 800378c:	20040000 	.word	0x20040000
 8003790:	20040004 	.word	0x20040004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a2:	4b3e      	ldr	r3, [pc, #248]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ac:	4b3b      	ldr	r3, [pc, #236]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d121      	bne.n	8003806 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11e      	bne.n	8003806 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c8:	4b34      	ldr	r3, [pc, #208]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037d4:	4b31      	ldr	r3, [pc, #196]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 80037d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037e4:	4b2d      	ldr	r3, [pc, #180]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037f0:	4a2b      	ldr	r2, [pc, #172]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003804:	e00a      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d102      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e004      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d101      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003818:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800381a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d134      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0xa6>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d003      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xac>
 8003838:	e005      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800383a:	4b1a      	ldr	r3, [pc, #104]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800383c:	617b      	str	r3, [r7, #20]
      break;
 800383e:	e005      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003842:	617b      	str	r3, [r7, #20]
      break;
 8003844:	e002      	b.n	800384c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	617b      	str	r3, [r7, #20]
      break;
 800384a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3301      	adds	r3, #1
 8003858:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	fb03 f202 	mul.w	r2, r3, r2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_RCC_GetSysClockFreq+0x108>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	0e5b      	lsrs	r3, r3, #25
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	3301      	adds	r3, #1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800388c:	69bb      	ldr	r3, [r7, #24]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	08009218 	.word	0x08009218
 80038a4:	00f42400 	.word	0x00f42400
 80038a8:	007a1200 	.word	0x007a1200

080038ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20040000 	.word	0x20040000

080038c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038c8:	f7ff fff0 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4904      	ldr	r1, [pc, #16]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08009210 	.word	0x08009210

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038f4:	f7ff ffda 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0adb      	lsrs	r3, r3, #11
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	@ (8003918 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	08009210 	.word	0x08009210

0800391c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003934:	f7ff f906 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 8003938:	6178      	str	r0, [r7, #20]
 800393a:	e014      	b.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4a21      	ldr	r2, [pc, #132]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff f8f6 	bl	8002b44 <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b1b      	ldr	r3, [pc, #108]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395e:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396c:	d10b      	bne.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b80      	cmp	r3, #128	@ 0x80
 8003972:	d913      	bls.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2ba0      	cmp	r3, #160	@ 0xa0
 8003978:	d902      	bls.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800397a:	2302      	movs	r3, #2
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e00d      	b.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003980:	2301      	movs	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e00a      	b.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b7f      	cmp	r3, #127	@ 0x7f
 800398a:	d902      	bls.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800398c:	2302      	movs	r3, #2
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e004      	b.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b70      	cmp	r3, #112	@ 0x70
 8003996:	d101      	bne.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003998:	2301      	movs	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 020f 	bic.w	r2, r3, #15
 80039a4:	4909      	ldr	r1, [pc, #36]	@ (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40022000 	.word	0x40022000

080039d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d00b      	beq.n	80039fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d825      	bhi.n	8003a38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d008      	beq.n	8003a04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11f      	bne.n	8003a38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80039f8:	4b25      	ldr	r3, [pc, #148]	@ (8003a90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039fa:	613b      	str	r3, [r7, #16]
    break;
 80039fc:	e01f      	b.n	8003a3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80039fe:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a00:	613b      	str	r3, [r7, #16]
    break;
 8003a02:	e01c      	b.n	8003a3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a04:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e005      	b.n	8003a2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a20:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	613b      	str	r3, [r7, #16]
    break;
 8003a36:	e002      	b.n	8003a3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
    break;
 8003a3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	fb03 f202 	mul.w	r2, r3, r2
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a7e:	683b      	ldr	r3, [r7, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	007a1200 	.word	0x007a1200
 8003a98:	08009218 	.word	0x08009218

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d040      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	d02a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ac0:	2b80      	cmp	r3, #128	@ 0x80
 8003ac2:	d825      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ac4:	2b60      	cmp	r3, #96	@ 0x60
 8003ac6:	d026      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ac8:	2b60      	cmp	r3, #96	@ 0x60
 8003aca:	d821      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	d006      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d81d      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d010      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003adc:	e018      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ade:	4b89      	ldr	r3, [pc, #548]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	4a88      	ldr	r2, [pc, #544]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aea:	e015      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb02 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3320      	adds	r3, #32
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fbed 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	74fb      	strb	r3, [r7, #19]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b1e:	4b79      	ldr	r3, [pc, #484]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b24:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2c:	4975      	ldr	r1, [pc, #468]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d047      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d030      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b54:	d82a      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5a:	d02a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b60:	d824      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6c:	d81e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b76:	d010      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b78:	e018      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b7a:	4b62      	ldr	r3, [pc, #392]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4a61      	ldr	r2, [pc, #388]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b86:	e015      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fab4 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3320      	adds	r3, #32
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fb9f 	bl	80042e4 <RCCEx_PLLSAI2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bba:	4b52      	ldr	r3, [pc, #328]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	494e      	ldr	r1, [pc, #312]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003bd0:	e001      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 809f 	beq.w	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003be8:	4b46      	ldr	r3, [pc, #280]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b41      	ldr	r3, [pc, #260]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	4a40      	ldr	r2, [pc, #256]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c16:	2301      	movs	r3, #1
 8003c18:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c26:	f7fd fdeb 	bl	8001800 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c2c:	e009      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fde7 	bl	8001800 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d902      	bls.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003c40:	e005      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ef      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d15b      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c54:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01f      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d019      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c72:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c7e:	4b21      	ldr	r3, [pc, #132]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	4a1b      	ldr	r2, [pc, #108]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c9e:	4a19      	ldr	r2, [pc, #100]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fda6 	bl	8001800 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fda2 	bl	8001800 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d902      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	74fb      	strb	r3, [r7, #19]
            break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ec      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	4903      	ldr	r1, [pc, #12]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	74bb      	strb	r3, [r7, #18]
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d10:	7c7b      	ldrb	r3, [r7, #17]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4ba0      	ldr	r3, [pc, #640]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	4a9f      	ldr	r2, [pc, #636]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4b9a      	ldr	r3, [pc, #616]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	4996      	ldr	r1, [pc, #600]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d50:	4b91      	ldr	r3, [pc, #580]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	f023 020c 	bic.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	498e      	ldr	r1, [pc, #568]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d72:	4b89      	ldr	r3, [pc, #548]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d80:	4985      	ldr	r1, [pc, #532]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d94:	4b80      	ldr	r3, [pc, #512]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da2:	497d      	ldr	r1, [pc, #500]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db6:	4b78      	ldr	r3, [pc, #480]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc4:	4974      	ldr	r1, [pc, #464]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de6:	496c      	ldr	r1, [pc, #432]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfa:	4b67      	ldr	r3, [pc, #412]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e08:	4963      	ldr	r1, [pc, #396]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2a:	495b      	ldr	r1, [pc, #364]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e3e:	4b56      	ldr	r3, [pc, #344]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	4952      	ldr	r1, [pc, #328]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e60:	4b4d      	ldr	r3, [pc, #308]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	494a      	ldr	r1, [pc, #296]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e82:	4b45      	ldr	r3, [pc, #276]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	4941      	ldr	r1, [pc, #260]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb2:	4939      	ldr	r1, [pc, #228]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec6:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ecc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	4930      	ldr	r1, [pc, #192]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a2b      	ldr	r2, [pc, #172]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef0:	60d3      	str	r3, [r2, #12]
 8003ef2:	e011      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f8f9 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d04d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f2c:	d108      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f3e:	e012      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f46:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f50:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f5e:	490e      	ldr	r1, [pc, #56]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f70:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	60d3      	str	r3, [r2, #12]
 8003f7c:	e020      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f86:	d109      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a02      	ldr	r2, [pc, #8]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f92:	60d3      	str	r3, [r2, #12]
 8003f94:	e014      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f8a5 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d028      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fda:	4947      	ldr	r1, [pc, #284]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b42      	ldr	r3, [pc, #264]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a41      	ldr	r2, [pc, #260]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ffe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004002:	d10c      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f876 	bl	80040fc <RCCEx_PLLSAI1_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01e      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402a:	4b33      	ldr	r3, [pc, #204]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403a:	492f      	ldr	r1, [pc, #188]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800404c:	d10c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f851 	bl	80040fc <RCCEx_PLLSAI1_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004074:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800407a:	f023 0204 	bic.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004084:	491c      	ldr	r1, [pc, #112]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004098:	4b17      	ldr	r3, [pc, #92]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800409e:	f023 0218 	bic.w	r2, r3, #24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	4913      	ldr	r1, [pc, #76]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d017      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80040bc:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040cc:	490a      	ldr	r1, [pc, #40]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000

080040fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800410a:	4b72      	ldr	r3, [pc, #456]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004116:	4b6f      	ldr	r3, [pc, #444]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0203 	and.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d103      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
       ||
 800412a:	2b00      	cmp	r3, #0
 800412c:	d142      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e03f      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d018      	beq.n	800416e <RCCEx_PLLSAI1_Config+0x72>
 800413c:	2b03      	cmp	r3, #3
 800413e:	d825      	bhi.n	800418c <RCCEx_PLLSAI1_Config+0x90>
 8004140:	2b01      	cmp	r3, #1
 8004142:	d002      	beq.n	800414a <RCCEx_PLLSAI1_Config+0x4e>
 8004144:	2b02      	cmp	r3, #2
 8004146:	d009      	beq.n	800415c <RCCEx_PLLSAI1_Config+0x60>
 8004148:	e020      	b.n	800418c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414a:	4b62      	ldr	r3, [pc, #392]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11d      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415a:	e01a      	b.n	8004192 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800415c:	4b5d      	ldr	r3, [pc, #372]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416c:	e013      	b.n	8004196 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800416e:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417a:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418a:	e006      	b.n	800419a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e004      	b.n	800419c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004192:	bf00      	nop
 8004194:	e002      	b.n	800419c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800419a:	bf00      	nop
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d108      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80041a2:	4b4c      	ldr	r3, [pc, #304]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4949      	ldr	r1, [pc, #292]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 8086 	bne.w	80042c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a44      	ldr	r2, [pc, #272]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd fb1a 	bl	8001800 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d0:	f7fd fb16 	bl	8001800 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
        break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041e4:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ef      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d113      	bne.n	8004224 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041fc:	4b35      	ldr	r3, [pc, #212]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	4b35      	ldr	r3, [pc, #212]	@ (80042d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	06d2      	lsls	r2, r2, #27
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6852      	ldr	r2, [r2, #4]
 8004216:	3a01      	subs	r2, #1
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	430a      	orrs	r2, r1
 800421c:	492d      	ldr	r1, [pc, #180]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800421e:	4313      	orrs	r3, r2
 8004220:	610b      	str	r3, [r1, #16]
 8004222:	e02d      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d115      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422a:	4b2a      	ldr	r3, [pc, #168]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	0211      	lsls	r1, r2, #8
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6912      	ldr	r2, [r2, #16]
 800423c:	0852      	lsrs	r2, r2, #1
 800423e:	3a01      	subs	r2, #1
 8004240:	0552      	lsls	r2, r2, #21
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6852      	ldr	r2, [r2, #4]
 8004248:	3a01      	subs	r2, #1
 800424a:	0112      	lsls	r2, r2, #4
 800424c:	430a      	orrs	r2, r1
 800424e:	4921      	ldr	r1, [pc, #132]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
 8004254:	e014      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004256:	4b1f      	ldr	r3, [pc, #124]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	0211      	lsls	r1, r2, #8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6952      	ldr	r2, [r2, #20]
 8004268:	0852      	lsrs	r2, r2, #1
 800426a:	3a01      	subs	r2, #1
 800426c:	0652      	lsls	r2, r2, #25
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	3a01      	subs	r2, #1
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	430a      	orrs	r2, r1
 800427a:	4916      	ldr	r1, [pc, #88]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004280:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a13      	ldr	r2, [pc, #76]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004286:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800428a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd fab8 	bl	8001800 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004294:	f7fd fab4 	bl	8001800 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
          break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ef      	beq.n	8004294 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	07ff800f 	.word	0x07ff800f
 80042dc:	ff9f800f 	.word	0xff9f800f
 80042e0:	f9ff800f 	.word	0xf9ff800f

080042e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b72      	ldr	r3, [pc, #456]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042fe:	4b6f      	ldr	r3, [pc, #444]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d103      	bne.n	8004316 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d142      	bne.n	800439c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e03f      	b.n	800439c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d018      	beq.n	8004356 <RCCEx_PLLSAI2_Config+0x72>
 8004324:	2b03      	cmp	r3, #3
 8004326:	d825      	bhi.n	8004374 <RCCEx_PLLSAI2_Config+0x90>
 8004328:	2b01      	cmp	r3, #1
 800432a:	d002      	beq.n	8004332 <RCCEx_PLLSAI2_Config+0x4e>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d009      	beq.n	8004344 <RCCEx_PLLSAI2_Config+0x60>
 8004330:	e020      	b.n	8004374 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004332:	4b62      	ldr	r3, [pc, #392]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11d      	bne.n	800437a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004342:	e01a      	b.n	800437a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004344:	4b5d      	ldr	r3, [pc, #372]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434c:	2b00      	cmp	r3, #0
 800434e:	d116      	bne.n	800437e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e013      	b.n	800437e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004356:	4b59      	ldr	r3, [pc, #356]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004362:	4b56      	ldr	r3, [pc, #344]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004372:	e006      	b.n	8004382 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      break;
 8004378:	e004      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800437a:	bf00      	nop
 800437c:	e002      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004382:	bf00      	nop
    }

    if(status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800438a:	4b4c      	ldr	r3, [pc, #304]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4949      	ldr	r1, [pc, #292]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004398:	4313      	orrs	r3, r2
 800439a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8086 	bne.w	80044b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043a4:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a44      	ldr	r2, [pc, #272]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b0:	f7fd fa26 	bl	8001800 <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043b6:	e009      	b.n	80043cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b8:	f7fd fa22 	bl	8001800 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ca:	e005      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043cc:	4b3b      	ldr	r3, [pc, #236]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ef      	bne.n	80043b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d168      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043e4:	4b35      	ldr	r3, [pc, #212]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6892      	ldr	r2, [r2, #8]
 80043f0:	0211      	lsls	r1, r2, #8
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	06d2      	lsls	r2, r2, #27
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6852      	ldr	r2, [r2, #4]
 80043fe:	3a01      	subs	r2, #1
 8004400:	0112      	lsls	r2, r2, #4
 8004402:	430a      	orrs	r2, r1
 8004404:	492d      	ldr	r1, [pc, #180]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	614b      	str	r3, [r1, #20]
 800440a:	e02d      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d115      	bne.n	800443e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004412:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004418:	4013      	ands	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	0211      	lsls	r1, r2, #8
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6912      	ldr	r2, [r2, #16]
 8004424:	0852      	lsrs	r2, r2, #1
 8004426:	3a01      	subs	r2, #1
 8004428:	0552      	lsls	r2, r2, #21
 800442a:	4311      	orrs	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	3a01      	subs	r2, #1
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	430a      	orrs	r2, r1
 8004436:	4921      	ldr	r1, [pc, #132]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	614b      	str	r3, [r1, #20]
 800443c:	e014      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443e:	4b1f      	ldr	r3, [pc, #124]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	4b21      	ldr	r3, [pc, #132]	@ (80044c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6892      	ldr	r2, [r2, #8]
 800444a:	0211      	lsls	r1, r2, #8
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6952      	ldr	r2, [r2, #20]
 8004450:	0852      	lsrs	r2, r2, #1
 8004452:	3a01      	subs	r2, #1
 8004454:	0652      	lsls	r2, r2, #25
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6852      	ldr	r2, [r2, #4]
 800445c:	3a01      	subs	r2, #1
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	430a      	orrs	r2, r1
 8004462:	4916      	ldr	r1, [pc, #88]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004468:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a13      	ldr	r2, [pc, #76]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fd f9c4 	bl	8001800 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800447a:	e009      	b.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800447c:	f7fd f9c0 	bl	8001800 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	73fb      	strb	r3, [r7, #15]
          break;
 800448e:	e005      	b.n	800449c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004490:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044a2:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	4904      	ldr	r1, [pc, #16]	@ (80044bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	07ff800f 	.word	0x07ff800f
 80044c4:	ff9f800f 	.word	0xff9f800f
 80044c8:	f9ff800f 	.word	0xf9ff800f

080044cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e095      	b.n	800460a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d108      	bne.n	80044f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ee:	d009      	beq.n	8004504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	61da      	str	r2, [r3, #28]
 80044f6:	e005      	b.n	8004504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fdf2 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800453a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004544:	d902      	bls.n	800454c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e002      	b.n	8004552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800454c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800455a:	d007      	beq.n	800456c <HAL_SPI_Init+0xa0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004564:	d002      	beq.n	800456c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 0204 	and.w	r2, r3, #4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045e8:	ea42 0103 	orr.w	r1, r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e042      	b.n	80046aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fddc 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	@ 0x24
 8004640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fc7b 	bl	8004f58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f97c 	bl	8004960 <UART_SetConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e01b      	b.n	80046aa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004680:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004690:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fcfa 	bl	800509c <UART_CheckIdleState>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b08a      	sub	sp, #40	@ 0x28
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d17b      	bne.n	80047c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Transmit+0x26>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e074      	b.n	80047c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2221      	movs	r2, #33	@ 0x21
 80046e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ec:	f7fd f888 	bl	8001800 <HAL_GetTick>
 80046f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470a:	d108      	bne.n	800471e <HAL_UART_Transmit+0x6c>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e003      	b.n	8004726 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004726:	e030      	b.n	800478a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	@ 0x80
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fd5c 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e03d      	b.n	80047c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475c:	b292      	uxth	r2, r2
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	3302      	adds	r3, #2
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e007      	b.n	8004778 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1c8      	bne.n	8004728 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	@ 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fd25 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e006      	b.n	80047c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b08a      	sub	sp, #40	@ 0x28
 80047d2:	af02      	add	r7, sp, #8
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	f040 80b6 	bne.w	8004956 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_UART_Receive+0x28>
 80047f0:	88fb      	ldrh	r3, [r7, #6]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0ae      	b.n	8004958 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2222      	movs	r2, #34	@ 0x22
 8004806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004810:	f7fc fff6 	bl	8001800 <HAL_GetTick>
 8004814:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	88fa      	ldrh	r2, [r7, #6]
 800481a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482e:	d10e      	bne.n	800484e <HAL_UART_Receive+0x80>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_UART_Receive+0x76>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800483e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004842:	e02d      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	22ff      	movs	r2, #255	@ 0xff
 8004848:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800484c:	e028      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_UART_Receive+0xa4>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <HAL_UART_Receive+0x9a>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	22ff      	movs	r2, #255	@ 0xff
 8004862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004866:	e01b      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	227f      	movs	r2, #127	@ 0x7f
 800486c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004870:	e016      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800487a:	d10d      	bne.n	8004898 <HAL_UART_Receive+0xca>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_UART_Receive+0xc0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	227f      	movs	r2, #127	@ 0x7f
 8004888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800488c:	e008      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	223f      	movs	r2, #63	@ 0x3f
 8004892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004896:	e003      	b.n	80048a0 <HAL_UART_Receive+0xd2>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80048a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b0:	d108      	bne.n	80048c4 <HAL_UART_Receive+0xf6>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e003      	b.n	80048cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048cc:	e037      	b.n	800493e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2120      	movs	r1, #32
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fc89 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e033      	b.n	8004958 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	8a7b      	ldrh	r3, [r7, #18]
 8004900:	4013      	ands	r3, r2
 8004902:	b29a      	uxth	r2, r3
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	3302      	adds	r3, #2
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e00d      	b.n	800492c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004916:	b29b      	uxth	r3, r3
 8004918:	b2da      	uxtb	r2, r3
 800491a:	8a7b      	ldrh	r3, [r7, #18]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4013      	ands	r3, r2
 8004920:	b2da      	uxtb	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3301      	adds	r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1c1      	bne.n	80048ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b08c      	sub	sp, #48	@ 0x30
 8004966:	af00      	add	r7, sp, #0
 8004968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	431a      	orrs	r2, r3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	431a      	orrs	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4313      	orrs	r3, r2
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4baa      	ldr	r3, [pc, #680]	@ (8004c38 <UART_SetConfig+0x2d8>)
 8004990:	4013      	ands	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004998:	430b      	orrs	r3, r1
 800499a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c3c <UART_SetConfig+0x2dc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c8:	4313      	orrs	r3, r2
 80049ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ea:	f023 010f 	bic.w	r1, r3, #15
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a90      	ldr	r2, [pc, #576]	@ (8004c40 <UART_SetConfig+0x2e0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d125      	bne.n	8004a50 <UART_SetConfig+0xf0>
 8004a04:	4b8f      	ldr	r3, [pc, #572]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d81a      	bhi.n	8004a48 <UART_SetConfig+0xe8>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <UART_SetConfig+0xb8>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a39 	.word	0x08004a39
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2e:	e116      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a36:	e112      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3e:	e10e      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	e10a      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4e:	e106      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a7c      	ldr	r2, [pc, #496]	@ (8004c48 <UART_SetConfig+0x2e8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d138      	bne.n	8004acc <UART_SetConfig+0x16c>
 8004a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d82d      	bhi.n	8004ac4 <UART_SetConfig+0x164>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x110>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004ac5 	.word	0x08004ac5
 8004a7c:	08004ac5 	.word	0x08004ac5
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004ac5 	.word	0x08004ac5
 8004a88:	08004ac5 	.word	0x08004ac5
 8004a8c:	08004ac5 	.word	0x08004ac5
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	08004ac5 	.word	0x08004ac5
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004abd 	.word	0x08004abd
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aaa:	e0d8      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004aac:	2302      	movs	r3, #2
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab2:	e0d4      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aba:	e0d0      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004abc:	2308      	movs	r3, #8
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac2:	e0cc      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aca:	e0c8      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c4c <UART_SetConfig+0x2ec>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d125      	bne.n	8004b22 <UART_SetConfig+0x1c2>
 8004ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d016      	beq.n	8004b12 <UART_SetConfig+0x1b2>
 8004ae4:	2b30      	cmp	r3, #48	@ 0x30
 8004ae6:	d818      	bhi.n	8004b1a <UART_SetConfig+0x1ba>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d00a      	beq.n	8004b02 <UART_SetConfig+0x1a2>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d814      	bhi.n	8004b1a <UART_SetConfig+0x1ba>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <UART_SetConfig+0x19a>
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d008      	beq.n	8004b0a <UART_SetConfig+0x1aa>
 8004af8:	e00f      	b.n	8004b1a <UART_SetConfig+0x1ba>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b00:	e0ad      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b02:	2302      	movs	r3, #2
 8004b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b08:	e0a9      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b10:	e0a5      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b12:	2308      	movs	r3, #8
 8004b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b18:	e0a1      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b20:	e09d      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a4a      	ldr	r2, [pc, #296]	@ (8004c50 <UART_SetConfig+0x2f0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d125      	bne.n	8004b78 <UART_SetConfig+0x218>
 8004b2c:	4b45      	ldr	r3, [pc, #276]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b38:	d016      	beq.n	8004b68 <UART_SetConfig+0x208>
 8004b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b3c:	d818      	bhi.n	8004b70 <UART_SetConfig+0x210>
 8004b3e:	2b80      	cmp	r3, #128	@ 0x80
 8004b40:	d00a      	beq.n	8004b58 <UART_SetConfig+0x1f8>
 8004b42:	2b80      	cmp	r3, #128	@ 0x80
 8004b44:	d814      	bhi.n	8004b70 <UART_SetConfig+0x210>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <UART_SetConfig+0x1f0>
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d008      	beq.n	8004b60 <UART_SetConfig+0x200>
 8004b4e:	e00f      	b.n	8004b70 <UART_SetConfig+0x210>
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e082      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e07e      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b60:	2304      	movs	r3, #4
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e07a      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6e:	e076      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b70:	2310      	movs	r3, #16
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b76:	e072      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a35      	ldr	r2, [pc, #212]	@ (8004c54 <UART_SetConfig+0x2f4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d12a      	bne.n	8004bd8 <UART_SetConfig+0x278>
 8004b82:	4b30      	ldr	r3, [pc, #192]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b90:	d01a      	beq.n	8004bc8 <UART_SetConfig+0x268>
 8004b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0x270>
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9c:	d00c      	beq.n	8004bb8 <UART_SetConfig+0x258>
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba2:	d815      	bhi.n	8004bd0 <UART_SetConfig+0x270>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <UART_SetConfig+0x250>
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bac:	d008      	beq.n	8004bc0 <UART_SetConfig+0x260>
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x270>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb6:	e052      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	e04e      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e04a      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	e046      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd6:	e042      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <UART_SetConfig+0x2dc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d13a      	bne.n	8004c58 <UART_SetConfig+0x2f8>
 8004be2:	4b18      	ldr	r3, [pc, #96]	@ (8004c44 <UART_SetConfig+0x2e4>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bf0:	d01a      	beq.n	8004c28 <UART_SetConfig+0x2c8>
 8004bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bf6:	d81b      	bhi.n	8004c30 <UART_SetConfig+0x2d0>
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bfc:	d00c      	beq.n	8004c18 <UART_SetConfig+0x2b8>
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c02:	d815      	bhi.n	8004c30 <UART_SetConfig+0x2d0>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <UART_SetConfig+0x2b0>
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0c:	d008      	beq.n	8004c20 <UART_SetConfig+0x2c0>
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x2d0>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c16:	e022      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1e:	e01e      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	e01a      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2e:	e016      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c36:	e012      	b.n	8004c5e <UART_SetConfig+0x2fe>
 8004c38:	cfff69f3 	.word	0xcfff69f3
 8004c3c:	40008000 	.word	0x40008000
 8004c40:	40013800 	.word	0x40013800
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40004400 	.word	0x40004400
 8004c4c:	40004800 	.word	0x40004800
 8004c50:	40004c00 	.word	0x40004c00
 8004c54:	40005000 	.word	0x40005000
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4aae      	ldr	r2, [pc, #696]	@ (8004f1c <UART_SetConfig+0x5bc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	f040 8097 	bne.w	8004d98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d823      	bhi.n	8004cba <UART_SetConfig+0x35a>
 8004c72:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <UART_SetConfig+0x318>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004cbb 	.word	0x08004cbb
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cbb 	.word	0x08004cbb
 8004c88:	08004cab 	.word	0x08004cab
 8004c8c:	08004cbb 	.word	0x08004cbb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004cbb 	.word	0x08004cbb
 8004c98:	08004cb3 	.word	0x08004cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fe fe12 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ca2:	e010      	b.n	8004cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca4:	4b9e      	ldr	r3, [pc, #632]	@ (8004f20 <UART_SetConfig+0x5c0>)
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca8:	e00d      	b.n	8004cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004caa:	f7fe fd73 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8004cae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cb0:	e009      	b.n	8004cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cb8:	e005      	b.n	8004cc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8130 	beq.w	8004f2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	4a94      	ldr	r2, [pc, #592]	@ (8004f24 <UART_SetConfig+0x5c4>)
 8004cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d305      	bcc.n	8004cfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d903      	bls.n	8004d06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d04:	e113      	b.n	8004f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	2200      	movs	r2, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	60fa      	str	r2, [r7, #12]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	4a84      	ldr	r2, [pc, #528]	@ (8004f24 <UART_SetConfig+0x5c4>)
 8004d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d28:	f7fb fac2 	bl	80002b0 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	020b      	lsls	r3, r1, #8
 8004d3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d42:	0202      	lsls	r2, r0, #8
 8004d44:	6979      	ldr	r1, [r7, #20]
 8004d46:	6849      	ldr	r1, [r1, #4]
 8004d48:	0849      	lsrs	r1, r1, #1
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	4605      	mov	r5, r0
 8004d50:	eb12 0804 	adds.w	r8, r2, r4
 8004d54:	eb43 0905 	adc.w	r9, r3, r5
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	469a      	mov	sl, r3
 8004d60:	4693      	mov	fp, r2
 8004d62:	4652      	mov	r2, sl
 8004d64:	465b      	mov	r3, fp
 8004d66:	4640      	mov	r0, r8
 8004d68:	4649      	mov	r1, r9
 8004d6a:	f7fb faa1 	bl	80002b0 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4613      	mov	r3, r2
 8004d74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d7c:	d308      	bcc.n	8004d90 <UART_SetConfig+0x430>
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d84:	d204      	bcs.n	8004d90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e0ce      	b.n	8004f2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d96:	e0ca      	b.n	8004f2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da0:	d166      	bne.n	8004e70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004da2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d827      	bhi.n	8004dfa <UART_SetConfig+0x49a>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <UART_SetConfig+0x450>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dfb 	.word	0x08004dfb
 8004dc0:	08004deb 	.word	0x08004deb
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004dfb 	.word	0x08004dfb
 8004dcc:	08004dfb 	.word	0x08004dfb
 8004dd0:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fd76 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dda:	e014      	b.n	8004e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ddc:	f7fe fd88 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004de2:	e010      	b.n	8004e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	4b4e      	ldr	r3, [pc, #312]	@ (8004f20 <UART_SetConfig+0x5c0>)
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004de8:	e00d      	b.n	8004e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dea:	f7fe fcd3 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8004dee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004df0:	e009      	b.n	8004e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004df8:	e005      	b.n	8004e06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8090 	beq.w	8004f2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	4a44      	ldr	r2, [pc, #272]	@ (8004f24 <UART_SetConfig+0x5c4>)
 8004e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	441a      	add	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d916      	bls.n	8004e68 <UART_SetConfig+0x508>
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d212      	bcs.n	8004e68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f023 030f 	bic.w	r3, r3, #15
 8004e4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	8bfb      	ldrh	r3, [r7, #30]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	8bfa      	ldrh	r2, [r7, #30]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	e062      	b.n	8004f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e6e:	e05e      	b.n	8004f2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d828      	bhi.n	8004eca <UART_SetConfig+0x56a>
 8004e78:	a201      	add	r2, pc, #4	@ (adr r2, 8004e80 <UART_SetConfig+0x520>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ead 	.word	0x08004ead
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004ebb 	.word	0x08004ebb
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fd0e 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eaa:	e014      	b.n	8004ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eac:	f7fe fd20 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004eb2:	e010      	b.n	8004ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <UART_SetConfig+0x5c0>)
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004eb8:	e00d      	b.n	8004ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fe fc6b 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8004ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ec0:	e009      	b.n	8004ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ec8:	e005      	b.n	8004ed6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d028      	beq.n	8004f2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	4a10      	ldr	r2, [pc, #64]	@ (8004f24 <UART_SetConfig+0x5c4>)
 8004ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	441a      	add	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d910      	bls.n	8004f28 <UART_SetConfig+0x5c8>
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f0c:	d20c      	bcs.n	8004f28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e009      	b.n	8004f2e <UART_SetConfig+0x5ce>
 8004f1a:	bf00      	nop
 8004f1c:	40008000 	.word	0x40008000
 8004f20:	00f42400 	.word	0x00f42400
 8004f24:	08009248 	.word	0x08009248
      }
      else
      {
        ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3730      	adds	r7, #48	@ 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005056:	d10a      	bne.n	800506e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b098      	sub	sp, #96	@ 0x60
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ac:	f7fc fba8 	bl	8001800 <HAL_GetTick>
 80050b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d12f      	bne.n	8005120 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	2200      	movs	r2, #0
 80050ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f88e 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d022      	beq.n	8005120 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e6      	bne.n	80050da <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e063      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d149      	bne.n	80051c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005136:	2200      	movs	r2, #0
 8005138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f857 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03c      	beq.n	80051c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	623b      	str	r3, [r7, #32]
   return(result);
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800515c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005166:	633b      	str	r3, [r7, #48]	@ 0x30
 8005168:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	60fb      	str	r3, [r7, #12]
   return(result);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69b9      	ldr	r1, [r7, #24]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	617b      	str	r3, [r7, #20]
   return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e012      	b.n	80051e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3758      	adds	r7, #88	@ 0x58
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e04f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d04b      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fc faf9 	bl	8001800 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <UART_WaitOnFlagUntilTimeout+0x30>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e04e      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d037      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b80      	cmp	r3, #128	@ 0x80
 8005236:	d034      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b40      	cmp	r3, #64	@ 0x40
 800523c:	d031      	beq.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d110      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2208      	movs	r2, #8
 8005252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f838 	bl	80052ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2208      	movs	r2, #8
 800525e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e029      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527c:	d111      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005286:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f81e 	bl	80052ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00f      	b.n	80052c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0a0      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b095      	sub	sp, #84	@ 0x54
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e6      	bne.n	80052d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	61fb      	str	r3, [r7, #28]
   return(result);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e3      	bne.n	8005304 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d118      	bne.n	8005376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	60bb      	str	r3, [r7, #8]
   return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0310 	bic.w	r3, r3, #16
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	613b      	str	r3, [r7, #16]
   return(result);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	@ 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UARTEx_DisableFifoMode+0x16>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e027      	b.n	80053fc <HAL_UARTEx_DisableFifoMode+0x66>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	@ 0x24
 80053b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e02d      	b.n	800547c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	@ 0x24
 800542c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f84f 	bl	8005500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005498:	2302      	movs	r3, #2
 800549a:	e02d      	b.n	80054f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	@ 0x24
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f811 	bl	8005500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005520:	e031      	b.n	8005586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005522:	2308      	movs	r3, #8
 8005524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005526:	2308      	movs	r3, #8
 8005528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	0e5b      	lsrs	r3, r3, #25
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	0f5b      	lsrs	r3, r3, #29
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	7b3a      	ldrb	r2, [r7, #12]
 800554e:	4911      	ldr	r1, [pc, #68]	@ (8005594 <UARTEx_SetNbDataToProcess+0x94>)
 8005550:	5c8a      	ldrb	r2, [r1, r2]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005556:	7b3a      	ldrb	r2, [r7, #12]
 8005558:	490f      	ldr	r1, [pc, #60]	@ (8005598 <UARTEx_SetNbDataToProcess+0x98>)
 800555a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800555c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	7b7a      	ldrb	r2, [r7, #13]
 800556c:	4909      	ldr	r1, [pc, #36]	@ (8005594 <UARTEx_SetNbDataToProcess+0x94>)
 800556e:	5c8a      	ldrb	r2, [r1, r2]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005574:	7b7a      	ldrb	r2, [r7, #13]
 8005576:	4908      	ldr	r1, [pc, #32]	@ (8005598 <UARTEx_SetNbDataToProcess+0x98>)
 8005578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800557a:	fb93 f3f2 	sdiv	r3, r3, r2
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	08009260 	.word	0x08009260
 8005598:	08009268 	.word	0x08009268

0800559c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055a0:	4904      	ldr	r1, [pc, #16]	@ (80055b4 <MX_FATFS_Init+0x18>)
 80055a2:	4805      	ldr	r0, [pc, #20]	@ (80055b8 <MX_FATFS_Init+0x1c>)
 80055a4:	f002 fc18 	bl	8007dd8 <FATFS_LinkDriver>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b03      	ldr	r3, [pc, #12]	@ (80055bc <MX_FATFS_Init+0x20>)
 80055ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20040708 	.word	0x20040708
 80055b8:	2004000c 	.word	0x2004000c
 80055bc:	20040704 	.word	0x20040704

080055c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <USER_initialize+0x24>)
 80055dc:	2201      	movs	r2, #1
 80055de:	701a      	strb	r2, [r3, #0]
    return Stat;
 80055e0:	4b04      	ldr	r3, [pc, #16]	@ (80055f4 <USER_initialize+0x24>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20040009 	.word	0x20040009

080055f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <USER_status+0x24>)
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005608:	4b04      	ldr	r3, [pc, #16]	@ (800561c <USER_status+0x24>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20040009 	.word	0x20040009

08005620 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005630:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800564e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	603a      	str	r2, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
 8005668:	460b      	mov	r3, r1
 800566a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	4a08      	ldr	r2, [pc, #32]	@ (80056b0 <disk_status+0x30>)
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	79fa      	ldrb	r2, [r7, #7]
 8005698:	4905      	ldr	r1, [pc, #20]	@ (80056b0 <disk_status+0x30>)
 800569a:	440a      	add	r2, r1
 800569c:	7a12      	ldrb	r2, [r2, #8]
 800569e:	4610      	mov	r0, r2
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20040734 	.word	0x20040734

080056b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <disk_initialize+0x48>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4a0b      	ldr	r2, [pc, #44]	@ (80056fc <disk_initialize+0x48>)
 80056d0:	2101      	movs	r1, #1
 80056d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4a09      	ldr	r2, [pc, #36]	@ (80056fc <disk_initialize+0x48>)
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	79fa      	ldrb	r2, [r7, #7]
 80056e2:	4906      	ldr	r1, [pc, #24]	@ (80056fc <disk_initialize+0x48>)
 80056e4:	440a      	add	r2, r1
 80056e6:	7a12      	ldrb	r2, [r2, #8]
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20040734 	.word	0x20040734

08005700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4a0a      	ldr	r2, [pc, #40]	@ (800573c <disk_read+0x3c>)
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	689c      	ldr	r4, [r3, #8]
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	4a07      	ldr	r2, [pc, #28]	@ (800573c <disk_read+0x3c>)
 8005720:	4413      	add	r3, r2
 8005722:	7a18      	ldrb	r0, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	47a0      	blx	r4
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
}
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	bf00      	nop
 800573c:	20040734 	.word	0x20040734

08005740 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4a0a      	ldr	r2, [pc, #40]	@ (800577c <disk_write+0x3c>)
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68dc      	ldr	r4, [r3, #12]
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	4a07      	ldr	r2, [pc, #28]	@ (800577c <disk_write+0x3c>)
 8005760:	4413      	add	r3, r2
 8005762:	7a18      	ldrb	r0, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	47a0      	blx	r4
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	20040734 	.word	0x20040734

08005780 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	603a      	str	r2, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	460b      	mov	r3, r1
 800578e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	4a09      	ldr	r2, [pc, #36]	@ (80057b8 <disk_ioctl+0x38>)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	4906      	ldr	r1, [pc, #24]	@ (80057b8 <disk_ioctl+0x38>)
 80057a0:	440a      	add	r2, r1
 80057a2:	7a10      	ldrb	r0, [r2, #8]
 80057a4:	79b9      	ldrb	r1, [r7, #6]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20040734 	.word	0x20040734

080057bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3301      	adds	r3, #1
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b21b      	sxth	r3, r3
 80057dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80057de:	89fb      	ldrh	r3, [r7, #14]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3303      	adds	r3, #3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	3202      	adds	r2, #2
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	3201      	adds	r2, #1
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
	return rv;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	0a1b      	lsrs	r3, r3, #8
 80058a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	1c53      	adds	r3, r2, #1
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	6179      	str	r1, [r7, #20]
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <mem_cpy+0x1a>
	}
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	617a      	str	r2, [r7, #20]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3b01      	subs	r3, #1
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f3      	bne.n	8005912 <mem_set+0x10>
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	@ 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61fa      	str	r2, [r7, #28]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	61ba      	str	r2, [r7, #24]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3b01      	subs	r3, #1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <mem_cmp+0x40>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0eb      	beq.n	8005950 <mem_cmp+0x18>

	return r;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3724      	adds	r7, #36	@ 0x24
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005990:	e002      	b.n	8005998 <chk_chr+0x12>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3301      	adds	r3, #1
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <chk_chr+0x26>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d1f2      	bne.n	8005992 <chk_chr+0xc>
	return *str;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	781b      	ldrb	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e029      	b.n	8005a24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <chk_lock+0xb4>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4413      	add	r3, r2
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059de:	4a24      	ldr	r2, [pc, #144]	@ (8005a70 <chk_lock+0xb4>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	4413      	add	r3, r2
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d116      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80059f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a70 <chk_lock+0xb4>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	4413      	add	r3, r2
 80059f8:	3304      	adds	r3, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10c      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a04:	4a1a      	ldr	r2, [pc, #104]	@ (8005a70 <chk_lock+0xb4>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d102      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a18:	e007      	b.n	8005a2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d9d2      	bls.n	80059d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d109      	bne.n	8005a44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <chk_lock+0x80>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d101      	bne.n	8005a40 <chk_lock+0x84>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e010      	b.n	8005a62 <chk_lock+0xa6>
 8005a40:	2312      	movs	r3, #18
 8005a42:	e00e      	b.n	8005a62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <chk_lock+0xa0>
 8005a4a:	4a09      	ldr	r2, [pc, #36]	@ (8005a70 <chk_lock+0xb4>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4413      	add	r3, r2
 8005a52:	330c      	adds	r3, #12
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5a:	d101      	bne.n	8005a60 <chk_lock+0xa4>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	e000      	b.n	8005a62 <chk_lock+0xa6>
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20040714 	.word	0x20040714

08005a74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e002      	b.n	8005a86 <enq_lock+0x12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3301      	adds	r3, #1
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d806      	bhi.n	8005a9a <enq_lock+0x26>
 8005a8c:	4a09      	ldr	r2, [pc, #36]	@ (8005ab4 <enq_lock+0x40>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f2      	bne.n	8005a80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20040714 	.word	0x20040714

08005ab8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e01f      	b.n	8005b08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ac8:	4a41      	ldr	r2, [pc, #260]	@ (8005bd0 <inc_lock+0x118>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4413      	add	r3, r2
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d113      	bne.n	8005b02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ada:	4a3d      	ldr	r2, [pc, #244]	@ (8005bd0 <inc_lock+0x118>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d109      	bne.n	8005b02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005aee:	4a38      	ldr	r2, [pc, #224]	@ (8005bd0 <inc_lock+0x118>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	3308      	adds	r3, #8
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d006      	beq.n	8005b10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d9dc      	bls.n	8005ac8 <inc_lock+0x10>
 8005b0e:	e000      	b.n	8005b12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d132      	bne.n	8005b7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <inc_lock+0x6c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d806      	bhi.n	8005b38 <inc_lock+0x80>
 8005b2a:	4a29      	ldr	r2, [pc, #164]	@ (8005bd0 <inc_lock+0x118>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	4413      	add	r3, r2
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f2      	bne.n	8005b1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d101      	bne.n	8005b42 <inc_lock+0x8a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e040      	b.n	8005bc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4922      	ldr	r1, [pc, #136]	@ (8005bd0 <inc_lock+0x118>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	440b      	add	r3, r1
 8005b4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	491e      	ldr	r1, [pc, #120]	@ (8005bd0 <inc_lock+0x118>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	491a      	ldr	r1, [pc, #104]	@ (8005bd0 <inc_lock+0x118>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b70:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <inc_lock+0x118>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	4413      	add	r3, r2
 8005b78:	330c      	adds	r3, #12
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <inc_lock+0xe0>
 8005b84:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <inc_lock+0x118>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <inc_lock+0xe0>
 8005b94:	2300      	movs	r3, #0
 8005b96:	e015      	b.n	8005bc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <inc_lock+0xf8>
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <inc_lock+0x118>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4413      	add	r3, r2
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	e001      	b.n	8005bb4 <inc_lock+0xfc>
 8005bb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb4:	4906      	ldr	r1, [pc, #24]	@ (8005bd0 <inc_lock+0x118>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	440b      	add	r3, r1
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20040714 	.word	0x20040714

08005bd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d825      	bhi.n	8005c34 <dec_lock+0x60>
		n = Files[i].ctr;
 8005be8:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <dec_lock+0x74>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfc:	d101      	bne.n	8005c02 <dec_lock+0x2e>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <dec_lock+0x3a>
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <dec_lock+0x74>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4413      	add	r3, r2
 8005c16:	330c      	adds	r3, #12
 8005c18:	89fa      	ldrh	r2, [r7, #14]
 8005c1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <dec_lock+0x5a>
 8005c22:	4a09      	ldr	r2, [pc, #36]	@ (8005c48 <dec_lock+0x74>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	4413      	add	r3, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	737b      	strb	r3, [r7, #13]
 8005c32:	e001      	b.n	8005c38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c34:	2302      	movs	r3, #2
 8005c36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c38:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20040714 	.word	0x20040714

08005c4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e010      	b.n	8005c7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c90 <clear_lock+0x44>)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	4413      	add	r3, r2
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d105      	bne.n	8005c76 <clear_lock+0x2a>
 8005c6a:	4a09      	ldr	r2, [pc, #36]	@ (8005c90 <clear_lock+0x44>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	4413      	add	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9eb      	bls.n	8005c5a <clear_lock+0xe>
	}
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20040714 	.word	0x20040714

08005c94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	78db      	ldrb	r3, [r3, #3]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d034      	beq.n	8005d12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7858      	ldrb	r0, [r3, #1]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005cb8:	2301      	movs	r3, #1
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f7ff fd40 	bl	8005740 <disk_write>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	e022      	b.n	8005d12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d217      	bcs.n	8005d12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	789b      	ldrb	r3, [r3, #2]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e010      	b.n	8005d0c <sync_window+0x78>
					wsect += fs->fsize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7858      	ldrb	r0, [r3, #1]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005cfe:	2301      	movs	r3, #1
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	f7ff fd1d 	bl	8005740 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d8eb      	bhi.n	8005cea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d01b      	beq.n	8005d6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ffad 	bl	8005c94 <sync_window>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7858      	ldrb	r0, [r3, #1]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005d4e:	2301      	movs	r3, #1
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	f7ff fcd5 	bl	8005700 <disk_read>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff87 	bl	8005c94 <sync_window>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d158      	bne.n	8005e42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d148      	bne.n	8005e2a <sync_fs+0xb2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d144      	bne.n	8005e2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3330      	adds	r3, #48	@ 0x30
 8005da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fda9 	bl	8005902 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3330      	adds	r3, #48	@ 0x30
 8005db4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005db8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fd38 	bl	8005832 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3330      	adds	r3, #48	@ 0x30
 8005dc6:	4921      	ldr	r1, [pc, #132]	@ (8005e4c <sync_fs+0xd4>)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fd4d 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3330      	adds	r3, #48	@ 0x30
 8005dd2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005dd6:	491e      	ldr	r1, [pc, #120]	@ (8005e50 <sync_fs+0xd8>)
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fd45 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3330      	adds	r3, #48	@ 0x30
 8005de2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7ff fd3b 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3330      	adds	r3, #48	@ 0x30
 8005df6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7ff fd31 	bl	8005868 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	7858      	ldrb	r0, [r3, #1]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f7ff fc8e 	bl	8005740 <disk_write>
			fs->fsi_flag = 0;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fca4 	bl	8005780 <disk_ioctl>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <sync_fs+0xca>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	41615252 	.word	0x41615252
 8005e50:	61417272 	.word	0x61417272

08005e54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	3b02      	subs	r3, #2
 8005e62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	3b02      	subs	r3, #2
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d301      	bcc.n	8005e74 <clust2sect+0x20>
 8005e70:	2300      	movs	r3, #0
 8005e72:	e008      	b.n	8005e86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	895b      	ldrh	r3, [r3, #10]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	fb03 f202 	mul.w	r2, r3, r2
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	4413      	add	r3, r2
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d904      	bls.n	8005eb2 <get_fat+0x20>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e08e      	b.n	8005fd6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d061      	beq.n	8005f8a <get_fat+0xf8>
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	dc7b      	bgt.n	8005fc2 <get_fat+0x130>
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d002      	beq.n	8005ed4 <get_fat+0x42>
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d041      	beq.n	8005f56 <get_fat+0xc4>
 8005ed2:	e076      	b.n	8005fc2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	0a5b      	lsrs	r3, r3, #9
 8005eea:	4413      	add	r3, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	6938      	ldr	r0, [r7, #16]
 8005ef0:	f7ff ff14 	bl	8005d1c <move_window>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d166      	bne.n	8005fc8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	60fa      	str	r2, [r7, #12]
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	0a5b      	lsrs	r3, r3, #9
 8005f16:	4413      	add	r3, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f7ff fefe 	bl	8005d1c <move_window>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d152      	bne.n	8005fcc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <get_fat+0xba>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	091b      	lsrs	r3, r3, #4
 8005f4a:	e002      	b.n	8005f52 <get_fat+0xc0>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f52:	617b      	str	r3, [r7, #20]
			break;
 8005f54:	e03f      	b.n	8005fd6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	4413      	add	r3, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	6938      	ldr	r0, [r7, #16]
 8005f64:	f7ff feda 	bl	8005d1c <move_window>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d130      	bne.n	8005fd0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005f7c:	4413      	add	r3, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fc1c 	bl	80057bc <ld_word>
 8005f84:	4603      	mov	r3, r0
 8005f86:	617b      	str	r3, [r7, #20]
			break;
 8005f88:	e025      	b.n	8005fd6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6a1a      	ldr	r2, [r3, #32]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	09db      	lsrs	r3, r3, #7
 8005f92:	4413      	add	r3, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	6938      	ldr	r0, [r7, #16]
 8005f98:	f7ff fec0 	bl	8005d1c <move_window>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d118      	bne.n	8005fd4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fc1a 	bl	80057ec <ld_dword>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005fbe:	617b      	str	r3, [r7, #20]
			break;
 8005fc0:	e009      	b.n	8005fd6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e006      	b.n	8005fd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fc8:	bf00      	nop
 8005fca:	e004      	b.n	8005fd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fd4:	bf00      	nop
		}
	}

	return val;
 8005fd6:	697b      	ldr	r3, [r7, #20]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005fec:	2302      	movs	r3, #2
 8005fee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	f240 80d9 	bls.w	80061aa <put_fat+0x1ca>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	f080 80d3 	bcs.w	80061aa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b03      	cmp	r3, #3
 800600a:	f000 8096 	beq.w	800613a <put_fat+0x15a>
 800600e:	2b03      	cmp	r3, #3
 8006010:	f300 80cb 	bgt.w	80061aa <put_fat+0x1ca>
 8006014:	2b01      	cmp	r3, #1
 8006016:	d002      	beq.n	800601e <put_fat+0x3e>
 8006018:	2b02      	cmp	r3, #2
 800601a:	d06e      	beq.n	80060fa <put_fat+0x11a>
 800601c:	e0c5      	b.n	80061aa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	4413      	add	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	0a5b      	lsrs	r3, r3, #9
 8006034:	4413      	add	r3, r2
 8006036:	4619      	mov	r1, r3
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff fe6f 	bl	8005d1c <move_window>
 800603e:	4603      	mov	r3, r0
 8006040:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006042:	7ffb      	ldrb	r3, [r7, #31]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 80a9 	bne.w	800619c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	61b9      	str	r1, [r7, #24]
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	4413      	add	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <put_fat+0xa4>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	b25a      	sxtb	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	b25b      	sxtb	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b25b      	sxtb	r3, r3
 8006080:	b2db      	uxtb	r3, r3
 8006082:	e001      	b.n	8006088 <put_fat+0xa8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	0a5b      	lsrs	r3, r3, #9
 800609a:	4413      	add	r3, r2
 800609c:	4619      	mov	r1, r3
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fe3c 	bl	8005d1c <move_window>
 80060a4:	4603      	mov	r3, r0
 80060a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060a8:	7ffb      	ldrb	r3, [r7, #31]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d178      	bne.n	80061a0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	4413      	add	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <put_fat+0xf0>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e00e      	b.n	80060ee <put_fat+0x10e>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	f023 030f 	bic.w	r3, r3, #15
 80060da:	b25a      	sxtb	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	b25b      	sxtb	r3, r3
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b25b      	sxtb	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	70da      	strb	r2, [r3, #3]
			break;
 80060f8:	e057      	b.n	80061aa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	4413      	add	r3, r2
 8006104:	4619      	mov	r1, r3
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f7ff fe08 	bl	8005d1c <move_window>
 800610c:	4603      	mov	r3, r0
 800610e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d146      	bne.n	80061a4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006124:	4413      	add	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	b292      	uxth	r2, r2
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff fb80 	bl	8005832 <st_word>
			fs->wflag = 1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	70da      	strb	r2, [r3, #3]
			break;
 8006138:	e037      	b.n	80061aa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	4413      	add	r3, r2
 8006144:	4619      	mov	r1, r3
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff fde8 	bl	8005d1c <move_window>
 800614c:	4603      	mov	r3, r0
 800614e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006150:	7ffb      	ldrb	r3, [r7, #31]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d128      	bne.n	80061a8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800616a:	4413      	add	r3, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fb3d 	bl	80057ec <ld_dword>
 8006172:	4603      	mov	r3, r0
 8006174:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006178:	4323      	orrs	r3, r4
 800617a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800618a:	4413      	add	r3, r2
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fb6a 	bl	8005868 <st_dword>
			fs->wflag = 1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	70da      	strb	r2, [r3, #3]
			break;
 800619a:	e006      	b.n	80061aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800619c:	bf00      	nop
 800619e:	e004      	b.n	80061aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80061a0:	bf00      	nop
 80061a2:	e002      	b.n	80061aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 80061a8:	bf00      	nop
		}
	}
	return res;
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3724      	adds	r7, #36	@ 0x24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd90      	pop	{r4, r7, pc}

080061b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d904      	bls.n	80061da <remove_chain+0x26>
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d301      	bcc.n	80061de <remove_chain+0x2a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e04b      	b.n	8006276 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	69b8      	ldr	r0, [r7, #24]
 80061ec:	f7ff fef8 	bl	8005fe0 <put_fat>
 80061f0:	4603      	mov	r3, r0
 80061f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80061f4:	7ffb      	ldrb	r3, [r7, #31]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <remove_chain+0x4a>
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	e03b      	b.n	8006276 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fe46 	bl	8005e92 <get_fat>
 8006206:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d031      	beq.n	8006272 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <remove_chain+0x64>
 8006214:	2302      	movs	r3, #2
 8006216:	e02e      	b.n	8006276 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d101      	bne.n	8006224 <remove_chain+0x70>
 8006220:	2301      	movs	r3, #1
 8006222:	e028      	b.n	8006276 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006224:	2200      	movs	r2, #0
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	69b8      	ldr	r0, [r7, #24]
 800622a:	f7ff fed9 	bl	8005fe0 <put_fat>
 800622e:	4603      	mov	r3, r0
 8006230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <remove_chain+0x88>
 8006238:	7ffb      	ldrb	r3, [r7, #31]
 800623a:	e01c      	b.n	8006276 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	3b02      	subs	r3, #2
 8006246:	429a      	cmp	r2, r3
 8006248:	d20b      	bcs.n	8006262 <remove_chain+0xae>
			fs->free_clst++;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	791b      	ldrb	r3, [r3, #4]
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	b2da      	uxtb	r2, r3
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	d3c6      	bcc.n	80061fe <remove_chain+0x4a>
 8006270:	e000      	b.n	8006274 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006272:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10d      	bne.n	80062b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <create_chain+0x2c>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d31b      	bcc.n	80062e2 <create_chain+0x64>
 80062aa:	2301      	movs	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e018      	b.n	80062e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fded 	bl	8005e92 <get_fat>
 80062b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d801      	bhi.n	80062c4 <create_chain+0x46>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e070      	b.n	80063a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d101      	bne.n	80062d0 <create_chain+0x52>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	e06a      	b.n	80063a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d201      	bcs.n	80062de <create_chain+0x60>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	e063      	b.n	80063a6 <create_chain+0x128>
		scl = clst;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d307      	bcc.n	8006306 <create_chain+0x88>
				ncl = 2;
 80062f6:	2302      	movs	r3, #2
 80062f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d901      	bls.n	8006306 <create_chain+0x88>
 8006302:	2300      	movs	r3, #0
 8006304:	e04f      	b.n	80063a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fdc2 	bl	8005e92 <get_fat>
 800630e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d003      	beq.n	8006324 <create_chain+0xa6>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d101      	bne.n	8006328 <create_chain+0xaa>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	e03e      	b.n	80063a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	429a      	cmp	r2, r3
 800632e:	d1da      	bne.n	80062e6 <create_chain+0x68>
 8006330:	2300      	movs	r3, #0
 8006332:	e038      	b.n	80063a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006334:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006336:	f04f 32ff 	mov.w	r2, #4294967295
 800633a:	69f9      	ldr	r1, [r7, #28]
 800633c:	6938      	ldr	r0, [r7, #16]
 800633e:	f7ff fe4f 	bl	8005fe0 <put_fat>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <create_chain+0xe2>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6938      	ldr	r0, [r7, #16]
 8006358:	f7ff fe42 	bl	8005fe0 <put_fat>
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <create_chain+0x116>
		fs->last_clst = ncl;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	3b02      	subs	r3, #2
 8006376:	429a      	cmp	r2, r3
 8006378:	d804      	bhi.n	8006384 <create_chain+0x106>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	1e5a      	subs	r2, r3, #1
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	791b      	ldrb	r3, [r3, #4]
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	711a      	strb	r2, [r3, #4]
 8006392:	e007      	b.n	80063a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <create_chain+0x122>
 800639a:	f04f 33ff 	mov.w	r3, #4294967295
 800639e:	e000      	b.n	80063a2 <create_chain+0x124>
 80063a0:	2301      	movs	r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80063a4:	69fb      	ldr	r3, [r7, #28]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	3304      	adds	r3, #4
 80063c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	0a5b      	lsrs	r3, r3, #9
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	8952      	ldrh	r2, [r2, #10]
 80063ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	613a      	str	r2, [r7, #16]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <clmt_clust+0x3a>
 80063e4:	2300      	movs	r3, #0
 80063e6:	e010      	b.n	800640a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d307      	bcc.n	8006400 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	3304      	adds	r3, #4
 80063fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063fe:	e7e9      	b.n	80063d4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006400:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
}
 800640a:	4618      	mov	r0, r3
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800642c:	d204      	bcs.n	8006438 <dir_sdi+0x22>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006438:	2302      	movs	r3, #2
 800643a:	e063      	b.n	8006504 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <dir_sdi+0x46>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d902      	bls.n	800645c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10c      	bne.n	800647c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	8912      	ldrh	r2, [r2, #8]
 800646a:	4293      	cmp	r3, r2
 800646c:	d301      	bcc.n	8006472 <dir_sdi+0x5c>
 800646e:	2302      	movs	r3, #2
 8006470:	e048      	b.n	8006504 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	61da      	str	r2, [r3, #28]
 800647a:	e029      	b.n	80064d0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	895b      	ldrh	r3, [r3, #10]
 8006480:	025b      	lsls	r3, r3, #9
 8006482:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006484:	e019      	b.n	80064ba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fd01 	bl	8005e92 <get_fat>
 8006490:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d101      	bne.n	800649e <dir_sdi+0x88>
 800649a:	2301      	movs	r3, #1
 800649c:	e032      	b.n	8006504 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d904      	bls.n	80064ae <dir_sdi+0x98>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d301      	bcc.n	80064b2 <dir_sdi+0x9c>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e028      	b.n	8006504 <dir_sdi+0xee>
			ofs -= csz;
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d2e1      	bcs.n	8006486 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80064c2:	6979      	ldr	r1, [r7, #20]
 80064c4:	6938      	ldr	r0, [r7, #16]
 80064c6:	f7ff fcc5 	bl	8005e54 <clust2sect>
 80064ca:	4602      	mov	r2, r0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <dir_sdi+0xcc>
 80064de:	2302      	movs	r3, #2
 80064e0:	e010      	b.n	8006504 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	0a5b      	lsrs	r3, r3, #9
 80064ea:	441a      	add	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	3320      	adds	r3, #32
 8006522:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <dir_next+0x28>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006532:	d301      	bcc.n	8006538 <dir_next+0x2c>
 8006534:	2304      	movs	r3, #4
 8006536:	e0aa      	b.n	800668e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 8098 	bne.w	8006674 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	8912      	ldrh	r2, [r2, #8]
 800655e:	4293      	cmp	r3, r2
 8006560:	f0c0 8088 	bcc.w	8006674 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	61da      	str	r2, [r3, #28]
 800656a:	2304      	movs	r3, #4
 800656c:	e08f      	b.n	800668e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	0a5b      	lsrs	r3, r3, #9
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	8952      	ldrh	r2, [r2, #10]
 8006576:	3a01      	subs	r2, #1
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d17a      	bne.n	8006674 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7ff fc83 	bl	8005e92 <get_fat>
 800658c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d801      	bhi.n	8006598 <dir_next+0x8c>
 8006594:	2302      	movs	r3, #2
 8006596:	e07a      	b.n	800668e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d101      	bne.n	80065a4 <dir_next+0x98>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e074      	b.n	800668e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d358      	bcc.n	8006660 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	61da      	str	r2, [r3, #28]
 80065ba:	2304      	movs	r3, #4
 80065bc:	e067      	b.n	800668e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	4610      	mov	r0, r2
 80065c8:	f7ff fe59 	bl	800627e <create_chain>
 80065cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <dir_next+0xcc>
 80065d4:	2307      	movs	r3, #7
 80065d6:	e05a      	b.n	800668e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <dir_next+0xd6>
 80065de:	2302      	movs	r3, #2
 80065e0:	e055      	b.n	800668e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d101      	bne.n	80065ee <dir_next+0xe2>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e04f      	b.n	800668e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff fb50 	bl	8005c94 <sync_window>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <dir_next+0xf2>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e047      	b.n	800668e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3330      	adds	r3, #48	@ 0x30
 8006602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff f97a 	bl	8005902 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff fc1d 	bl	8005e54 <clust2sect>
 800661a:	4602      	mov	r2, r0
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006620:	e012      	b.n	8006648 <dir_next+0x13c>
						fs->wflag = 1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fb33 	bl	8005c94 <sync_window>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <dir_next+0x12c>
 8006634:	2301      	movs	r3, #1
 8006636:	e02a      	b.n	800668e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	3301      	adds	r3, #1
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	461a      	mov	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4293      	cmp	r3, r2
 8006652:	d3e6      	bcc.n	8006622 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fbf3 	bl	8005e54 <clust2sect>
 800666e:	4602      	mov	r2, r0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006686:	441a      	add	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b086      	sub	sp, #24
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff feb4 	bl	8006416 <dir_sdi>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d12b      	bne.n	8006710 <dir_alloc+0x7a>
		n = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	4619      	mov	r1, r3
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fb2a 	bl	8005d1c <move_window>
 80066c8:	4603      	mov	r3, r0
 80066ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11d      	bne.n	800670e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2be5      	cmp	r3, #229	@ 0xe5
 80066da:	d004      	beq.n	80066e6 <dir_alloc+0x50>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3301      	adds	r3, #1
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d102      	bne.n	80066fa <dir_alloc+0x64>
 80066f4:	e00c      	b.n	8006710 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80066fa:	2101      	movs	r1, #1
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff05 	bl	800650c <dir_next>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0d7      	beq.n	80066bc <dir_alloc+0x26>
 800670c:	e000      	b.n	8006710 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800670e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	2b04      	cmp	r3, #4
 8006714:	d101      	bne.n	800671a <dir_alloc+0x84>
 8006716:	2307      	movs	r3, #7
 8006718:	75fb      	strb	r3, [r7, #23]
	return res;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	331a      	adds	r3, #26
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f842 	bl	80057bc <ld_word>
 8006738:	4603      	mov	r3, r0
 800673a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d109      	bne.n	8006758 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	3314      	adds	r3, #20
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff f837 	bl	80057bc <ld_word>
 800674e:	4603      	mov	r3, r0
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	331a      	adds	r3, #26
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	b292      	uxth	r2, r2
 8006776:	4611      	mov	r1, r2
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff f85a 	bl	8005832 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b03      	cmp	r3, #3
 8006784:	d109      	bne.n	800679a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f103 0214 	add.w	r2, r3, #20
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	b29b      	uxth	r3, r3
 8006792:	4619      	mov	r1, r3
 8006794:	4610      	mov	r0, r2
 8006796:	f7ff f84c 	bl	8005832 <st_word>
	}
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fe2f 	bl	8006416 <dir_sdi>
 80067b8:	4603      	mov	r3, r0
 80067ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <dir_find+0x24>
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	e03e      	b.n	8006844 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6938      	ldr	r0, [r7, #16]
 80067ce:	f7ff faa5 	bl	8005d1c <move_window>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d12f      	bne.n	800683c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <dir_find+0x4e>
 80067ea:	2304      	movs	r3, #4
 80067ec:	75fb      	strb	r3, [r7, #23]
 80067ee:	e028      	b.n	8006842 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	330b      	adds	r3, #11
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	330b      	adds	r3, #11
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <dir_find+0x86>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a18      	ldr	r0, [r3, #32]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3324      	adds	r3, #36	@ 0x24
 800681a:	220b      	movs	r2, #11
 800681c:	4619      	mov	r1, r3
 800681e:	f7ff f88b 	bl	8005938 <mem_cmp>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fe6e 	bl	800650c <dir_next>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0c5      	beq.n	80067c6 <dir_find+0x24>
 800683a:	e002      	b.n	8006842 <dir_find+0xa0>
		if (res != FR_OK) break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006840:	bf00      	nop

	return res;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800685a:	2101      	movs	r1, #1
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ff1a 	bl	8006696 <dir_alloc>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11c      	bne.n	80068a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	4619      	mov	r1, r3
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f7ff fa52 	bl	8005d1c <move_window>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d111      	bne.n	80068a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	2220      	movs	r2, #32
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f839 	bl	8005902 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a18      	ldr	r0, [r3, #32]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3324      	adds	r3, #36	@ 0x24
 8006898:	220b      	movs	r2, #11
 800689a:	4619      	mov	r1, r3
 800689c:	f7ff f810 	bl	80058c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2201      	movs	r2, #1
 80068a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3324      	adds	r3, #36	@ 0x24
 80068c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80068c6:	220b      	movs	r2, #11
 80068c8:	2120      	movs	r1, #32
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f7ff f819 	bl	8005902 <mem_set>
	si = i = 0; ni = 8;
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	2308      	movs	r3, #8
 80068da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068ea:	7efb      	ldrb	r3, [r7, #27]
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d94e      	bls.n	800698e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80068f0:	7efb      	ldrb	r3, [r7, #27]
 80068f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80068f4:	d006      	beq.n	8006904 <create_name+0x54>
 80068f6:	7efb      	ldrb	r3, [r7, #27]
 80068f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80068fa:	d110      	bne.n	800691e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80068fc:	e002      	b.n	8006904 <create_name+0x54>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3301      	adds	r3, #1
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b2f      	cmp	r3, #47	@ 0x2f
 800690e:	d0f6      	beq.n	80068fe <create_name+0x4e>
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b5c      	cmp	r3, #92	@ 0x5c
 800691a:	d0f0      	beq.n	80068fe <create_name+0x4e>
			break;
 800691c:	e038      	b.n	8006990 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800691e:	7efb      	ldrb	r3, [r7, #27]
 8006920:	2b2e      	cmp	r3, #46	@ 0x2e
 8006922:	d003      	beq.n	800692c <create_name+0x7c>
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	429a      	cmp	r2, r3
 800692a:	d30c      	bcc.n	8006946 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b0b      	cmp	r3, #11
 8006930:	d002      	beq.n	8006938 <create_name+0x88>
 8006932:	7efb      	ldrb	r3, [r7, #27]
 8006934:	2b2e      	cmp	r3, #46	@ 0x2e
 8006936:	d001      	beq.n	800693c <create_name+0x8c>
 8006938:	2306      	movs	r3, #6
 800693a:	e044      	b.n	80069c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800693c:	2308      	movs	r3, #8
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	230b      	movs	r3, #11
 8006942:	617b      	str	r3, [r7, #20]
			continue;
 8006944:	e022      	b.n	800698c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006946:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da04      	bge.n	8006958 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800694e:	7efb      	ldrb	r3, [r7, #27]
 8006950:	3b80      	subs	r3, #128	@ 0x80
 8006952:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <create_name+0x120>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006958:	7efb      	ldrb	r3, [r7, #27]
 800695a:	4619      	mov	r1, r3
 800695c:	481d      	ldr	r0, [pc, #116]	@ (80069d4 <create_name+0x124>)
 800695e:	f7ff f812 	bl	8005986 <chk_chr>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <create_name+0xbc>
 8006968:	2306      	movs	r3, #6
 800696a:	e02c      	b.n	80069c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	2b60      	cmp	r3, #96	@ 0x60
 8006970:	d905      	bls.n	800697e <create_name+0xce>
 8006972:	7efb      	ldrb	r3, [r7, #27]
 8006974:	2b7a      	cmp	r3, #122	@ 0x7a
 8006976:	d802      	bhi.n	800697e <create_name+0xce>
 8006978:	7efb      	ldrb	r3, [r7, #27]
 800697a:	3b20      	subs	r3, #32
 800697c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	613a      	str	r2, [r7, #16]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	4413      	add	r3, r2
 8006988:	7efa      	ldrb	r2, [r7, #27]
 800698a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800698c:	e7a6      	b.n	80068dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800698e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	441a      	add	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <create_name+0xf4>
 80069a0:	2306      	movs	r3, #6
 80069a2:	e010      	b.n	80069c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2be5      	cmp	r3, #229	@ 0xe5
 80069aa:	d102      	bne.n	80069b2 <create_name+0x102>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2205      	movs	r2, #5
 80069b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80069b2:	7efb      	ldrb	r3, [r7, #27]
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d801      	bhi.n	80069bc <create_name+0x10c>
 80069b8:	2204      	movs	r2, #4
 80069ba:	e000      	b.n	80069be <create_name+0x10e>
 80069bc:	2200      	movs	r2, #0
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	330b      	adds	r3, #11
 80069c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80069c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	08009270 	.word	0x08009270
 80069d4:	080091bc 	.word	0x080091bc

080069d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80069ec:	e002      	b.n	80069f4 <follow_path+0x1c>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80069fa:	d0f8      	beq.n	80069ee <follow_path+0x16>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a02:	d0f4      	beq.n	80069ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b1f      	cmp	r3, #31
 8006a10:	d80a      	bhi.n	8006a28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2280      	movs	r2, #128	@ 0x80
 8006a16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fcfa 	bl	8006416 <dir_sdi>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
 8006a26:	e043      	b.n	8006ab0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff3f 	bl	80068b0 <create_name>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d134      	bne.n	8006aa6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff feb0 	bl	80067a2 <dir_find>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006a4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d127      	bne.n	8006aaa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d122      	bne.n	8006aaa <follow_path+0xd2>
 8006a64:	2305      	movs	r3, #5
 8006a66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006a68:	e01f      	b.n	8006aaa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11c      	bne.n	8006aae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	799b      	ldrb	r3, [r3, #6]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d102      	bne.n	8006a86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006a80:	2305      	movs	r3, #5
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e014      	b.n	8006ab0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a94:	4413      	add	r3, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fe43 	bl	8006724 <ld_clust>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006aa4:	e7c0      	b.n	8006a28 <follow_path+0x50>
			if (res != FR_OK) break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <follow_path+0xd8>
				break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aae:	bf00      	nop
			}
		}
	}

	return res;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b087      	sub	sp, #28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d031      	beq.n	8006b34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e002      	b.n	8006ade <get_ldnumber+0x24>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	3301      	adds	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d903      	bls.n	8006aee <get_ldnumber+0x34>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b3a      	cmp	r3, #58	@ 0x3a
 8006aec:	d1f4      	bne.n	8006ad8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b3a      	cmp	r3, #58	@ 0x3a
 8006af4:	d11c      	bne.n	8006b30 <get_ldnumber+0x76>
			tp = *path;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	60fa      	str	r2, [r7, #12]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	3b30      	subs	r3, #48	@ 0x30
 8006b06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d80e      	bhi.n	8006b2c <get_ldnumber+0x72>
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d10a      	bne.n	8006b2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <get_ldnumber+0x72>
					vol = (int)i;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3301      	adds	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	e002      	b.n	8006b36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b34:	693b      	ldr	r3, [r7, #16]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	70da      	strb	r2, [r3, #3]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff f8dc 	bl	8005d1c <move_window>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <check_fs+0x2a>
 8006b6a:	2304      	movs	r3, #4
 8006b6c:	e038      	b.n	8006be0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3330      	adds	r3, #48	@ 0x30
 8006b72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fe20 	bl	80057bc <ld_word>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d001      	beq.n	8006b8c <check_fs+0x48>
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e029      	b.n	8006be0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b92:	2be9      	cmp	r3, #233	@ 0xe9
 8006b94:	d009      	beq.n	8006baa <check_fs+0x66>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b9c:	2beb      	cmp	r3, #235	@ 0xeb
 8006b9e:	d11e      	bne.n	8006bde <check_fs+0x9a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006ba6:	2b90      	cmp	r3, #144	@ 0x90
 8006ba8:	d119      	bne.n	8006bde <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3330      	adds	r3, #48	@ 0x30
 8006bae:	3336      	adds	r3, #54	@ 0x36
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fe1b 	bl	80057ec <ld_dword>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006be8 <check_fs+0xa4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d101      	bne.n	8006bc6 <check_fs+0x82>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e00c      	b.n	8006be0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3330      	adds	r3, #48	@ 0x30
 8006bca:	3352      	adds	r3, #82	@ 0x52
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fe0d 	bl	80057ec <ld_dword>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4a05      	ldr	r2, [pc, #20]	@ (8006bec <check_fs+0xa8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d101      	bne.n	8006bde <check_fs+0x9a>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006bde:	2302      	movs	r3, #2
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	00544146 	.word	0x00544146
 8006bec:	33544146 	.word	0x33544146

08006bf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b096      	sub	sp, #88	@ 0x58
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ff58 	bl	8006aba <get_ldnumber>
 8006c0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da01      	bge.n	8006c16 <find_volume+0x26>
 8006c12:	230b      	movs	r3, #11
 8006c14:	e22d      	b.n	8007072 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c16:	4aa1      	ldr	r2, [pc, #644]	@ (8006e9c <find_volume+0x2ac>)
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <find_volume+0x3a>
 8006c26:	230c      	movs	r3, #12
 8006c28:	e223      	b.n	8007072 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	f023 0301 	bic.w	r3, r3, #1
 8006c36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fd1b 	bl	8005680 <disk_status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10c      	bne.n	8006c76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <find_volume+0x82>
 8006c62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006c6e:	230a      	movs	r3, #10
 8006c70:	e1ff      	b.n	8007072 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006c72:	2300      	movs	r3, #0
 8006c74:	e1fd      	b.n	8007072 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fd13 	bl	80056b4 <disk_initialize>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006c94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e1e6      	b.n	8007072 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <find_volume+0xca>
 8006caa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	e1db      	b.n	8007072 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006cbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cc0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cc2:	f7ff ff3f 	bl	8006b44 <check_fs>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d149      	bne.n	8006d68 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd8:	e01e      	b.n	8006d18 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006ce8:	4413      	add	r3, r2
 8006cea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	3304      	adds	r3, #4
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <find_volume+0x114>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fd76 	bl	80057ec <ld_dword>
 8006d00:	4602      	mov	r2, r0
 8006d02:	e000      	b.n	8006d06 <find_volume+0x116>
 8006d04:	2200      	movs	r2, #0
 8006d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	3358      	adds	r3, #88	@ 0x58
 8006d0c:	443b      	add	r3, r7
 8006d0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d14:	3301      	adds	r3, #1
 8006d16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d9dd      	bls.n	8006cda <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006d1e:	2300      	movs	r3, #0
 8006d20:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <find_volume+0x13e>
 8006d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	3358      	adds	r3, #88	@ 0x58
 8006d34:	443b      	add	r3, r7
 8006d36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d3a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <find_volume+0x15e>
 8006d42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d46:	f7ff fefd 	bl	8006b44 <check_fs>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	e000      	b.n	8006d50 <find_volume+0x160>
 8006d4e:	2303      	movs	r3, #3
 8006d50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006d54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d905      	bls.n	8006d68 <find_volume+0x178>
 8006d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5e:	3301      	adds	r3, #1
 8006d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d9e2      	bls.n	8006d2e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d101      	bne.n	8006d74 <find_volume+0x184>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e17e      	b.n	8007072 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006d74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d901      	bls.n	8006d80 <find_volume+0x190>
 8006d7c:	230d      	movs	r3, #13
 8006d7e:	e178      	b.n	8007072 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	3330      	adds	r3, #48	@ 0x30
 8006d84:	330b      	adds	r3, #11
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fd18 	bl	80057bc <ld_word>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d92:	d001      	beq.n	8006d98 <find_volume+0x1a8>
 8006d94:	230d      	movs	r3, #13
 8006d96:	e16c      	b.n	8007072 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	3330      	adds	r3, #48	@ 0x30
 8006d9c:	3316      	adds	r3, #22
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fd0c 	bl	80057bc <ld_word>
 8006da4:	4603      	mov	r3, r0
 8006da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <find_volume+0x1cc>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	3330      	adds	r3, #48	@ 0x30
 8006db2:	3324      	adds	r3, #36	@ 0x24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fd19 	bl	80057ec <ld_dword>
 8006dba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dc0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dce:	789b      	ldrb	r3, [r3, #2]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d005      	beq.n	8006de0 <find_volume+0x1f0>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	789b      	ldrb	r3, [r3, #2]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d001      	beq.n	8006de0 <find_volume+0x1f0>
 8006ddc:	230d      	movs	r3, #13
 8006dde:	e148      	b.n	8007072 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	789b      	ldrb	r3, [r3, #2]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df4:	461a      	mov	r2, r3
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d008      	beq.n	8006e14 <find_volume+0x224>
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	895b      	ldrh	r3, [r3, #10]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <find_volume+0x228>
 8006e14:	230d      	movs	r3, #13
 8006e16:	e12c      	b.n	8007072 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	3330      	adds	r3, #48	@ 0x30
 8006e1c:	3311      	adds	r3, #17
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fccc 	bl	80057bc <ld_word>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461a      	mov	r2, r3
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	891b      	ldrh	r3, [r3, #8]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <find_volume+0x24e>
 8006e3a:	230d      	movs	r3, #13
 8006e3c:	e119      	b.n	8007072 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	3330      	adds	r3, #48	@ 0x30
 8006e42:	3313      	adds	r3, #19
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fcb9 	bl	80057bc <ld_word>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <find_volume+0x272>
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	3330      	adds	r3, #48	@ 0x30
 8006e58:	3320      	adds	r3, #32
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fcc6 	bl	80057ec <ld_dword>
 8006e60:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	3330      	adds	r3, #48	@ 0x30
 8006e66:	330e      	adds	r3, #14
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fca7 	bl	80057bc <ld_word>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006e72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <find_volume+0x28c>
 8006e78:	230d      	movs	r3, #13
 8006e7a:	e0fa      	b.n	8007072 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e7c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e80:	4413      	add	r3, r2
 8006e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e84:	8912      	ldrh	r2, [r2, #8]
 8006e86:	0912      	lsrs	r2, r2, #4
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d204      	bcs.n	8006ea0 <find_volume+0x2b0>
 8006e96:	230d      	movs	r3, #13
 8006e98:	e0eb      	b.n	8007072 <find_volume+0x482>
 8006e9a:	bf00      	nop
 8006e9c:	2004070c 	.word	0x2004070c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ea8:	8952      	ldrh	r2, [r2, #10]
 8006eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <find_volume+0x2ca>
 8006eb6:	230d      	movs	r3, #13
 8006eb8:	e0db      	b.n	8007072 <find_volume+0x482>
		fmt = FS_FAT32;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d802      	bhi.n	8006ed0 <find_volume+0x2e0>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d802      	bhi.n	8006ee0 <find_volume+0x2f0>
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	1c9a      	adds	r2, r3, #2
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006eec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006eee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ef2:	441a      	add	r2, r3
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006ef8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efc:	441a      	add	r2, r3
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006f02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d11e      	bne.n	8006f48 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	3330      	adds	r3, #48	@ 0x30
 8006f0e:	332a      	adds	r3, #42	@ 0x2a
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fc53 	bl	80057bc <ld_word>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <find_volume+0x330>
 8006f1c:	230d      	movs	r3, #13
 8006f1e:	e0a8      	b.n	8007072 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	891b      	ldrh	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <find_volume+0x33c>
 8006f28:	230d      	movs	r3, #13
 8006f2a:	e0a2      	b.n	8007072 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	3330      	adds	r3, #48	@ 0x30
 8006f30:	332c      	adds	r3, #44	@ 0x2c
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fe fc5a 	bl	80057ec <ld_dword>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f46:	e01f      	b.n	8006f88 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <find_volume+0x364>
 8006f50:	230d      	movs	r3, #13
 8006f52:	e08e      	b.n	8007072 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f5a:	441a      	add	r2, r3
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d103      	bne.n	8006f70 <find_volume+0x380>
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	e00a      	b.n	8006f86 <find_volume+0x396>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	085a      	lsrs	r2, r3, #1
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f86:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	699a      	ldr	r2, [r3, #24]
 8006f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f8e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006f92:	0a5b      	lsrs	r3, r3, #9
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d201      	bcs.n	8006f9c <find_volume+0x3ac>
 8006f98:	230d      	movs	r3, #13
 8006f9a:	e06a      	b.n	8007072 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	611a      	str	r2, [r3, #16]
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fae:	2280      	movs	r2, #128	@ 0x80
 8006fb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006fb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d149      	bne.n	800704e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	3330      	adds	r3, #48	@ 0x30
 8006fbe:	3330      	adds	r3, #48	@ 0x30
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe fbfb 	bl	80057bc <ld_word>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d140      	bne.n	800704e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fce:	3301      	adds	r3, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fd4:	f7fe fea2 	bl	8005d1c <move_window>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d137      	bne.n	800704e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe6:	3330      	adds	r3, #48	@ 0x30
 8006fe8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fbe5 	bl	80057bc <ld_word>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d127      	bne.n	800704e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	3330      	adds	r3, #48	@ 0x30
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fbf2 	bl	80057ec <ld_dword>
 8007008:	4603      	mov	r3, r0
 800700a:	4a1c      	ldr	r2, [pc, #112]	@ (800707c <find_volume+0x48c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d11e      	bne.n	800704e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	3330      	adds	r3, #48	@ 0x30
 8007014:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fbe7 	bl	80057ec <ld_dword>
 800701e:	4603      	mov	r3, r0
 8007020:	4a17      	ldr	r2, [pc, #92]	@ (8007080 <find_volume+0x490>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d113      	bne.n	800704e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007028:	3330      	adds	r3, #48	@ 0x30
 800702a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fbdc 	bl	80057ec <ld_dword>
 8007034:	4602      	mov	r2, r0
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	3330      	adds	r3, #48	@ 0x30
 800703e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fbd2 	bl	80057ec <ld_dword>
 8007048:	4602      	mov	r2, r0
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007054:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007056:	4b0b      	ldr	r3, [pc, #44]	@ (8007084 <find_volume+0x494>)
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <find_volume+0x494>)
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <find_volume+0x494>)
 8007064:	881a      	ldrh	r2, [r3, #0]
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800706a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800706c:	f7fe fdee 	bl	8005c4c <clear_lock>
#endif
	return FR_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3758      	adds	r7, #88	@ 0x58
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	41615252 	.word	0x41615252
 8007080:	61417272 	.word	0x61417272
 8007084:	20040710 	.word	0x20040710

08007088 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007092:	2309      	movs	r3, #9
 8007094:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01c      	beq.n	80070d6 <validate+0x4e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d018      	beq.n	80070d6 <validate+0x4e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d013      	beq.n	80070d6 <validate+0x4e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	889a      	ldrh	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d10c      	bne.n	80070d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fadc 	bl	8005680 <disk_status>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <validate+0x4e>
			res = FR_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <validate+0x5a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	e000      	b.n	80070e4 <validate+0x5c>
 80070e2:	2300      	movs	r3, #0
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	6013      	str	r3, [r2, #0]
	return res;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
	...

080070f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007106:	f107 0310 	add.w	r3, r7, #16
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fcd5 	bl	8006aba <get_ldnumber>
 8007110:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b00      	cmp	r3, #0
 8007116:	da01      	bge.n	800711c <f_mount+0x28>
 8007118:	230b      	movs	r3, #11
 800711a:	e02b      	b.n	8007174 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800711c:	4a17      	ldr	r2, [pc, #92]	@ (800717c <f_mount+0x88>)
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007124:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800712c:	69b8      	ldr	r0, [r7, #24]
 800712e:	f7fe fd8d 	bl	8005c4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	490d      	ldr	r1, [pc, #52]	@ (800717c <f_mount+0x88>)
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <f_mount+0x66>
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d001      	beq.n	800715e <f_mount+0x6a>
 800715a:	2300      	movs	r3, #0
 800715c:	e00a      	b.n	8007174 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800715e:	f107 010c 	add.w	r1, r7, #12
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	2200      	movs	r2, #0
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fd41 	bl	8006bf0 <find_volume>
 800716e:	4603      	mov	r3, r0
 8007170:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007172:	7dfb      	ldrb	r3, [r7, #23]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3720      	adds	r7, #32
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	2004070c 	.word	0x2004070c

08007180 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b098      	sub	sp, #96	@ 0x60
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <f_open+0x18>
 8007194:	2309      	movs	r3, #9
 8007196:	e1a9      	b.n	80074ec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800719e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	f107 0110 	add.w	r1, r7, #16
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fd20 	bl	8006bf0 <find_volume>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80071b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 818d 	bne.w	80074da <f_open+0x35a>
		dj.obj.fs = fs;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fc03 	bl	80069d8 <follow_path>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80071d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d118      	bne.n	8007212 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80071e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da03      	bge.n	80071f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80071ea:	2306      	movs	r3, #6
 80071ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80071f0:	e00f      	b.n	8007212 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	bf8c      	ite	hi
 80071f8:	2301      	movhi	r3, #1
 80071fa:	2300      	movls	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	f107 0314 	add.w	r3, r7, #20
 8007204:	4611      	mov	r1, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fbd8 	bl	80059bc <chk_lock>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	f003 031c 	and.w	r3, r3, #28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d07f      	beq.n	800731c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800721c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007220:	2b00      	cmp	r3, #0
 8007222:	d017      	beq.n	8007254 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007224:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007228:	2b04      	cmp	r3, #4
 800722a:	d10e      	bne.n	800724a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800722c:	f7fe fc22 	bl	8005a74 <enq_lock>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d006      	beq.n	8007244 <f_open+0xc4>
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fb06 	bl	800684c <dir_register>
 8007240:	4603      	mov	r3, r0
 8007242:	e000      	b.n	8007246 <f_open+0xc6>
 8007244:	2312      	movs	r3, #18
 8007246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	71fb      	strb	r3, [r7, #7]
 8007252:	e010      	b.n	8007276 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007254:	7ebb      	ldrb	r3, [r7, #26]
 8007256:	f003 0311 	and.w	r3, r3, #17
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <f_open+0xe6>
					res = FR_DENIED;
 800725e:	2307      	movs	r3, #7
 8007260:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007264:	e007      	b.n	8007276 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <f_open+0xf6>
 8007270:	2308      	movs	r3, #8
 8007272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007276:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800727a:	2b00      	cmp	r3, #0
 800727c:	d168      	bne.n	8007350 <f_open+0x1d0>
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d063      	beq.n	8007350 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007288:	f7fe f99a 	bl	80055c0 <get_fattime>
 800728c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007290:	330e      	adds	r3, #14
 8007292:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fae7 	bl	8005868 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800729a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729c:	3316      	adds	r3, #22
 800729e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fae1 	bl	8005868 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80072a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a8:	330b      	adds	r3, #11
 80072aa:	2220      	movs	r2, #32
 80072ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072b2:	4611      	mov	r1, r2
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fa35 	bl	8006724 <ld_clust>
 80072ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80072c0:	2200      	movs	r2, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fa4d 	bl	8006762 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80072c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ca:	331c      	adds	r3, #28
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe faca 	bl	8005868 <st_dword>
					fs->wflag = 1;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2201      	movs	r2, #1
 80072d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80072da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d037      	beq.n	8007350 <f_open+0x1d0>
						dw = fs->winsect;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	2200      	movs	r2, #0
 80072ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe ff60 	bl	80061b4 <remove_chain>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80072fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d126      	bne.n	8007350 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fd08 	bl	8005d1c <move_window>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007316:	3a01      	subs	r2, #1
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	e019      	b.n	8007350 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800731c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007320:	2b00      	cmp	r3, #0
 8007322:	d115      	bne.n	8007350 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007324:	7ebb      	ldrb	r3, [r7, #26]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <f_open+0x1b6>
					res = FR_NO_FILE;
 800732e:	2304      	movs	r3, #4
 8007330:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007334:	e00c      	b.n	8007350 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <f_open+0x1d0>
 8007340:	7ebb      	ldrb	r3, [r7, #26]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <f_open+0x1d0>
						res = FR_DENIED;
 800734a:	2307      	movs	r3, #7
 800734c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007350:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007354:	2b00      	cmp	r3, #0
 8007356:	d126      	bne.n	80073a6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007368:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b01      	cmp	r3, #1
 800737c:	bf8c      	ite	hi
 800737e:	2301      	movhi	r3, #1
 8007380:	2300      	movls	r3, #0
 8007382:	b2db      	uxtb	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	f107 0314 	add.w	r3, r7, #20
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fb93 	bl	8005ab8 <inc_lock>
 8007392:	4602      	mov	r2, r0
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <f_open+0x226>
 80073a0:	2302      	movs	r3, #2
 80073a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80073a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8095 	bne.w	80074da <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff f9b4 	bl	8006724 <ld_clust>
 80073bc:	4602      	mov	r2, r0
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80073c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c4:	331c      	adds	r3, #28
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fa10 	bl	80057ec <ld_dword>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	88da      	ldrh	r2, [r3, #6]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	79fa      	ldrb	r2, [r7, #7]
 80073ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3330      	adds	r3, #48	@ 0x30
 8007402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fa7a 	bl	8005902 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d060      	beq.n	80074da <f_open+0x35a>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d05c      	beq.n	80074da <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	895b      	ldrh	r3, [r3, #10]
 800742c:	025b      	lsls	r3, r3, #9
 800742e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	657b      	str	r3, [r7, #84]	@ 0x54
 800743c:	e016      	b.n	800746c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fd25 	bl	8005e92 <get_fat>
 8007448:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800744a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800744c:	2b01      	cmp	r3, #1
 800744e:	d802      	bhi.n	8007456 <f_open+0x2d6>
 8007450:	2302      	movs	r3, #2
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d102      	bne.n	8007464 <f_open+0x2e4>
 800745e:	2301      	movs	r3, #1
 8007460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007464:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	657b      	str	r3, [r7, #84]	@ 0x54
 800746c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <f_open+0x2fc>
 8007474:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007478:	429a      	cmp	r2, r3
 800747a:	d8e0      	bhi.n	800743e <f_open+0x2be>
				}
				fp->clust = clst;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007480:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007482:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007486:	2b00      	cmp	r3, #0
 8007488:	d127      	bne.n	80074da <f_open+0x35a>
 800748a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007490:	2b00      	cmp	r3, #0
 8007492:	d022      	beq.n	80074da <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fcdb 	bl	8005e54 <clust2sect>
 800749e:	6478      	str	r0, [r7, #68]	@ 0x44
 80074a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d103      	bne.n	80074ae <f_open+0x32e>
						res = FR_INT_ERR;
 80074a6:	2302      	movs	r3, #2
 80074a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80074ac:	e015      	b.n	80074da <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80074ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b0:	0a5a      	lsrs	r2, r3, #9
 80074b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b4:	441a      	add	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	7858      	ldrb	r0, [r3, #1]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	2301      	movs	r3, #1
 80074ca:	f7fe f919 	bl	8005700 <disk_read>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <f_open+0x35a>
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80074da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <f_open+0x368>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80074e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3760      	adds	r7, #96	@ 0x60
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	@ 0x30
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f107 0210 	add.w	r2, r7, #16
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fdb7 	bl	8007088 <validate>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007520:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007524:	2b00      	cmp	r3, #0
 8007526:	d107      	bne.n	8007538 <f_write+0x44>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	7d5b      	ldrb	r3, [r3, #21]
 800752c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <f_write+0x4a>
 8007538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800753c:	e14b      	b.n	80077d6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	7d1b      	ldrb	r3, [r3, #20]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <f_write+0x5a>
 800754a:	2307      	movs	r3, #7
 800754c:	e143      	b.n	80077d6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	429a      	cmp	r2, r3
 800755c:	f080 812d 	bcs.w	80077ba <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	43db      	mvns	r3, r3
 8007566:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007568:	e127      	b.n	80077ba <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 80e3 	bne.w	800773e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	0a5b      	lsrs	r3, r3, #9
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	8952      	ldrh	r2, [r2, #10]
 8007582:	3a01      	subs	r2, #1
 8007584:	4013      	ands	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d143      	bne.n	8007616 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10c      	bne.n	80075b0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800759c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d11a      	bne.n	80075d8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2100      	movs	r1, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fe69 	bl	800627e <create_chain>
 80075ac:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075ae:	e013      	b.n	80075d8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d007      	beq.n	80075c8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	4619      	mov	r1, r3
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f7fe fef5 	bl	80063ae <clmt_clust>
 80075c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075c6:	e007      	b.n	80075d8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe fe54 	bl	800627e <create_chain>
 80075d6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80f2 	beq.w	80077c4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d104      	bne.n	80075f0 <f_write+0xfc>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2202      	movs	r2, #2
 80075ea:	755a      	strb	r2, [r3, #21]
 80075ec:	2302      	movs	r3, #2
 80075ee:	e0f2      	b.n	80077d6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d104      	bne.n	8007602 <f_write+0x10e>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	755a      	strb	r2, [r3, #21]
 80075fe:	2301      	movs	r3, #1
 8007600:	e0e9      	b.n	80077d6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007606:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <f_write+0x122>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007614:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	7d1b      	ldrb	r3, [r3, #20]
 800761a:	b25b      	sxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	da18      	bge.n	8007652 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	7858      	ldrb	r0, [r3, #1]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	2301      	movs	r3, #1
 8007630:	f7fe f886 	bl	8005740 <disk_write>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <f_write+0x150>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	755a      	strb	r2, [r3, #21]
 8007640:	2301      	movs	r3, #1
 8007642:	e0c8      	b.n	80077d6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	7d1b      	ldrb	r3, [r3, #20]
 8007648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800764c:	b2da      	uxtb	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe fbfa 	bl	8005e54 <clust2sect>
 8007660:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <f_write+0x17e>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2202      	movs	r2, #2
 800766c:	755a      	strb	r2, [r3, #21]
 800766e:	2302      	movs	r3, #2
 8007670:	e0b1      	b.n	80077d6 <f_write+0x2e2>
			sect += csect;
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	4413      	add	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	0a5b      	lsrs	r3, r3, #9
 800767e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03c      	beq.n	8007700 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	4413      	add	r3, r2
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	8952      	ldrh	r2, [r2, #10]
 8007690:	4293      	cmp	r3, r2
 8007692:	d905      	bls.n	80076a0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	895b      	ldrh	r3, [r3, #10]
 8007698:	461a      	mov	r2, r3
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	7858      	ldrb	r0, [r3, #1]
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	69f9      	ldr	r1, [r7, #28]
 80076aa:	f7fe f849 	bl	8005740 <disk_write>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <f_write+0x1ca>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	755a      	strb	r2, [r3, #21]
 80076ba:	2301      	movs	r3, #1
 80076bc:	e08b      	b.n	80077d6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d915      	bls.n	80076f8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	025b      	lsls	r3, r3, #9
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7fe f8eb 	bl	80058c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	7d1b      	ldrb	r3, [r3, #20]
 80076ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	025b      	lsls	r3, r3, #9
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80076fe:	e03f      	b.n	8007780 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	429a      	cmp	r2, r3
 8007708:	d016      	beq.n	8007738 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007712:	429a      	cmp	r2, r3
 8007714:	d210      	bcs.n	8007738 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	7858      	ldrb	r0, [r3, #1]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007720:	2301      	movs	r3, #1
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	f7fd ffec 	bl	8005700 <disk_read>
 8007728:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800772a:	2b00      	cmp	r3, #0
 800772c:	d004      	beq.n	8007738 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	755a      	strb	r2, [r3, #21]
 8007734:	2301      	movs	r3, #1
 8007736:	e04e      	b.n	80077d6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007746:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800774c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d901      	bls.n	8007758 <f_write+0x264>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	4413      	add	r3, r2
 8007768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776a:	69f9      	ldr	r1, [r7, #28]
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe f8a7 	bl	80058c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	7d1b      	ldrb	r3, [r3, #20]
 8007776:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800777a:	b2da      	uxtb	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	4413      	add	r3, r2
 8007786:	61fb      	str	r3, [r7, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	699a      	ldr	r2, [r3, #24]
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	441a      	add	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	bf38      	it	cc
 80077a0:	461a      	movcc	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	441a      	add	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f aed4 	bne.w	800756a <f_write+0x76>
 80077c2:	e000      	b.n	80077c6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	7d1b      	ldrb	r3, [r3, #20]
 80077ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	@ 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f107 0208 	add.w	r2, r7, #8
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fc4a 	bl	8007088 <validate>
 80077f4:	4603      	mov	r3, r0
 80077f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d168      	bne.n	80078d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7d1b      	ldrb	r3, [r3, #20]
 8007802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d062      	beq.n	80078d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	b25b      	sxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	da15      	bge.n	8007840 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	7858      	ldrb	r0, [r3, #1]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1a      	ldr	r2, [r3, #32]
 8007822:	2301      	movs	r3, #1
 8007824:	f7fd ff8c 	bl	8005740 <disk_write>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <f_sync+0x54>
 800782e:	2301      	movs	r3, #1
 8007830:	e04f      	b.n	80078d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7d1b      	ldrb	r3, [r3, #20]
 8007836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800783a:	b2da      	uxtb	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007840:	f7fd febe 	bl	80055c0 <get_fattime>
 8007844:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe fa64 	bl	8005d1c <move_window>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d138      	bne.n	80078d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	330b      	adds	r3, #11
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	330b      	adds	r3, #11
 800786e:	f042 0220 	orr.w	r2, r2, #32
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	461a      	mov	r2, r3
 8007880:	68f9      	ldr	r1, [r7, #12]
 8007882:	f7fe ff6e 	bl	8006762 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f103 021c 	add.w	r2, r3, #28
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fd ffe8 	bl	8005868 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3316      	adds	r3, #22
 800789c:	6939      	ldr	r1, [r7, #16]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fd ffe2 	bl	8005868 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3312      	adds	r3, #18
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fd ffc1 	bl	8005832 <st_word>
					fs->wflag = 1;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2201      	movs	r2, #1
 80078b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fa5d 	bl	8005d78 <sync_fs>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7d1b      	ldrb	r3, [r3, #20]
 80078c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff ff7b 	bl	80077de <f_sync>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d118      	bne.n	8007924 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f107 0208 	add.w	r2, r7, #8
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fbc4 	bl	8007088 <validate>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10c      	bne.n	8007924 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe f960 	bl	8005bd4 <dec_lock>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b090      	sub	sp, #64	@ 0x40
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f107 0208 	add.w	r2, r7, #8
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fba1 	bl	8007088 <validate>
 8007946:	4603      	mov	r3, r0
 8007948:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800794c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <f_lseek+0x2e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7d5b      	ldrb	r3, [r3, #21]
 8007958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800795c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <f_lseek+0x3c>
 8007964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007968:	e1e6      	b.n	8007d38 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80d1 	beq.w	8007b16 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d15a      	bne.n	8007a32 <f_lseek+0x104>
			tbl = fp->cltbl;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	627a      	str	r2, [r7, #36]	@ 0x24
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	2302      	movs	r3, #2
 800798e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d03a      	beq.n	8007a12 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	2300      	movs	r3, #0
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	3302      	adds	r3, #2
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b0:	3301      	adds	r3, #1
 80079b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fa6a 	bl	8005e92 <get_fat>
 80079be:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d804      	bhi.n	80079d0 <f_lseek+0xa2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	755a      	strb	r2, [r3, #21]
 80079cc:	2302      	movs	r3, #2
 80079ce:	e1b3      	b.n	8007d38 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d104      	bne.n	80079e2 <f_lseek+0xb4>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	755a      	strb	r2, [r3, #21]
 80079de:	2301      	movs	r3, #1
 80079e0:	e1aa      	b.n	8007d38 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d0de      	beq.n	80079aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80079ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d809      	bhi.n	8007a08 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80079fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3c4      	bcc.n	800799c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d803      	bhi.n	8007a2a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	e184      	b.n	8007d34 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007a2a:	2311      	movs	r3, #17
 8007a2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007a30:	e180      	b.n	8007d34 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d902      	bls.n	8007a42 <f_lseek+0x114>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8172 	beq.w	8007d34 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fe fca9 	bl	80063ae <clmt_clust>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe f9f2 	bl	8005e54 <clust2sect>
 8007a70:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <f_lseek+0x154>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	755a      	strb	r2, [r3, #21]
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e15a      	b.n	8007d38 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	0a5b      	lsrs	r3, r3, #9
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	8952      	ldrh	r2, [r2, #10]
 8007a8c:	3a01      	subs	r2, #1
 8007a8e:	4013      	ands	r3, r2
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4413      	add	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8148 	beq.w	8007d34 <f_lseek+0x406>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	f000 8142 	beq.w	8007d34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7d1b      	ldrb	r3, [r3, #20]
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	da18      	bge.n	8007aec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	7858      	ldrb	r0, [r3, #1]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f7fd fe39 	bl	8005740 <disk_write>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <f_lseek+0x1b0>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	755a      	strb	r2, [r3, #21]
 8007ada:	2301      	movs	r3, #1
 8007adc:	e12c      	b.n	8007d38 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7d1b      	ldrb	r3, [r3, #20]
 8007ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	7858      	ldrb	r0, [r3, #1]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007af6:	2301      	movs	r3, #1
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	f7fd fe01 	bl	8005700 <disk_read>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d004      	beq.n	8007b0e <f_lseek+0x1e0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	755a      	strb	r2, [r3, #21]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e114      	b.n	8007d38 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	621a      	str	r2, [r3, #32]
 8007b14:	e10e      	b.n	8007d34 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d908      	bls.n	8007b32 <f_lseek+0x204>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7d1b      	ldrb	r3, [r3, #20]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b40:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80a7 	beq.w	8007c98 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	895b      	ldrh	r3, [r3, #10]
 8007b4e:	025b      	lsls	r3, r3, #9
 8007b50:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01b      	beq.n	8007b90 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	1e59      	subs	r1, r3, #1
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d30f      	bcc.n	8007b90 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	1e5a      	subs	r2, r3, #1
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	425b      	negs	r3, r3
 8007b78:	401a      	ands	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b8e:	e022      	b.n	8007bd6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d119      	bne.n	8007bd0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fb6c 	bl	800627e <create_chain>
 8007ba6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d104      	bne.n	8007bb8 <f_lseek+0x28a>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	755a      	strb	r2, [r3, #21]
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e0bf      	b.n	8007d38 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d104      	bne.n	8007bca <f_lseek+0x29c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	755a      	strb	r2, [r3, #21]
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e0b6      	b.n	8007d38 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bd4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d05d      	beq.n	8007c98 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007bdc:	e03a      	b.n	8007c54 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	441a      	add	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7d1b      	ldrb	r3, [r3, #20]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fb3b 	bl	800627e <create_chain>
 8007c08:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d108      	bne.n	8007c22 <f_lseek+0x2f4>
							ofs = 0; break;
 8007c10:	2300      	movs	r3, #0
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	e022      	b.n	8007c5c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe f939 	bl	8005e92 <get_fat>
 8007c20:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d104      	bne.n	8007c34 <f_lseek+0x306>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	755a      	strb	r2, [r3, #21]
 8007c30:	2301      	movs	r3, #1
 8007c32:	e081      	b.n	8007d38 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d904      	bls.n	8007c44 <f_lseek+0x316>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d304      	bcc.n	8007c4e <f_lseek+0x320>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	755a      	strb	r2, [r3, #21]
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e074      	b.n	8007d38 <f_lseek+0x40a>
					fp->clust = clst;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c52:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d8c0      	bhi.n	8007bde <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d012      	beq.n	8007c98 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe f8ec 	bl	8005e54 <clust2sect>
 8007c7c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d104      	bne.n	8007c8e <f_lseek+0x360>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	755a      	strb	r2, [r3, #21]
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e054      	b.n	8007d38 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	0a5b      	lsrs	r3, r3, #9
 8007c92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c94:	4413      	add	r3, r2
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d90a      	bls.n	8007cba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699a      	ldr	r2, [r3, #24]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7d1b      	ldrb	r3, [r3, #20]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d036      	beq.n	8007d34 <f_lseek+0x406>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d031      	beq.n	8007d34 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7d1b      	ldrb	r3, [r3, #20]
 8007cd4:	b25b      	sxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da18      	bge.n	8007d0c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	7858      	ldrb	r0, [r3, #1]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f7fd fd29 	bl	8005740 <disk_write>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <f_lseek+0x3d0>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	755a      	strb	r2, [r3, #21]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e01c      	b.n	8007d38 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7d1b      	ldrb	r3, [r3, #20]
 8007d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	7858      	ldrb	r0, [r3, #1]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007d16:	2301      	movs	r3, #1
 8007d18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d1a:	f7fd fcf1 	bl	8005700 <disk_read>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <f_lseek+0x400>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	755a      	strb	r2, [r3, #21]
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e004      	b.n	8007d38 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d32:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007d34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3740      	adds	r7, #64	@ 0x40
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d56:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d58:	7a5b      	ldrb	r3, [r3, #9]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d131      	bne.n	8007dc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d60:	4b1c      	ldr	r3, [pc, #112]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d62:	7a5b      	ldrb	r3, [r3, #9]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	461a      	mov	r2, r3
 8007d68:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d6e:	4b19      	ldr	r3, [pc, #100]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d70:	7a5b      	ldrb	r3, [r3, #9]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	4a17      	ldr	r2, [pc, #92]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d7e:	4b15      	ldr	r3, [pc, #84]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d80:	7a5b      	ldrb	r3, [r3, #9]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	79fa      	ldrb	r2, [r7, #7]
 8007d8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d8e:	4b11      	ldr	r3, [pc, #68]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d90:	7a5b      	ldrb	r3, [r3, #9]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	b2d1      	uxtb	r1, r2
 8007d98:	4a0e      	ldr	r2, [pc, #56]	@ (8007dd4 <FATFS_LinkDriverEx+0x94>)
 8007d9a:	7251      	strb	r1, [r2, #9]
 8007d9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d9e:	7dbb      	ldrb	r3, [r7, #22]
 8007da0:	3330      	adds	r3, #48	@ 0x30
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3301      	adds	r3, #1
 8007dac:	223a      	movs	r2, #58	@ 0x3a
 8007dae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	3302      	adds	r3, #2
 8007db4:	222f      	movs	r2, #47	@ 0x2f
 8007db6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3303      	adds	r3, #3
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20040734 	.word	0x20040734

08007dd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007de2:	2200      	movs	r2, #0
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ffaa 	bl	8007d40 <FATFS_LinkDriverEx>
 8007dec:	4603      	mov	r3, r0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <rand>:
 8007df8:	4b16      	ldr	r3, [pc, #88]	@ (8007e54 <rand+0x5c>)
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007e00:	b9b3      	cbnz	r3, 8007e30 <rand+0x38>
 8007e02:	2018      	movs	r0, #24
 8007e04:	f000 fa40 	bl	8008288 <malloc>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6320      	str	r0, [r4, #48]	@ 0x30
 8007e0c:	b920      	cbnz	r0, 8007e18 <rand+0x20>
 8007e0e:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <rand+0x60>)
 8007e10:	4812      	ldr	r0, [pc, #72]	@ (8007e5c <rand+0x64>)
 8007e12:	2152      	movs	r1, #82	@ 0x52
 8007e14:	f000 f9d0 	bl	80081b8 <__assert_func>
 8007e18:	4911      	ldr	r1, [pc, #68]	@ (8007e60 <rand+0x68>)
 8007e1a:	4b12      	ldr	r3, [pc, #72]	@ (8007e64 <rand+0x6c>)
 8007e1c:	e9c0 1300 	strd	r1, r3, [r0]
 8007e20:	4b11      	ldr	r3, [pc, #68]	@ (8007e68 <rand+0x70>)
 8007e22:	6083      	str	r3, [r0, #8]
 8007e24:	230b      	movs	r3, #11
 8007e26:	8183      	strh	r3, [r0, #12]
 8007e28:	2100      	movs	r1, #0
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007e30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007e32:	480e      	ldr	r0, [pc, #56]	@ (8007e6c <rand+0x74>)
 8007e34:	690b      	ldr	r3, [r1, #16]
 8007e36:	694c      	ldr	r4, [r1, #20]
 8007e38:	4a0d      	ldr	r2, [pc, #52]	@ (8007e70 <rand+0x78>)
 8007e3a:	4358      	muls	r0, r3
 8007e3c:	fb02 0004 	mla	r0, r2, r4, r0
 8007e40:	fba3 3202 	umull	r3, r2, r3, r2
 8007e44:	3301      	adds	r3, #1
 8007e46:	eb40 0002 	adc.w	r0, r0, r2
 8007e4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007e4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007e52:	bd10      	pop	{r4, pc}
 8007e54:	2004002c 	.word	0x2004002c
 8007e58:	080092f0 	.word	0x080092f0
 8007e5c:	08009307 	.word	0x08009307
 8007e60:	abcd330e 	.word	0xabcd330e
 8007e64:	e66d1234 	.word	0xe66d1234
 8007e68:	0005deec 	.word	0x0005deec
 8007e6c:	5851f42d 	.word	0x5851f42d
 8007e70:	4c957f2d 	.word	0x4c957f2d

08007e74 <std>:
 8007e74:	2300      	movs	r3, #0
 8007e76:	b510      	push	{r4, lr}
 8007e78:	4604      	mov	r4, r0
 8007e7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e82:	6083      	str	r3, [r0, #8]
 8007e84:	8181      	strh	r1, [r0, #12]
 8007e86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e88:	81c2      	strh	r2, [r0, #14]
 8007e8a:	6183      	str	r3, [r0, #24]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	2208      	movs	r2, #8
 8007e90:	305c      	adds	r0, #92	@ 0x5c
 8007e92:	f000 f914 	bl	80080be <memset>
 8007e96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <std+0x58>)
 8007e98:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed0 <std+0x5c>)
 8007e9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <std+0x60>)
 8007ea0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed8 <std+0x64>)
 8007ea4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <std+0x68>)
 8007ea8:	6224      	str	r4, [r4, #32]
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d006      	beq.n	8007ebc <std+0x48>
 8007eae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007eb2:	4294      	cmp	r4, r2
 8007eb4:	d002      	beq.n	8007ebc <std+0x48>
 8007eb6:	33d0      	adds	r3, #208	@ 0xd0
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d105      	bne.n	8007ec8 <std+0x54>
 8007ebc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec4:	f000 b974 	b.w	80081b0 <__retarget_lock_init_recursive>
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	bf00      	nop
 8007ecc:	08008039 	.word	0x08008039
 8007ed0:	0800805b 	.word	0x0800805b
 8007ed4:	08008093 	.word	0x08008093
 8007ed8:	080080b7 	.word	0x080080b7
 8007edc:	20040740 	.word	0x20040740

08007ee0 <stdio_exit_handler>:
 8007ee0:	4a02      	ldr	r2, [pc, #8]	@ (8007eec <stdio_exit_handler+0xc>)
 8007ee2:	4903      	ldr	r1, [pc, #12]	@ (8007ef0 <stdio_exit_handler+0x10>)
 8007ee4:	4803      	ldr	r0, [pc, #12]	@ (8007ef4 <stdio_exit_handler+0x14>)
 8007ee6:	f000 b869 	b.w	8007fbc <_fwalk_sglue>
 8007eea:	bf00      	nop
 8007eec:	20040020 	.word	0x20040020
 8007ef0:	08008ac9 	.word	0x08008ac9
 8007ef4:	20040030 	.word	0x20040030

08007ef8 <cleanup_stdio>:
 8007ef8:	6841      	ldr	r1, [r0, #4]
 8007efa:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <cleanup_stdio+0x34>)
 8007efc:	4299      	cmp	r1, r3
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	d001      	beq.n	8007f08 <cleanup_stdio+0x10>
 8007f04:	f000 fde0 	bl	8008ac8 <_fflush_r>
 8007f08:	68a1      	ldr	r1, [r4, #8]
 8007f0a:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <cleanup_stdio+0x38>)
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	d002      	beq.n	8007f16 <cleanup_stdio+0x1e>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fdd9 	bl	8008ac8 <_fflush_r>
 8007f16:	68e1      	ldr	r1, [r4, #12]
 8007f18:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <cleanup_stdio+0x3c>)
 8007f1a:	4299      	cmp	r1, r3
 8007f1c:	d004      	beq.n	8007f28 <cleanup_stdio+0x30>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f24:	f000 bdd0 	b.w	8008ac8 <_fflush_r>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20040740 	.word	0x20040740
 8007f30:	200407a8 	.word	0x200407a8
 8007f34:	20040810 	.word	0x20040810

08007f38 <global_stdio_init.part.0>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <global_stdio_init.part.0+0x30>)
 8007f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f6c <global_stdio_init.part.0+0x34>)
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f70 <global_stdio_init.part.0+0x38>)
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	4620      	mov	r0, r4
 8007f44:	2200      	movs	r2, #0
 8007f46:	2104      	movs	r1, #4
 8007f48:	f7ff ff94 	bl	8007e74 <std>
 8007f4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f50:	2201      	movs	r2, #1
 8007f52:	2109      	movs	r1, #9
 8007f54:	f7ff ff8e 	bl	8007e74 <std>
 8007f58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f62:	2112      	movs	r1, #18
 8007f64:	f7ff bf86 	b.w	8007e74 <std>
 8007f68:	20040878 	.word	0x20040878
 8007f6c:	20040740 	.word	0x20040740
 8007f70:	08007ee1 	.word	0x08007ee1

08007f74 <__sfp_lock_acquire>:
 8007f74:	4801      	ldr	r0, [pc, #4]	@ (8007f7c <__sfp_lock_acquire+0x8>)
 8007f76:	f000 b91c 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20040881 	.word	0x20040881

08007f80 <__sfp_lock_release>:
 8007f80:	4801      	ldr	r0, [pc, #4]	@ (8007f88 <__sfp_lock_release+0x8>)
 8007f82:	f000 b917 	b.w	80081b4 <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	20040881 	.word	0x20040881

08007f8c <__sinit>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4604      	mov	r4, r0
 8007f90:	f7ff fff0 	bl	8007f74 <__sfp_lock_acquire>
 8007f94:	6a23      	ldr	r3, [r4, #32]
 8007f96:	b11b      	cbz	r3, 8007fa0 <__sinit+0x14>
 8007f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f9c:	f7ff bff0 	b.w	8007f80 <__sfp_lock_release>
 8007fa0:	4b04      	ldr	r3, [pc, #16]	@ (8007fb4 <__sinit+0x28>)
 8007fa2:	6223      	str	r3, [r4, #32]
 8007fa4:	4b04      	ldr	r3, [pc, #16]	@ (8007fb8 <__sinit+0x2c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f5      	bne.n	8007f98 <__sinit+0xc>
 8007fac:	f7ff ffc4 	bl	8007f38 <global_stdio_init.part.0>
 8007fb0:	e7f2      	b.n	8007f98 <__sinit+0xc>
 8007fb2:	bf00      	nop
 8007fb4:	08007ef9 	.word	0x08007ef9
 8007fb8:	20040878 	.word	0x20040878

08007fbc <_fwalk_sglue>:
 8007fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	4688      	mov	r8, r1
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8007fd0:	d505      	bpl.n	8007fde <_fwalk_sglue+0x22>
 8007fd2:	6824      	ldr	r4, [r4, #0]
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	d1f7      	bne.n	8007fc8 <_fwalk_sglue+0xc>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	89ab      	ldrh	r3, [r5, #12]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d907      	bls.n	8007ff4 <_fwalk_sglue+0x38>
 8007fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	d003      	beq.n	8007ff4 <_fwalk_sglue+0x38>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	4306      	orrs	r6, r0
 8007ff4:	3568      	adds	r5, #104	@ 0x68
 8007ff6:	e7e9      	b.n	8007fcc <_fwalk_sglue+0x10>

08007ff8 <siprintf>:
 8007ff8:	b40e      	push	{r1, r2, r3}
 8007ffa:	b500      	push	{lr}
 8007ffc:	b09c      	sub	sp, #112	@ 0x70
 8007ffe:	ab1d      	add	r3, sp, #116	@ 0x74
 8008000:	9002      	str	r0, [sp, #8]
 8008002:	9006      	str	r0, [sp, #24]
 8008004:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008008:	4809      	ldr	r0, [pc, #36]	@ (8008030 <siprintf+0x38>)
 800800a:	9107      	str	r1, [sp, #28]
 800800c:	9104      	str	r1, [sp, #16]
 800800e:	4909      	ldr	r1, [pc, #36]	@ (8008034 <siprintf+0x3c>)
 8008010:	f853 2b04 	ldr.w	r2, [r3], #4
 8008014:	9105      	str	r1, [sp, #20]
 8008016:	6800      	ldr	r0, [r0, #0]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	a902      	add	r1, sp, #8
 800801c:	f000 fa46 	bl	80084ac <_svfiprintf_r>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
 8008026:	b01c      	add	sp, #112	@ 0x70
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b003      	add	sp, #12
 800802e:	4770      	bx	lr
 8008030:	2004002c 	.word	0x2004002c
 8008034:	ffff0208 	.word	0xffff0208

08008038 <__sread>:
 8008038:	b510      	push	{r4, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	f000 f868 	bl	8008114 <_read_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	bfab      	itete	ge
 8008048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800804a:	89a3      	ldrhlt	r3, [r4, #12]
 800804c:	181b      	addge	r3, r3, r0
 800804e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008052:	bfac      	ite	ge
 8008054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008056:	81a3      	strhlt	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__swrite>:
 800805a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805e:	461f      	mov	r7, r3
 8008060:	898b      	ldrh	r3, [r1, #12]
 8008062:	05db      	lsls	r3, r3, #23
 8008064:	4605      	mov	r5, r0
 8008066:	460c      	mov	r4, r1
 8008068:	4616      	mov	r6, r2
 800806a:	d505      	bpl.n	8008078 <__swrite+0x1e>
 800806c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008070:	2302      	movs	r3, #2
 8008072:	2200      	movs	r2, #0
 8008074:	f000 f83c 	bl	80080f0 <_lseek_r>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	4632      	mov	r2, r6
 8008086:	463b      	mov	r3, r7
 8008088:	4628      	mov	r0, r5
 800808a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	f000 b853 	b.w	8008138 <_write_r>

08008092 <__sseek>:
 8008092:	b510      	push	{r4, lr}
 8008094:	460c      	mov	r4, r1
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 f829 	bl	80080f0 <_lseek_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	bf15      	itete	ne
 80080a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ae:	81a3      	strheq	r3, [r4, #12]
 80080b0:	bf18      	it	ne
 80080b2:	81a3      	strhne	r3, [r4, #12]
 80080b4:	bd10      	pop	{r4, pc}

080080b6 <__sclose>:
 80080b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ba:	f000 b809 	b.w	80080d0 <_close_r>

080080be <memset>:
 80080be:	4402      	add	r2, r0
 80080c0:	4603      	mov	r3, r0
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d100      	bne.n	80080c8 <memset+0xa>
 80080c6:	4770      	bx	lr
 80080c8:	f803 1b01 	strb.w	r1, [r3], #1
 80080cc:	e7f9      	b.n	80080c2 <memset+0x4>
	...

080080d0 <_close_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	@ (80080ec <_close_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 f973 	bl	80013c6 <_close>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_close_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_close_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	2004087c 	.word	0x2004087c

080080f0 <_lseek_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d07      	ldr	r5, [pc, #28]	@ (8008110 <_lseek_r+0x20>)
 80080f4:	4604      	mov	r4, r0
 80080f6:	4608      	mov	r0, r1
 80080f8:	4611      	mov	r1, r2
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	f7f9 f988 	bl	8001414 <_lseek>
 8008104:	1c43      	adds	r3, r0, #1
 8008106:	d102      	bne.n	800810e <_lseek_r+0x1e>
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b103      	cbz	r3, 800810e <_lseek_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	2004087c 	.word	0x2004087c

08008114 <_read_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	@ (8008134 <_read_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7f9 f916 	bl	8001354 <_read>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_read_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_read_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	2004087c 	.word	0x2004087c

08008138 <_write_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	@ (8008158 <_write_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f9 f921 	bl	800138e <_write>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_write_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_write_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	2004087c 	.word	0x2004087c

0800815c <__errno>:
 800815c:	4b01      	ldr	r3, [pc, #4]	@ (8008164 <__errno+0x8>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	2004002c 	.word	0x2004002c

08008168 <__libc_init_array>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	4d0d      	ldr	r5, [pc, #52]	@ (80081a0 <__libc_init_array+0x38>)
 800816c:	4c0d      	ldr	r4, [pc, #52]	@ (80081a4 <__libc_init_array+0x3c>)
 800816e:	1b64      	subs	r4, r4, r5
 8008170:	10a4      	asrs	r4, r4, #2
 8008172:	2600      	movs	r6, #0
 8008174:	42a6      	cmp	r6, r4
 8008176:	d109      	bne.n	800818c <__libc_init_array+0x24>
 8008178:	4d0b      	ldr	r5, [pc, #44]	@ (80081a8 <__libc_init_array+0x40>)
 800817a:	4c0c      	ldr	r4, [pc, #48]	@ (80081ac <__libc_init_array+0x44>)
 800817c:	f000 fff0 	bl	8009160 <_init>
 8008180:	1b64      	subs	r4, r4, r5
 8008182:	10a4      	asrs	r4, r4, #2
 8008184:	2600      	movs	r6, #0
 8008186:	42a6      	cmp	r6, r4
 8008188:	d105      	bne.n	8008196 <__libc_init_array+0x2e>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008190:	4798      	blx	r3
 8008192:	3601      	adds	r6, #1
 8008194:	e7ee      	b.n	8008174 <__libc_init_array+0xc>
 8008196:	f855 3b04 	ldr.w	r3, [r5], #4
 800819a:	4798      	blx	r3
 800819c:	3601      	adds	r6, #1
 800819e:	e7f2      	b.n	8008186 <__libc_init_array+0x1e>
 80081a0:	080093d8 	.word	0x080093d8
 80081a4:	080093d8 	.word	0x080093d8
 80081a8:	080093d8 	.word	0x080093d8
 80081ac:	080093dc 	.word	0x080093dc

080081b0 <__retarget_lock_init_recursive>:
 80081b0:	4770      	bx	lr

080081b2 <__retarget_lock_acquire_recursive>:
 80081b2:	4770      	bx	lr

080081b4 <__retarget_lock_release_recursive>:
 80081b4:	4770      	bx	lr
	...

080081b8 <__assert_func>:
 80081b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081ba:	4614      	mov	r4, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <__assert_func+0x2c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4605      	mov	r5, r0
 80081c4:	68d8      	ldr	r0, [r3, #12]
 80081c6:	b954      	cbnz	r4, 80081de <__assert_func+0x26>
 80081c8:	4b07      	ldr	r3, [pc, #28]	@ (80081e8 <__assert_func+0x30>)
 80081ca:	461c      	mov	r4, r3
 80081cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081d0:	9100      	str	r1, [sp, #0]
 80081d2:	462b      	mov	r3, r5
 80081d4:	4905      	ldr	r1, [pc, #20]	@ (80081ec <__assert_func+0x34>)
 80081d6:	f000 fc9f 	bl	8008b18 <fiprintf>
 80081da:	f000 fce7 	bl	8008bac <abort>
 80081de:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <__assert_func+0x38>)
 80081e0:	e7f4      	b.n	80081cc <__assert_func+0x14>
 80081e2:	bf00      	nop
 80081e4:	2004002c 	.word	0x2004002c
 80081e8:	0800939a 	.word	0x0800939a
 80081ec:	0800936c 	.word	0x0800936c
 80081f0:	0800935f 	.word	0x0800935f

080081f4 <_free_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4605      	mov	r5, r0
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d041      	beq.n	8008280 <_free_r+0x8c>
 80081fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008200:	1f0c      	subs	r4, r1, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfb8      	it	lt
 8008206:	18e4      	addlt	r4, r4, r3
 8008208:	f000 f8e8 	bl	80083dc <__malloc_lock>
 800820c:	4a1d      	ldr	r2, [pc, #116]	@ (8008284 <_free_r+0x90>)
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	b933      	cbnz	r3, 8008220 <_free_r+0x2c>
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	4628      	mov	r0, r5
 8008218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821c:	f000 b8e4 	b.w	80083e8 <__malloc_unlock>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d908      	bls.n	8008236 <_free_r+0x42>
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	1821      	adds	r1, r4, r0
 8008228:	428b      	cmp	r3, r1
 800822a:	bf01      	itttt	eq
 800822c:	6819      	ldreq	r1, [r3, #0]
 800822e:	685b      	ldreq	r3, [r3, #4]
 8008230:	1809      	addeq	r1, r1, r0
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	e7ed      	b.n	8008212 <_free_r+0x1e>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x4c>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x42>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1850      	adds	r0, r2, r1
 8008244:	42a0      	cmp	r0, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x6c>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4401      	add	r1, r0
 800824c:	1850      	adds	r0, r2, r1
 800824e:	4283      	cmp	r3, r0
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1e0      	bne.n	8008216 <_free_r+0x22>
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	6053      	str	r3, [r2, #4]
 800825a:	4408      	add	r0, r1
 800825c:	6010      	str	r0, [r2, #0]
 800825e:	e7da      	b.n	8008216 <_free_r+0x22>
 8008260:	d902      	bls.n	8008268 <_free_r+0x74>
 8008262:	230c      	movs	r3, #12
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	e7d6      	b.n	8008216 <_free_r+0x22>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	1821      	adds	r1, r4, r0
 800826c:	428b      	cmp	r3, r1
 800826e:	bf04      	itt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	bf04      	itt	eq
 8008278:	1809      	addeq	r1, r1, r0
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	6054      	str	r4, [r2, #4]
 800827e:	e7ca      	b.n	8008216 <_free_r+0x22>
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	20040888 	.word	0x20040888

08008288 <malloc>:
 8008288:	4b02      	ldr	r3, [pc, #8]	@ (8008294 <malloc+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f000 b825 	b.w	80082dc <_malloc_r>
 8008292:	bf00      	nop
 8008294:	2004002c 	.word	0x2004002c

08008298 <sbrk_aligned>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0f      	ldr	r6, [pc, #60]	@ (80082d8 <sbrk_aligned+0x40>)
 800829c:	460c      	mov	r4, r1
 800829e:	6831      	ldr	r1, [r6, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	b911      	cbnz	r1, 80082aa <sbrk_aligned+0x12>
 80082a4:	f000 fc64 	bl	8008b70 <_sbrk_r>
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 fc5f 	bl	8008b70 <_sbrk_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d103      	bne.n	80082be <sbrk_aligned+0x26>
 80082b6:	f04f 34ff 	mov.w	r4, #4294967295
 80082ba:	4620      	mov	r0, r4
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d0f8      	beq.n	80082ba <sbrk_aligned+0x22>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fc50 	bl	8008b70 <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1f2      	bne.n	80082ba <sbrk_aligned+0x22>
 80082d4:	e7ef      	b.n	80082b6 <sbrk_aligned+0x1e>
 80082d6:	bf00      	nop
 80082d8:	20040884 	.word	0x20040884

080082dc <_malloc_r>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	1ccd      	adds	r5, r1, #3
 80082e2:	f025 0503 	bic.w	r5, r5, #3
 80082e6:	3508      	adds	r5, #8
 80082e8:	2d0c      	cmp	r5, #12
 80082ea:	bf38      	it	cc
 80082ec:	250c      	movcc	r5, #12
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	4606      	mov	r6, r0
 80082f2:	db01      	blt.n	80082f8 <_malloc_r+0x1c>
 80082f4:	42a9      	cmp	r1, r5
 80082f6:	d904      	bls.n	8008302 <_malloc_r+0x26>
 80082f8:	230c      	movs	r3, #12
 80082fa:	6033      	str	r3, [r6, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083d8 <_malloc_r+0xfc>
 8008306:	f000 f869 	bl	80083dc <__malloc_lock>
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	461c      	mov	r4, r3
 8008310:	bb44      	cbnz	r4, 8008364 <_malloc_r+0x88>
 8008312:	4629      	mov	r1, r5
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff ffbf 	bl	8008298 <sbrk_aligned>
 800831a:	1c43      	adds	r3, r0, #1
 800831c:	4604      	mov	r4, r0
 800831e:	d158      	bne.n	80083d2 <_malloc_r+0xf6>
 8008320:	f8d8 4000 	ldr.w	r4, [r8]
 8008324:	4627      	mov	r7, r4
 8008326:	2f00      	cmp	r7, #0
 8008328:	d143      	bne.n	80083b2 <_malloc_r+0xd6>
 800832a:	2c00      	cmp	r4, #0
 800832c:	d04b      	beq.n	80083c6 <_malloc_r+0xea>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	4639      	mov	r1, r7
 8008332:	4630      	mov	r0, r6
 8008334:	eb04 0903 	add.w	r9, r4, r3
 8008338:	f000 fc1a 	bl	8008b70 <_sbrk_r>
 800833c:	4581      	cmp	r9, r0
 800833e:	d142      	bne.n	80083c6 <_malloc_r+0xea>
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	1a6d      	subs	r5, r5, r1
 8008344:	4629      	mov	r1, r5
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff ffa6 	bl	8008298 <sbrk_aligned>
 800834c:	3001      	adds	r0, #1
 800834e:	d03a      	beq.n	80083c6 <_malloc_r+0xea>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	442b      	add	r3, r5
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	f8d8 3000 	ldr.w	r3, [r8]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	bb62      	cbnz	r2, 80083b8 <_malloc_r+0xdc>
 800835e:	f8c8 7000 	str.w	r7, [r8]
 8008362:	e00f      	b.n	8008384 <_malloc_r+0xa8>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	1b52      	subs	r2, r2, r5
 8008368:	d420      	bmi.n	80083ac <_malloc_r+0xd0>
 800836a:	2a0b      	cmp	r2, #11
 800836c:	d917      	bls.n	800839e <_malloc_r+0xc2>
 800836e:	1961      	adds	r1, r4, r5
 8008370:	42a3      	cmp	r3, r4
 8008372:	6025      	str	r5, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	6059      	strne	r1, [r3, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	bf08      	it	eq
 800837c:	f8c8 1000 	streq.w	r1, [r8]
 8008380:	5162      	str	r2, [r4, r5]
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f82f 	bl	80083e8 <__malloc_unlock>
 800838a:	f104 000b 	add.w	r0, r4, #11
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	f020 0007 	bic.w	r0, r0, #7
 8008394:	1ac2      	subs	r2, r0, r3
 8008396:	bf1c      	itt	ne
 8008398:	1a1b      	subne	r3, r3, r0
 800839a:	50a3      	strne	r3, [r4, r2]
 800839c:	e7af      	b.n	80082fe <_malloc_r+0x22>
 800839e:	6862      	ldr	r2, [r4, #4]
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	bf0c      	ite	eq
 80083a4:	f8c8 2000 	streq.w	r2, [r8]
 80083a8:	605a      	strne	r2, [r3, #4]
 80083aa:	e7eb      	b.n	8008384 <_malloc_r+0xa8>
 80083ac:	4623      	mov	r3, r4
 80083ae:	6864      	ldr	r4, [r4, #4]
 80083b0:	e7ae      	b.n	8008310 <_malloc_r+0x34>
 80083b2:	463c      	mov	r4, r7
 80083b4:	687f      	ldr	r7, [r7, #4]
 80083b6:	e7b6      	b.n	8008326 <_malloc_r+0x4a>
 80083b8:	461a      	mov	r2, r3
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d1fb      	bne.n	80083b8 <_malloc_r+0xdc>
 80083c0:	2300      	movs	r3, #0
 80083c2:	6053      	str	r3, [r2, #4]
 80083c4:	e7de      	b.n	8008384 <_malloc_r+0xa8>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 f80c 	bl	80083e8 <__malloc_unlock>
 80083d0:	e794      	b.n	80082fc <_malloc_r+0x20>
 80083d2:	6005      	str	r5, [r0, #0]
 80083d4:	e7d6      	b.n	8008384 <_malloc_r+0xa8>
 80083d6:	bf00      	nop
 80083d8:	20040888 	.word	0x20040888

080083dc <__malloc_lock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_lock+0x8>)
 80083de:	f7ff bee8 	b.w	80081b2 <__retarget_lock_acquire_recursive>
 80083e2:	bf00      	nop
 80083e4:	20040880 	.word	0x20040880

080083e8 <__malloc_unlock>:
 80083e8:	4801      	ldr	r0, [pc, #4]	@ (80083f0 <__malloc_unlock+0x8>)
 80083ea:	f7ff bee3 	b.w	80081b4 <__retarget_lock_release_recursive>
 80083ee:	bf00      	nop
 80083f0:	20040880 	.word	0x20040880

080083f4 <__ssputs_r>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	688e      	ldr	r6, [r1, #8]
 80083fa:	461f      	mov	r7, r3
 80083fc:	42be      	cmp	r6, r7
 80083fe:	680b      	ldr	r3, [r1, #0]
 8008400:	4682      	mov	sl, r0
 8008402:	460c      	mov	r4, r1
 8008404:	4690      	mov	r8, r2
 8008406:	d82d      	bhi.n	8008464 <__ssputs_r+0x70>
 8008408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800840c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008410:	d026      	beq.n	8008460 <__ssputs_r+0x6c>
 8008412:	6965      	ldr	r5, [r4, #20]
 8008414:	6909      	ldr	r1, [r1, #16]
 8008416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800841a:	eba3 0901 	sub.w	r9, r3, r1
 800841e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008422:	1c7b      	adds	r3, r7, #1
 8008424:	444b      	add	r3, r9
 8008426:	106d      	asrs	r5, r5, #1
 8008428:	429d      	cmp	r5, r3
 800842a:	bf38      	it	cc
 800842c:	461d      	movcc	r5, r3
 800842e:	0553      	lsls	r3, r2, #21
 8008430:	d527      	bpl.n	8008482 <__ssputs_r+0x8e>
 8008432:	4629      	mov	r1, r5
 8008434:	f7ff ff52 	bl	80082dc <_malloc_r>
 8008438:	4606      	mov	r6, r0
 800843a:	b360      	cbz	r0, 8008496 <__ssputs_r+0xa2>
 800843c:	6921      	ldr	r1, [r4, #16]
 800843e:	464a      	mov	r2, r9
 8008440:	f000 fba6 	bl	8008b90 <memcpy>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800844a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	6126      	str	r6, [r4, #16]
 8008452:	6165      	str	r5, [r4, #20]
 8008454:	444e      	add	r6, r9
 8008456:	eba5 0509 	sub.w	r5, r5, r9
 800845a:	6026      	str	r6, [r4, #0]
 800845c:	60a5      	str	r5, [r4, #8]
 800845e:	463e      	mov	r6, r7
 8008460:	42be      	cmp	r6, r7
 8008462:	d900      	bls.n	8008466 <__ssputs_r+0x72>
 8008464:	463e      	mov	r6, r7
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	4632      	mov	r2, r6
 800846a:	4641      	mov	r1, r8
 800846c:	f000 fb66 	bl	8008b3c <memmove>
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	1b9b      	subs	r3, r3, r6
 8008474:	60a3      	str	r3, [r4, #8]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	4433      	add	r3, r6
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	2000      	movs	r0, #0
 800847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008482:	462a      	mov	r2, r5
 8008484:	f000 fb99 	bl	8008bba <_realloc_r>
 8008488:	4606      	mov	r6, r0
 800848a:	2800      	cmp	r0, #0
 800848c:	d1e0      	bne.n	8008450 <__ssputs_r+0x5c>
 800848e:	6921      	ldr	r1, [r4, #16]
 8008490:	4650      	mov	r0, sl
 8008492:	f7ff feaf 	bl	80081f4 <_free_r>
 8008496:	230c      	movs	r3, #12
 8008498:	f8ca 3000 	str.w	r3, [sl]
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	e7e9      	b.n	800847e <__ssputs_r+0x8a>
	...

080084ac <_svfiprintf_r>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4698      	mov	r8, r3
 80084b2:	898b      	ldrh	r3, [r1, #12]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	b09d      	sub	sp, #116	@ 0x74
 80084b8:	4607      	mov	r7, r0
 80084ba:	460d      	mov	r5, r1
 80084bc:	4614      	mov	r4, r2
 80084be:	d510      	bpl.n	80084e2 <_svfiprintf_r+0x36>
 80084c0:	690b      	ldr	r3, [r1, #16]
 80084c2:	b973      	cbnz	r3, 80084e2 <_svfiprintf_r+0x36>
 80084c4:	2140      	movs	r1, #64	@ 0x40
 80084c6:	f7ff ff09 	bl	80082dc <_malloc_r>
 80084ca:	6028      	str	r0, [r5, #0]
 80084cc:	6128      	str	r0, [r5, #16]
 80084ce:	b930      	cbnz	r0, 80084de <_svfiprintf_r+0x32>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	b01d      	add	sp, #116	@ 0x74
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	2340      	movs	r3, #64	@ 0x40
 80084e0:	616b      	str	r3, [r5, #20]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e6:	2320      	movs	r3, #32
 80084e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f0:	2330      	movs	r3, #48	@ 0x30
 80084f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008690 <_svfiprintf_r+0x1e4>
 80084f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084fa:	f04f 0901 	mov.w	r9, #1
 80084fe:	4623      	mov	r3, r4
 8008500:	469a      	mov	sl, r3
 8008502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008506:	b10a      	cbz	r2, 800850c <_svfiprintf_r+0x60>
 8008508:	2a25      	cmp	r2, #37	@ 0x25
 800850a:	d1f9      	bne.n	8008500 <_svfiprintf_r+0x54>
 800850c:	ebba 0b04 	subs.w	fp, sl, r4
 8008510:	d00b      	beq.n	800852a <_svfiprintf_r+0x7e>
 8008512:	465b      	mov	r3, fp
 8008514:	4622      	mov	r2, r4
 8008516:	4629      	mov	r1, r5
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff ff6b 	bl	80083f4 <__ssputs_r>
 800851e:	3001      	adds	r0, #1
 8008520:	f000 80a7 	beq.w	8008672 <_svfiprintf_r+0x1c6>
 8008524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008526:	445a      	add	r2, fp
 8008528:	9209      	str	r2, [sp, #36]	@ 0x24
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 809f 	beq.w	8008672 <_svfiprintf_r+0x1c6>
 8008534:	2300      	movs	r3, #0
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853e:	f10a 0a01 	add.w	sl, sl, #1
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	9307      	str	r3, [sp, #28]
 8008546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800854a:	931a      	str	r3, [sp, #104]	@ 0x68
 800854c:	4654      	mov	r4, sl
 800854e:	2205      	movs	r2, #5
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	484e      	ldr	r0, [pc, #312]	@ (8008690 <_svfiprintf_r+0x1e4>)
 8008556:	f7f7 fe5b 	bl	8000210 <memchr>
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	b9d8      	cbnz	r0, 8008596 <_svfiprintf_r+0xea>
 800855e:	06d0      	lsls	r0, r2, #27
 8008560:	bf44      	itt	mi
 8008562:	2320      	movmi	r3, #32
 8008564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008568:	0711      	lsls	r1, r2, #28
 800856a:	bf44      	itt	mi
 800856c:	232b      	movmi	r3, #43	@ 0x2b
 800856e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b2a      	cmp	r3, #42	@ 0x2a
 8008578:	d015      	beq.n	80085a6 <_svfiprintf_r+0xfa>
 800857a:	9a07      	ldr	r2, [sp, #28]
 800857c:	4654      	mov	r4, sl
 800857e:	2000      	movs	r0, #0
 8008580:	f04f 0c0a 	mov.w	ip, #10
 8008584:	4621      	mov	r1, r4
 8008586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858a:	3b30      	subs	r3, #48	@ 0x30
 800858c:	2b09      	cmp	r3, #9
 800858e:	d94b      	bls.n	8008628 <_svfiprintf_r+0x17c>
 8008590:	b1b0      	cbz	r0, 80085c0 <_svfiprintf_r+0x114>
 8008592:	9207      	str	r2, [sp, #28]
 8008594:	e014      	b.n	80085c0 <_svfiprintf_r+0x114>
 8008596:	eba0 0308 	sub.w	r3, r0, r8
 800859a:	fa09 f303 	lsl.w	r3, r9, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	9304      	str	r3, [sp, #16]
 80085a2:	46a2      	mov	sl, r4
 80085a4:	e7d2      	b.n	800854c <_svfiprintf_r+0xa0>
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bfbb      	ittet	lt
 80085b2:	425b      	neglt	r3, r3
 80085b4:	f042 0202 	orrlt.w	r2, r2, #2
 80085b8:	9307      	strge	r3, [sp, #28]
 80085ba:	9307      	strlt	r3, [sp, #28]
 80085bc:	bfb8      	it	lt
 80085be:	9204      	strlt	r2, [sp, #16]
 80085c0:	7823      	ldrb	r3, [r4, #0]
 80085c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085c4:	d10a      	bne.n	80085dc <_svfiprintf_r+0x130>
 80085c6:	7863      	ldrb	r3, [r4, #1]
 80085c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ca:	d132      	bne.n	8008632 <_svfiprintf_r+0x186>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	1d1a      	adds	r2, r3, #4
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	9203      	str	r2, [sp, #12]
 80085d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085d8:	3402      	adds	r4, #2
 80085da:	9305      	str	r3, [sp, #20]
 80085dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086a0 <_svfiprintf_r+0x1f4>
 80085e0:	7821      	ldrb	r1, [r4, #0]
 80085e2:	2203      	movs	r2, #3
 80085e4:	4650      	mov	r0, sl
 80085e6:	f7f7 fe13 	bl	8000210 <memchr>
 80085ea:	b138      	cbz	r0, 80085fc <_svfiprintf_r+0x150>
 80085ec:	9b04      	ldr	r3, [sp, #16]
 80085ee:	eba0 000a 	sub.w	r0, r0, sl
 80085f2:	2240      	movs	r2, #64	@ 0x40
 80085f4:	4082      	lsls	r2, r0
 80085f6:	4313      	orrs	r3, r2
 80085f8:	3401      	adds	r4, #1
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008600:	4824      	ldr	r0, [pc, #144]	@ (8008694 <_svfiprintf_r+0x1e8>)
 8008602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008606:	2206      	movs	r2, #6
 8008608:	f7f7 fe02 	bl	8000210 <memchr>
 800860c:	2800      	cmp	r0, #0
 800860e:	d036      	beq.n	800867e <_svfiprintf_r+0x1d2>
 8008610:	4b21      	ldr	r3, [pc, #132]	@ (8008698 <_svfiprintf_r+0x1ec>)
 8008612:	bb1b      	cbnz	r3, 800865c <_svfiprintf_r+0x1b0>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	3307      	adds	r3, #7
 8008618:	f023 0307 	bic.w	r3, r3, #7
 800861c:	3308      	adds	r3, #8
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008622:	4433      	add	r3, r6
 8008624:	9309      	str	r3, [sp, #36]	@ 0x24
 8008626:	e76a      	b.n	80084fe <_svfiprintf_r+0x52>
 8008628:	fb0c 3202 	mla	r2, ip, r2, r3
 800862c:	460c      	mov	r4, r1
 800862e:	2001      	movs	r0, #1
 8008630:	e7a8      	b.n	8008584 <_svfiprintf_r+0xd8>
 8008632:	2300      	movs	r3, #0
 8008634:	3401      	adds	r4, #1
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	4619      	mov	r1, r3
 800863a:	f04f 0c0a 	mov.w	ip, #10
 800863e:	4620      	mov	r0, r4
 8008640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008644:	3a30      	subs	r2, #48	@ 0x30
 8008646:	2a09      	cmp	r2, #9
 8008648:	d903      	bls.n	8008652 <_svfiprintf_r+0x1a6>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0c6      	beq.n	80085dc <_svfiprintf_r+0x130>
 800864e:	9105      	str	r1, [sp, #20]
 8008650:	e7c4      	b.n	80085dc <_svfiprintf_r+0x130>
 8008652:	fb0c 2101 	mla	r1, ip, r1, r2
 8008656:	4604      	mov	r4, r0
 8008658:	2301      	movs	r3, #1
 800865a:	e7f0      	b.n	800863e <_svfiprintf_r+0x192>
 800865c:	ab03      	add	r3, sp, #12
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	462a      	mov	r2, r5
 8008662:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <_svfiprintf_r+0x1f0>)
 8008664:	a904      	add	r1, sp, #16
 8008666:	4638      	mov	r0, r7
 8008668:	f3af 8000 	nop.w
 800866c:	1c42      	adds	r2, r0, #1
 800866e:	4606      	mov	r6, r0
 8008670:	d1d6      	bne.n	8008620 <_svfiprintf_r+0x174>
 8008672:	89ab      	ldrh	r3, [r5, #12]
 8008674:	065b      	lsls	r3, r3, #25
 8008676:	f53f af2d 	bmi.w	80084d4 <_svfiprintf_r+0x28>
 800867a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800867c:	e72c      	b.n	80084d8 <_svfiprintf_r+0x2c>
 800867e:	ab03      	add	r3, sp, #12
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	462a      	mov	r2, r5
 8008684:	4b05      	ldr	r3, [pc, #20]	@ (800869c <_svfiprintf_r+0x1f0>)
 8008686:	a904      	add	r1, sp, #16
 8008688:	4638      	mov	r0, r7
 800868a:	f000 f879 	bl	8008780 <_printf_i>
 800868e:	e7ed      	b.n	800866c <_svfiprintf_r+0x1c0>
 8008690:	0800939b 	.word	0x0800939b
 8008694:	080093a5 	.word	0x080093a5
 8008698:	00000000 	.word	0x00000000
 800869c:	080083f5 	.word	0x080083f5
 80086a0:	080093a1 	.word	0x080093a1

080086a4 <_printf_common>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	4616      	mov	r6, r2
 80086aa:	4698      	mov	r8, r3
 80086ac:	688a      	ldr	r2, [r1, #8]
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086b4:	4293      	cmp	r3, r2
 80086b6:	bfb8      	it	lt
 80086b8:	4613      	movlt	r3, r2
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086c0:	4607      	mov	r7, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	b10a      	cbz	r2, 80086ca <_printf_common+0x26>
 80086c6:	3301      	adds	r3, #1
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	0699      	lsls	r1, r3, #26
 80086ce:	bf42      	ittt	mi
 80086d0:	6833      	ldrmi	r3, [r6, #0]
 80086d2:	3302      	addmi	r3, #2
 80086d4:	6033      	strmi	r3, [r6, #0]
 80086d6:	6825      	ldr	r5, [r4, #0]
 80086d8:	f015 0506 	ands.w	r5, r5, #6
 80086dc:	d106      	bne.n	80086ec <_printf_common+0x48>
 80086de:	f104 0a19 	add.w	sl, r4, #25
 80086e2:	68e3      	ldr	r3, [r4, #12]
 80086e4:	6832      	ldr	r2, [r6, #0]
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	dc26      	bgt.n	800873a <_printf_common+0x96>
 80086ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086f0:	6822      	ldr	r2, [r4, #0]
 80086f2:	3b00      	subs	r3, #0
 80086f4:	bf18      	it	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d42b      	bmi.n	8008754 <_printf_common+0xb0>
 80086fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008700:	4641      	mov	r1, r8
 8008702:	4638      	mov	r0, r7
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d01e      	beq.n	8008748 <_printf_common+0xa4>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	6922      	ldr	r2, [r4, #16]
 800870e:	f003 0306 	and.w	r3, r3, #6
 8008712:	2b04      	cmp	r3, #4
 8008714:	bf02      	ittt	eq
 8008716:	68e5      	ldreq	r5, [r4, #12]
 8008718:	6833      	ldreq	r3, [r6, #0]
 800871a:	1aed      	subeq	r5, r5, r3
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	bf0c      	ite	eq
 8008720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008724:	2500      	movne	r5, #0
 8008726:	4293      	cmp	r3, r2
 8008728:	bfc4      	itt	gt
 800872a:	1a9b      	subgt	r3, r3, r2
 800872c:	18ed      	addgt	r5, r5, r3
 800872e:	2600      	movs	r6, #0
 8008730:	341a      	adds	r4, #26
 8008732:	42b5      	cmp	r5, r6
 8008734:	d11a      	bne.n	800876c <_printf_common+0xc8>
 8008736:	2000      	movs	r0, #0
 8008738:	e008      	b.n	800874c <_printf_common+0xa8>
 800873a:	2301      	movs	r3, #1
 800873c:	4652      	mov	r2, sl
 800873e:	4641      	mov	r1, r8
 8008740:	4638      	mov	r0, r7
 8008742:	47c8      	blx	r9
 8008744:	3001      	adds	r0, #1
 8008746:	d103      	bne.n	8008750 <_printf_common+0xac>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	3501      	adds	r5, #1
 8008752:	e7c6      	b.n	80086e2 <_printf_common+0x3e>
 8008754:	18e1      	adds	r1, r4, r3
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	2030      	movs	r0, #48	@ 0x30
 800875a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800875e:	4422      	add	r2, r4
 8008760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008768:	3302      	adds	r3, #2
 800876a:	e7c7      	b.n	80086fc <_printf_common+0x58>
 800876c:	2301      	movs	r3, #1
 800876e:	4622      	mov	r2, r4
 8008770:	4641      	mov	r1, r8
 8008772:	4638      	mov	r0, r7
 8008774:	47c8      	blx	r9
 8008776:	3001      	adds	r0, #1
 8008778:	d0e6      	beq.n	8008748 <_printf_common+0xa4>
 800877a:	3601      	adds	r6, #1
 800877c:	e7d9      	b.n	8008732 <_printf_common+0x8e>
	...

08008780 <_printf_i>:
 8008780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	7e0f      	ldrb	r7, [r1, #24]
 8008786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008788:	2f78      	cmp	r7, #120	@ 0x78
 800878a:	4691      	mov	r9, r2
 800878c:	4680      	mov	r8, r0
 800878e:	460c      	mov	r4, r1
 8008790:	469a      	mov	sl, r3
 8008792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008796:	d807      	bhi.n	80087a8 <_printf_i+0x28>
 8008798:	2f62      	cmp	r7, #98	@ 0x62
 800879a:	d80a      	bhi.n	80087b2 <_printf_i+0x32>
 800879c:	2f00      	cmp	r7, #0
 800879e:	f000 80d2 	beq.w	8008946 <_printf_i+0x1c6>
 80087a2:	2f58      	cmp	r7, #88	@ 0x58
 80087a4:	f000 80b9 	beq.w	800891a <_printf_i+0x19a>
 80087a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087b0:	e03a      	b.n	8008828 <_printf_i+0xa8>
 80087b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087b6:	2b15      	cmp	r3, #21
 80087b8:	d8f6      	bhi.n	80087a8 <_printf_i+0x28>
 80087ba:	a101      	add	r1, pc, #4	@ (adr r1, 80087c0 <_printf_i+0x40>)
 80087bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087c0:	08008819 	.word	0x08008819
 80087c4:	0800882d 	.word	0x0800882d
 80087c8:	080087a9 	.word	0x080087a9
 80087cc:	080087a9 	.word	0x080087a9
 80087d0:	080087a9 	.word	0x080087a9
 80087d4:	080087a9 	.word	0x080087a9
 80087d8:	0800882d 	.word	0x0800882d
 80087dc:	080087a9 	.word	0x080087a9
 80087e0:	080087a9 	.word	0x080087a9
 80087e4:	080087a9 	.word	0x080087a9
 80087e8:	080087a9 	.word	0x080087a9
 80087ec:	0800892d 	.word	0x0800892d
 80087f0:	08008857 	.word	0x08008857
 80087f4:	080088e7 	.word	0x080088e7
 80087f8:	080087a9 	.word	0x080087a9
 80087fc:	080087a9 	.word	0x080087a9
 8008800:	0800894f 	.word	0x0800894f
 8008804:	080087a9 	.word	0x080087a9
 8008808:	08008857 	.word	0x08008857
 800880c:	080087a9 	.word	0x080087a9
 8008810:	080087a9 	.word	0x080087a9
 8008814:	080088ef 	.word	0x080088ef
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6032      	str	r2, [r6, #0]
 8008820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008828:	2301      	movs	r3, #1
 800882a:	e09d      	b.n	8008968 <_printf_i+0x1e8>
 800882c:	6833      	ldr	r3, [r6, #0]
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	1d19      	adds	r1, r3, #4
 8008832:	6031      	str	r1, [r6, #0]
 8008834:	0606      	lsls	r6, r0, #24
 8008836:	d501      	bpl.n	800883c <_printf_i+0xbc>
 8008838:	681d      	ldr	r5, [r3, #0]
 800883a:	e003      	b.n	8008844 <_printf_i+0xc4>
 800883c:	0645      	lsls	r5, r0, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0xb8>
 8008840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008844:	2d00      	cmp	r5, #0
 8008846:	da03      	bge.n	8008850 <_printf_i+0xd0>
 8008848:	232d      	movs	r3, #45	@ 0x2d
 800884a:	426d      	negs	r5, r5
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008850:	4859      	ldr	r0, [pc, #356]	@ (80089b8 <_printf_i+0x238>)
 8008852:	230a      	movs	r3, #10
 8008854:	e011      	b.n	800887a <_printf_i+0xfa>
 8008856:	6821      	ldr	r1, [r4, #0]
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	0608      	lsls	r0, r1, #24
 800885c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008860:	d402      	bmi.n	8008868 <_printf_i+0xe8>
 8008862:	0649      	lsls	r1, r1, #25
 8008864:	bf48      	it	mi
 8008866:	b2ad      	uxthmi	r5, r5
 8008868:	2f6f      	cmp	r7, #111	@ 0x6f
 800886a:	4853      	ldr	r0, [pc, #332]	@ (80089b8 <_printf_i+0x238>)
 800886c:	6033      	str	r3, [r6, #0]
 800886e:	bf14      	ite	ne
 8008870:	230a      	movne	r3, #10
 8008872:	2308      	moveq	r3, #8
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800887a:	6866      	ldr	r6, [r4, #4]
 800887c:	60a6      	str	r6, [r4, #8]
 800887e:	2e00      	cmp	r6, #0
 8008880:	bfa2      	ittt	ge
 8008882:	6821      	ldrge	r1, [r4, #0]
 8008884:	f021 0104 	bicge.w	r1, r1, #4
 8008888:	6021      	strge	r1, [r4, #0]
 800888a:	b90d      	cbnz	r5, 8008890 <_printf_i+0x110>
 800888c:	2e00      	cmp	r6, #0
 800888e:	d04b      	beq.n	8008928 <_printf_i+0x1a8>
 8008890:	4616      	mov	r6, r2
 8008892:	fbb5 f1f3 	udiv	r1, r5, r3
 8008896:	fb03 5711 	mls	r7, r3, r1, r5
 800889a:	5dc7      	ldrb	r7, [r0, r7]
 800889c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088a0:	462f      	mov	r7, r5
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	460d      	mov	r5, r1
 80088a6:	d9f4      	bls.n	8008892 <_printf_i+0x112>
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d10b      	bne.n	80088c4 <_printf_i+0x144>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07df      	lsls	r7, r3, #31
 80088b0:	d508      	bpl.n	80088c4 <_printf_i+0x144>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	bfde      	ittt	le
 80088ba:	2330      	movle	r3, #48	@ 0x30
 80088bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c4:	1b92      	subs	r2, r2, r6
 80088c6:	6122      	str	r2, [r4, #16]
 80088c8:	f8cd a000 	str.w	sl, [sp]
 80088cc:	464b      	mov	r3, r9
 80088ce:	aa03      	add	r2, sp, #12
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fee6 	bl	80086a4 <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	d14a      	bne.n	8008972 <_printf_i+0x1f2>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b004      	add	sp, #16
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	4833      	ldr	r0, [pc, #204]	@ (80089bc <_printf_i+0x23c>)
 80088f0:	2778      	movs	r7, #120	@ 0x78
 80088f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	6831      	ldr	r1, [r6, #0]
 80088fa:	061f      	lsls	r7, r3, #24
 80088fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008900:	d402      	bmi.n	8008908 <_printf_i+0x188>
 8008902:	065f      	lsls	r7, r3, #25
 8008904:	bf48      	it	mi
 8008906:	b2ad      	uxthmi	r5, r5
 8008908:	6031      	str	r1, [r6, #0]
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	bf44      	itt	mi
 800890e:	f043 0320 	orrmi.w	r3, r3, #32
 8008912:	6023      	strmi	r3, [r4, #0]
 8008914:	b11d      	cbz	r5, 800891e <_printf_i+0x19e>
 8008916:	2310      	movs	r3, #16
 8008918:	e7ac      	b.n	8008874 <_printf_i+0xf4>
 800891a:	4827      	ldr	r0, [pc, #156]	@ (80089b8 <_printf_i+0x238>)
 800891c:	e7e9      	b.n	80088f2 <_printf_i+0x172>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f023 0320 	bic.w	r3, r3, #32
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	e7f6      	b.n	8008916 <_printf_i+0x196>
 8008928:	4616      	mov	r6, r2
 800892a:	e7bd      	b.n	80088a8 <_printf_i+0x128>
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	6825      	ldr	r5, [r4, #0]
 8008930:	6961      	ldr	r1, [r4, #20]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	062e      	lsls	r6, r5, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1c0>
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1c6>
 8008940:	0668      	lsls	r0, r5, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1bc>
 8008944:	8019      	strh	r1, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4616      	mov	r6, r2
 800894c:	e7bc      	b.n	80088c8 <_printf_i+0x148>
 800894e:	6833      	ldr	r3, [r6, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	6032      	str	r2, [r6, #0]
 8008954:	681e      	ldr	r6, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fc58 	bl	8000210 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1e6>
 8008962:	1b80      	subs	r0, r0, r6
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008970:	e7aa      	b.n	80088c8 <_printf_i+0x148>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ad      	beq.n	80088dc <_printf_i+0x15c>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x22e>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a6      	b.n	80088e0 <_printf_i+0x160>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09d      	beq.n	80088dc <_printf_i+0x15c>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x212>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x206>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x222>
 80089b6:	bf00      	nop
 80089b8:	080093ac 	.word	0x080093ac
 80089bc:	080093bd 	.word	0x080093bd

080089c0 <__sflush_r>:
 80089c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	0716      	lsls	r6, r2, #28
 80089ca:	4605      	mov	r5, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	d454      	bmi.n	8008a7a <__sflush_r+0xba>
 80089d0:	684b      	ldr	r3, [r1, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dc02      	bgt.n	80089dc <__sflush_r+0x1c>
 80089d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dd48      	ble.n	8008a6e <__sflush_r+0xae>
 80089dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089de:	2e00      	cmp	r6, #0
 80089e0:	d045      	beq.n	8008a6e <__sflush_r+0xae>
 80089e2:	2300      	movs	r3, #0
 80089e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089e8:	682f      	ldr	r7, [r5, #0]
 80089ea:	6a21      	ldr	r1, [r4, #32]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	d030      	beq.n	8008a52 <__sflush_r+0x92>
 80089f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	0759      	lsls	r1, r3, #29
 80089f6:	d505      	bpl.n	8008a04 <__sflush_r+0x44>
 80089f8:	6863      	ldr	r3, [r4, #4]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089fe:	b10b      	cbz	r3, 8008a04 <__sflush_r+0x44>
 8008a00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a02:	1ad2      	subs	r2, r2, r3
 8008a04:	2300      	movs	r3, #0
 8008a06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a08:	6a21      	ldr	r1, [r4, #32]
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b0      	blx	r6
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	d106      	bne.n	8008a22 <__sflush_r+0x62>
 8008a14:	6829      	ldr	r1, [r5, #0]
 8008a16:	291d      	cmp	r1, #29
 8008a18:	d82b      	bhi.n	8008a72 <__sflush_r+0xb2>
 8008a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ac4 <__sflush_r+0x104>)
 8008a1c:	410a      	asrs	r2, r1
 8008a1e:	07d6      	lsls	r6, r2, #31
 8008a20:	d427      	bmi.n	8008a72 <__sflush_r+0xb2>
 8008a22:	2200      	movs	r2, #0
 8008a24:	6062      	str	r2, [r4, #4]
 8008a26:	04d9      	lsls	r1, r3, #19
 8008a28:	6922      	ldr	r2, [r4, #16]
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	d504      	bpl.n	8008a38 <__sflush_r+0x78>
 8008a2e:	1c42      	adds	r2, r0, #1
 8008a30:	d101      	bne.n	8008a36 <__sflush_r+0x76>
 8008a32:	682b      	ldr	r3, [r5, #0]
 8008a34:	b903      	cbnz	r3, 8008a38 <__sflush_r+0x78>
 8008a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3a:	602f      	str	r7, [r5, #0]
 8008a3c:	b1b9      	cbz	r1, 8008a6e <__sflush_r+0xae>
 8008a3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d002      	beq.n	8008a4c <__sflush_r+0x8c>
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7ff fbd4 	bl	80081f4 <_free_r>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a50:	e00d      	b.n	8008a6e <__sflush_r+0xae>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	4602      	mov	r2, r0
 8008a5a:	1c50      	adds	r0, r2, #1
 8008a5c:	d1c9      	bne.n	80089f2 <__sflush_r+0x32>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0c6      	beq.n	80089f2 <__sflush_r+0x32>
 8008a64:	2b1d      	cmp	r3, #29
 8008a66:	d001      	beq.n	8008a6c <__sflush_r+0xac>
 8008a68:	2b16      	cmp	r3, #22
 8008a6a:	d11e      	bne.n	8008aaa <__sflush_r+0xea>
 8008a6c:	602f      	str	r7, [r5, #0]
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e022      	b.n	8008ab8 <__sflush_r+0xf8>
 8008a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a76:	b21b      	sxth	r3, r3
 8008a78:	e01b      	b.n	8008ab2 <__sflush_r+0xf2>
 8008a7a:	690f      	ldr	r7, [r1, #16]
 8008a7c:	2f00      	cmp	r7, #0
 8008a7e:	d0f6      	beq.n	8008a6e <__sflush_r+0xae>
 8008a80:	0793      	lsls	r3, r2, #30
 8008a82:	680e      	ldr	r6, [r1, #0]
 8008a84:	bf08      	it	eq
 8008a86:	694b      	ldreq	r3, [r1, #20]
 8008a88:	600f      	str	r7, [r1, #0]
 8008a8a:	bf18      	it	ne
 8008a8c:	2300      	movne	r3, #0
 8008a8e:	eba6 0807 	sub.w	r8, r6, r7
 8008a92:	608b      	str	r3, [r1, #8]
 8008a94:	f1b8 0f00 	cmp.w	r8, #0
 8008a98:	dde9      	ble.n	8008a6e <__sflush_r+0xae>
 8008a9a:	6a21      	ldr	r1, [r4, #32]
 8008a9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a9e:	4643      	mov	r3, r8
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b0      	blx	r6
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	dc08      	bgt.n	8008abc <__sflush_r+0xfc>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008abc:	4407      	add	r7, r0
 8008abe:	eba8 0800 	sub.w	r8, r8, r0
 8008ac2:	e7e7      	b.n	8008a94 <__sflush_r+0xd4>
 8008ac4:	dfbffffe 	.word	0xdfbffffe

08008ac8 <_fflush_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	690b      	ldr	r3, [r1, #16]
 8008acc:	4605      	mov	r5, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	b913      	cbnz	r3, 8008ad8 <_fflush_r+0x10>
 8008ad2:	2500      	movs	r5, #0
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	b118      	cbz	r0, 8008ae2 <_fflush_r+0x1a>
 8008ada:	6a03      	ldr	r3, [r0, #32]
 8008adc:	b90b      	cbnz	r3, 8008ae2 <_fflush_r+0x1a>
 8008ade:	f7ff fa55 	bl	8007f8c <__sinit>
 8008ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f3      	beq.n	8008ad2 <_fflush_r+0xa>
 8008aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aec:	07d0      	lsls	r0, r2, #31
 8008aee:	d404      	bmi.n	8008afa <_fflush_r+0x32>
 8008af0:	0599      	lsls	r1, r3, #22
 8008af2:	d402      	bmi.n	8008afa <_fflush_r+0x32>
 8008af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af6:	f7ff fb5c 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8008afa:	4628      	mov	r0, r5
 8008afc:	4621      	mov	r1, r4
 8008afe:	f7ff ff5f 	bl	80089c0 <__sflush_r>
 8008b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b04:	07da      	lsls	r2, r3, #31
 8008b06:	4605      	mov	r5, r0
 8008b08:	d4e4      	bmi.n	8008ad4 <_fflush_r+0xc>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	059b      	lsls	r3, r3, #22
 8008b0e:	d4e1      	bmi.n	8008ad4 <_fflush_r+0xc>
 8008b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b12:	f7ff fb4f 	bl	80081b4 <__retarget_lock_release_recursive>
 8008b16:	e7dd      	b.n	8008ad4 <_fflush_r+0xc>

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	@ (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f000 f89d 	bl	8008c68 <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	2004002c 	.word	0x2004002c

08008b3c <memmove>:
 8008b3c:	4288      	cmp	r0, r1
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	eb01 0402 	add.w	r4, r1, r2
 8008b44:	d902      	bls.n	8008b4c <memmove+0x10>
 8008b46:	4284      	cmp	r4, r0
 8008b48:	4623      	mov	r3, r4
 8008b4a:	d807      	bhi.n	8008b5c <memmove+0x20>
 8008b4c:	1e43      	subs	r3, r0, #1
 8008b4e:	42a1      	cmp	r1, r4
 8008b50:	d008      	beq.n	8008b64 <memmove+0x28>
 8008b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b5a:	e7f8      	b.n	8008b4e <memmove+0x12>
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4601      	mov	r1, r0
 8008b60:	428a      	cmp	r2, r1
 8008b62:	d100      	bne.n	8008b66 <memmove+0x2a>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b6e:	e7f7      	b.n	8008b60 <memmove+0x24>

08008b70 <_sbrk_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_sbrk_r+0x1c>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 fc58 	bl	8001430 <_sbrk>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_sbrk_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_sbrk_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	2004087c 	.word	0x2004087c

08008b90 <memcpy>:
 8008b90:	440a      	add	r2, r1
 8008b92:	4291      	cmp	r1, r2
 8008b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b98:	d100      	bne.n	8008b9c <memcpy+0xc>
 8008b9a:	4770      	bx	lr
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	d1f9      	bne.n	8008b9e <memcpy+0xe>
 8008baa:	bd10      	pop	{r4, pc}

08008bac <abort>:
 8008bac:	b508      	push	{r3, lr}
 8008bae:	2006      	movs	r0, #6
 8008bb0:	f000 fa2e 	bl	8009010 <raise>
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	f7f8 fbc2 	bl	800133e <_exit>

08008bba <_realloc_r>:
 8008bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbe:	4680      	mov	r8, r0
 8008bc0:	4615      	mov	r5, r2
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b921      	cbnz	r1, 8008bd0 <_realloc_r+0x16>
 8008bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bca:	4611      	mov	r1, r2
 8008bcc:	f7ff bb86 	b.w	80082dc <_malloc_r>
 8008bd0:	b92a      	cbnz	r2, 8008bde <_realloc_r+0x24>
 8008bd2:	f7ff fb0f 	bl	80081f4 <_free_r>
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	4620      	mov	r0, r4
 8008bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bde:	f000 fa33 	bl	8009048 <_malloc_usable_size_r>
 8008be2:	4285      	cmp	r5, r0
 8008be4:	4606      	mov	r6, r0
 8008be6:	d802      	bhi.n	8008bee <_realloc_r+0x34>
 8008be8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008bec:	d8f4      	bhi.n	8008bd8 <_realloc_r+0x1e>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	f7ff fb73 	bl	80082dc <_malloc_r>
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d0ec      	beq.n	8008bd6 <_realloc_r+0x1c>
 8008bfc:	42b5      	cmp	r5, r6
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4621      	mov	r1, r4
 8008c02:	bf28      	it	cs
 8008c04:	4632      	movcs	r2, r6
 8008c06:	f7ff ffc3 	bl	8008b90 <memcpy>
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	f7ff faf1 	bl	80081f4 <_free_r>
 8008c12:	463c      	mov	r4, r7
 8008c14:	e7e0      	b.n	8008bd8 <_realloc_r+0x1e>

08008c16 <__sfputc_r>:
 8008c16:	6893      	ldr	r3, [r2, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	b410      	push	{r4}
 8008c1e:	6093      	str	r3, [r2, #8]
 8008c20:	da08      	bge.n	8008c34 <__sfputc_r+0x1e>
 8008c22:	6994      	ldr	r4, [r2, #24]
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	db01      	blt.n	8008c2c <__sfputc_r+0x16>
 8008c28:	290a      	cmp	r1, #10
 8008c2a:	d103      	bne.n	8008c34 <__sfputc_r+0x1e>
 8008c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c30:	f000 b932 	b.w	8008e98 <__swbuf_r>
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	1c58      	adds	r0, r3, #1
 8008c38:	6010      	str	r0, [r2, #0]
 8008c3a:	7019      	strb	r1, [r3, #0]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <__sfputs_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	18d5      	adds	r5, r2, r3
 8008c4e:	42ac      	cmp	r4, r5
 8008c50:	d101      	bne.n	8008c56 <__sfputs_r+0x12>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e007      	b.n	8008c66 <__sfputs_r+0x22>
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7ff ffda 	bl	8008c16 <__sfputc_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d1f3      	bne.n	8008c4e <__sfputs_r+0xa>
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	b09d      	sub	sp, #116	@ 0x74
 8008c70:	4614      	mov	r4, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f7ff f986 	bl	8007f8c <__sinit>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7ff fa90 	bl	80081b2 <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x34>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b99b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x5c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f938 	bl	8008f14 <__swsetup_r>
 8008ca4:	b170      	cbz	r0, 8008cc4 <_vfiprintf_r+0x5c>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d504      	bpl.n	8008cb6 <_vfiprintf_r+0x4e>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	@ 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4f7      	bmi.n	8008cac <_vfiprintf_r+0x44>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cbe:	f7ff fa79 	bl	80081b4 <__retarget_lock_release_recursive>
 8008cc2:	e7f3      	b.n	8008cac <_vfiprintf_r+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	2330      	movs	r3, #48	@ 0x30
 8008cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e84 <_vfiprintf_r+0x21c>
 8008cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0x86>
 8008cea:	2a25      	cmp	r2, #37	@ 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x7a>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xa4>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ffa2 	bl	8008c44 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80a7 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 809f 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4853      	ldr	r0, [pc, #332]	@ (8008e84 <_vfiprintf_r+0x21c>)
 8008d38:	f7f7 fa6a 	bl	8000210 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x110>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	@ 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x120>
 8008d5c:	9a07      	ldr	r2, [sp, #28]
 8008d5e:	4654      	mov	r4, sl
 8008d60:	2000      	movs	r0, #0
 8008d62:	f04f 0c0a 	mov.w	ip, #10
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	@ 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94b      	bls.n	8008e0a <_vfiprintf_r+0x1a2>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x13a>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x13a>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	46a2      	mov	sl, r4
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xc6>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008da6:	d10a      	bne.n	8008dbe <_vfiprintf_r+0x156>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dac:	d132      	bne.n	8008e14 <_vfiprintf_r+0x1ac>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dba:	3402      	adds	r4, #2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e94 <_vfiprintf_r+0x22c>
 8008dc2:	7821      	ldrb	r1, [r4, #0]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa22 	bl	8000210 <memchr>
 8008dcc:	b138      	cbz	r0, 8008dde <_vfiprintf_r+0x176>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	eba0 000a 	sub.w	r0, r0, sl
 8008dd4:	2240      	movs	r2, #64	@ 0x40
 8008dd6:	4082      	lsls	r2, r0
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	4829      	ldr	r0, [pc, #164]	@ (8008e88 <_vfiprintf_r+0x220>)
 8008de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008de8:	2206      	movs	r2, #6
 8008dea:	f7f7 fa11 	bl	8000210 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d03f      	beq.n	8008e72 <_vfiprintf_r+0x20a>
 8008df2:	4b26      	ldr	r3, [pc, #152]	@ (8008e8c <_vfiprintf_r+0x224>)
 8008df4:	bb1b      	cbnz	r3, 8008e3e <_vfiprintf_r+0x1d6>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	443b      	add	r3, r7
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	e76a      	b.n	8008ce0 <_vfiprintf_r+0x78>
 8008e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7a8      	b.n	8008d66 <_vfiprintf_r+0xfe>
 8008e14:	2300      	movs	r3, #0
 8008e16:	3401      	adds	r4, #1
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f04f 0c0a 	mov.w	ip, #10
 8008e20:	4620      	mov	r0, r4
 8008e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e26:	3a30      	subs	r2, #48	@ 0x30
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	d903      	bls.n	8008e34 <_vfiprintf_r+0x1cc>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c6      	beq.n	8008dbe <_vfiprintf_r+0x156>
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	e7c4      	b.n	8008dbe <_vfiprintf_r+0x156>
 8008e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7f0      	b.n	8008e20 <_vfiprintf_r+0x1b8>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4b12      	ldr	r3, [pc, #72]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f3af 8000 	nop.w
 8008e4e:	4607      	mov	r7, r0
 8008e50:	1c78      	adds	r0, r7, #1
 8008e52:	d1d6      	bne.n	8008e02 <_vfiprintf_r+0x19a>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7ff f9a7 	bl	80081b4 <__retarget_lock_release_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	065b      	lsls	r3, r3, #25
 8008e6a:	f53f af1f 	bmi.w	8008cac <_vfiprintf_r+0x44>
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	e71e      	b.n	8008cb0 <_vfiprintf_r+0x48>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff fc7f 	bl	8008780 <_printf_i>
 8008e82:	e7e4      	b.n	8008e4e <_vfiprintf_r+0x1e6>
 8008e84:	0800939b 	.word	0x0800939b
 8008e88:	080093a5 	.word	0x080093a5
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	08008c45 	.word	0x08008c45
 8008e94:	080093a1 	.word	0x080093a1

08008e98 <__swbuf_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b118      	cbz	r0, 8008eaa <__swbuf_r+0x12>
 8008ea2:	6a03      	ldr	r3, [r0, #32]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <__swbuf_r+0x12>
 8008ea6:	f7ff f871 	bl	8007f8c <__sinit>
 8008eaa:	69a3      	ldr	r3, [r4, #24]
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	071a      	lsls	r2, r3, #28
 8008eb2:	d501      	bpl.n	8008eb8 <__swbuf_r+0x20>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	b943      	cbnz	r3, 8008eca <__swbuf_r+0x32>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f82a 	bl	8008f14 <__swsetup_r>
 8008ec0:	b118      	cbz	r0, 8008eca <__swbuf_r+0x32>
 8008ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	1a98      	subs	r0, r3, r2
 8008ed0:	6963      	ldr	r3, [r4, #20]
 8008ed2:	b2f6      	uxtb	r6, r6
 8008ed4:	4283      	cmp	r3, r0
 8008ed6:	4637      	mov	r7, r6
 8008ed8:	dc05      	bgt.n	8008ee6 <__swbuf_r+0x4e>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f7ff fdf3 	bl	8008ac8 <_fflush_r>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1ed      	bne.n	8008ec2 <__swbuf_r+0x2a>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	701e      	strb	r6, [r3, #0]
 8008ef4:	6962      	ldr	r2, [r4, #20]
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d004      	beq.n	8008f06 <__swbuf_r+0x6e>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	07db      	lsls	r3, r3, #31
 8008f00:	d5e1      	bpl.n	8008ec6 <__swbuf_r+0x2e>
 8008f02:	2e0a      	cmp	r6, #10
 8008f04:	d1df      	bne.n	8008ec6 <__swbuf_r+0x2e>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f7ff fddd 	bl	8008ac8 <_fflush_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d0d9      	beq.n	8008ec6 <__swbuf_r+0x2e>
 8008f12:	e7d6      	b.n	8008ec2 <__swbuf_r+0x2a>

08008f14 <__swsetup_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4b29      	ldr	r3, [pc, #164]	@ (8008fbc <__swsetup_r+0xa8>)
 8008f18:	4605      	mov	r5, r0
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	b118      	cbz	r0, 8008f28 <__swsetup_r+0x14>
 8008f20:	6a03      	ldr	r3, [r0, #32]
 8008f22:	b90b      	cbnz	r3, 8008f28 <__swsetup_r+0x14>
 8008f24:	f7ff f832 	bl	8007f8c <__sinit>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	0719      	lsls	r1, r3, #28
 8008f2e:	d422      	bmi.n	8008f76 <__swsetup_r+0x62>
 8008f30:	06da      	lsls	r2, r3, #27
 8008f32:	d407      	bmi.n	8008f44 <__swsetup_r+0x30>
 8008f34:	2209      	movs	r2, #9
 8008f36:	602a      	str	r2, [r5, #0]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e033      	b.n	8008fac <__swsetup_r+0x98>
 8008f44:	0758      	lsls	r0, r3, #29
 8008f46:	d512      	bpl.n	8008f6e <__swsetup_r+0x5a>
 8008f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f4a:	b141      	cbz	r1, 8008f5e <__swsetup_r+0x4a>
 8008f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d002      	beq.n	8008f5a <__swsetup_r+0x46>
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff f94d 	bl	80081f4 <_free_r>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f043 0308 	orr.w	r3, r3, #8
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	b94b      	cbnz	r3, 8008f8e <__swsetup_r+0x7a>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d003      	beq.n	8008f8e <__swsetup_r+0x7a>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f88b 	bl	80090a4 <__smakebuf_r>
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	f013 0201 	ands.w	r2, r3, #1
 8008f96:	d00a      	beq.n	8008fae <__swsetup_r+0x9a>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	60a2      	str	r2, [r4, #8]
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	4252      	negs	r2, r2
 8008fa0:	61a2      	str	r2, [r4, #24]
 8008fa2:	6922      	ldr	r2, [r4, #16]
 8008fa4:	b942      	cbnz	r2, 8008fb8 <__swsetup_r+0xa4>
 8008fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008faa:	d1c5      	bne.n	8008f38 <__swsetup_r+0x24>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	0799      	lsls	r1, r3, #30
 8008fb0:	bf58      	it	pl
 8008fb2:	6962      	ldrpl	r2, [r4, #20]
 8008fb4:	60a2      	str	r2, [r4, #8]
 8008fb6:	e7f4      	b.n	8008fa2 <__swsetup_r+0x8e>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e7f7      	b.n	8008fac <__swsetup_r+0x98>
 8008fbc:	2004002c 	.word	0x2004002c

08008fc0 <_raise_r>:
 8008fc0:	291f      	cmp	r1, #31
 8008fc2:	b538      	push	{r3, r4, r5, lr}
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	d904      	bls.n	8008fd4 <_raise_r+0x14>
 8008fca:	2316      	movs	r3, #22
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fd6:	b112      	cbz	r2, 8008fde <_raise_r+0x1e>
 8008fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fdc:	b94b      	cbnz	r3, 8008ff2 <_raise_r+0x32>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f830 	bl	8009044 <_getpid_r>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fee:	f000 b817 	b.w	8009020 <_kill_r>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d00a      	beq.n	800900c <_raise_r+0x4c>
 8008ff6:	1c59      	adds	r1, r3, #1
 8008ff8:	d103      	bne.n	8009002 <_raise_r+0x42>
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7e7      	b.n	8008fd2 <_raise_r+0x12>
 8009002:	2100      	movs	r1, #0
 8009004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009008:	4620      	mov	r0, r4
 800900a:	4798      	blx	r3
 800900c:	2000      	movs	r0, #0
 800900e:	e7e0      	b.n	8008fd2 <_raise_r+0x12>

08009010 <raise>:
 8009010:	4b02      	ldr	r3, [pc, #8]	@ (800901c <raise+0xc>)
 8009012:	4601      	mov	r1, r0
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f7ff bfd3 	b.w	8008fc0 <_raise_r>
 800901a:	bf00      	nop
 800901c:	2004002c 	.word	0x2004002c

08009020 <_kill_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	@ (8009040 <_kill_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f8 f976 	bl	800131e <_kill>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_kill_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_kill_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	2004087c 	.word	0x2004087c

08009044 <_getpid_r>:
 8009044:	f7f8 b963 	b.w	800130e <_getpid>

08009048 <_malloc_usable_size_r>:
 8009048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904c:	1f18      	subs	r0, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfbc      	itt	lt
 8009052:	580b      	ldrlt	r3, [r1, r0]
 8009054:	18c0      	addlt	r0, r0, r3
 8009056:	4770      	bx	lr

08009058 <__swhatbuf_r>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	460c      	mov	r4, r1
 800905c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009060:	2900      	cmp	r1, #0
 8009062:	b096      	sub	sp, #88	@ 0x58
 8009064:	4615      	mov	r5, r2
 8009066:	461e      	mov	r6, r3
 8009068:	da0d      	bge.n	8009086 <__swhatbuf_r+0x2e>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009070:	f04f 0100 	mov.w	r1, #0
 8009074:	bf14      	ite	ne
 8009076:	2340      	movne	r3, #64	@ 0x40
 8009078:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800907c:	2000      	movs	r0, #0
 800907e:	6031      	str	r1, [r6, #0]
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	b016      	add	sp, #88	@ 0x58
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	466a      	mov	r2, sp
 8009088:	f000 f848 	bl	800911c <_fstat_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	dbec      	blt.n	800906a <__swhatbuf_r+0x12>
 8009090:	9901      	ldr	r1, [sp, #4]
 8009092:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009096:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800909a:	4259      	negs	r1, r3
 800909c:	4159      	adcs	r1, r3
 800909e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a2:	e7eb      	b.n	800907c <__swhatbuf_r+0x24>

080090a4 <__smakebuf_r>:
 80090a4:	898b      	ldrh	r3, [r1, #12]
 80090a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090a8:	079d      	lsls	r5, r3, #30
 80090aa:	4606      	mov	r6, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	d507      	bpl.n	80090c0 <__smakebuf_r+0x1c>
 80090b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	6123      	str	r3, [r4, #16]
 80090b8:	2301      	movs	r3, #1
 80090ba:	6163      	str	r3, [r4, #20]
 80090bc:	b003      	add	sp, #12
 80090be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c0:	ab01      	add	r3, sp, #4
 80090c2:	466a      	mov	r2, sp
 80090c4:	f7ff ffc8 	bl	8009058 <__swhatbuf_r>
 80090c8:	9f00      	ldr	r7, [sp, #0]
 80090ca:	4605      	mov	r5, r0
 80090cc:	4639      	mov	r1, r7
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7ff f904 	bl	80082dc <_malloc_r>
 80090d4:	b948      	cbnz	r0, 80090ea <__smakebuf_r+0x46>
 80090d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090da:	059a      	lsls	r2, r3, #22
 80090dc:	d4ee      	bmi.n	80090bc <__smakebuf_r+0x18>
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	e7e2      	b.n	80090b0 <__smakebuf_r+0xc>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	6020      	str	r0, [r4, #0]
 80090ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090fa:	b15b      	cbz	r3, 8009114 <__smakebuf_r+0x70>
 80090fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009100:	4630      	mov	r0, r6
 8009102:	f000 f81d 	bl	8009140 <_isatty_r>
 8009106:	b128      	cbz	r0, 8009114 <__smakebuf_r+0x70>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f023 0303 	bic.w	r3, r3, #3
 800910e:	f043 0301 	orr.w	r3, r3, #1
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	431d      	orrs	r5, r3
 8009118:	81a5      	strh	r5, [r4, #12]
 800911a:	e7cf      	b.n	80090bc <__smakebuf_r+0x18>

0800911c <_fstat_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4d07      	ldr	r5, [pc, #28]	@ (800913c <_fstat_r+0x20>)
 8009120:	2300      	movs	r3, #0
 8009122:	4604      	mov	r4, r0
 8009124:	4608      	mov	r0, r1
 8009126:	4611      	mov	r1, r2
 8009128:	602b      	str	r3, [r5, #0]
 800912a:	f7f8 f958 	bl	80013de <_fstat>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	d102      	bne.n	8009138 <_fstat_r+0x1c>
 8009132:	682b      	ldr	r3, [r5, #0]
 8009134:	b103      	cbz	r3, 8009138 <_fstat_r+0x1c>
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	bf00      	nop
 800913c:	2004087c 	.word	0x2004087c

08009140 <_isatty_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d06      	ldr	r5, [pc, #24]	@ (800915c <_isatty_r+0x1c>)
 8009144:	2300      	movs	r3, #0
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	f7f8 f957 	bl	80013fe <_isatty>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_isatty_r+0x1a>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_isatty_r+0x1a>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	2004087c 	.word	0x2004087c

08009160 <_init>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr

0800916c <_fini>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr
