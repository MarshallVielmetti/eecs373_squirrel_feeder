
LCD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002748  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002904  08002904  00003904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002944  08002944  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002944  08002944  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002944  08002944  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002944  08002944  00003944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002948  08002948  00003948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20040000  0800294c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20040010  0800295c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040094  0800295c  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a08  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f3  00000000  00000000  0000ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0000d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000631  00000000  00000000  0000d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ffb  00000000  00000000  0000dfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ea3  00000000  00000000  00035fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4fe4  00000000  00000000  0003ee57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002058  00000000  00000000  00133e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00135ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040010 	.word	0x20040010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080028ec 	.word	0x080028ec

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040014 	.word	0x20040014
 80001f8:	080028ec 	.word	0x080028ec

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fbc3 	bl	800098a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f815 	bl	8000232 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f898 	bl	800033c <MX_GPIO_Init>
  MX_SPI1_Init();
 800020c:	f000 f858 	bl	80002c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_SPI_Init();
 8000210:	f002 f9d6 	bl	80025c0 <ILI9341_SPI_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ILI9341_Fill_Screen(BLACK);
 8000214:	2000      	movs	r0, #0
 8000216:	f002 fb17 	bl	8002848 <ILI9341_Fill_Screen>
	  HAL_Delay(50);
 800021a:	2032      	movs	r0, #50	@ 0x32
 800021c:	f000 fc2a 	bl	8000a74 <HAL_Delay>
	  ILI9341_Fill_Screen(WHITE);
 8000220:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000224:	f002 fb10 	bl	8002848 <ILI9341_Fill_Screen>
	  HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	@ 0x32
 800022a:	f000 fc23 	bl	8000a74 <HAL_Delay>
	  ILI9341_Fill_Screen(BLACK);
 800022e:	bf00      	nop
 8000230:	e7f0      	b.n	8000214 <main+0x18>

08000232 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000232:	b580      	push	{r7, lr}
 8000234:	b096      	sub	sp, #88	@ 0x58
 8000236:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2244      	movs	r2, #68	@ 0x44
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f002 fb27 	bl	8002894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000246:	463b      	mov	r3, r7
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000254:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000258:	f000 fee0 	bl	800101c <HAL_PWREx_ControlVoltageScaling>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000262:	f000 fabb 	bl	80007dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000266:	2310      	movs	r3, #16
 8000268:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000272:	2360      	movs	r3, #96	@ 0x60
 8000274:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ff80 	bl	8001184 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800028a:	f000 faa7 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fb86 	bl	80019b8 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b2:	f000 fa93 	bl	80007dc <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3758      	adds	r7, #88	@ 0x58
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000338 <MX_SPI1_Init+0x78>)
 80002c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d2:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002d8:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002da:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80002de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e0:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e6:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ec:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <MX_SPI1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <MX_SPI1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <MX_SPI1_Init+0x74>)
 800030e:	2207      	movs	r2, #7
 8000310:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <MX_SPI1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <MX_SPI1_Init+0x74>)
 800031a:	2208      	movs	r2, #8
 800031c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	@ (8000334 <MX_SPI1_Init+0x74>)
 8000320:	f001 fdd0 	bl	8001ec4 <HAL_SPI_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 fa57 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2004002c 	.word	0x2004002c
 8000338:	40013000 	.word	0x40013000

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08e      	sub	sp, #56	@ 0x38
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000352:	4bb2      	ldr	r3, [pc, #712]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000356:	4ab1      	ldr	r2, [pc, #708]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800035e:	4baf      	ldr	r3, [pc, #700]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	f003 0310 	and.w	r3, r3, #16
 8000366:	623b      	str	r3, [r7, #32]
 8000368:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4bac      	ldr	r3, [pc, #688]	@ (800061c <MX_GPIO_Init+0x2e0>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036e:	4aab      	ldr	r2, [pc, #684]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000376:	4ba9      	ldr	r3, [pc, #676]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	61fb      	str	r3, [r7, #28]
 8000380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4ba6      	ldr	r3, [pc, #664]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000386:	4aa5      	ldr	r2, [pc, #660]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038e:	4ba3      	ldr	r3, [pc, #652]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000392:	f003 0320 	and.w	r3, r3, #32
 8000396:	61bb      	str	r3, [r7, #24]
 8000398:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800039a:	4ba0      	ldr	r3, [pc, #640]	@ (800061c <MX_GPIO_Init+0x2e0>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	4a9f      	ldr	r2, [pc, #636]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a6:	4b9d      	ldr	r3, [pc, #628]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b9a      	ldr	r3, [pc, #616]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a99      	ldr	r2, [pc, #612]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003be:	4b97      	ldr	r3, [pc, #604]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
 80003c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b94      	ldr	r3, [pc, #592]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	4a93      	ldr	r2, [pc, #588]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d6:	4b91      	ldr	r3, [pc, #580]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e2:	4b8e      	ldr	r3, [pc, #568]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	4a8d      	ldr	r2, [pc, #564]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003e8:	f043 0308 	orr.w	r3, r3, #8
 80003ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ee:	4b8b      	ldr	r3, [pc, #556]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	f003 0308 	and.w	r3, r3, #8
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003fa:	4b88      	ldr	r3, [pc, #544]	@ (800061c <MX_GPIO_Init+0x2e0>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	4a87      	ldr	r2, [pc, #540]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000406:	4b85      	ldr	r3, [pc, #532]	@ (800061c <MX_GPIO_Init+0x2e0>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000412:	f000 fea7 	bl	8001164 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2110      	movs	r1, #16
 800041a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041e:	f000 fdc5 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	487e      	ldr	r0, [pc, #504]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 8000428:	f000 fdc0 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800042c:	230c      	movs	r3, #12
 800042e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000430:	2302      	movs	r3, #2
 8000432:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2300      	movs	r3, #0
 800043a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800043c:	230d      	movs	r3, #13
 800043e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000444:	4619      	mov	r1, r3
 8000446:	4877      	ldr	r0, [pc, #476]	@ (8000624 <MX_GPIO_Init+0x2e8>)
 8000448:	f000 fc1e 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800044c:	2307      	movs	r3, #7
 800044e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000450:	2312      	movs	r3, #18
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000458:	2303      	movs	r3, #3
 800045a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800045c:	2304      	movs	r3, #4
 800045e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000464:	4619      	mov	r1, r3
 8000466:	4870      	ldr	r0, [pc, #448]	@ (8000628 <MX_GPIO_Init+0x2ec>)
 8000468:	f000 fc0e 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2300      	movs	r3, #0
 800047a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800047c:	230d      	movs	r3, #13
 800047e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000484:	4619      	mov	r1, r3
 8000486:	4868      	ldr	r0, [pc, #416]	@ (8000628 <MX_GPIO_Init+0x2ec>)
 8000488:	f000 fbfe 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800048c:	233f      	movs	r3, #63	@ 0x3f
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000490:	230b      	movs	r3, #11
 8000492:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049c:	4619      	mov	r1, r3
 800049e:	4863      	ldr	r0, [pc, #396]	@ (800062c <MX_GPIO_Init+0x2f0>)
 80004a0:	f000 fbf2 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a4:	2301      	movs	r3, #1
 80004a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	2302      	movs	r3, #2
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004b4:	2301      	movs	r3, #1
 80004b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004bc:	4619      	mov	r1, r3
 80004be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c2:	f000 fbe1 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80004c6:	230a      	movs	r3, #10
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004ca:	230b      	movs	r3, #11
 80004cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d6:	4619      	mov	r1, r3
 80004d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004dc:	f000 fbd4 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004e0:	2310      	movs	r3, #16
 80004e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fbc5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004fe:	2301      	movs	r3, #1
 8000500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	4619      	mov	r1, r3
 8000514:	4842      	ldr	r0, [pc, #264]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 8000516:	f000 fbb7 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800051a:	2344      	movs	r3, #68	@ 0x44
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051e:	2303      	movs	r3, #3
 8000520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052a:	4619      	mov	r1, r3
 800052c:	483c      	ldr	r0, [pc, #240]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 800052e:	f000 fbab 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000532:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000544:	2301      	movs	r3, #1
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054c:	4619      	mov	r1, r3
 800054e:	4835      	ldr	r0, [pc, #212]	@ (8000624 <MX_GPIO_Init+0x2e8>)
 8000550:	f000 fb9a 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000554:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	2302      	movs	r3, #2
 800055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000566:	2303      	movs	r3, #3
 8000568:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800056a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800056e:	4619      	mov	r1, r3
 8000570:	482c      	ldr	r0, [pc, #176]	@ (8000624 <MX_GPIO_Init+0x2e8>)
 8000572:	f000 fb89 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	2302      	movs	r3, #2
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000588:	2301      	movs	r3, #1
 800058a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000590:	4619      	mov	r1, r3
 8000592:	4823      	ldr	r0, [pc, #140]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 8000594:	f000 fb78 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000598:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005aa:	230d      	movs	r3, #13
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	481a      	ldr	r0, [pc, #104]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 80005b6:	f000 fb67 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80005cc:	230e      	movs	r3, #14
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	4812      	ldr	r0, [pc, #72]	@ (8000620 <MX_GPIO_Init+0x2e4>)
 80005d8:	f000 fb56 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005ee:	2307      	movs	r3, #7
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	4619      	mov	r1, r3
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_GPIO_Init+0x2f4>)
 80005fa:	f000 fb45 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005fe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000610:	2302      	movs	r3, #2
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000618:	4619      	mov	r1, r3
 800061a:	e00b      	b.n	8000634 <MX_GPIO_Init+0x2f8>
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400
 8000624:	48001000 	.word	0x48001000
 8000628:	48001400 	.word	0x48001400
 800062c:	48000800 	.word	0x48000800
 8000630:	48000c00 	.word	0x48000c00
 8000634:	4864      	ldr	r0, [pc, #400]	@ (80007c8 <MX_GPIO_Init+0x48c>)
 8000636:	f000 fb27 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800063a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800064c:	2308      	movs	r3, #8
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000654:	4619      	mov	r1, r3
 8000656:	485d      	ldr	r0, [pc, #372]	@ (80007cc <MX_GPIO_Init+0x490>)
 8000658:	f000 fb16 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065c:	2340      	movs	r3, #64	@ 0x40
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	2302      	movs	r3, #2
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800066c:	230d      	movs	r3, #13
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	4619      	mov	r1, r3
 8000676:	4856      	ldr	r0, [pc, #344]	@ (80007d0 <MX_GPIO_Init+0x494>)
 8000678:	f000 fb06 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	484e      	ldr	r0, [pc, #312]	@ (80007d0 <MX_GPIO_Init+0x494>)
 8000698:	f000 faf6 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800069c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006ae:	230c      	movs	r3, #12
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	4619      	mov	r1, r3
 80006b8:	4845      	ldr	r0, [pc, #276]	@ (80007d0 <MX_GPIO_Init+0x494>)
 80006ba:	f000 fae5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80006be:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006d0:	230a      	movs	r3, #10
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f000 fad3 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f000 fac5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fe:	2301      	movs	r3, #1
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800070e:	2309      	movs	r3, #9
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000716:	4619      	mov	r1, r3
 8000718:	482b      	ldr	r0, [pc, #172]	@ (80007c8 <MX_GPIO_Init+0x48c>)
 800071a:	f000 fab5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800071e:	2304      	movs	r3, #4
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800072e:	230c      	movs	r3, #12
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000736:	4619      	mov	r1, r3
 8000738:	4823      	ldr	r0, [pc, #140]	@ (80007c8 <MX_GPIO_Init+0x48c>)
 800073a:	f000 faa5 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800073e:	2378      	movs	r3, #120	@ 0x78
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800074e:	2307      	movs	r3, #7
 8000750:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <MX_GPIO_Init+0x48c>)
 800075a:	f000 fa95 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	2338      	movs	r3, #56	@ 0x38
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800076e:	2306      	movs	r3, #6
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x498>)
 800077a:	f000 fa85 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800077e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000784:	2312      	movs	r3, #18
 8000786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000790:	2304      	movs	r3, #4
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <MX_GPIO_Init+0x498>)
 800079c:	f000 fa74 	bl	8000c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007b0:	2302      	movs	r3, #2
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_GPIO_Init+0x49c>)
 80007bc:	f000 fa64 	bl	8000c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3738      	adds	r7, #56	@ 0x38
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	48000c00 	.word	0x48000c00
 80007cc:	48001800 	.word	0x48001800
 80007d0:	48000800 	.word	0x48000800
 80007d4:	48000400 	.word	0x48000400
 80007d8:	48001000 	.word	0x48001000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	@ 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <HAL_SPI_MspInit+0x7c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d128      	bne.n	80008a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000856:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 8000858:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800085c:	6613      	str	r3, [r2, #96]	@ 0x60
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_SPI_MspInit+0x80>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000882:	23e0      	movs	r3, #224	@ 0xe0
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000892:	2305      	movs	r3, #5
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 f9f2 	bl	8000c88 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013000 	.word	0x40013000
 80008b0:	40021000 	.word	0x40021000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f893 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff ffea 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	@ (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 ff9d 	bl	80028a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096a:	f7ff fc47 	bl	80001fc <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000974:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000978:	20040010 	.word	0x20040010
  ldr r2, =_sidata
 800097c:	0800294c 	.word	0x0800294c
  ldr r2, =_sbss
 8000980:	20040010 	.word	0x20040010
  ldr r4, =_ebss
 8000984:	20040094 	.word	0x20040094

08000988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_IRQHandler>

0800098a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000990:	2300      	movs	r3, #0
 8000992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f943 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f80e 	bl	80009bc <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e001      	b.n	80009b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ac:	f7ff ff1c 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_InitTick+0x6c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d023      	beq.n	8000a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_InitTick+0x70>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_InitTick+0x6c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f941 	bl	8000c6e <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10f      	bne.n	8000a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d809      	bhi.n	8000a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f919 	bl	8000c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0x74>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e007      	b.n	8000a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e004      	b.n	8000a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
 8000a16:	e001      	b.n	8000a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20040008 	.word	0x20040008
 8000a2c:	20040000 	.word	0x20040000
 8000a30:	20040004 	.word	0x20040004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20040008 	.word	0x20040008
 8000a58:	20040090 	.word	0x20040090

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20040090 	.word	0x20040090

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff ffee 	bl	8000a5c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a9a:	bf00      	nop
 8000a9c:	f7ff ffde 	bl	8000a5c <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20040008 	.word	0x20040008

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	6039      	str	r1, [r7, #0]
 8000b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db0a      	blt.n	8000b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	0112      	lsls	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	440b      	add	r3, r1
 8000b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b48:	e00a      	b.n	8000b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	0112      	lsls	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	f1c3 0307 	rsb	r3, r3, #7
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	bf28      	it	cs
 8000b92:	2304      	movcs	r3, #4
 8000b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d902      	bls.n	8000ba4 <NVIC_EncodePriority+0x30>
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3b03      	subs	r3, #3
 8000ba2:	e000      	b.n	8000ba6 <NVIC_EncodePriority+0x32>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	43d9      	mvns	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	@ 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff8e 	bl	8000b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff47 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5c 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff8e 	bl	8000b74 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5d 	bl	8000b20 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e166      	b.n	8000f66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 8158 	beq.w	8000f60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80b2 	beq.w	8000f60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <HAL_GPIO_Init+0x2fc>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e00:	4a60      	ldr	r2, [pc, #384]	@ (8000f84 <HAL_GPIO_Init+0x2fc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e08:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <HAL_GPIO_Init+0x2fc>)
 8000e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e14:	4a5c      	ldr	r2, [pc, #368]	@ (8000f88 <HAL_GPIO_Init+0x300>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e3e:	d02b      	beq.n	8000e98 <HAL_GPIO_Init+0x210>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a52      	ldr	r2, [pc, #328]	@ (8000f8c <HAL_GPIO_Init+0x304>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d025      	beq.n	8000e94 <HAL_GPIO_Init+0x20c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a51      	ldr	r2, [pc, #324]	@ (8000f90 <HAL_GPIO_Init+0x308>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d01f      	beq.n	8000e90 <HAL_GPIO_Init+0x208>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a50      	ldr	r2, [pc, #320]	@ (8000f94 <HAL_GPIO_Init+0x30c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x204>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f98 <HAL_GPIO_Init+0x310>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x200>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4e      	ldr	r2, [pc, #312]	@ (8000f9c <HAL_GPIO_Init+0x314>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1fc>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa0 <HAL_GPIO_Init+0x318>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1f8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa4 <HAL_GPIO_Init+0x31c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1f4>
 8000e78:	2307      	movs	r3, #7
 8000e7a:	e00e      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	e00c      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e00a      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e008      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e006      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e004      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e90:	2302      	movs	r3, #2
 8000e92:	e002      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <HAL_GPIO_Init+0x212>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	f002 0203 	and.w	r2, r2, #3
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	4093      	lsls	r3, r2
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eaa:	4937      	ldr	r1, [pc, #220]	@ (8000f88 <HAL_GPIO_Init+0x300>)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000edc:	4a32      	ldr	r2, [pc, #200]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f06:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f30:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_GPIO_Init+0x320>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f47f ae91 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	48000800 	.word	0x48000800
 8000f94:	48000c00 	.word	0x48000c00
 8000f98:	48001000 	.word	0x48001000
 8000f9c:	48001400 	.word	0x48001400
 8000fa0:	48001800 	.word	0x48001800
 8000fa4:	48001c00 	.word	0x48001c00
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fec:	d102      	bne.n	8000ff4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	e00b      	b.n	800100c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001002:	d102      	bne.n	800100a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001008:	e000      	b.n	800100c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800100a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40007000 	.word	0x40007000

0800101c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d141      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800102a:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001036:	d131      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001038:	4b47      	ldr	r3, [pc, #284]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103e:	4a46      	ldr	r2, [pc, #280]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	4b43      	ldr	r3, [pc, #268]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001050:	4a41      	ldr	r2, [pc, #260]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001058:	4b40      	ldr	r3, [pc, #256]	@ (800115c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2232      	movs	r2, #50	@ 0x32
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a3f      	ldr	r2, [pc, #252]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	0c9b      	lsrs	r3, r3, #18
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800106e:	e002      	b.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3b01      	subs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001076:	4b38      	ldr	r3, [pc, #224]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001082:	d102      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f2      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108a:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001096:	d158      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e057      	b.n	800114c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800109c:	4b2e      	ldr	r3, [pc, #184]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010ac:	e04d      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010b4:	d141      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b6:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c2:	d131      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ca:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2232      	movs	r2, #50	@ 0x32
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fa:	e002      	b.n	8001102 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3b01      	subs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110e:	d102      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f2      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800111e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001122:	d112      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e011      	b.n	800114c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001138:	e007      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001148:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40007000 	.word	0x40007000
 800115c:	20040000 	.word	0x20040000
 8001160:	431bde83 	.word	0x431bde83

08001164 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_PWREx_EnableVddIO2+0x1c>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_PWREx_EnableVddIO2+0x1c>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001172:	6053      	str	r3, [r2, #4]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f000 bc08 	b.w	80019a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001198:	4b96      	ldr	r3, [pc, #600]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a2:	4b94      	ldr	r3, [pc, #592]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80e4 	beq.w	8001382 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4c>
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	f040 808b 	bne.w	80012de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f040 8087 	bne.w	80012de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d0:	4b88      	ldr	r3, [pc, #544]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_OscConfig+0x64>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e3df      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4b81      	ldr	r3, [pc, #516]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_RCC_OscConfig+0x7e>
 80011f8:	4b7e      	ldr	r3, [pc, #504]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001200:	e005      	b.n	800120e <HAL_RCC_OscConfig+0x8a>
 8001202:	4b7c      	ldr	r3, [pc, #496]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800120e:	4293      	cmp	r3, r2
 8001210:	d223      	bcs.n	800125a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd94 	bl	8001d44 <RCC_SetFlashLatencyFromMSIRange>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e3c0      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001226:	4b73      	ldr	r3, [pc, #460]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a72      	ldr	r2, [pc, #456]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b70      	ldr	r3, [pc, #448]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	496d      	ldr	r1, [pc, #436]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001244:	4b6b      	ldr	r3, [pc, #428]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	4968      	ldr	r1, [pc, #416]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
 8001258:	e025      	b.n	80012a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125a:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a65      	ldr	r2, [pc, #404]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b63      	ldr	r3, [pc, #396]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4960      	ldr	r1, [pc, #384]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	495b      	ldr	r1, [pc, #364]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd54 	bl	8001d44 <RCC_SetFlashLatencyFromMSIRange>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e380      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012a6:	f000 fcc1 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	4950      	ldr	r1, [pc, #320]	@ (80013f8 <HAL_RCC_OscConfig+0x274>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	4a4e      	ldr	r2, [pc, #312]	@ (80013fc <HAL_RCC_OscConfig+0x278>)
 80012c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001400 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fb76 	bl	80009bc <HAL_InitTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d052      	beq.n	8001380 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	e364      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d032      	beq.n	800134c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e6:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a42      	ldr	r2, [pc, #264]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fbb3 	bl	8000a5c <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fa:	f7ff fbaf 	bl	8000a5c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e34d      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800130c:	4b39      	ldr	r3, [pc, #228]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a35      	ldr	r2, [pc, #212]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4930      	ldr	r1, [pc, #192]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	492b      	ldr	r1, [pc, #172]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e01a      	b.n	8001382 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800134c:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a28      	ldr	r2, [pc, #160]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb80 	bl	8000a5c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001360:	f7ff fb7c 	bl	8000a5c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e31a      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1dc>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d073      	beq.n	8001476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b08      	cmp	r3, #8
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x21c>
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d10e      	bne.n	80013b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d063      	beq.n	8001474 <HAL_RCC_OscConfig+0x2f0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d15f      	bne.n	8001474 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e2f7      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x24c>
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a0b      	ldr	r2, [pc, #44]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e025      	b.n	800141c <HAL_RCC_OscConfig+0x298>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d8:	d114      	bne.n	8001404 <HAL_RCC_OscConfig+0x280>
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a02      	ldr	r2, [pc, #8]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e013      	b.n	800141c <HAL_RCC_OscConfig+0x298>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	08002904 	.word	0x08002904
 80013fc:	20040000 	.word	0x20040000
 8001400:	20040004 	.word	0x20040004
 8001404:	4ba0      	ldr	r3, [pc, #640]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a9f      	ldr	r2, [pc, #636]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b9d      	ldr	r3, [pc, #628]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a9c      	ldr	r2, [pc, #624]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb1a 	bl	8000a5c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb16 	bl	8000a5c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e2b4      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	4b92      	ldr	r3, [pc, #584]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x2a8>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb06 	bl	8000a5c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fb02 	bl	8000a5c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	@ 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e2a0      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	4b88      	ldr	r3, [pc, #544]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x2d0>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d060      	beq.n	8001544 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x310>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d119      	bne.n	80014c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d116      	bne.n	80014c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001494:	4b7c      	ldr	r3, [pc, #496]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_OscConfig+0x328>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e27d      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b76      	ldr	r3, [pc, #472]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	4973      	ldr	r1, [pc, #460]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c0:	e040      	b.n	8001544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d023      	beq.n	8001512 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fac1 	bl	8000a5c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fabd 	bl	8000a5c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e25b      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	495f      	ldr	r1, [pc, #380]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
 8001510:	e018      	b.n	8001544 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b5d      	ldr	r3, [pc, #372]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800151c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fa9d 	bl	8000a5c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fa99 	bl	8000a5c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e237      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001538:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03c      	beq.n	80015ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01c      	beq.n	8001592 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001558:	4b4b      	ldr	r3, [pc, #300]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155e:	4a4a      	ldr	r2, [pc, #296]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fa78 	bl	8000a5c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fa74 	bl	8000a5c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e212      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001582:	4b41      	ldr	r3, [pc, #260]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ef      	beq.n	8001570 <HAL_RCC_OscConfig+0x3ec>
 8001590:	e01b      	b.n	80015ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001592:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001598:	4a3b      	ldr	r2, [pc, #236]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa5b 	bl	8000a5c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fa57 	bl	8000a5c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1f5      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80015be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ef      	bne.n	80015aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80a6 	beq.w	8001724 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b27      	ldr	r3, [pc, #156]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	4a26      	ldr	r2, [pc, #152]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001600:	2301      	movs	r3, #1
 8001602:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_RCC_OscConfig+0x508>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d118      	bne.n	8001642 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_RCC_OscConfig+0x508>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1d      	ldr	r2, [pc, #116]	@ (800168c <HAL_RCC_OscConfig+0x508>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161c:	f7ff fa1e 	bl	8000a5c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001624:	f7ff fa1a 	bl	8000a5c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1b8      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_RCC_OscConfig+0x508>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_RCC_OscConfig+0x4d8>
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165a:	e029      	b.n	80016b0 <HAL_RCC_OscConfig+0x52c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d115      	bne.n	8001690 <HAL_RCC_OscConfig+0x50c>
 8001664:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166a:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001674:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167a:	4a03      	ldr	r2, [pc, #12]	@ (8001688 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x52c>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	40007000 	.word	0x40007000
 8001690:	4b9d      	ldr	r3, [pc, #628]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001696:	4a9c      	ldr	r2, [pc, #624]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016a0:	4b99      	ldr	r3, [pc, #612]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a6:	4a98      	ldr	r2, [pc, #608]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d016      	beq.n	80016e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9d0 	bl	8000a5c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff f9cc 	bl	8000a5c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e168      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ed      	beq.n	80016c0 <HAL_RCC_OscConfig+0x53c>
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff f9b9 	bl	8000a5c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f9b5 	bl	8000a5c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e151      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001704:	4b80      	ldr	r3, [pc, #512]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ed      	bne.n	80016ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001718:	4b7b      	ldr	r3, [pc, #492]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	4a7a      	ldr	r2, [pc, #488]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 800171e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001722:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	2b00      	cmp	r3, #0
 800172e:	d03c      	beq.n	80017aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01c      	beq.n	8001772 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001738:	4b73      	ldr	r3, [pc, #460]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 800173a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800173e:	4a72      	ldr	r2, [pc, #456]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff f988 	bl	8000a5c <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001750:	f7ff f984 	bl	8000a5c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e122      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001762:	4b69      	ldr	r3, [pc, #420]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ef      	beq.n	8001750 <HAL_RCC_OscConfig+0x5cc>
 8001770:	e01b      	b.n	80017aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001772:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001778:	4a63      	ldr	r2, [pc, #396]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff f96b 	bl	8000a5c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800178a:	f7ff f967 	bl	8000a5c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e105      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800179c:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 800179e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ef      	bne.n	800178a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80f9 	beq.w	80019a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	f040 80cf 	bne.w	800195c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017be:	4b52      	ldr	r3, [pc, #328]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0203 	and.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d12c      	bne.n	800182c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	3b01      	subs	r3, #1
 80017de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d123      	bne.n	800182c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d11b      	bne.n	800182c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d113      	bne.n	800182c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d109      	bne.n	800182c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	3b01      	subs	r3, #1
 8001826:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d071      	beq.n	8001910 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d068      	beq.n	8001904 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001832:	4b35      	ldr	r3, [pc, #212]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0ac      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800184e:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001858:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800185a:	f7ff f8ff 	bl	8000a5c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff f8fb 	bl	8000a5c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e099      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_RCC_OscConfig+0x788>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001890:	3a01      	subs	r2, #1
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800189a:	0212      	lsls	r2, r2, #8
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018a2:	0852      	lsrs	r2, r2, #1
 80018a4:	3a01      	subs	r2, #1
 80018a6:	0552      	lsls	r2, r2, #21
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018ae:	0852      	lsrs	r2, r2, #1
 80018b0:	3a01      	subs	r2, #1
 80018b2:	0652      	lsls	r2, r2, #25
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018ba:	06d2      	lsls	r2, r2, #27
 80018bc:	430a      	orrs	r2, r1
 80018be:	4912      	ldr	r1, [pc, #72]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018dc:	f7ff f8be 	bl	8000a5c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff f8ba 	bl	8000a5c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e058      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_RCC_OscConfig+0x784>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001902:	e050      	b.n	80019a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e04f      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
 8001908:	40021000 	.word	0x40021000
 800190c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d144      	bne.n	80019a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800191c:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001934:	f7ff f892 	bl	8000a5c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f88e 	bl	8000a5c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e02c      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x7b8>
 800195a:	e024      	b.n	80019a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d01f      	beq.n	80019a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f875 	bl	8000a5c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f871 	bl	8000a5c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e00f      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4905      	ldr	r1, [pc, #20]	@ (80019b0 <HAL_RCC_OscConfig+0x82c>)
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_OscConfig+0x830>)
 800199c:	4013      	ands	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e001      	b.n	80019a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	feeefffc 	.word	0xfeeefffc

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e11d      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d0:	4b90      	ldr	r3, [pc, #576]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d910      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b8d      	ldr	r3, [pc, #564]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	498b      	ldr	r1, [pc, #556]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b89      	ldr	r3, [pc, #548]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e105      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d010      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b81      	ldr	r3, [pc, #516]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d908      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	497b      	ldr	r1, [pc, #492]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d079      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d11e      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	4b75      	ldr	r3, [pc, #468]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0dc      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001a52:	f000 f9d1 	bl	8001df8 <RCC_GetSysClockFreqFromPLLSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a70      	ldr	r2, [pc, #448]	@ (8001c1c <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d946      	bls.n	8001aec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d140      	bne.n	8001aec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a6a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a72:	4a69      	ldr	r2, [pc, #420]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a7a:	2380      	movs	r3, #128	@ 0x80
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e035      	b.n	8001aec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a88:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d115      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0b9      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0ad      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0a5      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ac0:	f000 f8b4 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a55      	ldr	r2, [pc, #340]	@ (8001c1c <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d90f      	bls.n	8001aec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001acc:	4b52      	ldr	r3, [pc, #328]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aec:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 0203 	bic.w	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4947      	ldr	r1, [pc, #284]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001afe:	f7fe ffad 	bl	8000a5c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe ffa9 	bl	8000a5c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e077      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 020c 	and.w	r2, r3, #12
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d1eb      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b80      	cmp	r3, #128	@ 0x80
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b34:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a37      	ldr	r2, [pc, #220]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b3e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d208      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	492b      	ldr	r1, [pc, #172]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d210      	bcs.n	8001b9e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 020f 	bic.w	r2, r3, #15
 8001b84:	4923      	ldr	r1, [pc, #140]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_RCC_ClockConfig+0x25c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e036      	b.n	8001c0c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4918      	ldr	r1, [pc, #96]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bdc:	f000 f826 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <HAL_RCC_ClockConfig+0x268>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_RCC_ClockConfig+0x26c>)
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fedb 	bl	80009bc <HAL_InitTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	04c4b400 	.word	0x04c4b400
 8001c20:	08002904 	.word	0x08002904
 8001c24:	20040000 	.word	0x20040000
 8001c28:	20040004 	.word	0x20040004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d121      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d11e      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c60:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c88:	4a2b      	ldr	r2, [pc, #172]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d134      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d003      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cd0:	e005      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cda:	617b      	str	r3, [r7, #20]
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	617b      	str	r3, [r7, #20]
      break;
 8001ce2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	fb03 f202 	mul.w	r2, r3, r2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	0e5b      	lsrs	r3, r3, #25
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	3301      	adds	r3, #1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d24:	69bb      	ldr	r3, [r7, #24]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08002914 	.word	0x08002914
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d5c:	f7ff f93e 	bl	8000fdc <HAL_PWREx_GetVoltageRange>
 8001d60:	6178      	str	r0, [r7, #20]
 8001d62:	e014      	b.n	8001d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a21      	ldr	r2, [pc, #132]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d7c:	f7ff f92e 	bl	8000fdc <HAL_PWREx_GetVoltageRange>
 8001d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d94:	d10b      	bne.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	@ 0x80
 8001d9a:	d913      	bls.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001da0:	d902      	bls.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da2:	2302      	movs	r3, #2
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e00d      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e00a      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001db2:	d902      	bls.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001db4:	2302      	movs	r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	e004      	b.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b70      	cmp	r3, #112	@ 0x70
 8001dbe:	d101      	bne.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 020f 	bic.w	r2, r3, #15
 8001dcc:	4909      	ldr	r1, [pc, #36]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dd4:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40022000 	.word	0x40022000

08001df8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d00b      	beq.n	8001e26 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d825      	bhi.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d008      	beq.n	8001e2c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d11f      	bne.n	8001e60 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e22:	613b      	str	r3, [r7, #16]
    break;
 8001e24:	e01f      	b.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e26:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e28:	613b      	str	r3, [r7, #16]
    break;
 8001e2a:	e01c      	b.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d107      	bne.n	8001e48 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e005      	b.n	8001e54 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001e54:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	613b      	str	r3, [r7, #16]
    break;
 8001e5e:	e002      	b.n	8001e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
    break;
 8001e64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	fb03 f202 	mul.w	r2, r3, r2
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0e5b      	lsrs	r3, r3, #25
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ea6:	683b      	ldr	r3, [r7, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	371c      	adds	r7, #28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200
 8001ec0:	08002914 	.word	0x08002914

08001ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e095      	b.n	8002002 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ee6:	d009      	beq.n	8001efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
 8001eee:	e005      	b.n	8001efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fc8a 	bl	8000830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f3c:	d902      	bls.n	8001f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e002      	b.n	8001f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001f52:	d007      	beq.n	8001f64 <HAL_SPI_Init+0xa0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	ea42 0103 	orr.w	r1, r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	f003 0204 	and.w	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001fe0:	ea42 0103 	orr.w	r1, r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b088      	sub	sp, #32
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800201a:	f7fe fd1f 	bl	8000a5c <HAL_GetTick>
 800201e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d001      	beq.n	8002034 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
 8002032:	e15c      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Transmit+0x36>
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e154      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_SPI_Transmit+0x48>
 800204e:	2302      	movs	r3, #2
 8002050:	e14d      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2203      	movs	r2, #3
 800205e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a4:	d10f      	bne.n	80020c6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d0:	2b40      	cmp	r3, #64	@ 0x40
 80020d2:	d007      	beq.n	80020e4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020ec:	d952      	bls.n	8002194 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_SPI_Transmit+0xf2>
 80020f6:	8b7b      	ldrh	r3, [r7, #26]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d145      	bne.n	8002188 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002100:	881a      	ldrh	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	1c9a      	adds	r2, r3, #2
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002120:	e032      	b.n	8002188 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d112      	bne.n	8002156 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002140:	1c9a      	adds	r2, r3, #2
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002154:	e018      	b.n	8002188 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002156:	f7fe fc81 	bl	8000a5c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d803      	bhi.n	800216e <HAL_SPI_Transmit+0x164>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d102      	bne.n	8002174 <HAL_SPI_Transmit+0x16a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0b2      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1c7      	bne.n	8002122 <HAL_SPI_Transmit+0x118>
 8002192:	e083      	b.n	800229c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_SPI_Transmit+0x198>
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d177      	bne.n	8002292 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d912      	bls.n	80021d2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	1c9a      	adds	r2, r3, #2
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b02      	subs	r3, #2
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021d0:	e05f      	b.n	8002292 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80021f8:	e04b      	b.n	8002292 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d12b      	bne.n	8002260 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d912      	bls.n	8002238 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b02      	subs	r3, #2
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002236:	e02c      	b.n	8002292 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800225e:	e018      	b.n	8002292 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002260:	f7fe fbfc 	bl	8000a5c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d803      	bhi.n	8002278 <HAL_SPI_Transmit+0x26e>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d102      	bne.n	800227e <HAL_SPI_Transmit+0x274>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e02d      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ae      	bne.n	80021fa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f947 	bl	8002534 <SPI_EndRxTxTransaction>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002308:	f7fe fba8 	bl	8000a5c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002318:	f7fe fba0 	bl	8000a5c <HAL_GetTick>
 800231c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800231e:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	015b      	lsls	r3, r3, #5
 8002324:	0d1b      	lsrs	r3, r3, #20
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800232e:	e054      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d050      	beq.n	80023da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002338:	f7fe fb90 	bl	8000a5c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	429a      	cmp	r2, r3
 8002346:	d902      	bls.n	800234e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13d      	bne.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800235c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002366:	d111      	bne.n	800238c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002370:	d004      	beq.n	800237c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d107      	bne.n	800238c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800238a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002394:	d10f      	bne.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e017      	b.n	80023fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d19b      	bne.n	8002330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20040000 	.word	0x20040000

08002408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800241a:	f7fe fb1f 	bl	8000a5c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800242a:	f7fe fb17 	bl	8000a5c <HAL_GetTick>
 800242e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	330c      	adds	r3, #12
 8002436:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002438:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00da      	lsls	r2, r3, #3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	0d1b      	lsrs	r3, r3, #20
 8002448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002450:	e060      	b.n	8002514 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002458:	d107      	bne.n	800246a <SPI_WaitFifoStateUntilTimeout+0x62>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002468:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d050      	beq.n	8002514 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002472:	f7fe faf3 	bl	8000a5c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247e:	429a      	cmp	r2, r3
 8002480:	d902      	bls.n	8002488 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13d      	bne.n	8002504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024a0:	d111      	bne.n	80024c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024aa:	d004      	beq.n	80024b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b4:	d107      	bne.n	80024c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ce:	d10f      	bne.n	80024f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e010      	b.n	8002526 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	3b01      	subs	r3, #1
 8002512:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d196      	bne.n	8002452 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3728      	adds	r7, #40	@ 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20040000 	.word	0x20040000

08002534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff ff5b 	bl	8002408 <SPI_WaitFifoStateUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e027      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	2180      	movs	r1, #128	@ 0x80
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fec0 	bl	80022f8 <SPI_WaitFlagStateUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e014      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff ff34 	bl	8002408 <SPI_WaitFifoStateUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e000      	b.n	80025b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80025c4:	2200      	movs	r2, #0
 80025c6:	2110      	movs	r1, #16
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025cc:	f7fe fcee 	bl	8000fac <HAL_GPIO_WritePin>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80025de:	1df9      	adds	r1, r7, #7
 80025e0:	2301      	movs	r3, #1
 80025e2:	2201      	movs	r2, #1
 80025e4:	4803      	ldr	r0, [pc, #12]	@ (80025f4 <ILI9341_SPI_Send+0x20>)
 80025e6:	f7ff fd10 	bl	800200a <HAL_SPI_Transmit>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2004002c 	.word	0x2004002c

080025f8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	2110      	movs	r1, #16
 8002606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800260a:	f7fe fccf 	bl	8000fac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800260e:	2200      	movs	r2, #0
 8002610:	2101      	movs	r1, #1
 8002612:	4808      	ldr	r0, [pc, #32]	@ (8002634 <ILI9341_Write_Command+0x3c>)
 8002614:	f7fe fcca 	bl	8000fac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffda 	bl	80025d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002620:	2201      	movs	r2, #1
 8002622:	2110      	movs	r1, #16
 8002624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002628:	f7fe fcc0 	bl	8000fac <HAL_GPIO_WritePin>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	48000400 	.word	0x48000400

08002638 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002642:	2201      	movs	r2, #1
 8002644:	2101      	movs	r1, #1
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <ILI9341_Write_Data+0x3c>)
 8002648:	f7fe fcb0 	bl	8000fac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2110      	movs	r1, #16
 8002650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002654:	f7fe fcaa 	bl	8000fac <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ffba 	bl	80025d4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002660:	2201      	movs	r2, #1
 8002662:	2110      	movs	r1, #16
 8002664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002668:	f7fe fca0 	bl	8000fac <HAL_GPIO_WritePin>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	48000400 	.word	0x48000400

08002678 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4623      	mov	r3, r4
 8002688:	80fb      	strh	r3, [r7, #6]
 800268a:	4603      	mov	r3, r0
 800268c:	80bb      	strh	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	807b      	strh	r3, [r7, #2]
 8002692:	4613      	mov	r3, r2
 8002694:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002696:	202a      	movs	r0, #42	@ 0x2a
 8002698:	f7ff ffae 	bl	80025f8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ffc7 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffc2 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ffbb 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb6 	bl	8002638 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80026cc:	202b      	movs	r0, #43	@ 0x2b
 80026ce:	f7ff ff93 	bl	80025f8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ffac 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ffa7 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80026ea:	883b      	ldrh	r3, [r7, #0]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ffa0 	bl	8002638 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80026f8:	883b      	ldrh	r3, [r7, #0]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff9b 	bl	8002638 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002702:	202c      	movs	r0, #44	@ 0x2c
 8002704:	f7ff ff78 	bl	80025f8 <ILI9341_Write_Command>
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}

08002710 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002714:	b08d      	sub	sp, #52	@ 0x34
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	6039      	str	r1, [r7, #0]
 800271c:	80fb      	strh	r3, [r7, #6]
 800271e:	466b      	mov	r3, sp
 8002720:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800272e:	d202      	bcs.n	8002736 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002734:	e002      	b.n	800273c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002736:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800273c:	2201      	movs	r2, #1
 800273e:	2101      	movs	r1, #1
 8002740:	483f      	ldr	r0, [pc, #252]	@ (8002840 <ILI9341_Draw_Colour_Burst+0x130>)
 8002742:	f7fe fc33 	bl	8000fac <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	2110      	movs	r1, #16
 800274a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274e:	f7fe fc2d 	bl	8000fac <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	b29b      	uxth	r3, r3
 8002758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 800275c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800275e:	460b      	mov	r3, r1
 8002760:	3b01      	subs	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	2300      	movs	r3, #0
 8002766:	4688      	mov	r8, r1
 8002768:	4699      	mov	r9, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277e:	2300      	movs	r3, #0
 8002780:	460c      	mov	r4, r1
 8002782:	461d      	mov	r5, r3
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00eb      	lsls	r3, r5, #3
 800278e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	1dcb      	adds	r3, r1, #7
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	ebad 0d03 	sub.w	sp, sp, r3
 800279e:	466b      	mov	r3, sp
 80027a0:	3300      	adds	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80027a4:	2300      	movs	r3, #0
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027a8:	e00e      	b.n	80027c8 <ILI9341_Draw_Colour_Burst+0xb8>
	{
		burst_buffer[j] = 	chifted;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	4413      	add	r3, r2
 80027b0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80027b4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	3301      	adds	r3, #1
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	b2d1      	uxtb	r1, r2
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	3302      	adds	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d3ec      	bcc.n	80027aa <ILI9341_Draw_Colour_Burst+0x9a>
	}

uint32_t Sending_Size = Size*2;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80027e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027ea:	fb01 f202 	mul.w	r2, r1, r2
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <ILI9341_Draw_Colour_Burst+0x10a>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fc:	e009      	b.n	8002812 <ILI9341_Draw_Colour_Burst+0x102>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	b29a      	uxth	r2, r3
 8002802:	230a      	movs	r3, #10
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	480f      	ldr	r0, [pc, #60]	@ (8002844 <ILI9341_Draw_Colour_Burst+0x134>)
 8002808:	f7ff fbff 	bl	800200a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	3301      	adds	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3f1      	bcc.n	80027fe <ILI9341_Draw_Colour_Burst+0xee>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	b29a      	uxth	r2, r3
 800281e:	230a      	movs	r3, #10
 8002820:	69b9      	ldr	r1, [r7, #24]
 8002822:	4808      	ldr	r0, [pc, #32]	@ (8002844 <ILI9341_Draw_Colour_Burst+0x134>)
 8002824:	f7ff fbf1 	bl	800200a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002828:	2201      	movs	r2, #1
 800282a:	2110      	movs	r1, #16
 800282c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002830:	f7fe fbbc 	bl	8000fac <HAL_GPIO_WritePin>
 8002834:	46b5      	mov	sp, r6
}
 8002836:	bf00      	nop
 8002838:	3734      	adds	r7, #52	@ 0x34
 800283a:	46bd      	mov	sp, r7
 800283c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002840:	48000400 	.word	0x48000400
 8002844:	2004002c 	.word	0x2004002c

08002848 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <ILI9341_Fill_Screen+0x44>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <ILI9341_Fill_Screen+0x48>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	2100      	movs	r1, #0
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff09 	bl	8002678 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <ILI9341_Fill_Screen+0x44>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <ILI9341_Fill_Screen+0x48>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	461a      	mov	r2, r3
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff46 	bl	8002710 <ILI9341_Draw_Colour_Burst>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2004000c 	.word	0x2004000c
 8002890:	2004000a 	.word	0x2004000a

08002894 <memset>:
 8002894:	4402      	add	r2, r0
 8002896:	4603      	mov	r3, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	d100      	bne.n	800289e <memset+0xa>
 800289c:	4770      	bx	lr
 800289e:	f803 1b01 	strb.w	r1, [r3], #1
 80028a2:	e7f9      	b.n	8002898 <memset+0x4>

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4d0d      	ldr	r5, [pc, #52]	@ (80028dc <__libc_init_array+0x38>)
 80028a8:	4c0d      	ldr	r4, [pc, #52]	@ (80028e0 <__libc_init_array+0x3c>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	2600      	movs	r6, #0
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	4d0b      	ldr	r5, [pc, #44]	@ (80028e4 <__libc_init_array+0x40>)
 80028b6:	4c0c      	ldr	r4, [pc, #48]	@ (80028e8 <__libc_init_array+0x44>)
 80028b8:	f000 f818 	bl	80028ec <_init>
 80028bc:	1b64      	subs	r4, r4, r5
 80028be:	10a4      	asrs	r4, r4, #2
 80028c0:	2600      	movs	r6, #0
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	08002944 	.word	0x08002944
 80028e0:	08002944 	.word	0x08002944
 80028e4:	08002944 	.word	0x08002944
 80028e8:	08002948 	.word	0x08002948

080028ec <_init>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr

080028f8 <_fini>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr
