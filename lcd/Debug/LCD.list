
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e354  08002b90  08002b90  00003b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee4  08010ee4  0001200c  2**0
                  CONTENTS
  4 .ARM          00000000  08010ee4  08010ee4  0001200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010ee4  08010ee4  0001200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee4  08010ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ee8  08010ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  08010eec  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2004000c  08010ef8  0001200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040090  08010ef8  00012090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cc7  00000000  00000000  0001203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001715  00000000  00000000  00019d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0001b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000623  00000000  00000000  0001bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a01  00000000  00000000  0001c273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ff6  00000000  00000000  00043c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f81eb  00000000  00000000  0004cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  00144e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00146ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002b78 	.word	0x08002b78

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	08002b78 	.word	0x08002b78

080001fc <ILI9341_Select>:
 */

#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2110      	movs	r1, #16
 8000204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000208:	f001 f980 	bl	800150c <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2110      	movs	r1, #16
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f001 f976 	bl	800150c <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2101      	movs	r1, #1
 800022c:	4806      	ldr	r0, [pc, #24]	@ (8000248 <ILI9341_Reset+0x24>)
 800022e:	f001 f96d 	bl	800150c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f000 fece 	bl	8000fd4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4802      	ldr	r0, [pc, #8]	@ (8000248 <ILI9341_Reset+0x24>)
 800023e:	f001 f965 	bl	800150c <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	48000400 	.word	0x48000400

0800024c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2102      	movs	r1, #2
 800025a:	4807      	ldr	r0, [pc, #28]	@ (8000278 <ILI9341_WriteCommand+0x2c>)
 800025c:	f001 f956 	bl	800150c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000260:	1df9      	adds	r1, r7, #7
 8000262:	f04f 33ff 	mov.w	r3, #4294967295
 8000266:	2201      	movs	r2, #1
 8000268:	4804      	ldr	r0, [pc, #16]	@ (800027c <ILI9341_WriteCommand+0x30>)
 800026a:	f002 f97e 	bl	800256a <HAL_SPI_Transmit>

}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	48000400 	.word	0x48000400
 800027c:	20040028 	.word	0x20040028

08000280 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2102      	movs	r1, #2
 800028e:	4811      	ldr	r0, [pc, #68]	@ (80002d4 <ILI9341_WriteData+0x54>)
 8000290:	f001 f93c 	bl	800150c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000294:	e015      	b.n	80002c2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800029c:	bf28      	it	cs
 800029e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80002a2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80002a4:	89fa      	ldrh	r2, [r7, #14]
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	480a      	ldr	r0, [pc, #40]	@ (80002d8 <ILI9341_WriteData+0x58>)
 80002ae:	f002 f95c 	bl	800256a <HAL_SPI_Transmit>

        buff += chunk_size;
 80002b2:	89fb      	ldrh	r3, [r7, #14]
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80002ba:	89fb      	ldrh	r3, [r7, #14]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1e6      	bne.n	8000296 <ILI9341_WriteData+0x16>
    }
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	48000400 	.word	0x48000400
 80002d8:	20040028 	.word	0x20040028

080002dc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4604      	mov	r4, r0
 80002e4:	4608      	mov	r0, r1
 80002e6:	4611      	mov	r1, r2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4623      	mov	r3, r4
 80002ec:	80fb      	strh	r3, [r7, #6]
 80002ee:	4603      	mov	r3, r0
 80002f0:	80bb      	strh	r3, [r7, #4]
 80002f2:	460b      	mov	r3, r1
 80002f4:	807b      	strh	r3, [r7, #2]
 80002f6:	4613      	mov	r3, r2
 80002f8:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80002fa:	202a      	movs	r0, #42	@ 0x2a
 80002fc:	f7ff ffa6 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	0a1b      	lsrs	r3, r3, #8
 8000304:	b29b      	uxth	r3, r3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	733b      	strb	r3, [r7, #12]
 800030a:	88fb      	ldrh	r3, [r7, #6]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	737b      	strb	r3, [r7, #13]
 8000310:	887b      	ldrh	r3, [r7, #2]
 8000312:	0a1b      	lsrs	r3, r3, #8
 8000314:	b29b      	uxth	r3, r3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	73bb      	strb	r3, [r7, #14]
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	2104      	movs	r1, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffaa 	bl	8000280 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800032c:	202b      	movs	r0, #43	@ 0x2b
 800032e:	f7ff ff8d 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000332:	88bb      	ldrh	r3, [r7, #4]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b29b      	uxth	r3, r3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	723b      	strb	r3, [r7, #8]
 800033c:	88bb      	ldrh	r3, [r7, #4]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	727b      	strb	r3, [r7, #9]
 8000342:	883b      	ldrh	r3, [r7, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2db      	uxtb	r3, r3
 800034a:	72bb      	strb	r3, [r7, #10]
 800034c:	883b      	ldrh	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2104      	movs	r1, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff91 	bl	8000280 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800035e:	202c      	movs	r0, #44	@ 0x2c
 8000360:	f7ff ff74 	bl	800024c <ILI9341_WriteCommand>
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bd90      	pop	{r4, r7, pc}

0800036c <ILI9341_Init>:

void ILI9341_Init() {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b09b      	sub	sp, #108	@ 0x6c
 8000370:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000372:	f7ff ff43 	bl	80001fc <ILI9341_Select>
    ILI9341_Reset();
 8000376:	f7ff ff55 	bl	8000224 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff ff66 	bl	800024c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000380:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000384:	f000 fe26 	bl	8000fd4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000388:	20cb      	movs	r0, #203	@ 0xcb
 800038a:	f7ff ff5f 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800038e:	4a87      	ldr	r2, [pc, #540]	@ (80005ac <ILI9341_Init+0x240>)
 8000390:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000398:	6018      	str	r0, [r3, #0]
 800039a:	3304      	adds	r3, #4
 800039c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800039e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003a2:	2105      	movs	r1, #5
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff6b 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80003aa:	20cf      	movs	r0, #207	@ 0xcf
 80003ac:	f7ff ff4e 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80003b0:	4a7f      	ldr	r2, [pc, #508]	@ (80005b0 <ILI9341_Init+0x244>)
 80003b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b6:	6812      	ldr	r2, [r2, #0]
 80003b8:	4611      	mov	r1, r2
 80003ba:	8019      	strh	r1, [r3, #0]
 80003bc:	3302      	adds	r3, #2
 80003be:	0c12      	lsrs	r2, r2, #16
 80003c0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80003c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003c6:	2103      	movs	r1, #3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff59 	bl	8000280 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80003ce:	20e8      	movs	r0, #232	@ 0xe8
 80003d0:	f7ff ff3c 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80003d4:	4a77      	ldr	r2, [pc, #476]	@ (80005b4 <ILI9341_Init+0x248>)
 80003d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	8019      	strh	r1, [r3, #0]
 80003e0:	3302      	adds	r3, #2
 80003e2:	0c12      	lsrs	r2, r2, #16
 80003e4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80003e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003ea:	2103      	movs	r1, #3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff47 	bl	8000280 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80003f2:	20ea      	movs	r0, #234	@ 0xea
 80003f4:	f7ff ff2a 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80003f8:	2300      	movs	r3, #0
 80003fa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80003fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000402:	2102      	movs	r1, #2
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff3b 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800040a:	20ed      	movs	r0, #237	@ 0xed
 800040c:	f7ff ff1e 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000410:	4b69      	ldr	r3, [pc, #420]	@ (80005b8 <ILI9341_Init+0x24c>)
 8000412:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000414:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000418:	2104      	movs	r1, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff30 	bl	8000280 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000420:	20f7      	movs	r0, #247	@ 0xf7
 8000422:	f7ff ff13 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000426:	2320      	movs	r3, #32
 8000428:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800042c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff24 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000438:	20c0      	movs	r0, #192	@ 0xc0
 800043a:	f7ff ff07 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800043e:	2323      	movs	r3, #35	@ 0x23
 8000440:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000444:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000448:	2101      	movs	r1, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff18 	bl	8000280 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000450:	20c1      	movs	r0, #193	@ 0xc1
 8000452:	f7ff fefb 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000456:	2310      	movs	r3, #16
 8000458:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 800045c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff0c 	bl	8000280 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000468:	20c5      	movs	r0, #197	@ 0xc5
 800046a:	f7ff feef 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800046e:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000472:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000476:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800047a:	2102      	movs	r1, #2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff feff 	bl	8000280 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000482:	20c7      	movs	r0, #199	@ 0xc7
 8000484:	f7ff fee2 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000488:	2386      	movs	r3, #134	@ 0x86
 800048a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800048e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000492:	2101      	movs	r1, #1
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fef3 	bl	8000280 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800049a:	2036      	movs	r0, #54	@ 0x36
 800049c:	f7ff fed6 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80004a0:	2348      	movs	r3, #72	@ 0x48
 80004a2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80004a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004aa:	2101      	movs	r1, #1
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fee7 	bl	8000280 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80004b2:	203a      	movs	r0, #58	@ 0x3a
 80004b4:	f7ff feca 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80004b8:	2355      	movs	r3, #85	@ 0x55
 80004ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80004be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004c2:	2101      	movs	r1, #1
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fedb 	bl	8000280 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80004ca:	20b1      	movs	r0, #177	@ 0xb1
 80004cc:	f7ff febe 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80004d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80004d4:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80004d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004da:	2102      	movs	r1, #2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fecf 	bl	8000280 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80004e2:	20b6      	movs	r0, #182	@ 0xb6
 80004e4:	f7ff feb2 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80004e8:	4a34      	ldr	r2, [pc, #208]	@ (80005bc <ILI9341_Init+0x250>)
 80004ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ee:	6812      	ldr	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	8019      	strh	r1, [r3, #0]
 80004f4:	3302      	adds	r3, #2
 80004f6:	0c12      	lsrs	r2, r2, #16
 80004f8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80004fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004fe:	2103      	movs	r1, #3
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff febd 	bl	8000280 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000506:	20f2      	movs	r0, #242	@ 0xf2
 8000508:	f7ff fea0 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800050c:	2300      	movs	r3, #0
 800050e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff feb1 	bl	8000280 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800051e:	2026      	movs	r0, #38	@ 0x26
 8000520:	f7ff fe94 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000524:	2301      	movs	r3, #1
 8000526:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	2101      	movs	r1, #1
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fea5 	bl	8000280 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000536:	20e0      	movs	r0, #224	@ 0xe0
 8000538:	f7ff fe88 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <ILI9341_Init+0x254>)
 800053e:	f107 0414 	add.w	r4, r7, #20
 8000542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000544:	c407      	stmia	r4!, {r0, r1, r2}
 8000546:	8023      	strh	r3, [r4, #0]
 8000548:	3402      	adds	r4, #2
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	210f      	movs	r1, #15
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe93 	bl	8000280 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800055a:	20e1      	movs	r0, #225	@ 0xe1
 800055c:	f7ff fe76 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000560:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <ILI9341_Init+0x258>)
 8000562:	1d3c      	adds	r4, r7, #4
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	c407      	stmia	r4!, {r0, r1, r2}
 8000568:	8023      	strh	r3, [r4, #0]
 800056a:	3402      	adds	r4, #2
 800056c:	0c1b      	lsrs	r3, r3, #16
 800056e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	210f      	movs	r1, #15
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe83 	bl	8000280 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800057a:	2011      	movs	r0, #17
 800057c:	f7ff fe66 	bl	800024c <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000580:	2078      	movs	r0, #120	@ 0x78
 8000582:	f000 fd27 	bl	8000fd4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000586:	2029      	movs	r0, #41	@ 0x29
 8000588:	f7ff fe60 	bl	800024c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800058c:	2036      	movs	r0, #54	@ 0x36
 800058e:	f7ff fe5d 	bl	800024c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000592:	2348      	movs	r3, #72	@ 0x48
 8000594:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000596:	463b      	mov	r3, r7
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe70 	bl	8000280 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80005a0:	f7ff fe36 	bl	8000210 <ILI9341_Unselect>
}
 80005a4:	bf00      	nop
 80005a6:	376c      	adds	r7, #108	@ 0x6c
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	08002b90 	.word	0x08002b90
 80005b0:	08002b98 	.word	0x08002b98
 80005b4:	08002b9c 	.word	0x08002b9c
 80005b8:	81120364 	.word	0x81120364
 80005bc:	08002ba0 	.word	0x08002ba0
 80005c0:	08002ba4 	.word	0x08002ba4
 80005c4:	08002bb4 	.word	0x08002bb4

080005c8 <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4604      	mov	r4, r0
 80005d0:	4608      	mov	r0, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	4623      	mov	r3, r4
 80005d8:	80fb      	strh	r3, [r7, #6]
 80005da:	4603      	mov	r3, r0
 80005dc:	80bb      	strh	r3, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	807b      	strh	r3, [r7, #2]
 80005e2:	4613      	mov	r3, r2
 80005e4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	2bef      	cmp	r3, #239	@ 0xef
 80005ea:	d853      	bhi.n	8000694 <ILI9341_FillRectangle+0xcc>
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80005f2:	d24f      	bcs.n	8000694 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80005f4:	88fa      	ldrh	r2, [r7, #6]
 80005f6:	887b      	ldrh	r3, [r7, #2]
 80005f8:	4413      	add	r3, r2
 80005fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80005fc:	dd03      	ble.n	8000606 <ILI9341_FillRectangle+0x3e>
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000604:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000606:	88ba      	ldrh	r2, [r7, #4]
 8000608:	883b      	ldrh	r3, [r7, #0]
 800060a:	4413      	add	r3, r2
 800060c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000610:	dd03      	ble.n	800061a <ILI9341_FillRectangle+0x52>
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000618:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800061a:	f7ff fdef 	bl	80001fc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	4413      	add	r3, r2
 8000624:	b29b      	uxth	r3, r3
 8000626:	3b01      	subs	r3, #1
 8000628:	b29c      	uxth	r4, r3
 800062a:	88ba      	ldrh	r2, [r7, #4]
 800062c:	883b      	ldrh	r3, [r7, #0]
 800062e:	4413      	add	r3, r2
 8000630:	b29b      	uxth	r3, r3
 8000632:	3b01      	subs	r3, #1
 8000634:	b29b      	uxth	r3, r3
 8000636:	88b9      	ldrh	r1, [r7, #4]
 8000638:	88f8      	ldrh	r0, [r7, #6]
 800063a:	4622      	mov	r2, r4
 800063c:	f7ff fe4e 	bl	80002dc <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000640:	8c3b      	ldrh	r3, [r7, #32]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	b29b      	uxth	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	733b      	strb	r3, [r7, #12]
 800064a:	8c3b      	ldrh	r3, [r7, #32]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2102      	movs	r1, #2
 8000654:	4811      	ldr	r0, [pc, #68]	@ (800069c <ILI9341_FillRectangle+0xd4>)
 8000656:	f000 ff59 	bl	800150c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800065a:	883b      	ldrh	r3, [r7, #0]
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	e013      	b.n	8000688 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	80fb      	strh	r3, [r7, #6]
 8000664:	e00a      	b.n	800067c <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000666:	f107 010c 	add.w	r1, r7, #12
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	2202      	movs	r2, #2
 8000670:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <ILI9341_FillRectangle+0xd8>)
 8000672:	f001 ff7a 	bl	800256a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	3b01      	subs	r3, #1
 800067a:	80fb      	strh	r3, [r7, #6]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f1      	bne.n	8000666 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	3b01      	subs	r3, #1
 8000686:	80bb      	strh	r3, [r7, #4]
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1e8      	bne.n	8000660 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 800068e:	f7ff fdbf 	bl	8000210 <ILI9341_Unselect>
 8000692:	e000      	b.n	8000696 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000694:	bf00      	nop
}
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	48000400 	.word	0x48000400
 80006a0:	20040028 	.word	0x20040028

080006a4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006b6:	22f0      	movs	r2, #240	@ 0xf0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff84 	bl	80005c8 <ILI9341_FillRectangle>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4604      	mov	r4, r0
 80006d0:	4608      	mov	r0, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4623      	mov	r3, r4
 80006d8:	80fb      	strh	r3, [r7, #6]
 80006da:	4603      	mov	r3, r0
 80006dc:	80bb      	strh	r3, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	807b      	strh	r3, [r7, #2]
 80006e2:	4613      	mov	r3, r2
 80006e4:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2bef      	cmp	r3, #239	@ 0xef
 80006ea:	d82d      	bhi.n	8000748 <ILI9341_DrawImage+0x80>
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006f2:	d229      	bcs.n	8000748 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	4413      	add	r3, r2
 80006fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80006fc:	dc26      	bgt.n	800074c <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80006fe:	88ba      	ldrh	r2, [r7, #4]
 8000700:	883b      	ldrh	r3, [r7, #0]
 8000702:	4413      	add	r3, r2
 8000704:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000708:	dc22      	bgt.n	8000750 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 800070a:	f7ff fd77 	bl	80001fc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4413      	add	r3, r2
 8000714:	b29b      	uxth	r3, r3
 8000716:	3b01      	subs	r3, #1
 8000718:	b29c      	uxth	r4, r3
 800071a:	88ba      	ldrh	r2, [r7, #4]
 800071c:	883b      	ldrh	r3, [r7, #0]
 800071e:	4413      	add	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	b29b      	uxth	r3, r3
 8000726:	88b9      	ldrh	r1, [r7, #4]
 8000728:	88f8      	ldrh	r0, [r7, #6]
 800072a:	4622      	mov	r2, r4
 800072c:	f7ff fdd6 	bl	80002dc <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	883a      	ldrh	r2, [r7, #0]
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4619      	mov	r1, r3
 800073c:	69b8      	ldr	r0, [r7, #24]
 800073e:	f7ff fd9f 	bl	8000280 <ILI9341_WriteData>
    ILI9341_Unselect();
 8000742:	f7ff fd65 	bl	8000210 <ILI9341_Unselect>
 8000746:	e004      	b.n	8000752 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000748:	bf00      	nop
 800074a:	e002      	b.n	8000752 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 800074c:	bf00      	nop
 800074e:	e000      	b.n	8000752 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8000750:	bf00      	nop
}
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fbc4 	bl	8000eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f817 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f899 	bl	800089c <MX_GPIO_Init>
  MX_SPI1_Init();
 800076a:	f000 f859 	bl	8000820 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialization Functions
  ILI9341_Unselect();
 800076e:	f7ff fd4f 	bl	8000210 <ILI9341_Unselect>
  ILI9341_Init();
 8000772:	f7ff fdfb 	bl	800036c <ILI9341_Init>
  while (1)
  {

	  // Sample Test Program

	  ILI9341_FillScreen(ILI9341_BLACK);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff ff94 	bl	80006a4 <ILI9341_FillScreen>

	  ILI9341_DrawImage((ILI9341_WIDTH - 240)/2,(ILI9341_HEIGHT-240)/2,240,240,
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <main+0x38>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	23f0      	movs	r3, #240	@ 0xf0
 8000782:	22f0      	movs	r2, #240	@ 0xf0
 8000784:	2128      	movs	r1, #40	@ 0x28
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff9e 	bl	80006c8 <ILI9341_DrawImage>
	  ILI9341_FillScreen(ILI9341_BLACK);
 800078c:	bf00      	nop
 800078e:	e7f2      	b.n	8000776 <main+0x1e>
 8000790:	08002bc4 	.word	0x08002bc4

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b096      	sub	sp, #88	@ 0x58
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2244      	movs	r2, #68	@ 0x44
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 f9bc 	bl	8002b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ba:	f000 fedf 	bl	800157c <HAL_PWREx_ControlVoltageScaling>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c4:	f000 faba 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007c8:	2310      	movs	r3, #16
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80007d4:	2370      	movs	r3, #112	@ 0x70
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 ff7f 	bl	80016e4 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007ec:	f000 faa6 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fb85 	bl	8001f18 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000814:	f000 fa92 	bl	8000d3c <Error_Handler>
  }
}
 8000818:	bf00      	nop
 800081a:	3758      	adds	r7, #88	@ 0x58
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_SPI1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_SPI1_Init+0x74>)
 800082c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_SPI1_Init+0x74>)
 800083a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_SPI1_Init+0x74>)
 800084e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000856:	2228      	movs	r2, #40	@ 0x28
 8000858:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI1_Init+0x74>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI1_Init+0x74>)
 800087a:	2208      	movs	r2, #8
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_SPI1_Init+0x74>)
 8000880:	f001 fdd0 	bl	8002424 <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 fa57 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20040028 	.word	0x20040028
 8000898:	40013000 	.word	0x40013000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	@ 0x38
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	4bb2      	ldr	r3, [pc, #712]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4ab1      	ldr	r2, [pc, #708]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4baf      	ldr	r3, [pc, #700]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	623b      	str	r3, [r7, #32]
 80008c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4bac      	ldr	r3, [pc, #688]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4aab      	ldr	r2, [pc, #684]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4ba6      	ldr	r3, [pc, #664]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4aa5      	ldr	r2, [pc, #660]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4ba3      	ldr	r3, [pc, #652]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4ba0      	ldr	r3, [pc, #640]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a9f      	ldr	r2, [pc, #636]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b9d      	ldr	r3, [pc, #628]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b9a      	ldr	r3, [pc, #616]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a99      	ldr	r2, [pc, #612]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b97      	ldr	r3, [pc, #604]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b94      	ldr	r3, [pc, #592]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a93      	ldr	r2, [pc, #588]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b91      	ldr	r3, [pc, #580]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b8e      	ldr	r3, [pc, #568]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a8d      	ldr	r2, [pc, #564]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b8b      	ldr	r3, [pc, #556]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	4b88      	ldr	r3, [pc, #544]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a87      	ldr	r2, [pc, #540]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b85      	ldr	r3, [pc, #532]	@ (8000b7c <MX_GPIO_Init+0x2e0>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000972:	f000 fea7 	bl	80016c4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2110      	movs	r1, #16
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f000 fdc5 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2103      	movs	r1, #3
 8000986:	487e      	ldr	r0, [pc, #504]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000988:	f000 fdc0 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098c:	230c      	movs	r3, #12
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800099c:	230d      	movs	r3, #13
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	4877      	ldr	r0, [pc, #476]	@ (8000b84 <MX_GPIO_Init+0x2e8>)
 80009a8:	f000 fc1e 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80009ac:	2307      	movs	r3, #7
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009bc:	2304      	movs	r3, #4
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4870      	ldr	r0, [pc, #448]	@ (8000b88 <MX_GPIO_Init+0x2ec>)
 80009c8:	f000 fc0e 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009cc:	2380      	movs	r3, #128	@ 0x80
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009dc:	230d      	movs	r3, #13
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	4868      	ldr	r0, [pc, #416]	@ (8000b88 <MX_GPIO_Init+0x2ec>)
 80009e8:	f000 fbfe 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009ec:	233f      	movs	r3, #63	@ 0x3f
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f0:	230b      	movs	r3, #11
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4863      	ldr	r0, [pc, #396]	@ (8000b8c <MX_GPIO_Init+0x2f0>)
 8000a00:	f000 fbf2 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a04:	2301      	movs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a14:	2301      	movs	r3, #1
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f000 fbe1 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000a26:	230a      	movs	r3, #10
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f000 fbd4 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a40:	2310      	movs	r3, #16
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5a:	f000 fbc5 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4842      	ldr	r0, [pc, #264]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000a76:	f000 fbb7 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a7a:	2344      	movs	r3, #68	@ 0x44
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	483c      	ldr	r0, [pc, #240]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000a8e:	f000 fbab 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000a92:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4835      	ldr	r0, [pc, #212]	@ (8000b84 <MX_GPIO_Init+0x2e8>)
 8000ab0:	f000 fb9a 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ab4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482c      	ldr	r0, [pc, #176]	@ (8000b84 <MX_GPIO_Init+0x2e8>)
 8000ad2:	f000 fb89 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000af4:	f000 fb78 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000af8:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b0a:	230d      	movs	r3, #13
 8000b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	481a      	ldr	r0, [pc, #104]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000b16:	f000 fb67 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b2c:	230e      	movs	r3, #14
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <MX_GPIO_Init+0x2e4>)
 8000b38:	f000 fb56 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_GPIO_Init+0x2f4>)
 8000b5a:	f000 fb45 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b5e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b70:	2302      	movs	r3, #2
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	e00b      	b.n	8000b94 <MX_GPIO_Init+0x2f8>
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48001000 	.word	0x48001000
 8000b88:	48001400 	.word	0x48001400
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	48000c00 	.word	0x48000c00
 8000b94:	4864      	ldr	r0, [pc, #400]	@ (8000d28 <MX_GPIO_Init+0x48c>)
 8000b96:	f000 fb27 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b9a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bac:	2308      	movs	r3, #8
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	485d      	ldr	r0, [pc, #372]	@ (8000d2c <MX_GPIO_Init+0x490>)
 8000bb8:	f000 fb16 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bcc:	230d      	movs	r3, #13
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4856      	ldr	r0, [pc, #344]	@ (8000d30 <MX_GPIO_Init+0x494>)
 8000bd8:	f000 fb06 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bec:	2302      	movs	r3, #2
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	484e      	ldr	r0, [pc, #312]	@ (8000d30 <MX_GPIO_Init+0x494>)
 8000bf8:	f000 faf6 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bfc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4845      	ldr	r0, [pc, #276]	@ (8000d30 <MX_GPIO_Init+0x494>)
 8000c1a:	f000 fae5 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000c1e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c30:	230a      	movs	r3, #10
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f000 fad3 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f000 fac5 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c6e:	2309      	movs	r3, #9
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	482b      	ldr	r0, [pc, #172]	@ (8000d28 <MX_GPIO_Init+0x48c>)
 8000c7a:	f000 fab5 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4823      	ldr	r0, [pc, #140]	@ (8000d28 <MX_GPIO_Init+0x48c>)
 8000c9a:	f000 faa5 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c9e:	2378      	movs	r3, #120	@ 0x78
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481b      	ldr	r0, [pc, #108]	@ (8000d28 <MX_GPIO_Init+0x48c>)
 8000cba:	f000 fa95 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cbe:	2338      	movs	r3, #56	@ 0x38
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <MX_GPIO_Init+0x498>)
 8000cda:	f000 fa85 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_GPIO_Init+0x498>)
 8000cfc:	f000 fa74 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d00:	2301      	movs	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d10:	2302      	movs	r3, #2
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4807      	ldr	r0, [pc, #28]	@ (8000d38 <MX_GPIO_Init+0x49c>)
 8000d1c:	f000 fa64 	bl	80011e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	@ 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001800 	.word	0x48001800
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48001000 	.word	0x48001000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_SPI_MspInit+0x7c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d128      	bne.n	8000e04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	4a16      	ldr	r2, [pc, #88]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_SPI_MspInit+0x80>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23e0      	movs	r3, #224	@ 0xe0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df2:	2305      	movs	r3, #5
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e00:	f000 f9f2 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40021000 	.word	0x40021000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f893 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f001 fe33 	bl	8002b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f7ff fc45 	bl	8000758 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ed4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000ed8:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 8000edc:	08010eec 	.word	0x08010eec
  ldr r2, =_sbss
 8000ee0:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 8000ee4:	20040090 	.word	0x20040090

08000ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_IRQHandler>

08000eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f943 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f80e 	bl	8000f1c <HAL_InitTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	e001      	b.n	8000f10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0c:	f7ff ff1c 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d023      	beq.n	8000f78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_InitTick+0x70>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f941 	bl	80011ce <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f919 	bl	8001196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_InitTick+0x74>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e001      	b.n	8000f7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20040008 	.word	0x20040008
 8000f8c:	20040000 	.word	0x20040000
 8000f90:	20040004 	.word	0x20040004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20040008 	.word	0x20040008
 8000fb8:	2004008c 	.word	0x2004008c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2004008c 	.word	0x2004008c

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20040008 	.word	0x20040008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e166      	b.n	80014c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8158 	beq.w	80014c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80b2 	beq.w	80014c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b61      	ldr	r3, [pc, #388]	@ (80014e4 <HAL_GPIO_Init+0x2fc>)
 800135e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001360:	4a60      	ldr	r2, [pc, #384]	@ (80014e4 <HAL_GPIO_Init+0x2fc>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6613      	str	r3, [r2, #96]	@ 0x60
 8001368:	4b5e      	ldr	r3, [pc, #376]	@ (80014e4 <HAL_GPIO_Init+0x2fc>)
 800136a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a5c      	ldr	r2, [pc, #368]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800139e:	d02b      	beq.n	80013f8 <HAL_GPIO_Init+0x210>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <HAL_GPIO_Init+0x304>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d025      	beq.n	80013f4 <HAL_GPIO_Init+0x20c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a51      	ldr	r2, [pc, #324]	@ (80014f0 <HAL_GPIO_Init+0x308>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01f      	beq.n	80013f0 <HAL_GPIO_Init+0x208>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a50      	ldr	r2, [pc, #320]	@ (80014f4 <HAL_GPIO_Init+0x30c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d019      	beq.n	80013ec <HAL_GPIO_Init+0x204>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4f      	ldr	r2, [pc, #316]	@ (80014f8 <HAL_GPIO_Init+0x310>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x200>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4e      	ldr	r2, [pc, #312]	@ (80014fc <HAL_GPIO_Init+0x314>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1fc>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001500 <HAL_GPIO_Init+0x318>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1f8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001504 <HAL_GPIO_Init+0x31c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1f4>
 80013d8:	2307      	movs	r3, #7
 80013da:	e00e      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013dc:	2308      	movs	r3, #8
 80013de:	e00c      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013e0:	2306      	movs	r3, #6
 80013e2:	e00a      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013e4:	2305      	movs	r3, #5
 80013e6:	e008      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013ec:	2303      	movs	r3, #3
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x212>
 80013f8:	2300      	movs	r3, #0
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140a:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001418:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <HAL_GPIO_Init+0x320>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800143c:	4a32      	ldr	r2, [pc, #200]	@ (8001508 <HAL_GPIO_Init+0x320>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <HAL_GPIO_Init+0x320>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001466:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <HAL_GPIO_Init+0x320>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x320>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001490:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <HAL_GPIO_Init+0x320>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_GPIO_Init+0x320>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <HAL_GPIO_Init+0x320>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f ae91 	bne.w	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	48001000 	.word	0x48001000
 80014fc:	48001400 	.word	0x48001400
 8001500:	48001800 	.word	0x48001800
 8001504:	48001c00 	.word	0x48001c00
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154c:	d102      	bne.n	8001554 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800154e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001552:	e00b      	b.n	800156c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001562:	d102      	bne.n	800156a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001568:	e000      	b.n	800156c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800156a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d141      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b4b      	ldr	r3, [pc, #300]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001596:	d131      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001598:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800159e:	4a46      	ldr	r2, [pc, #280]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	4b43      	ldr	r3, [pc, #268]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b0:	4a41      	ldr	r2, [pc, #260]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015b8:	4b40      	ldr	r3, [pc, #256]	@ (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2232      	movs	r2, #50	@ 0x32
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a3f      	ldr	r2, [pc, #252]	@ (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9b      	lsrs	r3, r3, #18
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ce:	e002      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d6:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e2:	d102      	bne.n	80015ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f2      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ea:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f6:	d158      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e057      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001602:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800160c:	e04d      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001614:	d141      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001622:	d131      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800163c:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2232      	movs	r2, #50	@ 0x32
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165a:	e002      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800166e:	d102      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001682:	d112      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e011      	b.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001698:	e007      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40007000 	.word	0x40007000
 80016bc:	20040000 	.word	0x20040000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d2:	6053      	str	r3, [r2, #4]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f000 bc08 	b.w	8001f08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f8:	4b96      	ldr	r3, [pc, #600]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001702:	4b94      	ldr	r3, [pc, #592]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80e4 	beq.w	80018e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_RCC_OscConfig+0x4c>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b0c      	cmp	r3, #12
 8001724:	f040 808b 	bne.w	800183e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 8087 	bne.w	800183e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001730:	4b88      	ldr	r3, [pc, #544]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x64>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e3df      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	4b81      	ldr	r3, [pc, #516]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <HAL_RCC_OscConfig+0x7e>
 8001758:	4b7e      	ldr	r3, [pc, #504]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001760:	e005      	b.n	800176e <HAL_RCC_OscConfig+0x8a>
 8001762:	4b7c      	ldr	r3, [pc, #496]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800176e:	4293      	cmp	r3, r2
 8001770:	d223      	bcs.n	80017ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fd94 	bl	80022a4 <RCC_SetFlashLatencyFromMSIRange>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e3c0      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001786:	4b73      	ldr	r3, [pc, #460]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b70      	ldr	r3, [pc, #448]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	496d      	ldr	r1, [pc, #436]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	4968      	ldr	r1, [pc, #416]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e025      	b.n	8001806 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ba:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a65      	ldr	r2, [pc, #404]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4960      	ldr	r1, [pc, #384]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	495b      	ldr	r1, [pc, #364]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fd54 	bl	80022a4 <RCC_SetFlashLatencyFromMSIRange>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e380      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001806:	f000 fcc1 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b51      	ldr	r3, [pc, #324]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	4950      	ldr	r1, [pc, #320]	@ (8001958 <HAL_RCC_OscConfig+0x274>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a4e      	ldr	r2, [pc, #312]	@ (800195c <HAL_RCC_OscConfig+0x278>)
 8001824:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001826:	4b4e      	ldr	r3, [pc, #312]	@ (8001960 <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb76 	bl	8000f1c <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d052      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	e364      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d032      	beq.n	80018ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001846:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a42      	ldr	r2, [pc, #264]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001852:	f7ff fbb3 	bl	8000fbc <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185a:	f7ff fbaf 	bl	8000fbc <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e34d      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186c:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001878:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a35      	ldr	r2, [pc, #212]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4930      	ldr	r1, [pc, #192]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	492b      	ldr	r1, [pc, #172]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
 80018aa:	e01a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ac:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a28      	ldr	r2, [pc, #160]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb80 	bl	8000fbc <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c0:	f7ff fb7c 	bl	8000fbc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e31a      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1dc>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d073      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x21c>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d10e      	bne.n	8001918 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d063      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d15f      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e2f7      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x24c>
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e025      	b.n	800197c <HAL_RCC_OscConfig+0x298>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001938:	d114      	bne.n	8001964 <HAL_RCC_OscConfig+0x280>
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a02      	ldr	r2, [pc, #8]	@ (8001954 <HAL_RCC_OscConfig+0x270>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e013      	b.n	800197c <HAL_RCC_OscConfig+0x298>
 8001954:	40021000 	.word	0x40021000
 8001958:	08010ea4 	.word	0x08010ea4
 800195c:	20040000 	.word	0x20040000
 8001960:	20040004 	.word	0x20040004
 8001964:	4ba0      	ldr	r3, [pc, #640]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a9f      	ldr	r2, [pc, #636]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b9d      	ldr	r3, [pc, #628]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a9c      	ldr	r2, [pc, #624]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb1a 	bl	8000fbc <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fb16 	bl	8000fbc <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2b4      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4b92      	ldr	r3, [pc, #584]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2a8>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb06 	bl	8000fbc <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fb02 	bl	8000fbc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	@ 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e2a0      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2d0>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d060      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x310>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d116      	bne.n	8001a22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x328>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e27d      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b76      	ldr	r3, [pc, #472]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	4973      	ldr	r1, [pc, #460]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	e040      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d023      	beq.n	8001a72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fac1 	bl	8000fbc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fabd 	bl	8000fbc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e25b      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b65      	ldr	r3, [pc, #404]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	495f      	ldr	r1, [pc, #380]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b5d      	ldr	r3, [pc, #372]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5c      	ldr	r2, [pc, #368]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fa9d 	bl	8000fbc <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fa99 	bl	8000fbc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e237      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d03c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abe:	4a4a      	ldr	r2, [pc, #296]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa78 	bl	8000fbc <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fa74 	bl	8000fbc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e212      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3ec>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af8:	4a3b      	ldr	r2, [pc, #236]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa5b 	bl	8000fbc <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fa57 	bl	8000fbc <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1f5      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ef      	bne.n	8001b0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80a6 	beq.w	8001c84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	4a26      	ldr	r2, [pc, #152]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d118      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fa1e 	bl	8000fbc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7ff fa1a 	bl	8000fbc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1b8      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_RCC_OscConfig+0x508>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4d8>
 8001baa:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bba:	e029      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x50c>
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bca:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x52c>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	4b9d      	ldr	r3, [pc, #628]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf6:	4a9c      	ldr	r2, [pc, #624]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c00:	4b99      	ldr	r3, [pc, #612]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	4a98      	ldr	r2, [pc, #608]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d016      	beq.n	8001c46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f9d0 	bl	8000fbc <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f9cc 	bl	8000fbc <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e168      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	4b8c      	ldr	r3, [pc, #560]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ed      	beq.n	8001c20 <HAL_RCC_OscConfig+0x53c>
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f9b9 	bl	8000fbc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff f9b5 	bl	8000fbc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e151      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	4b80      	ldr	r3, [pc, #512]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ed      	bne.n	8001c4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b7b      	ldr	r3, [pc, #492]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c98:	4b73      	ldr	r3, [pc, #460]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c9e:	4a72      	ldr	r2, [pc, #456]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f988 	bl	8000fbc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb0:	f7ff f984 	bl	8000fbc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e122      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc2:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ef      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x5cc>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd2:	4b65      	ldr	r3, [pc, #404]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cd8:	4a63      	ldr	r2, [pc, #396]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff f96b 	bl	8000fbc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cea:	f7ff f967 	bl	8000fbc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e105      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80f9 	beq.w	8001f06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f040 80cf 	bne.w	8001ebc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d1e:	4b52      	ldr	r3, [pc, #328]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0203 	and.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d12c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d123      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d11b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d113      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d071      	beq.n	8001e70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d068      	beq.n	8001e64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d105      	bne.n	8001daa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d9e:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0ac      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dae:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dba:	f7ff f8ff 	bl	8000fbc <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff f8fb 	bl	8000fbc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e099      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_RCC_OscConfig+0x788>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001df0:	3a01      	subs	r2, #1
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dfa:	0212      	lsls	r2, r2, #8
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e02:	0852      	lsrs	r2, r2, #1
 8001e04:	3a01      	subs	r2, #1
 8001e06:	0552      	lsls	r2, r2, #21
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e0e:	0852      	lsrs	r2, r2, #1
 8001e10:	3a01      	subs	r2, #1
 8001e12:	0652      	lsls	r2, r2, #25
 8001e14:	4311      	orrs	r1, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e1a:	06d2      	lsls	r2, r2, #27
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	4912      	ldr	r1, [pc, #72]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e24:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e3c:	f7ff f8be 	bl	8000fbc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f8ba 	bl	8000fbc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e058      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <HAL_RCC_OscConfig+0x784>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e62:	e050      	b.n	8001f06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e04f      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d144      	bne.n	8001f06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e94:	f7ff f892 	bl	8000fbc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f88e 	bl	8000fbc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e02c      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x7b8>
 8001eba:	e024      	b.n	8001f06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d01f      	beq.n	8001f02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec2:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001ec8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff f875 	bl	8000fbc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff f871 	bl	8000fbc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4905      	ldr	r1, [pc, #20]	@ (8001f10 <HAL_RCC_OscConfig+0x82c>)
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_RCC_OscConfig+0x830>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e001      	b.n	8001f06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	feeefffc 	.word	0xfeeefffc

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e11d      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b90      	ldr	r3, [pc, #576]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 020f 	bic.w	r2, r3, #15
 8001f46:	498b      	ldr	r1, [pc, #556]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b89      	ldr	r3, [pc, #548]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e105      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	4b81      	ldr	r3, [pc, #516]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	497b      	ldr	r1, [pc, #492]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d079      	beq.n	800208e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d11e      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0dc      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001fb2:	f000 f9d1 	bl	8002358 <RCC_GetSysClockFreqFromPLLSource>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a70      	ldr	r2, [pc, #448]	@ (800217c <HAL_RCC_ClockConfig+0x264>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d946      	bls.n	800204c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d140      	bne.n	800204c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fca:	4b6b      	ldr	r3, [pc, #428]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fd2:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e035      	b.n	800204c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe8:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d115      	bne.n	8002020 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b9      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002000:	4b5d      	ldr	r3, [pc, #372]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0ad      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0a5      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002020:	f000 f8b4 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002024:	4603      	mov	r3, r0
 8002026:	4a55      	ldr	r2, [pc, #340]	@ (800217c <HAL_RCC_ClockConfig+0x264>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d90f      	bls.n	800204c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800202c:	4b52      	ldr	r3, [pc, #328]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002038:	4b4f      	ldr	r3, [pc, #316]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002040:	4a4d      	ldr	r2, [pc, #308]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002046:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204c:	4b4a      	ldr	r3, [pc, #296]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 0203 	bic.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4947      	ldr	r1, [pc, #284]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800205e:	f7fe ffad 	bl	8000fbc <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002064:	e00a      	b.n	800207c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7fe ffa9 	bl	8000fbc <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e077      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207c:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 020c 	and.w	r2, r3, #12
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	429a      	cmp	r2, r3
 800208c:	d1eb      	bne.n	8002066 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b80      	cmp	r3, #128	@ 0x80
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002094:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a37      	ldr	r2, [pc, #220]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800209a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800209e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d010      	beq.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b31      	ldr	r3, [pc, #196]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d208      	bcs.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	492b      	ldr	r1, [pc, #172]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ce:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d210      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	4923      	ldr	r1, [pc, #140]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_RCC_ClockConfig+0x25c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e036      	b.n	800216c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4918      	ldr	r1, [pc, #96]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4910      	ldr	r1, [pc, #64]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800213c:	f000 f826 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HAL_RCC_ClockConfig+0x260>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	490c      	ldr	r1, [pc, #48]	@ (8002180 <HAL_RCC_ClockConfig+0x268>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <HAL_RCC_ClockConfig+0x26c>)
 800215a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_RCC_ClockConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fedb 	bl	8000f1c <HAL_InitTick>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]

  return status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	04c4b400 	.word	0x04c4b400
 8002180:	08010ea4 	.word	0x08010ea4
 8002184:	20040000 	.word	0x20040000
 8002188:	20040004 	.word	0x20040004

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d121      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d11e      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d102      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e004      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d101      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002210:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d134      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0xa6>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d003      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xac>
 8002230:	e005      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002234:	617b      	str	r3, [r7, #20]
      break;
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800223a:	617b      	str	r3, [r7, #20]
      break;
 800223c:	e002      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3301      	adds	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0e5b      	lsrs	r3, r3, #25
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	3301      	adds	r3, #1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002284:	69bb      	ldr	r3, [r7, #24]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	08010eb4 	.word	0x08010eb4
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022b0:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff f93e 	bl	800153c <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
 80022c2:	e014      	b.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	4a21      	ldr	r2, [pc, #132]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022dc:	f7ff f92e 	bl	800153c <HAL_PWREx_GetVoltageRange>
 80022e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f4:	d10b      	bne.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b80      	cmp	r3, #128	@ 0x80
 80022fa:	d913      	bls.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8002300:	d902      	bls.n	8002308 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002302:	2302      	movs	r3, #2
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e00d      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002308:	2301      	movs	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e00a      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b7f      	cmp	r3, #127	@ 0x7f
 8002312:	d902      	bls.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002314:	2302      	movs	r3, #2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e004      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b70      	cmp	r3, #112	@ 0x70
 800231e:	d101      	bne.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002320:	2301      	movs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 020f 	bic.w	r2, r3, #15
 800232c:	4909      	ldr	r1, [pc, #36]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40022000 	.word	0x40022000

08002358 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800235e:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d00b      	beq.n	8002386 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d825      	bhi.n	80023c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d008      	beq.n	800238c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d11f      	bne.n	80023c0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002382:	613b      	str	r3, [r7, #16]
    break;
 8002384:	e01f      	b.n	80023c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002388:	613b      	str	r3, [r7, #16]
    break;
 800238a:	e01c      	b.n	80023c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e005      	b.n	80023b4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80023b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002420 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	613b      	str	r3, [r7, #16]
    break;
 80023be:	e002      	b.n	80023c6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
    break;
 80023c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	3301      	adds	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	fb03 f202 	mul.w	r2, r3, r2
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0e5b      	lsrs	r3, r3, #25
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	3301      	adds	r3, #1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002406:	683b      	ldr	r3, [r7, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200
 8002420:	08010eb4 	.word	0x08010eb4

08002424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e095      	b.n	8002562 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002446:	d009      	beq.n	800245c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
 800244e:	e005      	b.n	800245c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe fc8a 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002492:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800249c:	d902      	bls.n	80024a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e002      	b.n	80024aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80024b2:	d007      	beq.n	80024c4 <HAL_SPI_Init+0xa0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024bc:	d002      	beq.n	80024c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002506:	ea42 0103 	orr.w	r1, r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	f003 0204 	and.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257a:	f7fe fd1f 	bl	8000fbc <HAL_GetTick>
 800257e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	e15c      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Transmit+0x36>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e154      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Transmit+0x48>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e14d      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002604:	d10f      	bne.n	8002626 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b40      	cmp	r3, #64	@ 0x40
 8002632:	d007      	beq.n	8002644 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800264c:	d952      	bls.n	80026f4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_Transmit+0xf2>
 8002656:	8b7b      	ldrh	r3, [r7, #26]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d145      	bne.n	80026e8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266c:	1c9a      	adds	r2, r3, #2
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002680:	e032      	b.n	80026e8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d112      	bne.n	80026b6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026b4:	e018      	b.n	80026e8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b6:	f7fe fc81 	bl	8000fbc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d803      	bhi.n	80026ce <HAL_SPI_Transmit+0x164>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d102      	bne.n	80026d4 <HAL_SPI_Transmit+0x16a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0b2      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1c7      	bne.n	8002682 <HAL_SPI_Transmit+0x118>
 80026f2:	e083      	b.n	80027fc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_SPI_Transmit+0x198>
 80026fc:	8b7b      	ldrh	r3, [r7, #26]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d177      	bne.n	80027f2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d912      	bls.n	8002732 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	1c9a      	adds	r2, r3, #2
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b02      	subs	r3, #2
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002730:	e05f      	b.n	80027f2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002758:	e04b      	b.n	80027f2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d12b      	bne.n	80027c0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d912      	bls.n	8002798 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b02      	subs	r3, #2
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002796:	e02c      	b.n	80027f2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	7812      	ldrb	r2, [r2, #0]
 80027a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027be:	e018      	b.n	80027f2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c0:	f7fe fbfc 	bl	8000fbc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d803      	bhi.n	80027d8 <HAL_SPI_Transmit+0x26e>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d102      	bne.n	80027de <HAL_SPI_Transmit+0x274>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e02d      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ae      	bne.n	800275a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f947 	bl	8002a94 <SPI_EndRxTxTransaction>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800284c:	2300      	movs	r3, #0
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002868:	f7fe fba8 	bl	8000fbc <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002878:	f7fe fba0 	bl	8000fbc <HAL_GetTick>
 800287c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800287e:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288e:	e054      	b.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d050      	beq.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002898:	f7fe fb90 	bl	8000fbc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d902      	bls.n	80028ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13d      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c6:	d111      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d0:	d004      	beq.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028da:	d107      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f4:	d10f      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e017      	b.n	800295a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3b01      	subs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	429a      	cmp	r2, r3
 8002956:	d19b      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20040000 	.word	0x20040000

08002968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800297a:	f7fe fb1f 	bl	8000fbc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800298a:	f7fe fb17 	bl	8000fbc <HAL_GetTick>
 800298e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002998:	4b3d      	ldr	r3, [pc, #244]	@ (8002a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00da      	lsls	r2, r3, #3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	0d1b      	lsrs	r3, r3, #20
 80029a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029b0:	e060      	b.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80029b8:	d107      	bne.n	80029ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d050      	beq.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d2:	f7fe faf3 	bl	8000fbc <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d902      	bls.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d13d      	bne.n	8002a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a00:	d111      	bne.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a0a:	d004      	beq.n	8002a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a14:	d107      	bne.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a2e:	d10f      	bne.n	8002a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e010      	b.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d196      	bne.n	80029b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3728      	adds	r7, #40	@ 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20040000 	.word	0x20040000

08002a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff5b 	bl	8002968 <SPI_WaitFifoStateUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e027      	b.n	8002b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2180      	movs	r1, #128	@ 0x80
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff fec0 	bl	8002858 <SPI_WaitFlagStateUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e014      	b.n	8002b18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff ff34 	bl	8002968 <SPI_WaitFifoStateUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e000      	b.n	8002b18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <memset>:
 8002b20:	4402      	add	r2, r0
 8002b22:	4603      	mov	r3, r0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d100      	bne.n	8002b2a <memset+0xa>
 8002b28:	4770      	bx	lr
 8002b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2e:	e7f9      	b.n	8002b24 <memset+0x4>

08002b30 <__libc_init_array>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4d0d      	ldr	r5, [pc, #52]	@ (8002b68 <__libc_init_array+0x38>)
 8002b34:	4c0d      	ldr	r4, [pc, #52]	@ (8002b6c <__libc_init_array+0x3c>)
 8002b36:	1b64      	subs	r4, r4, r5
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	42a6      	cmp	r6, r4
 8002b3e:	d109      	bne.n	8002b54 <__libc_init_array+0x24>
 8002b40:	4d0b      	ldr	r5, [pc, #44]	@ (8002b70 <__libc_init_array+0x40>)
 8002b42:	4c0c      	ldr	r4, [pc, #48]	@ (8002b74 <__libc_init_array+0x44>)
 8002b44:	f000 f818 	bl	8002b78 <_init>
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	42a6      	cmp	r6, r4
 8002b50:	d105      	bne.n	8002b5e <__libc_init_array+0x2e>
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b58:	4798      	blx	r3
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	e7ee      	b.n	8002b3c <__libc_init_array+0xc>
 8002b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b62:	4798      	blx	r3
 8002b64:	3601      	adds	r6, #1
 8002b66:	e7f2      	b.n	8002b4e <__libc_init_array+0x1e>
 8002b68:	08010ee4 	.word	0x08010ee4
 8002b6c:	08010ee4 	.word	0x08010ee4
 8002b70:	08010ee4 	.word	0x08010ee4
 8002b74:	08010ee8 	.word	0x08010ee8

08002b78 <_init>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr

08002b84 <_fini>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr
