
final_proj_sd_card_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005bd8  08005bd8  00006bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d0c  08005d0c  00007024  2**0
                  CONTENTS
  4 .ARM          00000000  08005d0c  08005d0c  00007024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d0c  08005d0c  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00006d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20040000  08005d14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20040024  08005d38  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200400f0  08005d38  000070f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b105  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  00012159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00014170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000872  00000000  00000000  00014cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a18f  00000000  00000000  00015522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f035  00000000  00000000  0003f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9cb7  00000000  00000000  0004e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014839d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c6c  00000000  00000000  001483e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040024 	.word	0x20040024
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005bc0 	.word	0x08005bc0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040028 	.word	0x20040028
 80001f8:	08005bc0 	.word	0x08005bc0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b5b0      	push	{r4, r5, r7, lr}
 80001fe:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fc23 	bl	8000a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f86c 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f8ee 	bl	80003ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8000210:	f000 f8ae 	bl	8000370 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000214:	f002 fc30 	bl	8002a78 <MX_FATFS_Init>
  //some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000218:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800021c:	2201      	movs	r2, #1
 800021e:	492d      	ldr	r1, [pc, #180]	@ (80002d4 <main+0xd8>)
 8000220:	4618      	mov	r0, r3
 8000222:	f004 feab 	bl	8004f7c <f_mount>
 8000226:	4603      	mov	r3, r0
 8000228:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f
  if (fres != FR_OK) {
 800022c:	f897 348f 	ldrb.w	r3, [r7, #1167]	@ 0x48f
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <main+0x3c>
  	while(1);
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0x38>
  }

  fres = f_open(&fil, "test.txt", FA_READ);
 8000238:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800023c:	2201      	movs	r2, #1
 800023e:	4926      	ldr	r1, [pc, #152]	@ (80002d8 <main+0xdc>)
 8000240:	4618      	mov	r0, r3
 8000242:	f004 fee1 	bl	8005008 <f_open>
 8000246:	4603      	mov	r3, r0
 8000248:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f
  if (fres != FR_OK) {
 800024c:	f897 348f 	ldrb.w	r3, [r7, #1167]	@ 0x48f
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <main+0x5c>
  	while(1);
 8000254:	bf00      	nop
 8000256:	e7fd      	b.n	8000254 <main+0x58>
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us

  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000258:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	211e      	movs	r1, #30
 8000262:	4618      	mov	r0, r3
 8000264:	f005 fbe6 	bl	8005a34 <f_gets>
 8000268:	f8c7 0488 	str.w	r0, [r7, #1160]	@ 0x488

  f_close(&fil);
 800026c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000270:	4618      	mov	r0, r3
 8000272:	f005 fbb5 	bl	80059e0 <f_close>

  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800027a:	221a      	movs	r2, #26
 800027c:	4917      	ldr	r1, [pc, #92]	@ (80002dc <main+0xe0>)
 800027e:	4618      	mov	r0, r3
 8000280:	f004 fec2 	bl	8005008 <f_open>
 8000284:	4603      	mov	r3, r0
 8000286:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f

  strncpy((char*)readBuf, "a new file is made!", 19);
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	4a14      	ldr	r2, [pc, #80]	@ (80002e0 <main+0xe4>)
 8000290:	461c      	mov	r4, r3
 8000292:	4615      	mov	r5, r2
 8000294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000298:	682b      	ldr	r3, [r5, #0]
 800029a:	461a      	mov	r2, r3
 800029c:	8022      	strh	r2, [r4, #0]
 800029e:	3402      	adds	r4, #2
 80002a0:	0c1b      	lsrs	r3, r3, #16
 80002a2:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	f107 0108 	add.w	r1, r7, #8
 80002aa:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80002ae:	2213      	movs	r2, #19
 80002b0:	f005 f9a3 	bl	80055fa <f_write>
 80002b4:	4603      	mov	r3, r0
 80002b6:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f

  f_close(&fil);
 80002ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002be:	4618      	mov	r0, r3
 80002c0:	f005 fb8e 	bl	80059e0 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	4903      	ldr	r1, [pc, #12]	@ (80002d4 <main+0xd8>)
 80002c8:	2000      	movs	r0, #0
 80002ca:	f004 fe57 	bl	8004f7c <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ce:	bf00      	nop
 80002d0:	e7fd      	b.n	80002ce <main+0xd2>
 80002d2:	bf00      	nop
 80002d4:	08005bd8 	.word	0x08005bd8
 80002d8:	08005bdc 	.word	0x08005bdc
 80002dc:	08005be8 	.word	0x08005be8
 80002e0:	08005bf4 	.word	0x08005bf4

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b096      	sub	sp, #88	@ 0x58
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	2244      	movs	r2, #68	@ 0x44
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fc37 	bl	8005b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000306:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800030a:	f000 fec5 	bl	8001098 <HAL_PWREx_ControlVoltageScaling>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000314:	f000 fac4 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000318:	2310      	movs	r3, #16
 800031a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000324:	2360      	movs	r3, #96	@ 0x60
 8000326:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000328:	2300      	movs	r3, #0
 800032a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0314 	add.w	r3, r7, #20
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ff65 	bl	8001200 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800033c:	f000 fab0 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000354:	463b      	mov	r3, r7
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fb6b 	bl	8001a34 <HAL_RCC_ClockConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000364:	f000 fa9c 	bl	80008a0 <Error_Handler>
  }
}
 8000368:	bf00      	nop
 800036a:	3758      	adds	r7, #88	@ 0x58
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <MX_SPI1_Init+0x74>)
 8000376:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <MX_SPI1_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_SPI1_Init+0x74>)
 800037c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000382:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000388:	4b16      	ldr	r3, [pc, #88]	@ (80003e4 <MX_SPI1_Init+0x74>)
 800038a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800038e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_SPI1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000396:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_SPI1_Init+0x74>)
 800039e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003a6:	2218      	movs	r2, #24
 80003a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003be:	2207      	movs	r2, #7
 80003c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003ca:	2208      	movs	r2, #8
 80003cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_SPI1_Init+0x74>)
 80003d0:	f001 fdb6 	bl	8001f40 <HAL_SPI_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003da:	f000 fa61 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20040040 	.word	0x20040040
 80003e8:	40013000 	.word	0x40013000

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	@ 0x38
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000402:	4bb3      	ldr	r3, [pc, #716]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	4ab2      	ldr	r2, [pc, #712]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800040e:	4bb0      	ldr	r3, [pc, #704]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	f003 0310 	and.w	r3, r3, #16
 8000416:	623b      	str	r3, [r7, #32]
 8000418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4bad      	ldr	r3, [pc, #692]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	4aac      	ldr	r2, [pc, #688]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000426:	4baa      	ldr	r3, [pc, #680]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	61fb      	str	r3, [r7, #28]
 8000430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4ba7      	ldr	r3, [pc, #668]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	4aa6      	ldr	r2, [pc, #664]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000438:	f043 0320 	orr.w	r3, r3, #32
 800043c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800043e:	4ba4      	ldr	r3, [pc, #656]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000442:	f003 0320 	and.w	r3, r3, #32
 8000446:	61bb      	str	r3, [r7, #24]
 8000448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044a:	4ba1      	ldr	r3, [pc, #644]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	4aa0      	ldr	r2, [pc, #640]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000456:	4b9e      	ldr	r3, [pc, #632]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b9b      	ldr	r3, [pc, #620]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	4a9a      	ldr	r2, [pc, #616]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800046e:	4b98      	ldr	r3, [pc, #608]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	613b      	str	r3, [r7, #16]
 8000478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b95      	ldr	r3, [pc, #596]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	4a94      	ldr	r2, [pc, #592]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000486:	4b92      	ldr	r3, [pc, #584]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048a:	f003 0302 	and.w	r3, r3, #2
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b8f      	ldr	r3, [pc, #572]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	4a8e      	ldr	r2, [pc, #568]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 8000498:	f043 0308 	orr.w	r3, r3, #8
 800049c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049e:	4b8c      	ldr	r3, [pc, #560]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	f003 0308 	and.w	r3, r3, #8
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004aa:	4b89      	ldr	r3, [pc, #548]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	4a88      	ldr	r2, [pc, #544]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 80004b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b6:	4b86      	ldr	r3, [pc, #536]	@ (80006d0 <MX_GPIO_Init+0x2e4>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80004c2:	f000 fe8d 	bl	80011e0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ce:	f000 fdab 	bl	8001028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004d2:	230c      	movs	r3, #12
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004e2:	230d      	movs	r3, #13
 80004e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ea:	4619      	mov	r1, r3
 80004ec:	4879      	ldr	r0, [pc, #484]	@ (80006d4 <MX_GPIO_Init+0x2e8>)
 80004ee:	f000 fc09 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80004f2:	2307      	movs	r3, #7
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f6:	2312      	movs	r3, #18
 80004f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004fe:	2303      	movs	r3, #3
 8000500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000502:	2304      	movs	r3, #4
 8000504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800050a:	4619      	mov	r1, r3
 800050c:	4872      	ldr	r0, [pc, #456]	@ (80006d8 <MX_GPIO_Init+0x2ec>)
 800050e:	f000 fbf9 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000512:	2380      	movs	r3, #128	@ 0x80
 8000514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000516:	2302      	movs	r3, #2
 8000518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000522:	230d      	movs	r3, #13
 8000524:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052a:	4619      	mov	r1, r3
 800052c:	486a      	ldr	r0, [pc, #424]	@ (80006d8 <MX_GPIO_Init+0x2ec>)
 800052e:	f000 fbe9 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000532:	233f      	movs	r3, #63	@ 0x3f
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000536:	230b      	movs	r3, #11
 8000538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000542:	4619      	mov	r1, r3
 8000544:	4865      	ldr	r0, [pc, #404]	@ (80006dc <MX_GPIO_Init+0x2f0>)
 8000546:	f000 fbdd 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054a:	2301      	movs	r3, #1
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800055a:	2301      	movs	r3, #1
 800055c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f000 fbcc 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800056c:	230a      	movs	r3, #10
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000570:	230b      	movs	r3, #11
 8000572:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f000 fbbf 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a0:	f000 fbb0 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a4:	2301      	movs	r3, #1
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005bc:	4619      	mov	r1, r3
 80005be:	4848      	ldr	r0, [pc, #288]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 80005c0:	f000 fba0 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c4:	2302      	movs	r3, #2
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005c8:	230b      	movs	r3, #11
 80005ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	4842      	ldr	r0, [pc, #264]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 80005d8:	f000 fb94 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80005dc:	2344      	movs	r3, #68	@ 0x44
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e0:	2303      	movs	r3, #3
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ec:	4619      	mov	r1, r3
 80005ee:	483c      	ldr	r0, [pc, #240]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 80005f0:	f000 fb88 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005f4:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000606:	2301      	movs	r3, #1
 8000608:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060e:	4619      	mov	r1, r3
 8000610:	4830      	ldr	r0, [pc, #192]	@ (80006d4 <MX_GPIO_Init+0x2e8>)
 8000612:	f000 fb77 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000616:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000628:	2303      	movs	r3, #3
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000630:	4619      	mov	r1, r3
 8000632:	4828      	ldr	r0, [pc, #160]	@ (80006d4 <MX_GPIO_Init+0x2e8>)
 8000634:	f000 fb66 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800064a:	2301      	movs	r3, #1
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	4619      	mov	r1, r3
 8000654:	4822      	ldr	r0, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 8000656:	f000 fb55 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800065a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	2302      	movs	r3, #2
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800066c:	230d      	movs	r3, #13
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000674:	4619      	mov	r1, r3
 8000676:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 8000678:	f000 fb44 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800067c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800068e:	230e      	movs	r3, #14
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4619      	mov	r1, r3
 8000698:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <MX_GPIO_Init+0x2f4>)
 800069a:	f000 fb33 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800069e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006b0:	2307      	movs	r3, #7
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_GPIO_Init+0x2f8>)
 80006bc:	f000 fb22 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006c0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e00c      	b.n	80006e8 <MX_GPIO_Init+0x2fc>
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48001000 	.word	0x48001000
 80006d8:	48001400 	.word	0x48001400
 80006dc:	48000800 	.word	0x48000800
 80006e0:	48000400 	.word	0x48000400
 80006e4:	48000c00 	.word	0x48000c00
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80006ee:	2302      	movs	r3, #2
 80006f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f6:	4619      	mov	r1, r3
 80006f8:	4864      	ldr	r0, [pc, #400]	@ (800088c <MX_GPIO_Init+0x4a0>)
 80006fa:	f000 fb03 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000710:	2308      	movs	r3, #8
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	485d      	ldr	r0, [pc, #372]	@ (8000890 <MX_GPIO_Init+0x4a4>)
 800071c:	f000 faf2 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000730:	230d      	movs	r3, #13
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	4856      	ldr	r0, [pc, #344]	@ (8000894 <MX_GPIO_Init+0x4a8>)
 800073c:	f000 fae2 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	484e      	ldr	r0, [pc, #312]	@ (8000894 <MX_GPIO_Init+0x4a8>)
 800075c:	f000 fad2 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000760:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000772:	230c      	movs	r3, #12
 8000774:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4845      	ldr	r0, [pc, #276]	@ (8000894 <MX_GPIO_Init+0x4a8>)
 800077e:	f000 fac1 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000782:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000794:	230a      	movs	r3, #10
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a2:	f000 faaf 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 faa1 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c2:	2301      	movs	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007d2:	2309      	movs	r3, #9
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	482b      	ldr	r0, [pc, #172]	@ (800088c <MX_GPIO_Init+0x4a0>)
 80007de:	f000 fa91 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e2:	2304      	movs	r3, #4
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007f2:	230c      	movs	r3, #12
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	4823      	ldr	r0, [pc, #140]	@ (800088c <MX_GPIO_Init+0x4a0>)
 80007fe:	f000 fa81 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000802:	2378      	movs	r3, #120	@ 0x78
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000812:	2307      	movs	r3, #7
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	481b      	ldr	r0, [pc, #108]	@ (800088c <MX_GPIO_Init+0x4a0>)
 800081e:	f000 fa71 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000822:	2338      	movs	r3, #56	@ 0x38
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	4816      	ldr	r0, [pc, #88]	@ (8000898 <MX_GPIO_Init+0x4ac>)
 800083e:	f000 fa61 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000842:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000854:	2304      	movs	r3, #4
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	480e      	ldr	r0, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x4ac>)
 8000860:	f000 fa50 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000874:	2302      	movs	r3, #2
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4807      	ldr	r0, [pc, #28]	@ (800089c <MX_GPIO_Init+0x4b0>)
 8000880:	f000 fa40 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	@ 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	48000c00 	.word	0x48000c00
 8000890:	48001800 	.word	0x48001800
 8000894:	48000800 	.word	0x48000800
 8000898:	48000400 	.word	0x48000400
 800089c:	48001000 	.word	0x48001000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_SPI_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d128      	bne.n	8000968 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	4a16      	ldr	r2, [pc, #88]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000920:	6613      	str	r3, [r2, #96]	@ 0x60
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a10      	ldr	r2, [pc, #64]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <HAL_SPI_MspInit+0x80>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000946:	23e0      	movs	r3, #224	@ 0xe0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000956:	2305      	movs	r3, #5
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000964:	f000 f9ce 	bl	8000d04 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013000 	.word	0x40013000
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 f893 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopForever+0xe>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopForever+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f005 f8a5 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2e:	f7ff fbe5 	bl	80001fc <main>

08000a32 <LoopForever>:

LoopForever:
    b LoopForever
 8000a32:	e7fe      	b.n	8000a32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a34:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a38:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000a3c:	20040024 	.word	0x20040024
  ldr r2, =_sidata
 8000a40:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8000a44:	20040024 	.word	0x20040024
  ldr r4, =_ebss
 8000a48:	200400f0 	.word	0x200400f0

08000a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_IRQHandler>

08000a4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f91f 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f80e 	bl	8000a80 <HAL_InitTick>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d002      	beq.n	8000a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	e001      	b.n	8000a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a70:	f7ff ff1c 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_InitTick+0x6c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d023      	beq.n	8000adc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_InitTick+0x70>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <HAL_InitTick+0x6c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f91d 	bl	8000cea <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10f      	bne.n	8000ad6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d809      	bhi.n	8000ad0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f8f5 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_InitTick+0x74>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e007      	b.n	8000ae0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e004      	b.n	8000ae0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e001      	b.n	8000ae0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20040008 	.word	0x20040008
 8000af0:	20040000 	.word	0x20040000
 8000af4:	20040004 	.word	0x20040004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20040008 	.word	0x20040008
 8000b1c:	200400a4 	.word	0x200400a4

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200400a4 	.word	0x200400a4

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e166      	b.n	8000fe2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8158 	beq.w	8000fdc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x40>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 0201 	and.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d123      	bne.n	8000e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	6939      	ldr	r1, [r7, #16]
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0203 	and.w	r2, r3, #3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 80b2 	beq.w	8000fdc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b61      	ldr	r3, [pc, #388]	@ (8001000 <HAL_GPIO_Init+0x2fc>)
 8000e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7c:	4a60      	ldr	r2, [pc, #384]	@ (8001000 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e84:	4b5e      	ldr	r3, [pc, #376]	@ (8001000 <HAL_GPIO_Init+0x2fc>)
 8000e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e90:	4a5c      	ldr	r2, [pc, #368]	@ (8001004 <HAL_GPIO_Init+0x300>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eba:	d02b      	beq.n	8000f14 <HAL_GPIO_Init+0x210>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a52      	ldr	r2, [pc, #328]	@ (8001008 <HAL_GPIO_Init+0x304>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d025      	beq.n	8000f10 <HAL_GPIO_Init+0x20c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a51      	ldr	r2, [pc, #324]	@ (800100c <HAL_GPIO_Init+0x308>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01f      	beq.n	8000f0c <HAL_GPIO_Init+0x208>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a50      	ldr	r2, [pc, #320]	@ (8001010 <HAL_GPIO_Init+0x30c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d019      	beq.n	8000f08 <HAL_GPIO_Init+0x204>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4f      	ldr	r2, [pc, #316]	@ (8001014 <HAL_GPIO_Init+0x310>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d013      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4e      	ldr	r2, [pc, #312]	@ (8001018 <HAL_GPIO_Init+0x314>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1fc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a4d      	ldr	r2, [pc, #308]	@ (800101c <HAL_GPIO_Init+0x318>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1f8>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4c      	ldr	r2, [pc, #304]	@ (8001020 <HAL_GPIO_Init+0x31c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1f4>
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	e00e      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000ef8:	2308      	movs	r3, #8
 8000efa:	e00c      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efc:	2306      	movs	r3, #6
 8000efe:	e00a      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f00:	2305      	movs	r3, #5
 8000f02:	e008      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f04:	2304      	movs	r3, #4
 8000f06:	e006      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e004      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_GPIO_Init+0x212>
 8000f14:	2300      	movs	r3, #0
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	f002 0203 	and.w	r2, r2, #3
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	4093      	lsls	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f26:	4937      	ldr	r1, [pc, #220]	@ (8001004 <HAL_GPIO_Init+0x300>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f34:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f58:	4a32      	ldr	r2, [pc, #200]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fac:	4a1d      	ldr	r2, [pc, #116]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd6:	4a13      	ldr	r2, [pc, #76]	@ (8001024 <HAL_GPIO_Init+0x320>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f47f ae91 	bne.w	8000d14 <HAL_GPIO_Init+0x10>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800
 8001010:	48000c00 	.word	0x48000c00
 8001014:	48001000 	.word	0x48001000
 8001018:	48001400 	.word	0x48001400
 800101c:	48001800 	.word	0x48001800
 8001020:	48001c00 	.word	0x48001c00
 8001024:	40010400 	.word	0x40010400

08001028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001044:	e002      	b.n	800104c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <HAL_PWREx_GetVoltageRange+0x3c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001068:	d102      	bne.n	8001070 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	e00b      	b.n	8001088 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107e:	d102      	bne.n	8001086 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001084:	e000      	b.n	8001088 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001086:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40007000 	.word	0x40007000

08001098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d141      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a6:	4b4b      	ldr	r3, [pc, #300]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b2:	d131      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ba:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010cc:	4a41      	ldr	r2, [pc, #260]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010d4:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2232      	movs	r2, #50	@ 0x32
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a3f      	ldr	r2, [pc, #252]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ea:	e002      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fe:	d102      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f2      	bne.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001112:	d158      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e057      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001118:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111e:	4a2d      	ldr	r2, [pc, #180]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001128:	e04d      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001130:	d141      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001132:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800113a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113e:	d131      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001158:	4a1e      	ldr	r2, [pc, #120]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2232      	movs	r2, #50	@ 0x32
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001176:	e002      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3b01      	subs	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118a:	d102      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f2      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800119e:	d112      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e011      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011b4:	e007      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011b6:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40007000 	.word	0x40007000
 80011d8:	20040000 	.word	0x20040000
 80011dc:	431bde83 	.word	0x431bde83

080011e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ee:	6053      	str	r3, [r2, #4]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f000 bc08 	b.w	8001a24 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001214:	4b96      	ldr	r3, [pc, #600]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80e4 	beq.w	80013fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x4c>
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	f040 808b 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b01      	cmp	r3, #1
 8001248:	f040 8087 	bne.w	800135a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124c:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x64>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e3df      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	4b81      	ldr	r3, [pc, #516]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_RCC_OscConfig+0x7e>
 8001274:	4b7e      	ldr	r3, [pc, #504]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800127c:	e005      	b.n	800128a <HAL_RCC_OscConfig+0x8a>
 800127e:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800128a:	4293      	cmp	r3, r2
 800128c:	d223      	bcs.n	80012d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fd94 	bl	8001dc0 <RCC_SetFlashLatencyFromMSIRange>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e3c0      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a2:	4b73      	ldr	r3, [pc, #460]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a72      	ldr	r2, [pc, #456]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b70      	ldr	r3, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	496d      	ldr	r1, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	4968      	ldr	r1, [pc, #416]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e025      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b63      	ldr	r3, [pc, #396]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4960      	ldr	r1, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	495b      	ldr	r1, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fd54 	bl	8001dc0 <RCC_SetFlashLatencyFromMSIRange>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e380      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001322:	f000 fcc1 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001326:	4602      	mov	r2, r0
 8001328:	4b51      	ldr	r3, [pc, #324]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4950      	ldr	r1, [pc, #320]	@ (8001474 <HAL_RCC_OscConfig+0x274>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a4e      	ldr	r2, [pc, #312]	@ (8001478 <HAL_RCC_OscConfig+0x278>)
 8001340:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001342:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_RCC_OscConfig+0x27c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fb9a 	bl	8000a80 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d052      	beq.n	80013fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	e364      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d032      	beq.n	80013c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001362:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a42      	ldr	r2, [pc, #264]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136e:	f7ff fbd7 	bl	8000b20 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001376:	f7ff fbd3 	bl	8000b20 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e34d      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a35      	ldr	r2, [pc, #212]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4930      	ldr	r1, [pc, #192]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	492b      	ldr	r1, [pc, #172]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
 80013c6:	e01a      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a28      	ldr	r2, [pc, #160]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fba4 	bl	8000b20 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013dc:	f7ff fba0 	bl	8000b20 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e31a      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ee:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1dc>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d073      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x21c>
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d10e      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d063      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d15f      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e2f7      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x24c>
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e025      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001454:	d114      	bne.n	8001480 <HAL_RCC_OscConfig+0x280>
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a02      	ldr	r2, [pc, #8]	@ (8001470 <HAL_RCC_OscConfig+0x270>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e013      	b.n	8001498 <HAL_RCC_OscConfig+0x298>
 8001470:	40021000 	.word	0x40021000
 8001474:	08005c4c 	.word	0x08005c4c
 8001478:	20040000 	.word	0x20040000
 800147c:	20040004 	.word	0x20040004
 8001480:	4ba0      	ldr	r3, [pc, #640]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a9f      	ldr	r2, [pc, #636]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b9d      	ldr	r3, [pc, #628]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a9c      	ldr	r2, [pc, #624]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb3e 	bl	8000b20 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fb3a 	bl	8000b20 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e2b4      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ba:	4b92      	ldr	r3, [pc, #584]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2a8>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb2a 	bl	8000b20 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb26 	bl	8000b20 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e2a0      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d0>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d060      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b04      	cmp	r3, #4
 8001502:	d005      	beq.n	8001510 <HAL_RCC_OscConfig+0x310>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d119      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d116      	bne.n	800153e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x328>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e27d      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	4973      	ldr	r1, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	e040      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d023      	beq.n	800158e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6e      	ldr	r2, [pc, #440]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001552:	f7ff fae5 	bl	8000b20 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fae1 	bl	8000b20 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e25b      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b62      	ldr	r3, [pc, #392]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	495f      	ldr	r1, [pc, #380]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
 800158c:	e018      	b.n	80015c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158e:	4b5d      	ldr	r3, [pc, #372]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a5c      	ldr	r2, [pc, #368]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159a:	f7ff fac1 	bl	8000b20 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff fabd 	bl	8000b20 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e237      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d03c      	beq.n	8001646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01c      	beq.n	800160e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015da:	4a4a      	ldr	r2, [pc, #296]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa9c 	bl	8000b20 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fa98 	bl	8000b20 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e212      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ef      	beq.n	80015ec <HAL_RCC_OscConfig+0x3ec>
 800160c:	e01b      	b.n	8001646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001614:	4a3b      	ldr	r2, [pc, #236]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fa7f 	bl	8000b20 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fa7b 	bl	8000b20 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1f5      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001638:	4b32      	ldr	r3, [pc, #200]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80a6 	beq.w	80017a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001658:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001668:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167c:	2301      	movs	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d118      	bne.n	80016be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001698:	f7ff fa42 	bl	8000b20 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a0:	f7ff fa3e 	bl	8000b20 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1b8      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x508>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d108      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d6:	e029      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x50c>
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a03      	ldr	r2, [pc, #12]	@ (8001704 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x52c>
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	4b9d      	ldr	r3, [pc, #628]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001712:	4a9c      	ldr	r2, [pc, #624]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171c:	4b99      	ldr	r3, [pc, #612]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a98      	ldr	r2, [pc, #608]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d016      	beq.n	8001762 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f9f4 	bl	8000b20 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f9f0 	bl	8000b20 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e168      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ed      	beq.n	800173c <HAL_RCC_OscConfig+0x53c>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff f9dd 	bl	8000b20 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f9d9 	bl	8000b20 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e151      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001780:	4b80      	ldr	r3, [pc, #512]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ed      	bne.n	800176a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178e:	7ffb      	ldrb	r3, [r7, #31]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b7b      	ldr	r3, [pc, #492]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a7a      	ldr	r2, [pc, #488]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800179a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03c      	beq.n	8001826 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b4:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ba:	4a72      	ldr	r2, [pc, #456]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f9ac 	bl	8000b20 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017cc:	f7ff f9a8 	bl	8000b20 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e122      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017de:	4b69      	ldr	r3, [pc, #420]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ef      	beq.n	80017cc <HAL_RCC_OscConfig+0x5cc>
 80017ec:	e01b      	b.n	8001826 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ee:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f4:	4a63      	ldr	r2, [pc, #396]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f98f 	bl	8000b20 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001806:	f7ff f98b 	bl	8000b20 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e105      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001818:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800181a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ef      	bne.n	8001806 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80f9 	beq.w	8001a22 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80cf 	bne.w	80019d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800183a:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0203 	and.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	429a      	cmp	r2, r3
 800184c:	d12c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	3b01      	subs	r3, #1
 800185a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d123      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d11b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d113      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d071      	beq.n	800198c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d068      	beq.n	8001980 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0ac      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d6:	f7ff f923 	bl	8000b20 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f91f 	bl	8000b20 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e099      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fc:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x788>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800190c:	3a01      	subs	r2, #1
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001916:	0212      	lsls	r2, r2, #8
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800191e:	0852      	lsrs	r2, r2, #1
 8001920:	3a01      	subs	r2, #1
 8001922:	0552      	lsls	r2, r2, #21
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800192a:	0852      	lsrs	r2, r2, #1
 800192c:	3a01      	subs	r2, #1
 800192e:	0652      	lsls	r2, r2, #25
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001936:	06d2      	lsls	r2, r2, #27
 8001938:	430a      	orrs	r2, r1
 800193a:	4912      	ldr	r1, [pc, #72]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001958:	f7ff f8e2 	bl	8000b20 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f8de 	bl	8000b20 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e058      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_RCC_OscConfig+0x784>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197e:	e050      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04f      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
 8001984:	40021000 	.word	0x40021000
 8001988:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d144      	bne.n	8001a22 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b0:	f7ff f8b6 	bl	8000b20 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f8b2 	bl	8000b20 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e02c      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x7b8>
 80019d6:	e024      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d01f      	beq.n	8001a1e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 80019e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff f899 	bl	8000b20 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f895 	bl	8000b20 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e00f      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4905      	ldr	r1, [pc, #20]	@ (8001a2c <HAL_RCC_OscConfig+0x82c>)
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_OscConfig+0x830>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
 8001a1c:	e001      	b.n	8001a22 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	feeefffc 	.word	0xfeeefffc

08001a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e11d      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b90      	ldr	r3, [pc, #576]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d910      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 020f 	bic.w	r2, r3, #15
 8001a62:	498b      	ldr	r1, [pc, #556]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b89      	ldr	r3, [pc, #548]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e105      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b81      	ldr	r3, [pc, #516]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d908      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b7e      	ldr	r3, [pc, #504]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	497b      	ldr	r1, [pc, #492]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d079      	beq.n	8001baa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d11e      	bne.n	8001afc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	4b75      	ldr	r3, [pc, #468]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0dc      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ace:	f000 f9d1 	bl	8001e74 <RCC_GetSysClockFreqFromPLLSource>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a70      	ldr	r2, [pc, #448]	@ (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d946      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ada:	4b6e      	ldr	r3, [pc, #440]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d140      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aee:	4a69      	ldr	r2, [pc, #420]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001af6:	2380      	movs	r3, #128	@ 0x80
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e035      	b.n	8001b68 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b04:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d115      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b9      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d109      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ad      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2c:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0a5      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b3c:	f000 f8b4 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a55      	ldr	r2, [pc, #340]	@ (8001c98 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d90f      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b48:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b54:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4947      	ldr	r1, [pc, #284]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7a:	f7fe ffd1 	bl	8000b20 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe ffcd 	bl	8000b20 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e077      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b3e      	ldr	r3, [pc, #248]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b80      	cmp	r3, #128	@ 0x80
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bb0:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a37      	ldr	r2, [pc, #220]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	492b      	ldr	r1, [pc, #172]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d210      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 020f 	bic.w	r2, r3, #15
 8001c00:	4923      	ldr	r1, [pc, #140]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_ClockConfig+0x25c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4918      	ldr	r1, [pc, #96]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c58:	f000 f826 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_ClockConfig+0x260>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <HAL_RCC_ClockConfig+0x268>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x26c>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe feff 	bl	8000a80 <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	04c4b400 	.word	0x04c4b400
 8001c9c:	08005c4c 	.word	0x08005c4c
 8001ca0:	20040000 	.word	0x20040000
 8001ca4:	20040004 	.word	0x20040004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d11e      	bne.n	8001d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce8:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e005      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e004      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d134      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0xac>
 8001d4c:	e005      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d50:	617b      	str	r3, [r7, #20]
      break;
 8001d52:	e005      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d56:	617b      	str	r3, [r7, #20]
      break;
 8001d58:	e002      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	617b      	str	r3, [r7, #20]
      break;
 8001d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	0e5b      	lsrs	r3, r3, #25
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	3301      	adds	r3, #1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001da0:	69bb      	ldr	r3, [r7, #24]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08005c5c 	.word	0x08005c5c
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dcc:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd8:	f7ff f93e 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001ddc:	6178      	str	r0, [r7, #20]
 8001dde:	e014      	b.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df8:	f7ff f92e 	bl	8001058 <HAL_PWREx_GetVoltageRange>
 8001dfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e10:	d10b      	bne.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b80      	cmp	r3, #128	@ 0x80
 8001e16:	d913      	bls.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e1c:	d902      	bls.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e1e:	2302      	movs	r3, #2
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e00d      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e24:	2301      	movs	r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e00a      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e2e:	d902      	bls.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e004      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b70      	cmp	r3, #112	@ 0x70
 8001e3a:	d101      	bne.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 020f 	bic.w	r2, r3, #15
 8001e48:	4909      	ldr	r1, [pc, #36]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40022000 	.word	0x40022000

08001e74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d00b      	beq.n	8001ea2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d825      	bhi.n	8001edc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d008      	beq.n	8001ea8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d11f      	bne.n	8001edc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e9c:	4b25      	ldr	r3, [pc, #148]	@ (8001f34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e9e:	613b      	str	r3, [r7, #16]
    break;
 8001ea0:	e01f      	b.n	8001ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001ea4:	613b      	str	r3, [r7, #16]
    break;
 8001ea6:	e01c      	b.n	8001ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea8:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e005      	b.n	8001ed0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
    break;
 8001eda:	e002      	b.n	8001ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
    break;
 8001ee0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	3301      	adds	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	fb03 f202 	mul.w	r2, r3, r2
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0e5b      	lsrs	r3, r3, #25
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	3301      	adds	r3, #1
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f22:	683b      	ldr	r3, [r7, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	00f42400 	.word	0x00f42400
 8001f38:	007a1200 	.word	0x007a1200
 8001f3c:	08005c5c 	.word	0x08005c5c

08001f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e095      	b.n	800207e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f62:	d009      	beq.n	8001f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	e005      	b.n	8001f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fcae 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fb8:	d902      	bls.n	8001fc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001fce:	d007      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	ea42 0103 	orr.w	r1, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f003 0204 	and.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800205c:	ea42 0103 	orr.w	r1, r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b088      	sub	sp, #32
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002096:	f7fe fd43 	bl	8000b20 <HAL_GetTick>
 800209a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	e15c      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_SPI_Transmit+0x36>
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e154      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_SPI_Transmit+0x48>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e14d      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2203      	movs	r2, #3
 80020da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002120:	d10f      	bne.n	8002142 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214c:	2b40      	cmp	r3, #64	@ 0x40
 800214e:	d007      	beq.n	8002160 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002168:	d952      	bls.n	8002210 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_SPI_Transmit+0xf2>
 8002172:	8b7b      	ldrh	r3, [r7, #26]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d145      	bne.n	8002204 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	881a      	ldrh	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	1c9a      	adds	r2, r3, #2
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800219c:	e032      	b.n	8002204 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d112      	bne.n	80021d2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021bc:	1c9a      	adds	r2, r3, #2
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021d0:	e018      	b.n	8002204 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d2:	f7fe fca5 	bl	8000b20 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d803      	bhi.n	80021ea <HAL_SPI_Transmit+0x164>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d102      	bne.n	80021f0 <HAL_SPI_Transmit+0x16a>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0b2      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1c7      	bne.n	800219e <HAL_SPI_Transmit+0x118>
 800220e:	e083      	b.n	8002318 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_Transmit+0x198>
 8002218:	8b7b      	ldrh	r3, [r7, #26]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d177      	bne.n	800230e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d912      	bls.n	800224e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	1c9a      	adds	r2, r3, #2
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b02      	subs	r3, #2
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800224c:	e05f      	b.n	800230e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002274:	e04b      	b.n	800230e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d12b      	bne.n	80022dc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d912      	bls.n	80022b4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229e:	1c9a      	adds	r2, r3, #2
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b02      	subs	r3, #2
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022b2:	e02c      	b.n	800230e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022da:	e018      	b.n	800230e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022dc:	f7fe fc20 	bl	8000b20 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d803      	bhi.n	80022f4 <HAL_SPI_Transmit+0x26e>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d102      	bne.n	80022fa <HAL_SPI_Transmit+0x274>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e02d      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ae      	bne.n	8002276 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fb65 	bl	80029ec <SPI_EndRxTxTransaction>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002368:	2300      	movs	r3, #0
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b08a      	sub	sp, #40	@ 0x28
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002380:	2301      	movs	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002384:	f7fe fbcc 	bl	8000b20 <HAL_GetTick>
 8002388:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002390:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023a0:	7ffb      	ldrb	r3, [r7, #31]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d00c      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x4e>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ac:	d106      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_SPI_TransmitReceive+0x4a>
 80023b6:	7ffb      	ldrb	r3, [r7, #31]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d001      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	e1f3      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0x60>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0x60>
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1e8      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_SPI_TransmitReceive+0x72>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e1e1      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d003      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2205      	movs	r2, #5
 80023fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002442:	d802      	bhi.n	800244a <HAL_SPI_TransmitReceive+0xd8>
 8002444:	8abb      	ldrh	r3, [r7, #20]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d908      	bls.n	800245c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	e007      	b.n	800246c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800246a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002476:	2b40      	cmp	r3, #64	@ 0x40
 8002478:	d007      	beq.n	800248a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002492:	f240 8083 	bls.w	800259c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x132>
 800249e:	8afb      	ldrh	r3, [r7, #22]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d16f      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c8:	e05c      	b.n	8002584 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d11b      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x19e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x19e>
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d113      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	1c9a      	adds	r2, r3, #2
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d11c      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x1e6>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	b292      	uxth	r2, r2
 8002536:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	1c9a      	adds	r2, r3, #2
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002554:	2301      	movs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002558:	f7fe fae2 	bl	8000b20 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002564:	429a      	cmp	r2, r3
 8002566:	d80d      	bhi.n	8002584 <HAL_SPI_TransmitReceive+0x212>
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d009      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e111      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d19d      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x158>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d197      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x158>
 800259a:	e0e5      	b.n	8002768 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x23a>
 80025a4:	8afb      	ldrh	r3, [r7, #22]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	f040 80d1 	bne.w	800274e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d912      	bls.n	80025dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c6:	1c9a      	adds	r2, r3, #2
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b02      	subs	r3, #2
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025da:	e0b8      	b.n	800274e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002602:	e0a4      	b.n	800274e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d134      	bne.n	800267c <HAL_SPI_TransmitReceive+0x30a>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02f      	beq.n	800267c <HAL_SPI_TransmitReceive+0x30a>
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	2b01      	cmp	r3, #1
 8002620:	d12c      	bne.n	800267c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d912      	bls.n	8002652 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263c:	1c9a      	adds	r2, r3, #2
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b02      	subs	r3, #2
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002650:	e012      	b.n	8002678 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d148      	bne.n	800271c <HAL_SPI_TransmitReceive+0x3aa>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d042      	beq.n	800271c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d923      	bls.n	80026ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	b292      	uxth	r2, r2
 80026ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b02      	subs	r3, #2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d81f      	bhi.n	8002718 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e016      	b.n	8002718 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f103 020c 	add.w	r2, r3, #12
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800271c:	f7fe fa00 	bl	8000b20 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002728:	429a      	cmp	r2, r3
 800272a:	d803      	bhi.n	8002734 <HAL_SPI_TransmitReceive+0x3c2>
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d102      	bne.n	800273a <HAL_SPI_TransmitReceive+0x3c8>
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e02c      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f af55 	bne.w	8002604 <HAL_SPI_TransmitReceive+0x292>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f af4e 	bne.w	8002604 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f93d 	bl	80029ec <SPI_EndRxTxTransaction>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80027a6:	2300      	movs	r3, #0
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3728      	adds	r7, #40	@ 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027c0:	f7fe f9ae 	bl	8000b20 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027d0:	f7fe f9a6 	bl	8000b20 <HAL_GetTick>
 80027d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027d6:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	015b      	lsls	r3, r3, #5
 80027dc:	0d1b      	lsrs	r3, r3, #20
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027e6:	e054      	b.n	8002892 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d050      	beq.n	8002892 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027f0:	f7fe f996 	bl	8000b20 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d902      	bls.n	8002806 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d13d      	bne.n	8002882 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281e:	d111      	bne.n	8002844 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002828:	d004      	beq.n	8002834 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002832:	d107      	bne.n	8002844 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800284c:	d10f      	bne.n	800286e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800286c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e017      	b.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3b01      	subs	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d19b      	bne.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20040000 	.word	0x20040000

080028c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028d2:	f7fe f925 	bl	8000b20 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028e2:	f7fe f91d 	bl	8000b20 <HAL_GetTick>
 80028e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028f0:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00da      	lsls	r2, r3, #3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	0d1b      	lsrs	r3, r3, #20
 8002900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002908:	e060      	b.n	80029cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002910:	d107      	bne.n	8002922 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002920:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d050      	beq.n	80029cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800292a:	f7fe f8f9 	bl	8000b20 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002936:	429a      	cmp	r2, r3
 8002938:	d902      	bls.n	8002940 <SPI_WaitFifoStateUntilTimeout+0x80>
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d13d      	bne.n	80029bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800294e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002958:	d111      	bne.n	800297e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002962:	d004      	beq.n	800296e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800296c:	d107      	bne.n	800297e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800297c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002986:	d10f      	bne.n	80029a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e010      	b.n	80029de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d196      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3728      	adds	r7, #40	@ 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20040000 	.word	0x20040000

080029ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff5b 	bl	80028c0 <SPI_WaitFifoStateUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e027      	b.n	8002a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2180      	movs	r1, #128	@ 0x80
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fec0 	bl	80027b0 <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e014      	b.n	8002a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff ff34 	bl	80028c0 <SPI_WaitFifoStateUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e000      	b.n	8002a70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002a7c:	4904      	ldr	r1, [pc, #16]	@ (8002a90 <MX_FATFS_Init+0x18>)
 8002a7e:	4805      	ldr	r0, [pc, #20]	@ (8002a94 <MX_FATFS_Init+0x1c>)
 8002a80:	f003 f862 	bl	8005b48 <FATFS_LinkDriver>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <MX_FATFS_Init+0x20>)
 8002a8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	200400ac 	.word	0x200400ac
 8002a94:	2004000c 	.word	0x2004000c
 8002a98:	200400a8 	.word	0x200400a8

08002a9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002aa0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f9d1 	bl	8002e60 <USER_SPI_initialize>
 8002abe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   return USER_SPI_status(pdrv);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 faaf 	bl	8003038 <USER_SPI_status>
 8002ada:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 8002af4:	7bf8      	ldrb	r0, [r7, #15]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	f000 fab2 	bl	8003064 <USER_SPI_read>
 8002b00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count);
 8002b1a:	7bf8      	ldrb	r0, [r7, #15]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	f000 fb05 	bl	8003130 <USER_SPI_write>
 8002b26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	603a      	str	r2, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8002b40:	79b9      	ldrb	r1, [r7, #6]
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fb6e 	bl	8003228 <USER_SPI_ioctl>
 8002b4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002b60:	f7fd ffde 	bl	8000b20 <HAL_GetTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <SPI_Timer_On+0x20>)
 8002b68:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <SPI_Timer_On+0x24>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200400b4 	.word	0x200400b4
 8002b7c:	200400b8 	.word	0x200400b8

08002b80 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002b84:	f7fd ffcc 	bl	8000b20 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <SPI_Timer_Status+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <SPI_Timer_Status+0x28>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	bf34      	ite	cc
 8002b98:	2301      	movcc	r3, #1
 8002b9a:	2300      	movcs	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200400b4 	.word	0x200400b4
 8002ba8:	200400b8 	.word	0x200400b8

08002bac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002bb6:	f107 020f 	add.w	r2, r7, #15
 8002bba:	1df9      	adds	r1, r7, #7
 8002bbc:	2332      	movs	r3, #50	@ 0x32
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <xchg_spi+0x28>)
 8002bc4:	f7ff fbd5 	bl	8002372 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20040040 	.word	0x20040040

08002bd8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	e00a      	b.n	8002bfe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	18d4      	adds	r4, r2, r3
 8002bee:	20ff      	movs	r0, #255	@ 0xff
 8002bf0:	f7ff ffdc 	bl	8002bac <xchg_spi>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3f0      	bcc.n	8002be8 <rcvr_spi_multi+0x10>
	}
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}

08002c10 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4803      	ldr	r0, [pc, #12]	@ (8002c34 <xmit_spi_multi+0x24>)
 8002c26:	f7ff fa2e 	bl	8002086 <HAL_SPI_Transmit>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20040040 	.word	0x20040040

08002c38 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002c40:	f7fd ff6e 	bl	8000b20 <HAL_GetTick>
 8002c44:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002c4a:	20ff      	movs	r0, #255	@ 0xff
 8002c4c:	f7ff ffae 	bl	8002bac <xchg_spi>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d007      	beq.n	8002c6a <wait_ready+0x32>
 8002c5a:	f7fd ff61 	bl	8000b20 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d8ef      	bhi.n	8002c4a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2bff      	cmp	r3, #255	@ 0xff
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002c82:	2201      	movs	r2, #1
 8002c84:	2110      	movs	r1, #16
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c8a:	f7fe f9cd 	bl	8001028 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002c8e:	20ff      	movs	r0, #255	@ 0xff
 8002c90:	f7ff ff8c 	bl	8002bac <xchg_spi>

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ca4:	f7fe f9c0 	bl	8001028 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ca8:	20ff      	movs	r0, #255	@ 0xff
 8002caa:	f7ff ff7f 	bl	8002bac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002cae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cb2:	f7ff ffc1 	bl	8002c38 <wait_ready>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <spiselect+0x28>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e002      	b.n	8002cc6 <spiselect+0x2e>

	despiselect();
 8002cc0:	f7ff ffdd 	bl	8002c7e <despiselect>
	return 0;	/* Timeout */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002cd4:	20c8      	movs	r0, #200	@ 0xc8
 8002cd6:	f7ff ff3f 	bl	8002b58 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002cda:	20ff      	movs	r0, #255	@ 0xff
 8002cdc:	f7ff ff66 	bl	8002bac <xchg_spi>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2bff      	cmp	r3, #255	@ 0xff
 8002ce8:	d104      	bne.n	8002cf4 <rcvr_datablock+0x2a>
 8002cea:	f7ff ff49 	bl	8002b80 <SPI_Timer_Status>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8002cf8:	d001      	beq.n	8002cfe <rcvr_datablock+0x34>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e00a      	b.n	8002d14 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002cfe:	6839      	ldr	r1, [r7, #0]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff69 	bl	8002bd8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002d06:	20ff      	movs	r0, #255	@ 0xff
 8002d08:	f7ff ff50 	bl	8002bac <xchg_spi>
 8002d0c:	20ff      	movs	r0, #255	@ 0xff
 8002d0e:	f7ff ff4d 	bl	8002bac <xchg_spi>

	return 1;						/* Function succeeded */
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002d28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d2c:	f7ff ff84 	bl	8002c38 <wait_ready>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <xmit_datablock+0x1e>
 8002d36:	2300      	movs	r3, #0
 8002d38:	e01e      	b.n	8002d78 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff35 	bl	8002bac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	2bfd      	cmp	r3, #253	@ 0xfd
 8002d46:	d016      	beq.n	8002d76 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff5f 	bl	8002c10 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002d52:	20ff      	movs	r0, #255	@ 0xff
 8002d54:	f7ff ff2a 	bl	8002bac <xchg_spi>
 8002d58:	20ff      	movs	r0, #255	@ 0xff
 8002d5a:	f7ff ff27 	bl	8002bac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002d5e:	20ff      	movs	r0, #255	@ 0xff
 8002d60:	f7ff ff24 	bl	8002bac <xchg_spi>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d001      	beq.n	8002d76 <xmit_datablock+0x5a>
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <xmit_datablock+0x5c>
	}
	return 1;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da0e      	bge.n	8002db2 <send_cmd+0x32>
		cmd &= 0x7F;
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d9a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2037      	movs	r0, #55	@ 0x37
 8002da0:	f7ff ffee 	bl	8002d80 <send_cmd>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d901      	bls.n	8002db2 <send_cmd+0x32>
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	e051      	b.n	8002e56 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d008      	beq.n	8002dca <send_cmd+0x4a>
		despiselect();
 8002db8:	f7ff ff61 	bl	8002c7e <despiselect>
		if (!spiselect()) return 0xFF;
 8002dbc:	f7ff ff6c 	bl	8002c98 <spiselect>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <send_cmd+0x4a>
 8002dc6:	23ff      	movs	r3, #255	@ 0xff
 8002dc8:	e045      	b.n	8002e56 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff feea 	bl	8002bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	0e1b      	lsrs	r3, r3, #24
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fee4 	bl	8002bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fede 	bl	8002bac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fed8 	bl	8002bac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fed3 	bl	8002bac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <send_cmd+0x94>
 8002e10:	2395      	movs	r3, #149	@ 0x95
 8002e12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d101      	bne.n	8002e1e <send_cmd+0x9e>
 8002e1a:	2387      	movs	r3, #135	@ 0x87
 8002e1c:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fec3 	bl	8002bac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d102      	bne.n	8002e32 <send_cmd+0xb2>
 8002e2c:	20ff      	movs	r0, #255	@ 0xff
 8002e2e:	f7ff febd 	bl	8002bac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8002e32:	230a      	movs	r3, #10
 8002e34:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8002e36:	20ff      	movs	r0, #255	@ 0xff
 8002e38:	f7ff feb8 	bl	8002bac <xchg_spi>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8002e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da05      	bge.n	8002e54 <send_cmd+0xd4>
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <USER_SPI_initialize+0x14>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d6      	b.n	8003022 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002e74:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <USER_SPI_initialize+0x1cc>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <USER_SPI_initialize+0x2a>
 8002e82:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <USER_SPI_initialize+0x1cc>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e0cb      	b.n	8003022 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002e8a:	4b69      	ldr	r3, [pc, #420]	@ (8003030 <USER_SPI_initialize+0x1d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002e94:	4b66      	ldr	r3, [pc, #408]	@ (8003030 <USER_SPI_initialize+0x1d0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002e9c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e005      	b.n	8002eb0 <USER_SPI_initialize+0x50>
 8002ea4:	20ff      	movs	r0, #255	@ 0xff
 8002ea6:	f7ff fe81 	bl	8002bac <xchg_spi>
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f6      	bne.n	8002ea4 <USER_SPI_initialize+0x44>

	ty = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff ff5f 	bl	8002d80 <send_cmd>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 808b 	bne.w	8002fe0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ece:	f7ff fe43 	bl	8002b58 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8002ed2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002ed6:	2008      	movs	r0, #8
 8002ed8:	f7ff ff52 	bl	8002d80 <send_cmd>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d151      	bne.n	8002f86 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	e00d      	b.n	8002f04 <USER_SPI_initialize+0xa4>
 8002ee8:	7bfc      	ldrb	r4, [r7, #15]
 8002eea:	20ff      	movs	r0, #255	@ 0xff
 8002eec:	f7ff fe5e 	bl	8002bac <xchg_spi>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f104 0310 	add.w	r3, r4, #16
 8002ef8:	443b      	add	r3, r7
 8002efa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	3301      	adds	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d9ee      	bls.n	8002ee8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002f0a:	7abb      	ldrb	r3, [r7, #10]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d167      	bne.n	8002fe0 <USER_SPI_initialize+0x180>
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	2baa      	cmp	r3, #170	@ 0xaa
 8002f14:	d164      	bne.n	8002fe0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8002f16:	bf00      	nop
 8002f18:	f7ff fe32 	bl	8002b80 <SPI_Timer_Status>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <USER_SPI_initialize+0xd2>
 8002f22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002f26:	20a9      	movs	r0, #169	@ 0xa9
 8002f28:	f7ff ff2a 	bl	8002d80 <send_cmd>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f2      	bne.n	8002f18 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002f32:	f7ff fe25 	bl	8002b80 <SPI_Timer_Status>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d051      	beq.n	8002fe0 <USER_SPI_initialize+0x180>
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	203a      	movs	r0, #58	@ 0x3a
 8002f40:	f7ff ff1e 	bl	8002d80 <send_cmd>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e00d      	b.n	8002f6c <USER_SPI_initialize+0x10c>
 8002f50:	7bfc      	ldrb	r4, [r7, #15]
 8002f52:	20ff      	movs	r0, #255	@ 0xff
 8002f54:	f7ff fe2a 	bl	8002bac <xchg_spi>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f104 0310 	add.w	r3, r4, #16
 8002f60:	443b      	add	r3, r7
 8002f62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d9ee      	bls.n	8002f50 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002f72:	7a3b      	ldrb	r3, [r7, #8]
 8002f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <USER_SPI_initialize+0x120>
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	e000      	b.n	8002f82 <USER_SPI_initialize+0x122>
 8002f80:	2304      	movs	r3, #4
 8002f82:	737b      	strb	r3, [r7, #13]
 8002f84:	e02c      	b.n	8002fe0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002f86:	2100      	movs	r1, #0
 8002f88:	20a9      	movs	r0, #169	@ 0xa9
 8002f8a:	f7ff fef9 	bl	8002d80 <send_cmd>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d804      	bhi.n	8002f9e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002f94:	2302      	movs	r3, #2
 8002f96:	737b      	strb	r3, [r7, #13]
 8002f98:	23a9      	movs	r3, #169	@ 0xa9
 8002f9a:	73bb      	strb	r3, [r7, #14]
 8002f9c:	e003      	b.n	8002fa6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	737b      	strb	r3, [r7, #13]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002fa6:	bf00      	nop
 8002fa8:	f7ff fdea 	bl	8002b80 <SPI_Timer_Status>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <USER_SPI_initialize+0x162>
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fee2 	bl	8002d80 <send_cmd>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f2      	bne.n	8002fa8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8002fc2:	f7ff fddd 	bl	8002b80 <SPI_Timer_Status>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <USER_SPI_initialize+0x17c>
 8002fcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fd0:	2010      	movs	r0, #16
 8002fd2:	f7ff fed5 	bl	8002d80 <send_cmd>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <USER_SPI_initialize+0x180>
				ty = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <USER_SPI_initialize+0x1d4>)
 8002fe2:	7b7b      	ldrb	r3, [r7, #13]
 8002fe4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8002fe6:	f7ff fe4a 	bl	8002c7e <despiselect>

	if (ty) {			/* OK */
 8002fea:	7b7b      	ldrb	r3, [r7, #13]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <USER_SPI_initialize+0x1d0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <USER_SPI_initialize+0x1d0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0210 	orr.w	r2, r2, #16
 8003002:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <USER_SPI_initialize+0x1cc>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <USER_SPI_initialize+0x1cc>)
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e002      	b.n	800301c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <USER_SPI_initialize+0x1cc>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <USER_SPI_initialize+0x1cc>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	20040020 	.word	0x20040020
 8003030:	20040040 	.word	0x20040040
 8003034:	200400b0 	.word	0x200400b0

08003038 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <USER_SPI_status+0x14>
 8003048:	2301      	movs	r3, #1
 800304a:	e002      	b.n	8003052 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <USER_SPI_status+0x28>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20040020 	.word	0x20040020

08003064 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <USER_SPI_read+0x1c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <USER_SPI_read+0x20>
 8003080:	2304      	movs	r3, #4
 8003082:	e04d      	b.n	8003120 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003084:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <USER_SPI_read+0xc4>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <USER_SPI_read+0x32>
 8003092:	2303      	movs	r3, #3
 8003094:	e044      	b.n	8003120 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003096:	4b25      	ldr	r3, [pc, #148]	@ (800312c <USER_SPI_read+0xc8>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <USER_SPI_read+0x44>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	025b      	lsls	r3, r3, #9
 80030a6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d111      	bne.n	80030d2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	2011      	movs	r0, #17
 80030b2:	f7ff fe65 	bl	8002d80 <send_cmd>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d129      	bne.n	8003110 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80030bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f7ff fe02 	bl	8002cca <rcvr_datablock>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d021      	beq.n	8003110 <USER_SPI_read+0xac>
			count = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	e01e      	b.n	8003110 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	2012      	movs	r0, #18
 80030d6:	f7ff fe53 	bl	8002d80 <send_cmd>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d117      	bne.n	8003110 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80030e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	f7ff fdf0 	bl	8002cca <rcvr_datablock>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <USER_SPI_read+0xa2>
				buff += 512;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ed      	bne.n	80030e0 <USER_SPI_read+0x7c>
 8003104:	e000      	b.n	8003108 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003106:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003108:	2100      	movs	r1, #0
 800310a:	200c      	movs	r0, #12
 800310c:	f7ff fe38 	bl	8002d80 <send_cmd>
		}
	}
	despiselect();
 8003110:	f7ff fdb5 	bl	8002c7e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20040020 	.word	0x20040020
 800312c:	200400b0 	.word	0x200400b0

08003130 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <USER_SPI_write+0x1c>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <USER_SPI_write+0x20>
 800314c:	2304      	movs	r3, #4
 800314e:	e063      	b.n	8003218 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003150:	4b33      	ldr	r3, [pc, #204]	@ (8003220 <USER_SPI_write+0xf0>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <USER_SPI_write+0x32>
 800315e:	2303      	movs	r3, #3
 8003160:	e05a      	b.n	8003218 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <USER_SPI_write+0xf0>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <USER_SPI_write+0x44>
 8003170:	2302      	movs	r3, #2
 8003172:	e051      	b.n	8003218 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003174:	4b2b      	ldr	r3, [pc, #172]	@ (8003224 <USER_SPI_write+0xf4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <USER_SPI_write+0x56>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d110      	bne.n	80031ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	2018      	movs	r0, #24
 8003190:	f7ff fdf6 	bl	8002d80 <send_cmd>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d136      	bne.n	8003208 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800319a:	21fe      	movs	r1, #254	@ 0xfe
 800319c:	68b8      	ldr	r0, [r7, #8]
 800319e:	f7ff fdbd 	bl	8002d1c <xmit_datablock>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02f      	beq.n	8003208 <USER_SPI_write+0xd8>
			count = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	e02c      	b.n	8003208 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <USER_SPI_write+0xf4>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f003 0306 	and.w	r3, r3, #6
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <USER_SPI_write+0x92>
 80031ba:	6839      	ldr	r1, [r7, #0]
 80031bc:	2097      	movs	r0, #151	@ 0x97
 80031be:	f7ff fddf 	bl	8002d80 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	2019      	movs	r0, #25
 80031c6:	f7ff fddb 	bl	8002d80 <send_cmd>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11b      	bne.n	8003208 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80031d0:	21fc      	movs	r1, #252	@ 0xfc
 80031d2:	68b8      	ldr	r0, [r7, #8]
 80031d4:	f7ff fda2 	bl	8002d1c <xmit_datablock>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <USER_SPI_write+0xc4>
				buff += 512;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80031e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <USER_SPI_write+0xa0>
 80031f2:	e000      	b.n	80031f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80031f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80031f6:	21fd      	movs	r1, #253	@ 0xfd
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff fd8f 	bl	8002d1c <xmit_datablock>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <USER_SPI_write+0xd8>
 8003204:	2301      	movs	r3, #1
 8003206:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003208:	f7ff fd39 	bl	8002c7e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20040020 	.word	0x20040020
 8003224:	200400b0 	.word	0x200400b0

08003228 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	@ 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	603a      	str	r2, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	460b      	mov	r3, r1
 8003236:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <USER_SPI_ioctl+0x1a>
 800323e:	2304      	movs	r3, #4
 8003240:	e15a      	b.n	80034f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003242:	4baf      	ldr	r3, [pc, #700]	@ (8003500 <USER_SPI_ioctl+0x2d8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <USER_SPI_ioctl+0x2c>
 8003250:	2303      	movs	r3, #3
 8003252:	e151      	b.n	80034f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800325a:	79bb      	ldrb	r3, [r7, #6]
 800325c:	2b04      	cmp	r3, #4
 800325e:	f200 8136 	bhi.w	80034ce <USER_SPI_ioctl+0x2a6>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <USER_SPI_ioctl+0x40>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800327d 	.word	0x0800327d
 800326c:	08003291 	.word	0x08003291
 8003270:	080034cf 	.word	0x080034cf
 8003274:	0800333d 	.word	0x0800333d
 8003278:	08003433 	.word	0x08003433
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800327c:	f7ff fd0c 	bl	8002c98 <spiselect>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8127 	beq.w	80034d6 <USER_SPI_ioctl+0x2ae>
 8003288:	2300      	movs	r3, #0
 800328a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800328e:	e122      	b.n	80034d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003290:	2100      	movs	r1, #0
 8003292:	2009      	movs	r0, #9
 8003294:	f7ff fd74 	bl	8002d80 <send_cmd>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 811d 	bne.w	80034da <USER_SPI_ioctl+0x2b2>
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	2110      	movs	r1, #16
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fd0f 	bl	8002cca <rcvr_datablock>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8113 	beq.w	80034da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80032b4:	7b3b      	ldrb	r3, [r7, #12]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d111      	bne.n	80032e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80032be:	7d7b      	ldrb	r3, [r7, #21]
 80032c0:	461a      	mov	r2, r3
 80032c2:	7d3b      	ldrb	r3, [r7, #20]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	4413      	add	r3, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80032d2:	4413      	add	r3, r2
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	029a      	lsls	r2, r3, #10
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e028      	b.n	8003334 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80032e2:	7c7b      	ldrb	r3, [r7, #17]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	7dbb      	ldrb	r3, [r7, #22]
 80032ec:	09db      	lsrs	r3, r3, #7
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	7d7b      	ldrb	r3, [r7, #21]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0306 	and.w	r3, r3, #6
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4413      	add	r3, r2
 8003302:	b2db      	uxtb	r3, r3
 8003304:	3302      	adds	r3, #2
 8003306:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800330a:	7d3b      	ldrb	r3, [r7, #20]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	441a      	add	r2, r3
 8003318:	7cbb      	ldrb	r3, [r7, #18]
 800331a:	029b      	lsls	r3, r3, #10
 800331c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003320:	4413      	add	r3, r2
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003326:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800332a:	3b09      	subs	r3, #9
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	409a      	lsls	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800333a:	e0ce      	b.n	80034da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800333c:	4b71      	ldr	r3, [pc, #452]	@ (8003504 <USER_SPI_ioctl+0x2dc>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d031      	beq.n	80033ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003348:	2100      	movs	r1, #0
 800334a:	208d      	movs	r0, #141	@ 0x8d
 800334c:	f7ff fd18 	bl	8002d80 <send_cmd>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 80c3 	bne.w	80034de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003358:	20ff      	movs	r0, #255	@ 0xff
 800335a:	f7ff fc27 	bl	8002bac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	2110      	movs	r1, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fcb0 	bl	8002cca <rcvr_datablock>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80b6 	beq.w	80034de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003372:	2330      	movs	r3, #48	@ 0x30
 8003374:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003378:	e007      	b.n	800338a <USER_SPI_ioctl+0x162>
 800337a:	20ff      	movs	r0, #255	@ 0xff
 800337c:	f7ff fc16 	bl	8002bac <xchg_spi>
 8003380:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003384:	3b01      	subs	r3, #1
 8003386:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800338a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f3      	bne.n	800337a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003392:	7dbb      	ldrb	r3, [r7, #22]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	2310      	movs	r3, #16
 800339c:	fa03 f202 	lsl.w	r2, r3, r2
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80033aa:	e098      	b.n	80034de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80033ac:	2100      	movs	r1, #0
 80033ae:	2009      	movs	r0, #9
 80033b0:	f7ff fce6 	bl	8002d80 <send_cmd>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8091 	bne.w	80034de <USER_SPI_ioctl+0x2b6>
 80033bc:	f107 030c 	add.w	r3, r7, #12
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fc81 	bl	8002cca <rcvr_datablock>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80033d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003504 <USER_SPI_ioctl+0x2dc>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80033dc:	7dbb      	ldrb	r3, [r7, #22]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80033e4:	7dfa      	ldrb	r2, [r7, #23]
 80033e6:	09d2      	lsrs	r2, r2, #7
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	4413      	add	r3, r2
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	7e7b      	ldrb	r3, [r7, #25]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e013      	b.n	800342a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003402:	7dbb      	ldrb	r3, [r7, #22]
 8003404:	109b      	asrs	r3, r3, #2
 8003406:	b29b      	uxth	r3, r3
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	3301      	adds	r3, #1
 800340e:	7dfa      	ldrb	r2, [r7, #23]
 8003410:	00d2      	lsls	r2, r2, #3
 8003412:	f002 0218 	and.w	r2, r2, #24
 8003416:	7df9      	ldrb	r1, [r7, #23]
 8003418:	0949      	lsrs	r1, r1, #5
 800341a:	b2c9      	uxtb	r1, r1
 800341c:	440a      	add	r2, r1
 800341e:	3201      	adds	r2, #1
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003430:	e055      	b.n	80034de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003432:	4b34      	ldr	r3, [pc, #208]	@ (8003504 <USER_SPI_ioctl+0x2dc>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	2b00      	cmp	r3, #0
 800343c:	d051      	beq.n	80034e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800343e:	f107 020c 	add.w	r2, r7, #12
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	210b      	movs	r1, #11
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff feee 	bl	8003228 <USER_SPI_ioctl>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d149      	bne.n	80034e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003452:	7b3b      	ldrb	r3, [r7, #12]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <USER_SPI_ioctl+0x23e>
 800345c:	7dbb      	ldrb	r3, [r7, #22]
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d041      	beq.n	80034ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003476:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <USER_SPI_ioctl+0x2dc>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	025b      	lsls	r3, r3, #9
 8003486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	025b      	lsls	r3, r3, #9
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800348e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003490:	2020      	movs	r0, #32
 8003492:	f7ff fc75 	bl	8002d80 <send_cmd>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d128      	bne.n	80034ee <USER_SPI_ioctl+0x2c6>
 800349c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800349e:	2021      	movs	r0, #33	@ 0x21
 80034a0:	f7ff fc6e 	bl	8002d80 <send_cmd>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d121      	bne.n	80034ee <USER_SPI_ioctl+0x2c6>
 80034aa:	2100      	movs	r1, #0
 80034ac:	2026      	movs	r0, #38	@ 0x26
 80034ae:	f7ff fc67 	bl	8002d80 <send_cmd>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11a      	bne.n	80034ee <USER_SPI_ioctl+0x2c6>
 80034b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80034bc:	f7ff fbbc 	bl	8002c38 <wait_ready>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80034cc:	e00f      	b.n	80034ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80034ce:	2304      	movs	r3, #4
 80034d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80034d4:	e00c      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		break;
 80034d6:	bf00      	nop
 80034d8:	e00a      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		break;
 80034da:	bf00      	nop
 80034dc:	e008      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		break;
 80034de:	bf00      	nop
 80034e0:	e006      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80034e2:	bf00      	nop
 80034e4:	e004      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <USER_SPI_ioctl+0x2c8>
		break;
 80034ee:	bf00      	nop
	}

	despiselect();
 80034f0:	f7ff fbc5 	bl	8002c7e <despiselect>

	return res;
 80034f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3730      	adds	r7, #48	@ 0x30
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20040020 	.word	0x20040020
 8003504:	200400b0 	.word	0x200400b0

08003508 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <disk_status+0x30>)
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	79fa      	ldrb	r2, [r7, #7]
 8003520:	4905      	ldr	r1, [pc, #20]	@ (8003538 <disk_status+0x30>)
 8003522:	440a      	add	r2, r1
 8003524:	7a12      	ldrb	r2, [r2, #8]
 8003526:	4610      	mov	r0, r2
 8003528:	4798      	blx	r3
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200400e4 	.word	0x200400e4

0800353c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	4a0d      	ldr	r2, [pc, #52]	@ (8003584 <disk_initialize+0x48>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <disk_initialize+0x48>)
 8003558:	2101      	movs	r1, #1
 800355a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <disk_initialize+0x48>)
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	79fa      	ldrb	r2, [r7, #7]
 800356a:	4906      	ldr	r1, [pc, #24]	@ (8003584 <disk_initialize+0x48>)
 800356c:	440a      	add	r2, r1
 800356e:	7a12      	ldrb	r2, [r2, #8]
 8003570:	4610      	mov	r0, r2
 8003572:	4798      	blx	r3
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200400e4 	.word	0x200400e4

08003588 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	4a0a      	ldr	r2, [pc, #40]	@ (80035c4 <disk_read+0x3c>)
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	689c      	ldr	r4, [r3, #8]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	4a07      	ldr	r2, [pc, #28]	@ (80035c4 <disk_read+0x3c>)
 80035a8:	4413      	add	r3, r2
 80035aa:	7a18      	ldrb	r0, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	47a0      	blx	r4
 80035b4:	4603      	mov	r3, r0
 80035b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200400e4 	.word	0x200400e4

080035c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <disk_write+0x3c>)
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68dc      	ldr	r4, [r3, #12]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <disk_write+0x3c>)
 80035e8:	4413      	add	r3, r2
 80035ea:	7a18      	ldrb	r0, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	47a0      	blx	r4
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop
 8003604:	200400e4 	.word	0x200400e4

08003608 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	603a      	str	r2, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
 8003614:	460b      	mov	r3, r1
 8003616:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	4a09      	ldr	r2, [pc, #36]	@ (8003640 <disk_ioctl+0x38>)
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	79fa      	ldrb	r2, [r7, #7]
 8003626:	4906      	ldr	r1, [pc, #24]	@ (8003640 <disk_ioctl+0x38>)
 8003628:	440a      	add	r2, r1
 800362a:	7a10      	ldrb	r0, [r2, #8]
 800362c:	79b9      	ldrb	r1, [r7, #6]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4798      	blx	r3
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
  return res;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200400e4 	.word	0x200400e4

08003644 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b21a      	sxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b21b      	sxth	r3, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	b21b      	sxth	r3, r3
 8003664:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003666:	89fb      	ldrh	r3, [r7, #14]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3303      	adds	r3, #3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	3202      	adds	r2, #2
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	3201      	adds	r2, #1
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80036ac:	68fb      	ldr	r3, [r7, #12]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	1c53      	adds	r3, r2, #1
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1c59      	adds	r1, r3, #1
 800376c:	6179      	str	r1, [r7, #20]
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3b01      	subs	r3, #1
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f1      	bne.n	8003762 <mem_cpy+0x1a>
	}
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800378a:	b480      	push	{r7}
 800378c:	b087      	sub	sp, #28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	617a      	str	r2, [r7, #20]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f3      	bne.n	800379a <mem_set+0x10>
}
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	61fa      	str	r2, [r7, #28]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	61ba      	str	r2, [r7, #24]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	1acb      	subs	r3, r1, r3
 80037ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <mem_cmp+0x40>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0eb      	beq.n	80037d8 <mem_cmp+0x18>

	return r;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003818:	e002      	b.n	8003820 <chk_chr+0x12>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3301      	adds	r3, #1
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <chk_chr+0x26>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4293      	cmp	r3, r2
 8003832:	d1f2      	bne.n	800381a <chk_chr+0xc>
	return *str;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	781b      	ldrb	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e029      	b.n	80038ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003858:	4a27      	ldr	r2, [pc, #156]	@ (80038f8 <chk_lock+0xb4>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4413      	add	r3, r2
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01d      	beq.n	80038a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003866:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <chk_lock+0xb4>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d116      	bne.n	80038a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003878:	4a1f      	ldr	r2, [pc, #124]	@ (80038f8 <chk_lock+0xb4>)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003888:	429a      	cmp	r2, r3
 800388a:	d10c      	bne.n	80038a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800388c:	4a1a      	ldr	r2, [pc, #104]	@ (80038f8 <chk_lock+0xb4>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	4413      	add	r3, r2
 8003894:	3308      	adds	r3, #8
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800389c:	429a      	cmp	r2, r3
 800389e:	d102      	bne.n	80038a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80038a0:	e007      	b.n	80038b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d9d2      	bls.n	8003858 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d109      	bne.n	80038cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <chk_lock+0x80>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d101      	bne.n	80038c8 <chk_lock+0x84>
 80038c4:	2300      	movs	r3, #0
 80038c6:	e010      	b.n	80038ea <chk_lock+0xa6>
 80038c8:	2312      	movs	r3, #18
 80038ca:	e00e      	b.n	80038ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <chk_lock+0xa0>
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <chk_lock+0xb4>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4413      	add	r3, r2
 80038da:	330c      	adds	r3, #12
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e2:	d101      	bne.n	80038e8 <chk_lock+0xa4>
 80038e4:	2310      	movs	r3, #16
 80038e6:	e000      	b.n	80038ea <chk_lock+0xa6>
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	200400c4 	.word	0x200400c4

080038fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	e002      	b.n	800390e <enq_lock+0x12>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d806      	bhi.n	8003922 <enq_lock+0x26>
 8003914:	4a09      	ldr	r2, [pc, #36]	@ (800393c <enq_lock+0x40>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	4413      	add	r3, r2
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f2      	bne.n	8003908 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b02      	cmp	r3, #2
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	200400c4 	.word	0x200400c4

08003940 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e01f      	b.n	8003990 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003950:	4a41      	ldr	r2, [pc, #260]	@ (8003a58 <inc_lock+0x118>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	4413      	add	r3, r2
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d113      	bne.n	800398a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003962:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <inc_lock+0x118>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	3304      	adds	r3, #4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003972:	429a      	cmp	r2, r3
 8003974:	d109      	bne.n	800398a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003976:	4a38      	ldr	r2, [pc, #224]	@ (8003a58 <inc_lock+0x118>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	3308      	adds	r3, #8
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003986:	429a      	cmp	r2, r3
 8003988:	d006      	beq.n	8003998 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d9dc      	bls.n	8003950 <inc_lock+0x10>
 8003996:	e000      	b.n	800399a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003998:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d132      	bne.n	8003a06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e002      	b.n	80039ac <inc_lock+0x6c>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d806      	bhi.n	80039c0 <inc_lock+0x80>
 80039b2:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <inc_lock+0x118>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f2      	bne.n	80039a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d101      	bne.n	80039ca <inc_lock+0x8a>
 80039c6:	2300      	movs	r3, #0
 80039c8:	e040      	b.n	8003a4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4922      	ldr	r1, [pc, #136]	@ (8003a58 <inc_lock+0x118>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	440b      	add	r3, r1
 80039d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	491e      	ldr	r1, [pc, #120]	@ (8003a58 <inc_lock+0x118>)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	440b      	add	r3, r1
 80039e4:	3304      	adds	r3, #4
 80039e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	491a      	ldr	r1, [pc, #104]	@ (8003a58 <inc_lock+0x118>)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	440b      	add	r3, r1
 80039f4:	3308      	adds	r3, #8
 80039f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80039f8:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <inc_lock+0x118>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	330c      	adds	r3, #12
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <inc_lock+0xe0>
 8003a0c:	4a12      	ldr	r2, [pc, #72]	@ (8003a58 <inc_lock+0x118>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	330c      	adds	r3, #12
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <inc_lock+0xe0>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e015      	b.n	8003a4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d108      	bne.n	8003a38 <inc_lock+0xf8>
 8003a26:	4a0c      	ldr	r2, [pc, #48]	@ (8003a58 <inc_lock+0x118>)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	4413      	add	r3, r2
 8003a2e:	330c      	adds	r3, #12
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	e001      	b.n	8003a3c <inc_lock+0xfc>
 8003a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a3c:	4906      	ldr	r1, [pc, #24]	@ (8003a58 <inc_lock+0x118>)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	440b      	add	r3, r1
 8003a44:	330c      	adds	r3, #12
 8003a46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200400c4 	.word	0x200400c4

08003a5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d825      	bhi.n	8003abc <dec_lock+0x60>
		n = Files[i].ctr;
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <dec_lock+0x74>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4413      	add	r3, r2
 8003a78:	330c      	adds	r3, #12
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a84:	d101      	bne.n	8003a8a <dec_lock+0x2e>
 8003a86:	2300      	movs	r3, #0
 8003a88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <dec_lock+0x3a>
 8003a90:	89fb      	ldrh	r3, [r7, #14]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a96:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad0 <dec_lock+0x74>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4413      	add	r3, r2
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	89fa      	ldrh	r2, [r7, #14]
 8003aa2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003aa4:	89fb      	ldrh	r3, [r7, #14]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <dec_lock+0x5a>
 8003aaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <dec_lock+0x74>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	737b      	strb	r3, [r7, #13]
 8003aba:	e001      	b.n	8003ac0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003abc:	2302      	movs	r3, #2
 8003abe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003ac0:	7b7b      	ldrb	r3, [r7, #13]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200400c4 	.word	0x200400c4

08003ad4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e010      	b.n	8003b04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <clear_lock+0x44>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	4413      	add	r3, r2
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d105      	bne.n	8003afe <clear_lock+0x2a>
 8003af2:	4a09      	ldr	r2, [pc, #36]	@ (8003b18 <clear_lock+0x44>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4413      	add	r3, r2
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d9eb      	bls.n	8003ae2 <clear_lock+0xe>
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	200400c4 	.word	0x200400c4

08003b1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	78db      	ldrb	r3, [r3, #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d034      	beq.n	8003b9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7858      	ldrb	r0, [r3, #1]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003b40:	2301      	movs	r3, #1
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	f7ff fd40 	bl	80035c8 <disk_write>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e022      	b.n	8003b9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	1ad2      	subs	r2, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d217      	bcs.n	8003b9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	789b      	ldrb	r3, [r3, #2]
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e010      	b.n	8003b94 <sync_window+0x78>
					wsect += fs->fsize;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7858      	ldrb	r0, [r3, #1]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003b86:	2301      	movs	r3, #1
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	f7ff fd1d 	bl	80035c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d8eb      	bhi.n	8003b72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d01b      	beq.n	8003bf4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ffad 	bl	8003b1c <sync_window>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7858      	ldrb	r0, [r3, #1]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f7ff fcd5 	bl	8003588 <disk_read>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff87 	bl	8003b1c <sync_window>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d158      	bne.n	8003cca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d148      	bne.n	8003cb2 <sync_fs+0xb2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	791b      	ldrb	r3, [r3, #4]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d144      	bne.n	8003cb2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3330      	adds	r3, #48	@ 0x30
 8003c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fda9 	bl	800378a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3330      	adds	r3, #48	@ 0x30
 8003c3c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003c40:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fd38 	bl	80036ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3330      	adds	r3, #48	@ 0x30
 8003c4e:	4921      	ldr	r1, [pc, #132]	@ (8003cd4 <sync_fs+0xd4>)
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fd4d 	bl	80036f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3330      	adds	r3, #48	@ 0x30
 8003c5a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003c5e:	491e      	ldr	r1, [pc, #120]	@ (8003cd8 <sync_fs+0xd8>)
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fd45 	bl	80036f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3330      	adds	r3, #48	@ 0x30
 8003c6a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7ff fd3b 	bl	80036f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3330      	adds	r3, #48	@ 0x30
 8003c7e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7ff fd31 	bl	80036f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7858      	ldrb	r0, [r3, #1]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f7ff fc8e 	bl	80035c8 <disk_write>
			fs->fsi_flag = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fca4 	bl	8003608 <disk_ioctl>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <sync_fs+0xca>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	41615252 	.word	0x41615252
 8003cd8:	61417272 	.word	0x61417272

08003cdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3b02      	subs	r3, #2
 8003cea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	3b02      	subs	r3, #2
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d301      	bcc.n	8003cfc <clust2sect+0x20>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e008      	b.n	8003d0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	895b      	ldrh	r3, [r3, #10]
 8003d00:	461a      	mov	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	fb03 f202 	mul.w	r2, r3, r2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	4413      	add	r3, r2
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d904      	bls.n	8003d3a <get_fat+0x20>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e08e      	b.n	8003e5e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d061      	beq.n	8003e12 <get_fat+0xf8>
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	dc7b      	bgt.n	8003e4a <get_fat+0x130>
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <get_fat+0x42>
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d041      	beq.n	8003dde <get_fat+0xc4>
 8003d5a:	e076      	b.n	8003e4a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	0a5b      	lsrs	r3, r3, #9
 8003d72:	4413      	add	r3, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	6938      	ldr	r0, [r7, #16]
 8003d78:	f7ff ff14 	bl	8003ba4 <move_window>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d166      	bne.n	8003e50 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	60fa      	str	r2, [r7, #12]
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0a5b      	lsrs	r3, r3, #9
 8003d9e:	4413      	add	r3, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	6938      	ldr	r0, [r7, #16]
 8003da4:	f7ff fefe 	bl	8003ba4 <move_window>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d152      	bne.n	8003e54 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <get_fat+0xba>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	e002      	b.n	8003dda <get_fat+0xc0>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	617b      	str	r3, [r7, #20]
			break;
 8003ddc:	e03f      	b.n	8003e5e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	4413      	add	r3, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	6938      	ldr	r0, [r7, #16]
 8003dec:	f7ff feda 	bl	8003ba4 <move_window>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d130      	bne.n	8003e58 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003e04:	4413      	add	r3, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fc1c 	bl	8003644 <ld_word>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	617b      	str	r3, [r7, #20]
			break;
 8003e10:	e025      	b.n	8003e5e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	09db      	lsrs	r3, r3, #7
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6938      	ldr	r0, [r7, #16]
 8003e20:	f7ff fec0 	bl	8003ba4 <move_window>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003e38:	4413      	add	r3, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fc1a 	bl	8003674 <ld_dword>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e46:	617b      	str	r3, [r7, #20]
			break;
 8003e48:	e009      	b.n	8003e5e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e006      	b.n	8003e5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e50:	bf00      	nop
 8003e52:	e004      	b.n	8003e5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e54:	bf00      	nop
 8003e56:	e002      	b.n	8003e5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e5c:	bf00      	nop
		}
	}

	return val;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b089      	sub	sp, #36	@ 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003e74:	2302      	movs	r3, #2
 8003e76:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f240 80d9 	bls.w	8004032 <put_fat+0x1ca>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	f080 80d3 	bcs.w	8004032 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	f000 8096 	beq.w	8003fc2 <put_fat+0x15a>
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	f300 80cb 	bgt.w	8004032 <put_fat+0x1ca>
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <put_fat+0x3e>
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d06e      	beq.n	8003f82 <put_fat+0x11a>
 8003ea4:	e0c5      	b.n	8004032 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1a      	ldr	r2, [r3, #32]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	0a5b      	lsrs	r3, r3, #9
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fe6f 	bl	8003ba4 <move_window>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 80a9 	bne.w	8004024 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	61b9      	str	r1, [r7, #24]
 8003ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee2:	4413      	add	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <put_fat+0xa4>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b25b      	sxtb	r3, r3
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	b25a      	sxtb	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e001      	b.n	8003f10 <put_fat+0xa8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	0a5b      	lsrs	r3, r3, #9
 8003f22:	4413      	add	r3, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff fe3c 	bl	8003ba4 <move_window>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f30:	7ffb      	ldrb	r3, [r7, #31]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d178      	bne.n	8004028 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <put_fat+0xf0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e00e      	b.n	8003f76 <put_fat+0x10e>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	f023 030f 	bic.w	r3, r3, #15
 8003f62:	b25a      	sxtb	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	70da      	strb	r2, [r3, #3]
			break;
 8003f80:	e057      	b.n	8004032 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	4413      	add	r3, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fe08 	bl	8003ba4 <move_window>
 8003f94:	4603      	mov	r3, r0
 8003f96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d146      	bne.n	800402c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fb80 	bl	80036ba <st_word>
			fs->wflag = 1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	70da      	strb	r2, [r3, #3]
			break;
 8003fc0:	e037      	b.n	8004032 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	09db      	lsrs	r3, r3, #7
 8003fca:	4413      	add	r3, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7ff fde8 	bl	8003ba4 <move_window>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d128      	bne.n	8004030 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fb3d 	bl	8003674 <ld_dword>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004000:	4323      	orrs	r3, r4
 8004002:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004012:	4413      	add	r3, r2
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fb6a 	bl	80036f0 <st_dword>
			fs->wflag = 1;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	70da      	strb	r2, [r3, #3]
			break;
 8004022:	e006      	b.n	8004032 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004024:	bf00      	nop
 8004026:	e004      	b.n	8004032 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004030:	bf00      	nop
		}
	}
	return res;
 8004032:	7ffb      	ldrb	r3, [r7, #31]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3724      	adds	r7, #36	@ 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd90      	pop	{r4, r7, pc}

0800403c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d904      	bls.n	8004062 <remove_chain+0x26>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	429a      	cmp	r2, r3
 8004060:	d301      	bcc.n	8004066 <remove_chain+0x2a>
 8004062:	2302      	movs	r3, #2
 8004064:	e04b      	b.n	80040fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	69b8      	ldr	r0, [r7, #24]
 8004074:	f7ff fef8 	bl	8003e68 <put_fat>
 8004078:	4603      	mov	r3, r0
 800407a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800407c:	7ffb      	ldrb	r3, [r7, #31]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <remove_chain+0x4a>
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	e03b      	b.n	80040fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fe46 	bl	8003d1a <get_fat>
 800408e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d031      	beq.n	80040fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <remove_chain+0x64>
 800409c:	2302      	movs	r3, #2
 800409e:	e02e      	b.n	80040fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d101      	bne.n	80040ac <remove_chain+0x70>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e028      	b.n	80040fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80040ac:	2200      	movs	r2, #0
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	69b8      	ldr	r0, [r7, #24]
 80040b2:	f7ff fed9 	bl	8003e68 <put_fat>
 80040b6:	4603      	mov	r3, r0
 80040b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <remove_chain+0x88>
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
 80040c2:	e01c      	b.n	80040fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	3b02      	subs	r3, #2
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20b      	bcs.n	80040ea <remove_chain+0xae>
			fs->free_clst++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	791b      	ldrb	r3, [r3, #4]
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d3c6      	bcc.n	8004086 <remove_chain+0x4a>
 80040f8:	e000      	b.n	80040fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80040fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b088      	sub	sp, #32
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <create_chain+0x2c>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	429a      	cmp	r2, r3
 8004130:	d31b      	bcc.n	800416a <create_chain+0x64>
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e018      	b.n	800416a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004138:	6839      	ldr	r1, [r7, #0]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fded 	bl	8003d1a <get_fat>
 8004140:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d801      	bhi.n	800414c <create_chain+0x46>
 8004148:	2301      	movs	r3, #1
 800414a:	e070      	b.n	800422e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d101      	bne.n	8004158 <create_chain+0x52>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e06a      	b.n	800422e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	429a      	cmp	r2, r3
 8004160:	d201      	bcs.n	8004166 <create_chain+0x60>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	e063      	b.n	800422e <create_chain+0x128>
		scl = clst;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	429a      	cmp	r2, r3
 800417c:	d307      	bcc.n	800418e <create_chain+0x88>
				ncl = 2;
 800417e:	2302      	movs	r3, #2
 8004180:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	429a      	cmp	r2, r3
 8004188:	d901      	bls.n	800418e <create_chain+0x88>
 800418a:	2300      	movs	r3, #0
 800418c:	e04f      	b.n	800422e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800418e:	69f9      	ldr	r1, [r7, #28]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fdc2 	bl	8003d1a <get_fat>
 8004196:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d003      	beq.n	80041ac <create_chain+0xa6>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d101      	bne.n	80041b0 <create_chain+0xaa>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	e03e      	b.n	800422e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1da      	bne.n	800416e <create_chain+0x68>
 80041b8:	2300      	movs	r3, #0
 80041ba:	e038      	b.n	800422e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80041bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	6938      	ldr	r0, [r7, #16]
 80041c6:	f7ff fe4f 	bl	8003e68 <put_fat>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <create_chain+0xe2>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	6839      	ldr	r1, [r7, #0]
 80041de:	6938      	ldr	r0, [r7, #16]
 80041e0:	f7ff fe42 	bl	8003e68 <put_fat>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d116      	bne.n	800421c <create_chain+0x116>
		fs->last_clst = ncl;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	3b02      	subs	r3, #2
 80041fe:	429a      	cmp	r2, r3
 8004200:	d804      	bhi.n	800420c <create_chain+0x106>
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	791b      	ldrb	r3, [r3, #4]
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	711a      	strb	r2, [r3, #4]
 800421a:	e007      	b.n	800422c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <create_chain+0x122>
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e000      	b.n	800422a <create_chain+0x124>
 8004228:	2301      	movs	r3, #1
 800422a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800422c:	69fb      	ldr	r3, [r7, #28]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004236:	b480      	push	{r7}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424a:	3304      	adds	r3, #4
 800424c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	0a5b      	lsrs	r3, r3, #9
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	8952      	ldrh	r2, [r2, #10]
 8004256:	fbb3 f3f2 	udiv	r3, r3, r2
 800425a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	613a      	str	r2, [r7, #16]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <clmt_clust+0x3a>
 800426c:	2300      	movs	r3, #0
 800426e:	e010      	b.n	8004292 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	d307      	bcc.n	8004288 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3304      	adds	r3, #4
 8004284:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004286:	e7e9      	b.n	800425c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004288:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042b4:	d204      	bcs.n	80042c0 <dir_sdi+0x22>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80042c0:	2302      	movs	r3, #2
 80042c2:	e063      	b.n	800438c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <dir_sdi+0x46>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	8912      	ldrh	r2, [r2, #8]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d301      	bcc.n	80042fa <dir_sdi+0x5c>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e048      	b.n	800438c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	61da      	str	r2, [r3, #28]
 8004302:	e029      	b.n	8004358 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	895b      	ldrh	r3, [r3, #10]
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800430c:	e019      	b.n	8004342 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6979      	ldr	r1, [r7, #20]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fd01 	bl	8003d1a <get_fat>
 8004318:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d101      	bne.n	8004326 <dir_sdi+0x88>
 8004322:	2301      	movs	r3, #1
 8004324:	e032      	b.n	800438c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d904      	bls.n	8004336 <dir_sdi+0x98>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	429a      	cmp	r2, r3
 8004334:	d301      	bcc.n	800433a <dir_sdi+0x9c>
 8004336:	2302      	movs	r3, #2
 8004338:	e028      	b.n	800438c <dir_sdi+0xee>
			ofs -= csz;
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	429a      	cmp	r2, r3
 8004348:	d2e1      	bcs.n	800430e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	6938      	ldr	r0, [r7, #16]
 800434e:	f7ff fcc5 	bl	8003cdc <clust2sect>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <dir_sdi+0xcc>
 8004366:	2302      	movs	r3, #2
 8004368:	e010      	b.n	800438c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	0a5b      	lsrs	r3, r3, #9
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004384:	441a      	add	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	3320      	adds	r3, #32
 80043aa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <dir_next+0x28>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ba:	d301      	bcc.n	80043c0 <dir_next+0x2c>
 80043bc:	2304      	movs	r3, #4
 80043be:	e0aa      	b.n	8004516 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8098 	bne.w	80044fc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	8912      	ldrh	r2, [r2, #8]
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f0c0 8088 	bcc.w	80044fc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	61da      	str	r2, [r3, #28]
 80043f2:	2304      	movs	r3, #4
 80043f4:	e08f      	b.n	8004516 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	0a5b      	lsrs	r3, r3, #9
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	8952      	ldrh	r2, [r2, #10]
 80043fe:	3a01      	subs	r2, #1
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d17a      	bne.n	80044fc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7ff fc83 	bl	8003d1a <get_fat>
 8004414:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d801      	bhi.n	8004420 <dir_next+0x8c>
 800441c:	2302      	movs	r3, #2
 800441e:	e07a      	b.n	8004516 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d101      	bne.n	800442c <dir_next+0x98>
 8004428:	2301      	movs	r3, #1
 800442a:	e074      	b.n	8004516 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	429a      	cmp	r2, r3
 8004434:	d358      	bcc.n	80044e8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	61da      	str	r2, [r3, #28]
 8004442:	2304      	movs	r3, #4
 8004444:	e067      	b.n	8004516 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7ff fe59 	bl	8004106 <create_chain>
 8004454:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <dir_next+0xcc>
 800445c:	2307      	movs	r3, #7
 800445e:	e05a      	b.n	8004516 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <dir_next+0xd6>
 8004466:	2302      	movs	r3, #2
 8004468:	e055      	b.n	8004516 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d101      	bne.n	8004476 <dir_next+0xe2>
 8004472:	2301      	movs	r3, #1
 8004474:	e04f      	b.n	8004516 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fb50 	bl	8003b1c <sync_window>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <dir_next+0xf2>
 8004482:	2301      	movs	r3, #1
 8004484:	e047      	b.n	8004516 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3330      	adds	r3, #48	@ 0x30
 800448a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f97a 	bl	800378a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fc1d 	bl	8003cdc <clust2sect>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044a8:	e012      	b.n	80044d0 <dir_next+0x13c>
						fs->wflag = 1;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fb33 	bl	8003b1c <sync_window>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <dir_next+0x12c>
 80044bc:	2301      	movs	r3, #1
 80044be:	e02a      	b.n	8004516 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3301      	adds	r3, #1
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	895b      	ldrh	r3, [r3, #10]
 80044d4:	461a      	mov	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4293      	cmp	r3, r2
 80044da:	d3e6      	bcc.n	80044aa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff fbf3 	bl	8003cdc <clust2sect>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800452e:	2100      	movs	r1, #0
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff feb4 	bl	800429e <dir_sdi>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d12b      	bne.n	8004598 <dir_alloc+0x7a>
		n = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4619      	mov	r1, r3
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff fb2a 	bl	8003ba4 <move_window>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11d      	bne.n	8004596 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2be5      	cmp	r3, #229	@ 0xe5
 8004562:	d004      	beq.n	800456e <dir_alloc+0x50>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d107      	bne.n	800457e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	3301      	adds	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d102      	bne.n	8004582 <dir_alloc+0x64>
 800457c:	e00c      	b.n	8004598 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004582:	2101      	movs	r1, #1
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ff05 	bl	8004394 <dir_next>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0d7      	beq.n	8004544 <dir_alloc+0x26>
 8004594:	e000      	b.n	8004598 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004596:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d101      	bne.n	80045a2 <dir_alloc+0x84>
 800459e:	2307      	movs	r3, #7
 80045a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	331a      	adds	r3, #26
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f842 	bl	8003644 <ld_word>
 80045c0:	4603      	mov	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d109      	bne.n	80045e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff f837 	bl	8003644 <ld_word>
 80045d6:	4603      	mov	r3, r0
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	331a      	adds	r3, #26
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	b292      	uxth	r2, r2
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f85a 	bl	80036ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d109      	bne.n	8004622 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f103 0214 	add.w	r2, r3, #20
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	b29b      	uxth	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f7ff f84c 	bl	80036ba <st_word>
	}
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fe2f 	bl	800429e <dir_sdi>
 8004640:	4603      	mov	r3, r0
 8004642:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <dir_find+0x24>
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	e03e      	b.n	80046cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4619      	mov	r1, r3
 8004654:	6938      	ldr	r0, [r7, #16]
 8004656:	f7ff faa5 	bl	8003ba4 <move_window>
 800465a:	4603      	mov	r3, r0
 800465c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d12f      	bne.n	80046c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <dir_find+0x4e>
 8004672:	2304      	movs	r3, #4
 8004674:	75fb      	strb	r3, [r7, #23]
 8004676:	e028      	b.n	80046ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	330b      	adds	r3, #11
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004684:	b2da      	uxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	330b      	adds	r3, #11
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <dir_find+0x86>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a18      	ldr	r0, [r3, #32]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3324      	adds	r3, #36	@ 0x24
 80046a2:	220b      	movs	r2, #11
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7ff f88b 	bl	80037c0 <mem_cmp>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80046b0:	2100      	movs	r1, #0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fe6e 	bl	8004394 <dir_next>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c5      	beq.n	800464e <dir_find+0x24>
 80046c2:	e002      	b.n	80046ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80046c8:	bf00      	nop

	return res;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80046e2:	2101      	movs	r1, #1
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff1a 	bl	800451e <dir_alloc>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11c      	bne.n	800472e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4619      	mov	r1, r3
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	f7ff fa52 	bl	8003ba4 <move_window>
 8004700:	4603      	mov	r3, r0
 8004702:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d111      	bne.n	800472e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2220      	movs	r2, #32
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff f839 	bl	800378a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a18      	ldr	r0, [r3, #32]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3324      	adds	r3, #36	@ 0x24
 8004720:	220b      	movs	r2, #11
 8004722:	4619      	mov	r1, r3
 8004724:	f7ff f810 	bl	8003748 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2201      	movs	r2, #1
 800472c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3324      	adds	r3, #36	@ 0x24
 800474c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800474e:	220b      	movs	r2, #11
 8004750:	2120      	movs	r1, #32
 8004752:	68b8      	ldr	r0, [r7, #8]
 8004754:	f7ff f819 	bl	800378a <mem_set>
	si = i = 0; ni = 8;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	2308      	movs	r3, #8
 8004762:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	61fa      	str	r2, [r7, #28]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004772:	7efb      	ldrb	r3, [r7, #27]
 8004774:	2b20      	cmp	r3, #32
 8004776:	d94e      	bls.n	8004816 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004778:	7efb      	ldrb	r3, [r7, #27]
 800477a:	2b2f      	cmp	r3, #47	@ 0x2f
 800477c:	d006      	beq.n	800478c <create_name+0x54>
 800477e:	7efb      	ldrb	r3, [r7, #27]
 8004780:	2b5c      	cmp	r3, #92	@ 0x5c
 8004782:	d110      	bne.n	80047a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004784:	e002      	b.n	800478c <create_name+0x54>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b2f      	cmp	r3, #47	@ 0x2f
 8004796:	d0f6      	beq.n	8004786 <create_name+0x4e>
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80047a2:	d0f0      	beq.n	8004786 <create_name+0x4e>
			break;
 80047a4:	e038      	b.n	8004818 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80047a6:	7efb      	ldrb	r3, [r7, #27]
 80047a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047aa:	d003      	beq.n	80047b4 <create_name+0x7c>
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d30c      	bcc.n	80047ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b0b      	cmp	r3, #11
 80047b8:	d002      	beq.n	80047c0 <create_name+0x88>
 80047ba:	7efb      	ldrb	r3, [r7, #27]
 80047bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80047be:	d001      	beq.n	80047c4 <create_name+0x8c>
 80047c0:	2306      	movs	r3, #6
 80047c2:	e044      	b.n	800484e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80047c4:	2308      	movs	r3, #8
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	230b      	movs	r3, #11
 80047ca:	617b      	str	r3, [r7, #20]
			continue;
 80047cc:	e022      	b.n	8004814 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80047ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da04      	bge.n	80047e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80047d6:	7efb      	ldrb	r3, [r7, #27]
 80047d8:	3b80      	subs	r3, #128	@ 0x80
 80047da:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <create_name+0x120>)
 80047dc:	5cd3      	ldrb	r3, [r2, r3]
 80047de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80047e0:	7efb      	ldrb	r3, [r7, #27]
 80047e2:	4619      	mov	r1, r3
 80047e4:	481d      	ldr	r0, [pc, #116]	@ (800485c <create_name+0x124>)
 80047e6:	f7ff f812 	bl	800380e <chk_chr>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <create_name+0xbc>
 80047f0:	2306      	movs	r3, #6
 80047f2:	e02c      	b.n	800484e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80047f4:	7efb      	ldrb	r3, [r7, #27]
 80047f6:	2b60      	cmp	r3, #96	@ 0x60
 80047f8:	d905      	bls.n	8004806 <create_name+0xce>
 80047fa:	7efb      	ldrb	r3, [r7, #27]
 80047fc:	2b7a      	cmp	r3, #122	@ 0x7a
 80047fe:	d802      	bhi.n	8004806 <create_name+0xce>
 8004800:	7efb      	ldrb	r3, [r7, #27]
 8004802:	3b20      	subs	r3, #32
 8004804:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	613a      	str	r2, [r7, #16]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	4413      	add	r3, r2
 8004810:	7efa      	ldrb	r2, [r7, #27]
 8004812:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004814:	e7a6      	b.n	8004764 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004816:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	441a      	add	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <create_name+0xf4>
 8004828:	2306      	movs	r3, #6
 800482a:	e010      	b.n	800484e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2be5      	cmp	r3, #229	@ 0xe5
 8004832:	d102      	bne.n	800483a <create_name+0x102>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2205      	movs	r2, #5
 8004838:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800483a:	7efb      	ldrb	r3, [r7, #27]
 800483c:	2b20      	cmp	r3, #32
 800483e:	d801      	bhi.n	8004844 <create_name+0x10c>
 8004840:	2204      	movs	r2, #4
 8004842:	e000      	b.n	8004846 <create_name+0x10e>
 8004844:	2200      	movs	r2, #0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	330b      	adds	r3, #11
 800484a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800484c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	08005c8c 	.word	0x08005c8c
 800485c:	08005c08 	.word	0x08005c08

08004860 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004874:	e002      	b.n	800487c <follow_path+0x1c>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b2f      	cmp	r3, #47	@ 0x2f
 8004882:	d0f8      	beq.n	8004876 <follow_path+0x16>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b5c      	cmp	r3, #92	@ 0x5c
 800488a:	d0f4      	beq.n	8004876 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b1f      	cmp	r3, #31
 8004898:	d80a      	bhi.n	80048b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2280      	movs	r2, #128	@ 0x80
 800489e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80048a2:	2100      	movs	r1, #0
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fcfa 	bl	800429e <dir_sdi>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]
 80048ae:	e043      	b.n	8004938 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048b0:	463b      	mov	r3, r7
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff3f 	bl	8004738 <create_name>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d134      	bne.n	800492e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff feb0 	bl	800462a <dir_find>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80048d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d127      	bne.n	8004932 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80048e2:	7afb      	ldrb	r3, [r7, #11]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d122      	bne.n	8004932 <follow_path+0xd2>
 80048ec:	2305      	movs	r3, #5
 80048ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80048f0:	e01f      	b.n	8004932 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11c      	bne.n	8004936 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	799b      	ldrb	r3, [r3, #6]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004908:	2305      	movs	r3, #5
 800490a:	75fb      	strb	r3, [r7, #23]
 800490c:	e014      	b.n	8004938 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491c:	4413      	add	r3, r2
 800491e:	4619      	mov	r1, r3
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff fe43 	bl	80045ac <ld_clust>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800492c:	e7c0      	b.n	80048b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800492e:	bf00      	nop
 8004930:	e002      	b.n	8004938 <follow_path+0xd8>
				break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004936:	bf00      	nop
			}
		}
	}

	return res;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d031      	beq.n	80049bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e002      	b.n	8004966 <get_ldnumber+0x24>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3301      	adds	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b20      	cmp	r3, #32
 800496c:	d903      	bls.n	8004976 <get_ldnumber+0x34>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b3a      	cmp	r3, #58	@ 0x3a
 8004974:	d1f4      	bne.n	8004960 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b3a      	cmp	r3, #58	@ 0x3a
 800497c:	d11c      	bne.n	80049b8 <get_ldnumber+0x76>
			tp = *path;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	60fa      	str	r2, [r7, #12]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	3b30      	subs	r3, #48	@ 0x30
 800498e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b09      	cmp	r3, #9
 8004994:	d80e      	bhi.n	80049b4 <get_ldnumber+0x72>
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	429a      	cmp	r2, r3
 800499c:	d10a      	bne.n	80049b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d107      	bne.n	80049b4 <get_ldnumber+0x72>
					vol = (int)i;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3301      	adds	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e002      	b.n	80049be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80049bc:	693b      	ldr	r3, [r7, #16]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	70da      	strb	r2, [r3, #3]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f04f 32ff 	mov.w	r2, #4294967295
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff f8dc 	bl	8003ba4 <move_window>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <check_fs+0x2a>
 80049f2:	2304      	movs	r3, #4
 80049f4:	e038      	b.n	8004a68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3330      	adds	r3, #48	@ 0x30
 80049fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fe20 	bl	8003644 <ld_word>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <check_fs+0x48>
 8004a10:	2303      	movs	r3, #3
 8004a12:	e029      	b.n	8004a68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a1a:	2be9      	cmp	r3, #233	@ 0xe9
 8004a1c:	d009      	beq.n	8004a32 <check_fs+0x66>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a24:	2beb      	cmp	r3, #235	@ 0xeb
 8004a26:	d11e      	bne.n	8004a66 <check_fs+0x9a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004a2e:	2b90      	cmp	r3, #144	@ 0x90
 8004a30:	d119      	bne.n	8004a66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3330      	adds	r3, #48	@ 0x30
 8004a36:	3336      	adds	r3, #54	@ 0x36
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fe1b 	bl	8003674 <ld_dword>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a44:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <check_fs+0xa4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <check_fs+0x82>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e00c      	b.n	8004a68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3330      	adds	r3, #48	@ 0x30
 8004a52:	3352      	adds	r3, #82	@ 0x52
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fe0d 	bl	8003674 <ld_dword>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <check_fs+0xa8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <check_fs+0x9a>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004a66:	2302      	movs	r3, #2
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	00544146 	.word	0x00544146
 8004a74:	33544146 	.word	0x33544146

08004a78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b096      	sub	sp, #88	@ 0x58
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff ff58 	bl	8004942 <get_ldnumber>
 8004a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da01      	bge.n	8004a9e <find_volume+0x26>
 8004a9a:	230b      	movs	r3, #11
 8004a9c:	e22d      	b.n	8004efa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004a9e:	4aa1      	ldr	r2, [pc, #644]	@ (8004d24 <find_volume+0x2ac>)
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <find_volume+0x3a>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	e223      	b.n	8004efa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ab6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fd1b 	bl	8003508 <disk_status>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10c      	bne.n	8004afe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <find_volume+0x82>
 8004aea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004af6:	230a      	movs	r3, #10
 8004af8:	e1ff      	b.n	8004efa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004afa:	2300      	movs	r3, #0
 8004afc:	e1fd      	b.n	8004efa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fd13 	bl	800353c <disk_initialize>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e1e6      	b.n	8004efa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <find_volume+0xca>
 8004b32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004b3e:	230a      	movs	r3, #10
 8004b40:	e1db      	b.n	8004efa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004b46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b4a:	f7ff ff3f 	bl	80049cc <check_fs>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004b54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d149      	bne.n	8004bf0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b60:	e01e      	b.n	8004ba0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004b70:	4413      	add	r3, r2
 8004b72:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	3304      	adds	r3, #4
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <find_volume+0x114>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	3308      	adds	r3, #8
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fd76 	bl	8003674 <ld_dword>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	e000      	b.n	8004b8e <find_volume+0x116>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	3358      	adds	r3, #88	@ 0x58
 8004b94:	443b      	add	r3, r7
 8004b96:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d9dd      	bls.n	8004b62 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <find_volume+0x13e>
 8004bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3358      	adds	r3, #88	@ 0x58
 8004bbc:	443b      	add	r3, r7
 8004bbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004bc2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <find_volume+0x15e>
 8004bca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004bcc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bce:	f7ff fefd 	bl	80049cc <check_fs>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	e000      	b.n	8004bd8 <find_volume+0x160>
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d905      	bls.n	8004bf0 <find_volume+0x178>
 8004be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be6:	3301      	adds	r3, #1
 8004be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d9e2      	bls.n	8004bb6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d101      	bne.n	8004bfc <find_volume+0x184>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e17e      	b.n	8004efa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d901      	bls.n	8004c08 <find_volume+0x190>
 8004c04:	230d      	movs	r3, #13
 8004c06:	e178      	b.n	8004efa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	3330      	adds	r3, #48	@ 0x30
 8004c0c:	330b      	adds	r3, #11
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fd18 	bl	8003644 <ld_word>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1a:	d001      	beq.n	8004c20 <find_volume+0x1a8>
 8004c1c:	230d      	movs	r3, #13
 8004c1e:	e16c      	b.n	8004efa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	3330      	adds	r3, #48	@ 0x30
 8004c24:	3316      	adds	r3, #22
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fd0c 	bl	8003644 <ld_word>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <find_volume+0x1cc>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	3330      	adds	r3, #48	@ 0x30
 8004c3a:	3324      	adds	r3, #36	@ 0x24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fd19 	bl	8003674 <ld_dword>
 8004c42:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c48:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c56:	789b      	ldrb	r3, [r3, #2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d005      	beq.n	8004c68 <find_volume+0x1f0>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	789b      	ldrb	r3, [r3, #2]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d001      	beq.n	8004c68 <find_volume+0x1f0>
 8004c64:	230d      	movs	r3, #13
 8004c66:	e148      	b.n	8004efa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	789b      	ldrb	r3, [r3, #2]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	895b      	ldrh	r3, [r3, #10]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <find_volume+0x224>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	895b      	ldrh	r3, [r3, #10]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	895b      	ldrh	r3, [r3, #10]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <find_volume+0x228>
 8004c9c:	230d      	movs	r3, #13
 8004c9e:	e12c      	b.n	8004efa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	3330      	adds	r3, #48	@ 0x30
 8004ca4:	3311      	adds	r3, #17
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fccc 	bl	8003644 <ld_word>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	891b      	ldrh	r3, [r3, #8]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <find_volume+0x24e>
 8004cc2:	230d      	movs	r3, #13
 8004cc4:	e119      	b.n	8004efa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc8:	3330      	adds	r3, #48	@ 0x30
 8004cca:	3313      	adds	r3, #19
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe fcb9 	bl	8003644 <ld_word>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <find_volume+0x272>
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	3330      	adds	r3, #48	@ 0x30
 8004ce0:	3320      	adds	r3, #32
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fcc6 	bl	8003674 <ld_dword>
 8004ce8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	3330      	adds	r3, #48	@ 0x30
 8004cee:	330e      	adds	r3, #14
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fca7 	bl	8003644 <ld_word>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004cfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <find_volume+0x28c>
 8004d00:	230d      	movs	r3, #13
 8004d02:	e0fa      	b.n	8004efa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004d04:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d08:	4413      	add	r3, r2
 8004d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d0c:	8912      	ldrh	r2, [r2, #8]
 8004d0e:	0912      	lsrs	r2, r2, #4
 8004d10:	b292      	uxth	r2, r2
 8004d12:	4413      	add	r3, r2
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d204      	bcs.n	8004d28 <find_volume+0x2b0>
 8004d1e:	230d      	movs	r3, #13
 8004d20:	e0eb      	b.n	8004efa <find_volume+0x482>
 8004d22:	bf00      	nop
 8004d24:	200400bc 	.word	0x200400bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d30:	8952      	ldrh	r2, [r2, #10]
 8004d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <find_volume+0x2ca>
 8004d3e:	230d      	movs	r3, #13
 8004d40:	e0db      	b.n	8004efa <find_volume+0x482>
		fmt = FS_FAT32;
 8004d42:	2303      	movs	r3, #3
 8004d44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d802      	bhi.n	8004d58 <find_volume+0x2e0>
 8004d52:	2302      	movs	r3, #2
 8004d54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d802      	bhi.n	8004d68 <find_volume+0x2f0>
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d74:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004d76:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d7a:	441a      	add	r2, r3
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004d80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	441a      	add	r2, r3
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004d8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d11e      	bne.n	8004dd0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	3330      	adds	r3, #48	@ 0x30
 8004d96:	332a      	adds	r3, #42	@ 0x2a
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fc53 	bl	8003644 <ld_word>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <find_volume+0x330>
 8004da4:	230d      	movs	r3, #13
 8004da6:	e0a8      	b.n	8004efa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	891b      	ldrh	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <find_volume+0x33c>
 8004db0:	230d      	movs	r3, #13
 8004db2:	e0a2      	b.n	8004efa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db6:	3330      	adds	r3, #48	@ 0x30
 8004db8:	332c      	adds	r3, #44	@ 0x2c
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fc5a 	bl	8003674 <ld_dword>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dce:	e01f      	b.n	8004e10 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd2:	891b      	ldrh	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <find_volume+0x364>
 8004dd8:	230d      	movs	r3, #13
 8004dda:	e08e      	b.n	8004efa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de2:	441a      	add	r2, r3
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004de8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d103      	bne.n	8004df8 <find_volume+0x380>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	e00a      	b.n	8004e0e <find_volume+0x396>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	085a      	lsrs	r2, r3, #1
 8004e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004e0e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e16:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8004e1a:	0a5b      	lsrs	r3, r3, #9
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d201      	bcs.n	8004e24 <find_volume+0x3ac>
 8004e20:	230d      	movs	r3, #13
 8004e22:	e06a      	b.n	8004efa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e26:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2a:	611a      	str	r2, [r3, #16]
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	2280      	movs	r2, #128	@ 0x80
 8004e38:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d149      	bne.n	8004ed6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	3330      	adds	r3, #48	@ 0x30
 8004e46:	3330      	adds	r3, #48	@ 0x30
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fbfb 	bl	8003644 <ld_word>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d140      	bne.n	8004ed6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e56:	3301      	adds	r3, #1
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e5c:	f7fe fea2 	bl	8003ba4 <move_window>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d137      	bne.n	8004ed6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	2200      	movs	r2, #0
 8004e6a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	3330      	adds	r3, #48	@ 0x30
 8004e70:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fe fbe5 	bl	8003644 <ld_word>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d127      	bne.n	8004ed6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	3330      	adds	r3, #48	@ 0x30
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fbf2 	bl	8003674 <ld_dword>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <find_volume+0x48c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d11e      	bne.n	8004ed6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9a:	3330      	adds	r3, #48	@ 0x30
 8004e9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fbe7 	bl	8003674 <ld_dword>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a17      	ldr	r2, [pc, #92]	@ (8004f08 <find_volume+0x490>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d113      	bne.n	8004ed6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	3330      	adds	r3, #48	@ 0x30
 8004eb2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fbdc 	bl	8003674 <ld_dword>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	3330      	adds	r3, #48	@ 0x30
 8004ec6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fbd2 	bl	8003674 <ld_dword>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004edc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004ede:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <find_volume+0x494>)
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <find_volume+0x494>)
 8004ee8:	801a      	strh	r2, [r3, #0]
 8004eea:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <find_volume+0x494>)
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004ef2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ef4:	f7fe fdee 	bl	8003ad4 <clear_lock>
#endif
	return FR_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3758      	adds	r7, #88	@ 0x58
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	41615252 	.word	0x41615252
 8004f08:	61417272 	.word	0x61417272
 8004f0c:	200400c0 	.word	0x200400c0

08004f10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004f1a:	2309      	movs	r3, #9
 8004f1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <validate+0x4e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d018      	beq.n	8004f5e <validate+0x4e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <validate+0x4e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	889a      	ldrh	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	88db      	ldrh	r3, [r3, #6]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d10c      	bne.n	8004f5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fadc 	bl	8003508 <disk_status>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <validate+0x4e>
			res = FR_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <validate+0x5a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	e000      	b.n	8004f6c <validate+0x5c>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	6013      	str	r3, [r2, #0]
	return res;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004f8e:	f107 0310 	add.w	r3, r7, #16
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fcd5 	bl	8004942 <get_ldnumber>
 8004f98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da01      	bge.n	8004fa4 <f_mount+0x28>
 8004fa0:	230b      	movs	r3, #11
 8004fa2:	e02b      	b.n	8004ffc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004fa4:	4a17      	ldr	r2, [pc, #92]	@ (8005004 <f_mount+0x88>)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004fb4:	69b8      	ldr	r0, [r7, #24]
 8004fb6:	f7fe fd8d 	bl	8003ad4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	490d      	ldr	r1, [pc, #52]	@ (8005004 <f_mount+0x88>)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <f_mount+0x66>
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <f_mount+0x6a>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e00a      	b.n	8004ffc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004fe6:	f107 010c 	add.w	r1, r7, #12
 8004fea:	f107 0308 	add.w	r3, r7, #8
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fd41 	bl	8004a78 <find_volume>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	200400bc 	.word	0x200400bc

08005008 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	@ 0x60
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <f_open+0x18>
 800501c:	2309      	movs	r3, #9
 800501e:	e1a9      	b.n	8005374 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005026:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005028:	79fa      	ldrb	r2, [r7, #7]
 800502a:	f107 0110 	add.w	r1, r7, #16
 800502e:	f107 0308 	add.w	r3, r7, #8
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fd20 	bl	8004a78 <find_volume>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800503e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 818d 	bne.w	8005362 <f_open+0x35a>
		dj.obj.fs = fs;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	f107 0314 	add.w	r3, r7, #20
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fc03 	bl	8004860 <follow_path>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005060:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005064:	2b00      	cmp	r3, #0
 8005066:	d118      	bne.n	800509a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005068:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800506c:	b25b      	sxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	da03      	bge.n	800507a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005072:	2306      	movs	r3, #6
 8005074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005078:	e00f      	b.n	800509a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf8c      	ite	hi
 8005080:	2301      	movhi	r3, #1
 8005082:	2300      	movls	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fbd8 	bl	8003844 <chk_lock>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f003 031c 	and.w	r3, r3, #28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d07f      	beq.n	80051a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80050a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d017      	beq.n	80050dc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80050ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d10e      	bne.n	80050d2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80050b4:	f7fe fc22 	bl	80038fc <enq_lock>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <f_open+0xc4>
 80050be:	f107 0314 	add.w	r3, r7, #20
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fb06 	bl	80046d4 <dir_register>
 80050c8:	4603      	mov	r3, r0
 80050ca:	e000      	b.n	80050ce <f_open+0xc6>
 80050cc:	2312      	movs	r3, #18
 80050ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f043 0308 	orr.w	r3, r3, #8
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	e010      	b.n	80050fe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80050dc:	7ebb      	ldrb	r3, [r7, #26]
 80050de:	f003 0311 	and.w	r3, r3, #17
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <f_open+0xe6>
					res = FR_DENIED;
 80050e6:	2307      	movs	r3, #7
 80050e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80050ec:	e007      	b.n	80050fe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <f_open+0xf6>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80050fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005102:	2b00      	cmp	r3, #0
 8005104:	d168      	bne.n	80051d8 <f_open+0x1d0>
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d063      	beq.n	80051d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005110:	f7fd fcc4 	bl	8002a9c <get_fattime>
 8005114:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005118:	330e      	adds	r3, #14
 800511a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fae7 	bl	80036f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005124:	3316      	adds	r3, #22
 8005126:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fae1 	bl	80036f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800512e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005130:	330b      	adds	r3, #11
 8005132:	2220      	movs	r2, #32
 8005134:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff fa35 	bl	80045ac <ld_clust>
 8005142:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005148:	2200      	movs	r2, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fa4d 	bl	80045ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005152:	331c      	adds	r3, #28
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe faca 	bl	80036f0 <st_dword>
					fs->wflag = 1;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2201      	movs	r2, #1
 8005160:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d037      	beq.n	80051d8 <f_open+0x1d0>
						dw = fs->winsect;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800516e:	f107 0314 	add.w	r3, r7, #20
 8005172:	2200      	movs	r2, #0
 8005174:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe ff60 	bl	800403c <remove_chain>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005182:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005186:	2b00      	cmp	r3, #0
 8005188:	d126      	bne.n	80051d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe fd08 	bl	8003ba4 <move_window>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800519e:	3a01      	subs	r2, #1
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	e019      	b.n	80051d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80051a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d115      	bne.n	80051d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80051ac:	7ebb      	ldrb	r3, [r7, #26]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <f_open+0x1b6>
					res = FR_NO_FILE;
 80051b6:	2304      	movs	r3, #4
 80051b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80051bc:	e00c      	b.n	80051d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <f_open+0x1d0>
 80051c8:	7ebb      	ldrb	r3, [r7, #26]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <f_open+0x1d0>
						res = FR_DENIED;
 80051d2:	2307      	movs	r3, #7
 80051d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80051d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d126      	bne.n	800522e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80051fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b01      	cmp	r3, #1
 8005204:	bf8c      	ite	hi
 8005206:	2301      	movhi	r3, #1
 8005208:	2300      	movls	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe fb93 	bl	8003940 <inc_lock>
 800521a:	4602      	mov	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <f_open+0x226>
 8005228:	2302      	movs	r3, #2
 800522a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800522e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005232:	2b00      	cmp	r3, #0
 8005234:	f040 8095 	bne.w	8005362 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f9b4 	bl	80045ac <ld_clust>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524c:	331c      	adds	r3, #28
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fa10 	bl	8003674 <ld_dword>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	88da      	ldrh	r2, [r3, #6]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3330      	adds	r3, #48	@ 0x30
 800528a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe fa7a 	bl	800378a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d060      	beq.n	8005362 <f_open+0x35a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05c      	beq.n	8005362 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	895b      	ldrh	r3, [r3, #10]
 80052b4:	025b      	lsls	r3, r3, #9
 80052b6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052c4:	e016      	b.n	80052f4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fd25 	bl	8003d1a <get_fat>
 80052d0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80052d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d802      	bhi.n	80052de <f_open+0x2d6>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80052de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d102      	bne.n	80052ec <f_open+0x2e4>
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80052ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <f_open+0x2fc>
 80052fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005300:	429a      	cmp	r2, r3
 8005302:	d8e0      	bhi.n	80052c6 <f_open+0x2be>
				}
				fp->clust = clst;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005308:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800530a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800530e:	2b00      	cmp	r3, #0
 8005310:	d127      	bne.n	8005362 <f_open+0x35a>
 8005312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005318:	2b00      	cmp	r3, #0
 800531a:	d022      	beq.n	8005362 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe fcdb 	bl	8003cdc <clust2sect>
 8005326:	6478      	str	r0, [r7, #68]	@ 0x44
 8005328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <f_open+0x32e>
						res = FR_INT_ERR;
 800532e:	2302      	movs	r3, #2
 8005330:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005334:	e015      	b.n	8005362 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005338:	0a5a      	lsrs	r2, r3, #9
 800533a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800533c:	441a      	add	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	7858      	ldrb	r0, [r3, #1]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	2301      	movs	r3, #1
 8005352:	f7fe f919 	bl	8003588 <disk_read>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <f_open+0x35a>
 800535c:	2301      	movs	r3, #1
 800535e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005362:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <f_open+0x368>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005374:	4618      	mov	r0, r3
 8005376:	3760      	adds	r7, #96	@ 0x60
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	@ 0x38
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f107 0214 	add.w	r2, r7, #20
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fdb7 	bl	8004f10 <validate>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80053a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d107      	bne.n	80053c0 <f_read+0x44>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	7d5b      	ldrb	r3, [r3, #21]
 80053b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80053b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <f_read+0x4a>
 80053c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053c4:	e115      	b.n	80055f2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	7d1b      	ldrb	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <f_read+0x5a>
 80053d2:	2307      	movs	r3, #7
 80053d4:	e10d      	b.n	80055f2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	f240 80fe 	bls.w	80055e8 <f_read+0x26c>
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80053f0:	e0fa      	b.n	80055e8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 80c6 	bne.w	800558c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0a5b      	lsrs	r3, r3, #9
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	8952      	ldrh	r2, [r2, #10]
 800540a:	3a01      	subs	r2, #1
 800540c:	4013      	ands	r3, r2
 800540e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d12f      	bne.n	8005476 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	633b      	str	r3, [r7, #48]	@ 0x30
 8005424:	e013      	b.n	800544e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	4619      	mov	r1, r3
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7fe fefe 	bl	8004236 <clmt_clust>
 800543a:	6338      	str	r0, [r7, #48]	@ 0x30
 800543c:	e007      	b.n	800544e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f7fe fc67 	bl	8003d1a <get_fat>
 800544c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	2b01      	cmp	r3, #1
 8005452:	d804      	bhi.n	800545e <f_read+0xe2>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	755a      	strb	r2, [r3, #21]
 800545a:	2302      	movs	r3, #2
 800545c:	e0c9      	b.n	80055f2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d104      	bne.n	8005470 <f_read+0xf4>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	755a      	strb	r2, [r3, #21]
 800546c:	2301      	movs	r3, #1
 800546e:	e0c0      	b.n	80055f2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005474:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe fc2c 	bl	8003cdc <clust2sect>
 8005484:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <f_read+0x11a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2202      	movs	r2, #2
 8005490:	755a      	strb	r2, [r3, #21]
 8005492:	2302      	movs	r3, #2
 8005494:	e0ad      	b.n	80055f2 <f_read+0x276>
			sect += csect;
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0a5b      	lsrs	r3, r3, #9
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d039      	beq.n	800551e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ae:	4413      	add	r3, r2
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	8952      	ldrh	r2, [r2, #10]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d905      	bls.n	80054c4 <f_read+0x148>
					cc = fs->csize - csect;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	895b      	ldrh	r3, [r3, #10]
 80054bc:	461a      	mov	r2, r3
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	7858      	ldrb	r0, [r3, #1]
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054ce:	f7fe f85b 	bl	8003588 <disk_read>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <f_read+0x166>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	755a      	strb	r2, [r3, #21]
 80054de:	2301      	movs	r3, #1
 80054e0:	e087      	b.n	80055f2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	7d1b      	ldrb	r3, [r3, #20]
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da14      	bge.n	8005516 <f_read+0x19a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d90d      	bls.n	8005516 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	025b      	lsls	r3, r3, #9
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	18d0      	adds	r0, r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3330      	adds	r3, #48	@ 0x30
 800550c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005510:	4619      	mov	r1, r3
 8005512:	f7fe f919 	bl	8003748 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800551c:	e050      	b.n	80055c0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	429a      	cmp	r2, r3
 8005526:	d02e      	beq.n	8005586 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	7d1b      	ldrb	r3, [r3, #20]
 800552c:	b25b      	sxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	da18      	bge.n	8005564 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	7858      	ldrb	r0, [r3, #1]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	2301      	movs	r3, #1
 8005542:	f7fe f841 	bl	80035c8 <disk_write>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <f_read+0x1da>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	755a      	strb	r2, [r3, #21]
 8005552:	2301      	movs	r3, #1
 8005554:	e04d      	b.n	80055f2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	7d1b      	ldrb	r3, [r3, #20]
 800555a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555e:	b2da      	uxtb	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	7858      	ldrb	r0, [r3, #1]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800556e:	2301      	movs	r3, #1
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	f7fe f809 	bl	8003588 <disk_read>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <f_read+0x20a>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	755a      	strb	r2, [r3, #21]
 8005582:	2301      	movs	r3, #1
 8005584:	e035      	b.n	80055f2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800559a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d901      	bls.n	80055a6 <f_read+0x22a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	4413      	add	r3, r2
 80055b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b8:	4619      	mov	r1, r3
 80055ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055bc:	f7fe f8c4 	bl	8003748 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80055c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	4413      	add	r3, r2
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	441a      	add	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	619a      	str	r2, [r3, #24]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	441a      	add	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f47f af01 	bne.w	80053f2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3738      	adds	r7, #56	@ 0x38
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b08c      	sub	sp, #48	@ 0x30
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f107 0210 	add.w	r2, r7, #16
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fc78 	bl	8004f10 <validate>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <f_write+0x44>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	7d5b      	ldrb	r3, [r3, #21]
 8005632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <f_write+0x4a>
 800563e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005642:	e14b      	b.n	80058dc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	7d1b      	ldrb	r3, [r3, #20]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <f_write+0x5a>
 8005650:	2307      	movs	r3, #7
 8005652:	e143      	b.n	80058dc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	441a      	add	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	f080 812d 	bcs.w	80058c0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	43db      	mvns	r3, r3
 800566c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800566e:	e127      	b.n	80058c0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 80e3 	bne.w	8005844 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	0a5b      	lsrs	r3, r3, #9
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	8952      	ldrh	r2, [r2, #10]
 8005688:	3a01      	subs	r2, #1
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d143      	bne.n	800571c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe fd2a 	bl	8004106 <create_chain>
 80056b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80056b4:	e013      	b.n	80056de <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7fe fdb6 	bl	8004236 <clmt_clust>
 80056ca:	62b8      	str	r0, [r7, #40]	@ 0x28
 80056cc:	e007      	b.n	80056de <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f7fe fd15 	bl	8004106 <create_chain>
 80056dc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80f2 	beq.w	80058ca <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d104      	bne.n	80056f6 <f_write+0xfc>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2202      	movs	r2, #2
 80056f0:	755a      	strb	r2, [r3, #21]
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0f2      	b.n	80058dc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d104      	bne.n	8005708 <f_write+0x10e>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	755a      	strb	r2, [r3, #21]
 8005704:	2301      	movs	r3, #1
 8005706:	e0e9      	b.n	80058dc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <f_write+0x122>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800571a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	7d1b      	ldrb	r3, [r3, #20]
 8005720:	b25b      	sxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	da18      	bge.n	8005758 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	7858      	ldrb	r0, [r3, #1]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	2301      	movs	r3, #1
 8005736:	f7fd ff47 	bl	80035c8 <disk_write>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <f_write+0x150>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	755a      	strb	r2, [r3, #21]
 8005746:	2301      	movs	r3, #1
 8005748:	e0c8      	b.n	80058dc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	7d1b      	ldrb	r3, [r3, #20]
 800574e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe fabb 	bl	8003cdc <clust2sect>
 8005766:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <f_write+0x17e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2202      	movs	r2, #2
 8005772:	755a      	strb	r2, [r3, #21]
 8005774:	2302      	movs	r3, #2
 8005776:	e0b1      	b.n	80058dc <f_write+0x2e2>
			sect += csect;
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4413      	add	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03c      	beq.n	8005806 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4413      	add	r3, r2
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	8952      	ldrh	r2, [r2, #10]
 8005796:	4293      	cmp	r3, r2
 8005798:	d905      	bls.n	80057a6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	895b      	ldrh	r3, [r3, #10]
 800579e:	461a      	mov	r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	7858      	ldrb	r0, [r3, #1]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	69f9      	ldr	r1, [r7, #28]
 80057b0:	f7fd ff0a 	bl	80035c8 <disk_write>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <f_write+0x1ca>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	755a      	strb	r2, [r3, #21]
 80057c0:	2301      	movs	r3, #1
 80057c2:	e08b      	b.n	80058dc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1a      	ldr	r2, [r3, #32]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6a3a      	ldr	r2, [r7, #32]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d915      	bls.n	80057fe <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ea:	4619      	mov	r1, r3
 80057ec:	f7fd ffac 	bl	8003748 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	7d1b      	ldrb	r3, [r3, #20]
 80057f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	025b      	lsls	r3, r3, #9
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8005804:	e03f      	b.n	8005886 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	429a      	cmp	r2, r3
 800580e:	d016      	beq.n	800583e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005818:	429a      	cmp	r2, r3
 800581a:	d210      	bcs.n	800583e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	7858      	ldrb	r0, [r3, #1]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005826:	2301      	movs	r3, #1
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	f7fd fead 	bl	8003588 <disk_read>
 800582e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	755a      	strb	r2, [r3, #21]
 800583a:	2301      	movs	r3, #1
 800583c:	e04e      	b.n	80058dc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d901      	bls.n	800585e <f_write+0x264>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	4413      	add	r3, r2
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd ff68 	bl	8003748 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	7d1b      	ldrb	r3, [r3, #20]
 800587c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	4413      	add	r3, r2
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	619a      	str	r2, [r3, #24]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf38      	it	cc
 80058a6:	461a      	movcc	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	441a      	add	r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f47f aed4 	bne.w	8005670 <f_write+0x76>
 80058c8:	e000      	b.n	80058cc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80058ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	7d1b      	ldrb	r3, [r3, #20]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3730      	adds	r7, #48	@ 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f107 0208 	add.w	r2, r7, #8
 80058f2:	4611      	mov	r1, r2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fb0b 	bl	8004f10 <validate>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d168      	bne.n	80059d6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7d1b      	ldrb	r3, [r3, #20]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d062      	beq.n	80059d6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7d1b      	ldrb	r3, [r3, #20]
 8005914:	b25b      	sxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	da15      	bge.n	8005946 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	7858      	ldrb	r0, [r3, #1]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	2301      	movs	r3, #1
 800592a:	f7fd fe4d 	bl	80035c8 <disk_write>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <f_sync+0x54>
 8005934:	2301      	movs	r3, #1
 8005936:	e04f      	b.n	80059d8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7d1b      	ldrb	r3, [r3, #20]
 800593c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005940:	b2da      	uxtb	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005946:	f7fd f8a9 	bl	8002a9c <get_fattime>
 800594a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe f925 	bl	8003ba4 <move_window>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d138      	bne.n	80059d6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	330b      	adds	r3, #11
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	330b      	adds	r3, #11
 8005974:	f042 0220 	orr.w	r2, r2, #32
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	461a      	mov	r2, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f7fe fe2f 	bl	80045ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f103 021c 	add.w	r2, r3, #28
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fd fea9 	bl	80036f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3316      	adds	r3, #22
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fd fea3 	bl	80036f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3312      	adds	r3, #18
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd fe82 	bl	80036ba <st_word>
					fs->wflag = 1;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2201      	movs	r2, #1
 80059ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe f91e 	bl	8003c00 <sync_fs>
 80059c4:	4603      	mov	r3, r0
 80059c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	7d1b      	ldrb	r3, [r3, #20]
 80059cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ff7b 	bl	80058e4 <f_sync>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d118      	bne.n	8005a2a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f107 0208 	add.w	r2, r7, #8
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fa85 	bl	8004f10 <validate>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10c      	bne.n	8005a2a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe f821 	bl	8003a5c <dec_lock>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005a48:	e01c      	b.n	8005a84 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005a4a:	f107 0310 	add.w	r3, r7, #16
 8005a4e:	f107 0114 	add.w	r1, r7, #20
 8005a52:	2201      	movs	r2, #1
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fc91 	bl	800537c <f_read>
		if (rc != 1) break;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d117      	bne.n	8005a90 <f_gets+0x5c>
		c = s[0];
 8005a60:	7d3b      	ldrb	r3, [r7, #20]
 8005a62:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	2b0d      	cmp	r3, #13
 8005a68:	d00b      	beq.n	8005a82 <f_gets+0x4e>
		*p++ = c;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	61ba      	str	r2, [r7, #24]
 8005a70:	7dfa      	ldrb	r2, [r7, #23]
 8005a72:	701a      	strb	r2, [r3, #0]
		n++;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	2b0a      	cmp	r3, #10
 8005a7e:	d009      	beq.n	8005a94 <f_gets+0x60>
 8005a80:	e000      	b.n	8005a84 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005a82:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	dbdd      	blt.n	8005a4a <f_gets+0x16>
 8005a8e:	e002      	b.n	8005a96 <f_gets+0x62>
		if (rc != 1) break;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8005a94:	bf00      	nop
	}
	*p = 0;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <f_gets+0x72>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	e000      	b.n	8005aa8 <f_gets+0x74>
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005ac8:	7a5b      	ldrb	r3, [r3, #9]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d131      	bne.n	8005b34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005ad2:	7a5b      	ldrb	r3, [r3, #9]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005ada:	2100      	movs	r1, #0
 8005adc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ade:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005ae0:	7a5b      	ldrb	r3, [r3, #9]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005aee:	4b15      	ldr	r3, [pc, #84]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005af0:	7a5b      	ldrb	r3, [r3, #9]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005af8:	4413      	add	r3, r2
 8005afa:	79fa      	ldrb	r2, [r7, #7]
 8005afc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005afe:	4b11      	ldr	r3, [pc, #68]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005b00:	7a5b      	ldrb	r3, [r3, #9]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	b2d1      	uxtb	r1, r2
 8005b08:	4a0e      	ldr	r2, [pc, #56]	@ (8005b44 <FATFS_LinkDriverEx+0x94>)
 8005b0a:	7251      	strb	r1, [r2, #9]
 8005b0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b0e:	7dbb      	ldrb	r3, [r7, #22]
 8005b10:	3330      	adds	r3, #48	@ 0x30
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	223a      	movs	r2, #58	@ 0x3a
 8005b1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	3302      	adds	r3, #2
 8005b24:	222f      	movs	r2, #47	@ 0x2f
 8005b26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3303      	adds	r3, #3
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200400e4 	.word	0x200400e4

08005b48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff ffaa 	bl	8005ab0 <FATFS_LinkDriverEx>
 8005b5c:	4603      	mov	r3, r0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <memset>:
 8005b66:	4402      	add	r2, r0
 8005b68:	4603      	mov	r3, r0
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d100      	bne.n	8005b70 <memset+0xa>
 8005b6e:	4770      	bx	lr
 8005b70:	f803 1b01 	strb.w	r1, [r3], #1
 8005b74:	e7f9      	b.n	8005b6a <memset+0x4>
	...

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f000 f818 	bl	8005bc0 <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08005d0c 	.word	0x08005d0c
 8005bb4:	08005d0c 	.word	0x08005d0c
 8005bb8:	08005d0c 	.word	0x08005d0c
 8005bbc:	08005d10 	.word	0x08005d10

08005bc0 <_init>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr

08005bcc <_fini>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr
