
stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d50  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001f0c  08001f0c  00002f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fcc  08001fcc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fcc  08001fcc  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fcc  08001fcc  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fcc  08001fcc  00002fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fd0  08001fd0  00002fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fd4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001fe0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001fe0  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049af  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010cf  00000000  00000000  000079eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00008ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000438  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277a0  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000618c  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2523  00000000  00000000  00036dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012930f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001598  00000000  00000000  00129354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001ef4 	.word	0x08001ef4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001ef4 	.word	0x08001ef4

080001fc <stepper_rotate_clockwise>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void stepper_rotate_clockwise() { // Define step sequence for clockwise rotation
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b0a2      	sub	sp, #136	@ 0x88
 8000200:	af00      	add	r7, sp, #0
	int steps[8][4] =
 8000202:	4a28      	ldr	r2, [pc, #160]	@ (80002a4 <stepper_rotate_clockwise+0xa8>)
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	4611      	mov	r1, r2
 8000208:	2280      	movs	r2, #128	@ 0x80
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fe64 	bl	8001ed8 <memcpy>
			{0, 1, 1, 0},
			{0, 0, 1, 0},
			{0, 0, 1, 1},
			{0, 0, 0, 1},
			{1, 0, 0, 1} };
	 for (int i = 0; i < 8; i++) { // Set GPIOs based on steps[i] values
 8000210:	2300      	movs	r3, #0
 8000212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000216:	e03b      	b.n	8000290 <stepper_rotate_clockwise+0x94>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, steps[i][0]);
 8000218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800021c:	011b      	lsls	r3, r3, #4
 800021e:	3388      	adds	r3, #136	@ 0x88
 8000220:	443b      	add	r3, r7
 8000222:	3b84      	subs	r3, #132	@ 0x84
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	b2db      	uxtb	r3, r3
 8000228:	461a      	mov	r2, r3
 800022a:	2101      	movs	r1, #1
 800022c:	481e      	ldr	r0, [pc, #120]	@ (80002a8 <stepper_rotate_clockwise+0xac>)
 800022e:	f000 fe9b 	bl	8000f68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, steps[i][1]);
 8000232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000236:	011b      	lsls	r3, r3, #4
 8000238:	3388      	adds	r3, #136	@ 0x88
 800023a:	443b      	add	r3, r7
 800023c:	3b80      	subs	r3, #128	@ 0x80
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	461a      	mov	r2, r3
 8000244:	2102      	movs	r1, #2
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <stepper_rotate_clockwise+0xac>)
 8000248:	f000 fe8e 	bl	8000f68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, steps[i][2]);
 800024c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000250:	011b      	lsls	r3, r3, #4
 8000252:	3388      	adds	r3, #136	@ 0x88
 8000254:	443b      	add	r3, r7
 8000256:	3b7c      	subs	r3, #124	@ 0x7c
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	2104      	movs	r1, #4
 8000260:	4811      	ldr	r0, [pc, #68]	@ (80002a8 <stepper_rotate_clockwise+0xac>)
 8000262:	f000 fe81 	bl	8000f68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, steps[i][3]);
 8000266:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800026a:	011b      	lsls	r3, r3, #4
 800026c:	3388      	adds	r3, #136	@ 0x88
 800026e:	443b      	add	r3, r7
 8000270:	3b78      	subs	r3, #120	@ 0x78
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	2108      	movs	r1, #8
 800027a:	480b      	ldr	r0, [pc, #44]	@ (80002a8 <stepper_rotate_clockwise+0xac>)
 800027c:	f000 fe74 	bl	8000f68 <HAL_GPIO_WritePin>
		 HAL_Delay(2); // Adjust delay for speed control
 8000280:	2002      	movs	r0, #2
 8000282:	f000 fbd5 	bl	8000a30 <HAL_Delay>
	 for (int i = 0; i < 8; i++) { // Set GPIOs based on steps[i] values
 8000286:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800028a:	3301      	adds	r3, #1
 800028c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000294:	2b07      	cmp	r3, #7
 8000296:	ddbf      	ble.n	8000218 <stepper_rotate_clockwise+0x1c>
	}
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3788      	adds	r7, #136	@ 0x88
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	08001f0c 	.word	0x08001f0c
 80002a8:	48000800 	.word	0x48000800

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fb49 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f805 	bl	80002c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f84a 	bl	8000350 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stepper_rotate_clockwise();
 80002bc:	f7ff ff9e 	bl	80001fc <stepper_rotate_clockwise>
 80002c0:	e7fc      	b.n	80002bc <main+0x10>

080002c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b096      	sub	sp, #88	@ 0x58
 80002c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2244      	movs	r2, #68	@ 0x44
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fdd5 	bl	8001e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	463b      	mov	r3, r7
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002e8:	f000 fe76 	bl	8000fd8 <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f2:	f000 fa93 	bl	800081c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f6:	2310      	movs	r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000302:	2360      	movs	r3, #96	@ 0x60
 8000304:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	4618      	mov	r0, r3
 8000310:	f000 ff16 	bl	8001140 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800031a:	f000 fa7f 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	463b      	mov	r3, r7
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fb1c 	bl	8001974 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000342:	f000 fa6b 	bl	800081c <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3758      	adds	r7, #88	@ 0x58
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08e      	sub	sp, #56	@ 0x38
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000366:	4bb2      	ldr	r3, [pc, #712]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036a:	4ab1      	ldr	r2, [pc, #708]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 800036c:	f043 0310 	orr.w	r3, r3, #16
 8000370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000372:	4baf      	ldr	r3, [pc, #700]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	f003 0310 	and.w	r3, r3, #16
 800037a:	623b      	str	r3, [r7, #32]
 800037c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4bac      	ldr	r3, [pc, #688]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	4aab      	ldr	r2, [pc, #684]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038a:	4ba9      	ldr	r3, [pc, #676]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	61fb      	str	r3, [r7, #28]
 8000394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4ba6      	ldr	r3, [pc, #664]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4aa5      	ldr	r2, [pc, #660]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 800039c:	f043 0320 	orr.w	r3, r3, #32
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4ba3      	ldr	r3, [pc, #652]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	61bb      	str	r3, [r7, #24]
 80003ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ae:	4ba0      	ldr	r3, [pc, #640]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a9f      	ldr	r2, [pc, #636]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4b9d      	ldr	r3, [pc, #628]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b9a      	ldr	r3, [pc, #616]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a99      	ldr	r2, [pc, #612]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4b97      	ldr	r3, [pc, #604]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b94      	ldr	r3, [pc, #592]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a93      	ldr	r2, [pc, #588]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4b91      	ldr	r3, [pc, #580]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f6:	4b8e      	ldr	r3, [pc, #568]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a8d      	ldr	r2, [pc, #564]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 80003fc:	f043 0308 	orr.w	r3, r3, #8
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b8b      	ldr	r3, [pc, #556]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0308 	and.w	r3, r3, #8
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800040e:	4b88      	ldr	r3, [pc, #544]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a87      	ldr	r2, [pc, #540]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 8000414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b85      	ldr	r3, [pc, #532]	@ (8000630 <MX_GPIO_Init+0x2e0>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000426:	f000 fe7b 	bl	8001120 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	210f      	movs	r1, #15
 800042e:	4881      	ldr	r0, [pc, #516]	@ (8000634 <MX_GPIO_Init+0x2e4>)
 8000430:	f000 fd9a 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000434:	230c      	movs	r3, #12
 8000436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000444:	230d      	movs	r3, #13
 8000446:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800044c:	4619      	mov	r1, r3
 800044e:	487a      	ldr	r0, [pc, #488]	@ (8000638 <MX_GPIO_Init+0x2e8>)
 8000450:	f000 fbf8 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000454:	2307      	movs	r3, #7
 8000456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000458:	2312      	movs	r3, #18
 800045a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000464:	2304      	movs	r3, #4
 8000466:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800046c:	4619      	mov	r1, r3
 800046e:	4873      	ldr	r0, [pc, #460]	@ (800063c <MX_GPIO_Init+0x2ec>)
 8000470:	f000 fbe8 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2300      	movs	r3, #0
 8000482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000484:	230d      	movs	r3, #13
 8000486:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800048c:	4619      	mov	r1, r3
 800048e:	486b      	ldr	r0, [pc, #428]	@ (800063c <MX_GPIO_Init+0x2ec>)
 8000490:	f000 fbd8 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000494:	230f      	movs	r3, #15
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a8:	4619      	mov	r1, r3
 80004aa:	4862      	ldr	r0, [pc, #392]	@ (8000634 <MX_GPIO_Init+0x2e4>)
 80004ac:	f000 fbca 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004b0:	2301      	movs	r3, #1
 80004b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2300      	movs	r3, #0
 80004be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004c0:	2301      	movs	r3, #1
 80004c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c8:	4619      	mov	r1, r3
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ce:	f000 fbb9 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80004d2:	230a      	movs	r3, #10
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004d6:	230b      	movs	r3, #11
 80004d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e8:	f000 fbac 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ec:	23f0      	movs	r3, #240	@ 0xf0
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004fc:	2305      	movs	r3, #5
 80004fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050a:	f000 fb9b 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800050e:	2330      	movs	r3, #48	@ 0x30
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000512:	230b      	movs	r3, #11
 8000514:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800051e:	4619      	mov	r1, r3
 8000520:	4844      	ldr	r0, [pc, #272]	@ (8000634 <MX_GPIO_Init+0x2e4>)
 8000522:	f000 fb8f 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000526:	2301      	movs	r3, #1
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000536:	2302      	movs	r3, #2
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800053e:	4619      	mov	r1, r3
 8000540:	483f      	ldr	r0, [pc, #252]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 8000542:	f000 fb7f 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000546:	2302      	movs	r3, #2
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800054a:	230b      	movs	r3, #11
 800054c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000556:	4619      	mov	r1, r3
 8000558:	4839      	ldr	r0, [pc, #228]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 800055a:	f000 fb73 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800055e:	2344      	movs	r3, #68	@ 0x44
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000562:	2303      	movs	r3, #3
 8000564:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800056e:	4619      	mov	r1, r3
 8000570:	4833      	ldr	r0, [pc, #204]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 8000572:	f000 fb67 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000576:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	2302      	movs	r3, #2
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000588:	2301      	movs	r3, #1
 800058a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000590:	4619      	mov	r1, r3
 8000592:	4829      	ldr	r0, [pc, #164]	@ (8000638 <MX_GPIO_Init+0x2e8>)
 8000594:	f000 fb56 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000598:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80005aa:	2303      	movs	r3, #3
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4820      	ldr	r0, [pc, #128]	@ (8000638 <MX_GPIO_Init+0x2e8>)
 80005b6:	f000 fb45 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005cc:	2301      	movs	r3, #1
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	481a      	ldr	r0, [pc, #104]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 80005d8:	f000 fb34 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005dc:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80005ee:	230d      	movs	r3, #13
 80005f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	4619      	mov	r1, r3
 80005f8:	4811      	ldr	r0, [pc, #68]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 80005fa:	f000 fb23 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000610:	230e      	movs	r3, #14
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000618:	4619      	mov	r1, r3
 800061a:	4809      	ldr	r0, [pc, #36]	@ (8000640 <MX_GPIO_Init+0x2f0>)
 800061c:	f000 fb12 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000620:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800062e:	e009      	b.n	8000644 <MX_GPIO_Init+0x2f4>
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800
 8000638:	48001000 	.word	0x48001000
 800063c:	48001400 	.word	0x48001400
 8000640:	48000400 	.word	0x48000400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000648:	2307      	movs	r3, #7
 800064a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	486d      	ldr	r0, [pc, #436]	@ (8000808 <MX_GPIO_Init+0x4b8>)
 8000654:	f000 faf6 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000658:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800066a:	2302      	movs	r3, #2
 800066c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000672:	4619      	mov	r1, r3
 8000674:	4864      	ldr	r0, [pc, #400]	@ (8000808 <MX_GPIO_Init+0x4b8>)
 8000676:	f000 fae5 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800067a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800068c:	2308      	movs	r3, #8
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	485d      	ldr	r0, [pc, #372]	@ (800080c <MX_GPIO_Init+0x4bc>)
 8000698:	f000 fad4 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069c:	2340      	movs	r3, #64	@ 0x40
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80006ac:	230d      	movs	r3, #13
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4856      	ldr	r0, [pc, #344]	@ (8000810 <MX_GPIO_Init+0x4c0>)
 80006b8:	f000 fac4 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d4:	4619      	mov	r1, r3
 80006d6:	484e      	ldr	r0, [pc, #312]	@ (8000810 <MX_GPIO_Init+0x4c0>)
 80006d8:	f000 fab4 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80006ee:	230c      	movs	r3, #12
 80006f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f6:	4619      	mov	r1, r3
 80006f8:	4845      	ldr	r0, [pc, #276]	@ (8000810 <MX_GPIO_Init+0x4c0>)
 80006fa:	f000 faa3 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80006fe:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000710:	230a      	movs	r3, #10
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f000 fa91 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073a:	f000 fa83 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073e:	2301      	movs	r3, #1
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800074e:	2309      	movs	r3, #9
 8000750:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	482b      	ldr	r0, [pc, #172]	@ (8000808 <MX_GPIO_Init+0x4b8>)
 800075a:	f000 fa73 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075e:	2304      	movs	r3, #4
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800076e:	230c      	movs	r3, #12
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	4823      	ldr	r0, [pc, #140]	@ (8000808 <MX_GPIO_Init+0x4b8>)
 800077a:	f000 fa63 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800077e:	2378      	movs	r3, #120	@ 0x78
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078e:	2307      	movs	r3, #7
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <MX_GPIO_Init+0x4b8>)
 800079a:	f000 fa53 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800079e:	2338      	movs	r3, #56	@ 0x38
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ae:	2306      	movs	r3, #6
 80007b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	4816      	ldr	r0, [pc, #88]	@ (8000814 <MX_GPIO_Init+0x4c4>)
 80007ba:	f000 fa43 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c4:	2312      	movs	r3, #18
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d0:	2304      	movs	r3, #4
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_GPIO_Init+0x4c4>)
 80007dc:	f000 fa32 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e0:	2301      	movs	r3, #1
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007f0:	2302      	movs	r3, #2
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	@ (8000818 <MX_GPIO_Init+0x4c8>)
 80007fc:	f000 fa22 	bl	8000c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3738      	adds	r7, #56	@ 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000c00 	.word	0x48000c00
 800080c:	48001800 	.word	0x48001800
 8000810:	48000800 	.word	0x48000800
 8000814:	48000400 	.word	0x48000400
 8000818:	48001000 	.word	0x48001000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_MspInit+0x44>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6613      	str	r3, [r2, #96]	@ 0x60
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6593      	str	r3, [r2, #88]	@ 0x58
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f893 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800092c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff ffea 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f001 fab5 	bl	8001e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fcc1 	bl	80002ac <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800092c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	08001fd4 	.word	0x08001fd4
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	2000002c 	.word	0x2000002c

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f943 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff ff5e 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_InitTick+0x6c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d023      	beq.n	80009d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_InitTick+0x70>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f941 	bl	8000c2a <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10f      	bne.n	80009ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d809      	bhi.n	80009c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 f919 	bl	8000bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_InitTick+0x74>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e007      	b.n	80009d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e004      	b.n	80009d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e001      	b.n	80009d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000028 	.word	0x20000028

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000028 	.word	0x20000028

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffde 	bl	8000a18 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	@ (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff47 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff5c 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff8e 	bl	8000b30 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffb0 	bl	8000b98 <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e166      	b.n	8000f22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8158 	beq.w	8000f1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d005      	beq.n	8000c84 <HAL_GPIO_Init+0x40>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d130      	bne.n	8000ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	f003 0201 	and.w	r2, r3, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d017      	beq.n	8000d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d123      	bne.n	8000d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	6939      	ldr	r1, [r7, #16]
 8000d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0203 	and.w	r2, r3, #3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80b2 	beq.w	8000f1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b61      	ldr	r3, [pc, #388]	@ (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dbc:	4a60      	ldr	r2, [pc, #384]	@ (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f40 <HAL_GPIO_Init+0x2fc>)
 8000dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8000f44 <HAL_GPIO_Init+0x300>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dfa:	d02b      	beq.n	8000e54 <HAL_GPIO_Init+0x210>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a52      	ldr	r2, [pc, #328]	@ (8000f48 <HAL_GPIO_Init+0x304>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d025      	beq.n	8000e50 <HAL_GPIO_Init+0x20c>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a51      	ldr	r2, [pc, #324]	@ (8000f4c <HAL_GPIO_Init+0x308>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d01f      	beq.n	8000e4c <HAL_GPIO_Init+0x208>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a50      	ldr	r2, [pc, #320]	@ (8000f50 <HAL_GPIO_Init+0x30c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d019      	beq.n	8000e48 <HAL_GPIO_Init+0x204>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4f      	ldr	r2, [pc, #316]	@ (8000f54 <HAL_GPIO_Init+0x310>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x200>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f58 <HAL_GPIO_Init+0x314>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1fc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	@ (8000f5c <HAL_GPIO_Init+0x318>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1f8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f60 <HAL_GPIO_Init+0x31c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1f4>
 8000e34:	2307      	movs	r3, #7
 8000e36:	e00e      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e38:	2308      	movs	r3, #8
 8000e3a:	e00c      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	e00a      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e40:	2305      	movs	r3, #5
 8000e42:	e008      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x212>
 8000e54:	2300      	movs	r3, #0
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e66:	4937      	ldr	r1, [pc, #220]	@ (8000f44 <HAL_GPIO_Init+0x300>)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e98:	4a32      	ldr	r2, [pc, #200]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec2:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eec:	4a1d      	ldr	r2, [pc, #116]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f16:	4a13      	ldr	r2, [pc, #76]	@ (8000f64 <HAL_GPIO_Init+0x320>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f ae91 	bne.w	8000c54 <HAL_GPIO_Init+0x10>
  }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000c00 	.word	0x48000c00
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	48001800 	.word	0x48001800
 8000f60:	48001c00 	.word	0x48001c00
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa8:	d102      	bne.n	8000fb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fae:	e00b      	b.n	8000fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fbe:	d102      	bne.n	8000fc6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc4:	e000      	b.n	8000fc8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000fc6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d141      	bne.n	800106a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff2:	d131      	bne.n	8001058 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	4a46      	ldr	r2, [pc, #280]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100c:	4a41      	ldr	r2, [pc, #260]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001014:	4b40      	ldr	r3, [pc, #256]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2232      	movs	r2, #50	@ 0x32
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4a3f      	ldr	r2, [pc, #252]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102a:	e002      	b.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103e:	d102      	bne.n	8001046 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f2      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001046:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001052:	d158      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e057      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105e:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001068:	e04d      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001070:	d141      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800107e:	d131      	bne.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001086:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001098:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b6:	e002      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ca:	d102      	bne.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f2      	bne.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010de:	d112      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e011      	b.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010f4:	e007      	b.n	8001106 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001104:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40007000 	.word	0x40007000
 8001118:	20000000 	.word	0x20000000
 800111c:	431bde83 	.word	0x431bde83

08001120 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_PWREx_EnableVddIO2+0x1c>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6053      	str	r3, [r2, #4]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f000 bc08 	b.w	8001964 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001154:	4b96      	ldr	r3, [pc, #600]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800115e:	4b94      	ldr	r3, [pc, #592]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80e4 	beq.w	800133e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_RCC_OscConfig+0x4c>
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2b0c      	cmp	r3, #12
 8001180:	f040 808b 	bne.w	800129a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b01      	cmp	r3, #1
 8001188:	f040 8087 	bne.w	800129a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800118c:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x64>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e3df      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4b81      	ldr	r3, [pc, #516]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <HAL_RCC_OscConfig+0x7e>
 80011b4:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011bc:	e005      	b.n	80011ca <HAL_RCC_OscConfig+0x8a>
 80011be:	4b7c      	ldr	r3, [pc, #496]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d223      	bcs.n	8001216 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fd94 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e3c0      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e2:	4b73      	ldr	r3, [pc, #460]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a72      	ldr	r2, [pc, #456]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	496d      	ldr	r1, [pc, #436]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001200:	4b6b      	ldr	r3, [pc, #428]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	4968      	ldr	r1, [pc, #416]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
 8001214:	e025      	b.n	8001262 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001216:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b63      	ldr	r3, [pc, #396]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4960      	ldr	r1, [pc, #384]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001234:	4b5e      	ldr	r3, [pc, #376]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	495b      	ldr	r1, [pc, #364]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd54 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e380      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001262:	f000 fcc1 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001266:	4602      	mov	r2, r0
 8001268:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4950      	ldr	r1, [pc, #320]	@ (80013b4 <HAL_RCC_OscConfig+0x274>)
 8001274:	5ccb      	ldrb	r3, [r1, r3]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	4a4e      	ldr	r2, [pc, #312]	@ (80013b8 <HAL_RCC_OscConfig+0x278>)
 8001280:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001282:	4b4e      	ldr	r3, [pc, #312]	@ (80013bc <HAL_RCC_OscConfig+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb76 	bl	8000978 <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d052      	beq.n	800133c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	e364      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d032      	beq.n	8001308 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012a2:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a42      	ldr	r2, [pc, #264]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fbb3 	bl	8000a18 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b6:	f7ff fbaf 	bl	8000a18 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e34d      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d4:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a35      	ldr	r2, [pc, #212]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4930      	ldr	r1, [pc, #192]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	492b      	ldr	r1, [pc, #172]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
 8001306:	e01a      	b.n	800133e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001308:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb80 	bl	8000a18 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131c:	f7ff fb7c 	bl	8000a18 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e31a      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800132e:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x1dc>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d073      	beq.n	8001432 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x21c>
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d10e      	bne.n	8001374 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d063      	beq.n	8001430 <HAL_RCC_OscConfig+0x2f0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d15f      	bne.n	8001430 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e2f7      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x24c>
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x298>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d114      	bne.n	80013c0 <HAL_RCC_OscConfig+0x280>
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a02      	ldr	r2, [pc, #8]	@ (80013b0 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e013      	b.n	80013d8 <HAL_RCC_OscConfig+0x298>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	08001f8c 	.word	0x08001f8c
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004
 80013c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb1a 	bl	8000a18 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb16 	bl	8000a18 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e2b4      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fa:	4b92      	ldr	r3, [pc, #584]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2a8>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fb06 	bl	8000a18 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fb02 	bl	8000a18 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e2a0      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	4b88      	ldr	r3, [pc, #544]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x2d0>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d060      	beq.n	8001500 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x310>
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d119      	bne.n	800147e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d116      	bne.n	800147e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001450:	4b7c      	ldr	r3, [pc, #496]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x328>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e27d      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b76      	ldr	r3, [pc, #472]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	4973      	ldr	r1, [pc, #460]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147c:	e040      	b.n	8001500 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d023      	beq.n	80014ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001486:	4b6f      	ldr	r3, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6e      	ldr	r2, [pc, #440]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fac1 	bl	8000a18 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fabd 	bl	8000a18 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e25b      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ac:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b62      	ldr	r3, [pc, #392]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	495f      	ldr	r1, [pc, #380]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e018      	b.n	8001500 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fa9d 	bl	8000a18 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa99 	bl	8000a18 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e237      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d03c      	beq.n	8001586 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01c      	beq.n	800154e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001514:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151a:	4a4a      	ldr	r2, [pc, #296]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff fa78 	bl	8000a18 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fa74 	bl	8000a18 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e212      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ef      	beq.n	800152c <HAL_RCC_OscConfig+0x3ec>
 800154c:	e01b      	b.n	8001586 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001554:	4a3b      	ldr	r2, [pc, #236]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fa5b 	bl	8000a18 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fa57 	bl	8000a18 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1f5      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001578:	4b32      	ldr	r3, [pc, #200]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ef      	bne.n	8001566 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80a6 	beq.w	80016e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001598:	4b2a      	ldr	r3, [pc, #168]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	4a26      	ldr	r2, [pc, #152]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b0:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015bc:	2301      	movs	r3, #1
 80015be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_RCC_OscConfig+0x508>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d118      	bne.n	80015fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <HAL_RCC_OscConfig+0x508>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_RCC_OscConfig+0x508>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fa1e 	bl	8000a18 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e0:	f7ff fa1a 	bl	8000a18 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1b8      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_RCC_OscConfig+0x508>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d108      	bne.n	8001618 <HAL_RCC_OscConfig+0x4d8>
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001616:	e029      	b.n	800166c <HAL_RCC_OscConfig+0x52c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d115      	bne.n	800164c <HAL_RCC_OscConfig+0x50c>
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001626:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001636:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <HAL_RCC_OscConfig+0x504>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x52c>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40007000 	.word	0x40007000
 800164c:	4b9d      	ldr	r3, [pc, #628]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a9c      	ldr	r2, [pc, #624]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001662:	4a98      	ldr	r2, [pc, #608]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d016      	beq.n	80016a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f9d0 	bl	8000a18 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f9cc 	bl	8000a18 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e168      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001692:	4b8c      	ldr	r3, [pc, #560]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ed      	beq.n	800167c <HAL_RCC_OscConfig+0x53c>
 80016a0:	e015      	b.n	80016ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a2:	f7ff f9b9 	bl	8000a18 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff f9b5 	bl	8000a18 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e151      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	4b80      	ldr	r3, [pc, #512]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ed      	bne.n	80016aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b7b      	ldr	r3, [pc, #492]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	4a7a      	ldr	r2, [pc, #488]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03c      	beq.n	8001766 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f4:	4b73      	ldr	r3, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80016f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016fa:	4a72      	ldr	r2, [pc, #456]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff f988 	bl	8000a18 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170c:	f7ff f984 	bl	8000a18 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e122      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	4b69      	ldr	r3, [pc, #420]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ef      	beq.n	800170c <HAL_RCC_OscConfig+0x5cc>
 800172c:	e01b      	b.n	8001766 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172e:	4b65      	ldr	r3, [pc, #404]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001730:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001734:	4a63      	ldr	r2, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7ff f96b 	bl	8000a18 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001746:	f7ff f967 	bl	8000a18 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e105      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	4b5a      	ldr	r3, [pc, #360]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800175a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1ef      	bne.n	8001746 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80f9 	beq.w	8001962 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	2b02      	cmp	r3, #2
 8001776:	f040 80cf 	bne.w	8001918 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800177a:	4b52      	ldr	r3, [pc, #328]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	429a      	cmp	r2, r3
 800178c:	d12c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	3b01      	subs	r3, #1
 800179a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d123      	bne.n	80017e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d11b      	bne.n	80017e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d113      	bne.n	80017e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	3b01      	subs	r3, #1
 80017ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d109      	bne.n	80017e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	3b01      	subs	r3, #1
 80017e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d071      	beq.n	80018cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d068      	beq.n	80018c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ee:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017fa:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0ac      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800180a:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2d      	ldr	r2, [pc, #180]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001814:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001816:	f7ff f8ff 	bl	8000a18 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f8fb 	bl	8000a18 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e099      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <HAL_RCC_OscConfig+0x788>)
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800184c:	3a01      	subs	r2, #1
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001856:	0212      	lsls	r2, r2, #8
 8001858:	4311      	orrs	r1, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800185e:	0852      	lsrs	r2, r2, #1
 8001860:	3a01      	subs	r2, #1
 8001862:	0552      	lsls	r2, r2, #21
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800186a:	0852      	lsrs	r2, r2, #1
 800186c:	3a01      	subs	r2, #1
 800186e:	0652      	lsls	r2, r2, #25
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001876:	06d2      	lsls	r2, r2, #27
 8001878:	430a      	orrs	r2, r1
 800187a:	4912      	ldr	r1, [pc, #72]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001880:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0f      	ldr	r2, [pc, #60]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001898:	f7ff f8be 	bl	8000a18 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f8ba 	bl	8000a18 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e058      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <HAL_RCC_OscConfig+0x784>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018be:	e050      	b.n	8001962 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04f      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d144      	bne.n	8001962 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a23      	ldr	r2, [pc, #140]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a20      	ldr	r2, [pc, #128]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018f0:	f7ff f892 	bl	8000a18 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f88e 	bl	8000a18 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e02c      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x7b8>
 8001916:	e024      	b.n	8001962 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d01f      	beq.n	800195e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 8001924:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f875 	bl	8000a18 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f871 	bl	8000a18 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4905      	ldr	r1, [pc, #20]	@ (800196c <HAL_RCC_OscConfig+0x82c>)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x830>)
 8001958:	4013      	ands	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
 800195c:	e001      	b.n	8001962 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	feeefffc 	.word	0xfeeefffc

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e11d      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b90      	ldr	r3, [pc, #576]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b8d      	ldr	r3, [pc, #564]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 020f 	bic.w	r2, r3, #15
 80019a2:	498b      	ldr	r1, [pc, #556]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b89      	ldr	r3, [pc, #548]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e105      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d908      	bls.n	80019ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	497b      	ldr	r1, [pc, #492]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d079      	beq.n	8001aea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d11e      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b75      	ldr	r3, [pc, #468]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0dc      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001a0e:	f000 f9d1 	bl	8001db4 <RCC_GetSysClockFreqFromPLLSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a70      	ldr	r2, [pc, #448]	@ (8001bd8 <HAL_RCC_ClockConfig+0x264>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d946      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d140      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a26:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2e:	4a69      	ldr	r2, [pc, #420]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e035      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d107      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a44:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d115      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b9      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0ad      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0a5      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001a7c:	f000 f8b4 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a55      	ldr	r2, [pc, #340]	@ (8001bd8 <HAL_RCC_ClockConfig+0x264>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d90f      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a88:	4b52      	ldr	r3, [pc, #328]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aa4:	2380      	movs	r3, #128	@ 0x80
 8001aa6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 0203 	bic.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4947      	ldr	r1, [pc, #284]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aba:	f7fe ffad 	bl	8000a18 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	f7fe ffa9 	bl	8000a18 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e077      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 020c 	and.w	r2, r3, #12
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d1eb      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b80      	cmp	r3, #128	@ 0x80
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001af0:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a37      	ldr	r2, [pc, #220]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001afa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d208      	bcs.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	492b      	ldr	r1, [pc, #172]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2a:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d210      	bcs.n	8001b5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 020f 	bic.w	r2, r3, #15
 8001b40:	4923      	ldr	r1, [pc, #140]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_RCC_ClockConfig+0x25c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e036      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4918      	ldr	r1, [pc, #96]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4910      	ldr	r1, [pc, #64]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 f826 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <HAL_RCC_ClockConfig+0x260>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	490c      	ldr	r1, [pc, #48]	@ (8001bdc <HAL_RCC_ClockConfig+0x268>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_RCC_ClockConfig+0x26c>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_RCC_ClockConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fedb 	bl	8000978 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	04c4b400 	.word	0x04c4b400
 8001bdc:	08001f8c 	.word	0x08001f8c
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d121      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d11e      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c44:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10d      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c60:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	e004      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d134      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d003      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0xac>
 8001c8c:	e005      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c90:	617b      	str	r3, [r7, #20]
      break;
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c96:	617b      	str	r3, [r7, #20]
      break;
 8001c98:	e002      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	617b      	str	r3, [r7, #20]
      break;
 8001c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3301      	adds	r3, #1
 8001cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	fb03 f202 	mul.w	r2, r3, r2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	0e5b      	lsrs	r3, r3, #25
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08001f9c 	.word	0x08001f9c
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d0c:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f93e 	bl	8000f98 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
 8001d1e:	e014      	b.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d38:	f7ff f92e 	bl	8000f98 <HAL_PWREx_GetVoltageRange>
 8001d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a1a      	ldr	r2, [pc, #104]	@ (8001dac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d50:	d10b      	bne.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b80      	cmp	r3, #128	@ 0x80
 8001d56:	d913      	bls.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d5c:	d902      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e00d      	b.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e00a      	b.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d6e:	d902      	bls.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001d70:	2302      	movs	r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e004      	b.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b70      	cmp	r3, #112	@ 0x70
 8001d7a:	d101      	bne.n	8001d80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 020f 	bic.w	r2, r3, #15
 8001d88:	4909      	ldr	r1, [pc, #36]	@ (8001db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40022000 	.word	0x40022000

08001db4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dba:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d00b      	beq.n	8001de2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d825      	bhi.n	8001e1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d008      	beq.n	8001de8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d11f      	bne.n	8001e1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dde:	613b      	str	r3, [r7, #16]
    break;
 8001de0:	e01f      	b.n	8001e22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001de2:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001de4:	613b      	str	r3, [r7, #16]
    break;
 8001de6:	e01c      	b.n	8001e22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e005      	b.n	8001e10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001e10:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	613b      	str	r3, [r7, #16]
    break;
 8001e1a:	e002      	b.n	8001e22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
    break;
 8001e20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	fb03 f202 	mul.w	r2, r3, r2
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0e5b      	lsrs	r3, r3, #25
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e62:	683b      	ldr	r3, [r7, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	08001f9c 	.word	0x08001f9c

08001e80 <memset>:
 8001e80:	4402      	add	r2, r0
 8001e82:	4603      	mov	r3, r0
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d100      	bne.n	8001e8a <memset+0xa>
 8001e88:	4770      	bx	lr
 8001e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8e:	e7f9      	b.n	8001e84 <memset+0x4>

08001e90 <__libc_init_array>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4d0d      	ldr	r5, [pc, #52]	@ (8001ec8 <__libc_init_array+0x38>)
 8001e94:	4c0d      	ldr	r4, [pc, #52]	@ (8001ecc <__libc_init_array+0x3c>)
 8001e96:	1b64      	subs	r4, r4, r5
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	42a6      	cmp	r6, r4
 8001e9e:	d109      	bne.n	8001eb4 <__libc_init_array+0x24>
 8001ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ed0 <__libc_init_array+0x40>)
 8001ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8001ed4 <__libc_init_array+0x44>)
 8001ea4:	f000 f826 	bl	8001ef4 <_init>
 8001ea8:	1b64      	subs	r4, r4, r5
 8001eaa:	10a4      	asrs	r4, r4, #2
 8001eac:	2600      	movs	r6, #0
 8001eae:	42a6      	cmp	r6, r4
 8001eb0:	d105      	bne.n	8001ebe <__libc_init_array+0x2e>
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}
 8001eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb8:	4798      	blx	r3
 8001eba:	3601      	adds	r6, #1
 8001ebc:	e7ee      	b.n	8001e9c <__libc_init_array+0xc>
 8001ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec2:	4798      	blx	r3
 8001ec4:	3601      	adds	r6, #1
 8001ec6:	e7f2      	b.n	8001eae <__libc_init_array+0x1e>
 8001ec8:	08001fcc 	.word	0x08001fcc
 8001ecc:	08001fcc 	.word	0x08001fcc
 8001ed0:	08001fcc 	.word	0x08001fcc
 8001ed4:	08001fd0 	.word	0x08001fd0

08001ed8 <memcpy>:
 8001ed8:	440a      	add	r2, r1
 8001eda:	4291      	cmp	r1, r2
 8001edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ee0:	d100      	bne.n	8001ee4 <memcpy+0xc>
 8001ee2:	4770      	bx	lr
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001eee:	4291      	cmp	r1, r2
 8001ef0:	d1f9      	bne.n	8001ee6 <memcpy+0xe>
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <_init>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr

08001f00 <_fini>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr
