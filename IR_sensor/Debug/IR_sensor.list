
IR_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043fc  080043fc  000053fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800443c  0800443c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800443c  0800443c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800443c  0800443c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0000543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004440  08004440  00005440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004444  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08004450  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08004450  00006094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001755  00000000  00000000  0000ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000105e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b6  00000000  00000000  00010ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002933b  00000000  00000000  00011596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b63  00000000  00000000  0003a8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a08  00000000  00000000  00044434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  00147e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0014a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080043e4 	.word	0x080043e4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080043e4 	.word	0x080043e4

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	0000      	movs	r0, r0
	...

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fc62 	bl	800130e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f84f 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f8f7 	bl	8000c40 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a52:	f000 f891 	bl	8000b78 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  uint32_t ADC_VAL = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
	  	  HAL_ADC_Start(&hadc1);//start conversion
 8000a5a:	4823      	ldr	r0, [pc, #140]	@ (8000ae8 <main+0xa8>)
 8000a5c:	f001 f810 	bl	8001a80 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	4820      	ldr	r0, [pc, #128]	@ (8000ae8 <main+0xa8>)
 8000a66:	f001 f86e 	bl	8001b46 <HAL_ADC_PollForConversion>
	  	  ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
 8000a6a:	481f      	ldr	r0, [pc, #124]	@ (8000ae8 <main+0xa8>)
 8000a6c:	f001 f8fa 	bl	8001c64 <HAL_ADC_GetValue>
 8000a70:	6078      	str	r0, [r7, #4]
	  	  float voltage = (3.3* ADC_VAL)/4026;
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fd06 	bl	8000484 <__aeabi_ui2d>
 8000a78:	a315      	add	r3, pc, #84	@ (adr r3, 8000ad0 <main+0x90>)
 8000a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7e:	f7ff fd7b 	bl	8000578 <__aeabi_dmul>
 8000a82:	4602      	mov	r2, r0
 8000a84:	460b      	mov	r3, r1
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	a313      	add	r3, pc, #76	@ (adr r3, 8000ad8 <main+0x98>)
 8000a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a90:	f7ff fe9c 	bl	80007cc <__aeabi_ddiv>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4610      	mov	r0, r2
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f7ff ff7e 	bl	800099c <__aeabi_d2f>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	603b      	str	r3, [r7, #0]
	  	  voltage +=0.1;
 8000aa4:	6838      	ldr	r0, [r7, #0]
 8000aa6:	f7ff fd0f 	bl	80004c8 <__aeabi_f2d>
 8000aaa:	a30d      	add	r3, pc, #52	@ (adr r3, 8000ae0 <main+0xa0>)
 8000aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab0:	f7ff fbac 	bl	800020c <__adddf3>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	f7ff ff6e 	bl	800099c <__aeabi_d2f>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	603b      	str	r3, [r7, #0]
	  	  HAL_Delay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac8:	f000 fc96 	bl	80013f8 <HAL_Delay>
  {
 8000acc:	bf00      	nop
 8000ace:	e7c2      	b.n	8000a56 <main+0x16>
 8000ad0:	66666666 	.word	0x66666666
 8000ad4:	400a6666 	.word	0x400a6666
 8000ad8:	00000000 	.word	0x00000000
 8000adc:	40af7400 	.word	0x40af7400
 8000ae0:	9999999a 	.word	0x9999999a
 8000ae4:	3fb99999 	.word	0x3fb99999
 8000ae8:	20000028 	.word	0x20000028

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b096      	sub	sp, #88	@ 0x58
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2244      	movs	r2, #68	@ 0x44
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fc46 	bl	800438c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b12:	f001 ffcf 	bl	8002ab4 <HAL_PWREx_ControlVoltageScaling>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b1c:	f000 fac0 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b20:	2310      	movs	r3, #16
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b2c:	2360      	movs	r3, #96	@ 0x60
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f002 f86f 	bl	8002c1c <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b44:	f000 faac 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fc75 	bl	8003450 <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b6c:	f000 fa98 	bl	80010a0 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3758      	adds	r7, #88	@ 0x58
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000b90:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <MX_ADC1_Init+0xc0>)
 8000b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000b94:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000b96:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf0:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000bf2:	f000 fdff 	bl	80017f4 <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000bfc:	f000 fa50 	bl	80010a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_ADC1_Init+0xc4>)
 8000c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2306      	movs	r3, #6
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c08:	2307      	movs	r3, #7
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0c:	237f      	movs	r3, #127	@ 0x7f
 8000c0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c10:	2304      	movs	r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_ADC1_Init+0xbc>)
 8000c1e:	f001 f82f 	bl	8001c80 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000c28:	f000 fa3a 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000028 	.word	0x20000028
 8000c38:	50040000 	.word	0x50040000
 8000c3c:	04300002 	.word	0x04300002

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	4bb1      	ldr	r3, [pc, #708]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4ab0      	ldr	r2, [pc, #704]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4bae      	ldr	r3, [pc, #696]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	4bab      	ldr	r3, [pc, #684]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4aaa      	ldr	r2, [pc, #680]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4ba8      	ldr	r3, [pc, #672]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	4ba5      	ldr	r3, [pc, #660]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4aa4      	ldr	r2, [pc, #656]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4ba2      	ldr	r3, [pc, #648]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	4b9f      	ldr	r3, [pc, #636]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a9e      	ldr	r2, [pc, #632]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b9c      	ldr	r3, [pc, #624]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b99      	ldr	r3, [pc, #612]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a98      	ldr	r2, [pc, #608]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b96      	ldr	r3, [pc, #600]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b93      	ldr	r3, [pc, #588]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a92      	ldr	r2, [pc, #584]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b90      	ldr	r3, [pc, #576]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a8c      	ldr	r2, [pc, #560]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b87      	ldr	r3, [pc, #540]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a86      	ldr	r2, [pc, #536]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b84      	ldr	r3, [pc, #528]	@ (8000f1c <MX_GPIO_Init+0x2dc>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d16:	f001 ff71 	bl	8002bfc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d2a:	230d      	movs	r3, #13
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	487a      	ldr	r0, [pc, #488]	@ (8000f20 <MX_GPIO_Init+0x2e0>)
 8000d36:	f001 fd0b 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4873      	ldr	r0, [pc, #460]	@ (8000f24 <MX_GPIO_Init+0x2e4>)
 8000d56:	f001 fcfb 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	486b      	ldr	r0, [pc, #428]	@ (8000f24 <MX_GPIO_Init+0x2e4>)
 8000d76:	f001 fceb 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f001 fcda 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d9c:	23f0      	movs	r3, #240	@ 0xf0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dac:	2305      	movs	r3, #5
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f001 fcc9 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4853      	ldr	r0, [pc, #332]	@ (8000f28 <MX_GPIO_Init+0x2e8>)
 8000dda:	f001 fcb9 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000dde:	2344      	movs	r3, #68	@ 0x44
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	2303      	movs	r3, #3
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	484d      	ldr	r0, [pc, #308]	@ (8000f28 <MX_GPIO_Init+0x2e8>)
 8000df2:	f001 fcad 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000df6:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4843      	ldr	r0, [pc, #268]	@ (8000f20 <MX_GPIO_Init+0x2e0>)
 8000e14:	f001 fc9c 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e18:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	483a      	ldr	r0, [pc, #232]	@ (8000f20 <MX_GPIO_Init+0x2e0>)
 8000e36:	f001 fc8b 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4834      	ldr	r0, [pc, #208]	@ (8000f28 <MX_GPIO_Init+0x2e8>)
 8000e58:	f001 fc7a 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e5c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e6e:	230d      	movs	r3, #13
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	@ (8000f28 <MX_GPIO_Init+0x2e8>)
 8000e7a:	f001 fc69 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e90:	230e      	movs	r3, #14
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4823      	ldr	r0, [pc, #140]	@ (8000f28 <MX_GPIO_Init+0x2e8>)
 8000e9c:	f001 fc58 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481b      	ldr	r0, [pc, #108]	@ (8000f2c <MX_GPIO_Init+0x2ec>)
 8000ebe:	f001 fc47 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ec2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <MX_GPIO_Init+0x2ec>)
 8000ee0:	f001 fc36 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ee4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <MX_GPIO_Init+0x2f0>)
 8000f02:	f001 fc25 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f06:	2340      	movs	r3, #64	@ 0x40
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f16:	230d      	movs	r3, #13
 8000f18:	e00c      	b.n	8000f34 <MX_GPIO_Init+0x2f4>
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48001000 	.word	0x48001000
 8000f24:	48001400 	.word	0x48001400
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000c00 	.word	0x48000c00
 8000f30:	48001800 	.word	0x48001800
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4854      	ldr	r0, [pc, #336]	@ (8001090 <MX_GPIO_Init+0x450>)
 8000f3e:	f001 fc07 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f52:	2302      	movs	r3, #2
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	484c      	ldr	r0, [pc, #304]	@ (8001090 <MX_GPIO_Init+0x450>)
 8000f5e:	f001 fbf7 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f62:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f74:	230c      	movs	r3, #12
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4844      	ldr	r0, [pc, #272]	@ (8001090 <MX_GPIO_Init+0x450>)
 8000f80:	f001 fbe6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000f84:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f96:	230a      	movs	r3, #10
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f001 fbd4 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f001 fbc6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd4:	2309      	movs	r3, #9
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	482d      	ldr	r0, [pc, #180]	@ (8001094 <MX_GPIO_Init+0x454>)
 8000fe0:	f001 fbb6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4825      	ldr	r0, [pc, #148]	@ (8001094 <MX_GPIO_Init+0x454>)
 8001000:	f001 fba6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001004:	2378      	movs	r3, #120	@ 0x78
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001014:	2307      	movs	r3, #7
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	481d      	ldr	r0, [pc, #116]	@ (8001094 <MX_GPIO_Init+0x454>)
 8001020:	f001 fb96 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001024:	2338      	movs	r3, #56	@ 0x38
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001034:	2306      	movs	r3, #6
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4816      	ldr	r0, [pc, #88]	@ (8001098 <MX_GPIO_Init+0x458>)
 8001040:	f001 fb86 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001044:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104a:	2312      	movs	r3, #18
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001056:	2304      	movs	r3, #4
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_GPIO_Init+0x458>)
 8001062:	f001 fb75 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001066:	2301      	movs	r3, #1
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001076:	2302      	movs	r3, #2
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4806      	ldr	r0, [pc, #24]	@ (800109c <MX_GPIO_Init+0x45c>)
 8001082:	f001 fb65 	bl	8002750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3738      	adds	r7, #56	@ 0x38
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48000400 	.word	0x48000400
 800109c:	48001000 	.word	0x48001000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_MspInit+0x44>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <HAL_MspInit+0x44>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <HAL_MspInit+0x44>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_MspInit+0x44>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0b0      	sub	sp, #192	@ 0xc0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2294      	movs	r2, #148	@ 0x94
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f003 f939 	bl	800438c <memset>
  if(hadc->Instance==ADC1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a42      	ldr	r2, [pc, #264]	@ (8001228 <HAL_ADC_MspInit+0x134>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d17d      	bne.n	8001220 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001128:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800112a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800112e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800113a:	2310      	movs	r3, #16
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800114a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fc01 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001160:	f7ff ff9e 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <HAL_ADC_MspInit+0x138>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a30      	ldr	r2, [pc, #192]	@ (800122c <HAL_ADC_MspInit+0x138>)
 800116a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001170:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <HAL_ADC_MspInit+0x138>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_ADC_MspInit+0x138>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	4a2a      	ldr	r2, [pc, #168]	@ (800122c <HAL_ADC_MspInit+0x138>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <HAL_ADC_MspInit+0x138>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b25      	ldr	r3, [pc, #148]	@ (800122c <HAL_ADC_MspInit+0x138>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a24      	ldr	r2, [pc, #144]	@ (800122c <HAL_ADC_MspInit+0x138>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_ADC_MspInit+0x138>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_ADC_MspInit+0x138>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <HAL_ADC_MspInit+0x138>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_ADC_MspInit+0x138>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011c4:	233f      	movs	r3, #63	@ 0x3f
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011ca:	230b      	movs	r3, #11
 80011cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011da:	4619      	mov	r1, r3
 80011dc:	4814      	ldr	r0, [pc, #80]	@ (8001230 <HAL_ADC_MspInit+0x13c>)
 80011de:	f001 fab7 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011e2:	230a      	movs	r3, #10
 80011e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e8:	230b      	movs	r3, #11
 80011ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f001 faa7 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001208:	230b      	movs	r3, #11
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <HAL_ADC_MspInit+0x140>)
 800121c:	f001 fa98 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001220:	bf00      	nop
 8001222:	37c0      	adds	r7, #192	@ 0xc0
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	50040000 	.word	0x50040000
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f893 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff ffea 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f003 f857 	bl	800439c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff fba7 	bl	8000a40 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001300:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 8001304:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001308:	20000094 	.word	0x20000094

0800130c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_IRQHandler>

0800130e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f001 f9e5 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f80e 	bl	8001340 <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff febc 	bl	80010ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	79fb      	ldrb	r3, [r7, #7]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_InitTick+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_InitTick+0x70>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f9e3 	bl	8002736 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d809      	bhi.n	8001390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f001 f9bb 	bl	80026fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001388:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_InitTick+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e007      	b.n	80013a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e004      	b.n	80013a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e001      	b.n	80013a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000090 	.word	0x20000090

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000090 	.word	0x20000090

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	609a      	str	r2, [r3, #8]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3360      	adds	r3, #96	@ 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <LL_ADC_SetOffset+0x44>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014e0:	bf00      	nop
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	03fff000 	.word	0x03fff000

080014f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3360      	adds	r3, #96	@ 0x60
 80014fe:	461a      	mov	r2, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3360      	adds	r3, #96	@ 0x60
 800152c:	461a      	mov	r2, r3
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	615a      	str	r2, [r3, #20]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800159e:	b480      	push	{r7}
 80015a0:	b087      	sub	sp, #28
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3330      	adds	r3, #48	@ 0x30
 80015ae:	461a      	mov	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	4413      	add	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	211f      	movs	r1, #31
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0e9b      	lsrs	r3, r3, #26
 80015d6:	f003 011f 	and.w	r1, r3, #31
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3314      	adds	r3, #20
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0e5b      	lsrs	r3, r3, #25
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	0d1b      	lsrs	r3, r3, #20
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2107      	movs	r1, #7
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	0d1b      	lsrs	r3, r3, #20
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	431a      	orrs	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0318 	and.w	r3, r3, #24
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001670:	40d9      	lsrs	r1, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	400b      	ands	r3, r1
 8001676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	0007ffff 	.word	0x0007ffff

08001694 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6093      	str	r3, [r2, #8]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800171c:	d101      	bne.n	8001722 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <LL_ADC_IsEnabled+0x18>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_ADC_IsEnabled+0x1a>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800178e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001792:	f043 0204 	orr.w	r2, r3, #4
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d101      	bne.n	80017be <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d101      	bne.n	80017e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e129      	b.n	8001a62 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fc69 	bl	80010f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff3f 	bl	80016b8 <LL_ADC_IsDeepPowerDownEnabled>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff25 	bl	8001694 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff5a 	bl	8001708 <LL_ADC_IsInternalRegulatorEnabled>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff3e 	bl	80016e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001864:	4b81      	ldr	r3, [pc, #516]	@ (8001a6c <HAL_ADC_Init+0x278>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	4a81      	ldr	r2, [pc, #516]	@ (8001a70 <HAL_ADC_Init+0x27c>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	3301      	adds	r3, #1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001878:	e002      	b.n	8001880 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3b01      	subs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff3c 	bl	8001708 <LL_ADC_IsInternalRegulatorEnabled>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff75 	bl	80017a6 <LL_ADC_REG_IsConversionOngoing>
 80018bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80c2 	bne.w	8001a50 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80be 	bne.w	8001a50 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018dc:	f043 0202 	orr.w	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff35 	bl	8001758 <LL_ADC_IsEnabled>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10b      	bne.n	800190c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f4:	485f      	ldr	r0, [pc, #380]	@ (8001a74 <HAL_ADC_Init+0x280>)
 80018f6:	f7ff ff2f 	bl	8001758 <LL_ADC_IsEnabled>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4619      	mov	r1, r3
 8001906:	485c      	ldr	r0, [pc, #368]	@ (8001a78 <HAL_ADC_Init+0x284>)
 8001908:	f7ff fd9a 	bl	8001440 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e5b      	ldrb	r3, [r3, #25]
 8001910:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001916:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800191c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001922:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d106      	bne.n	8001948 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	045b      	lsls	r3, r3, #17
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <HAL_ADC_Init+0x288>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	430b      	orrs	r3, r1
 8001976:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff25 	bl	80017cc <LL_ADC_INJ_IsConversionOngoing>
 8001982:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d140      	bne.n	8001a0c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d13d      	bne.n	8001a0c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800199a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019b2:	f023 0306 	bic.w	r3, r3, #6
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	430b      	orrs	r3, r1
 80019be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d118      	bne.n	80019fc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ec:	430a      	orrs	r2, r1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10c      	bne.n	8001a2e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f023 010f 	bic.w	r1, r3, #15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	1e5a      	subs	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a2c:	e007      	b.n	8001a3e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 020f 	bic.w	r2, r2, #15
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	f023 0303 	bic.w	r3, r3, #3
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a4e:	e007      	b.n	8001a60 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	f043 0210 	orr.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	053e2d63 	.word	0x053e2d63
 8001a74:	50040000 	.word	0x50040000
 8001a78:	50040300 	.word	0x50040300
 8001a7c:	fff0c007 	.word	0xfff0c007

08001a80 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe8a 	bl	80017a6 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d14f      	bne.n	8001b38 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start+0x26>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e04b      	b.n	8001b3e <HAL_ADC_Start+0xbe>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fce2 	bl	8002478 <ADC_Enable>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d137      	bne.n	8001b2e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae4:	f023 0206 	bic.w	r2, r3, #6
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aec:	e002      	b.n	8001af4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	221c      	movs	r2, #28
 8001afa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe29 	bl	800177e <LL_ADC_REG_StartConversion>
 8001b2c:	e006      	b.n	8001b3c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001b36:	e001      	b.n	8001b3c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d102      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e010      	b.n	8001b80 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e06f      	b.n	8001c5c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b80:	f7ff fc2e 	bl	80013e0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b86:	e021      	b.n	8001bcc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d01d      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b90:	f7ff fc26 	bl	80013e0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d302      	bcc.n	8001ba6 <HAL_ADC_PollForConversion+0x60>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d112      	bne.n	8001bcc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e047      	b.n	8001c5c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0d6      	beq.n	8001b88 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fcc4 	bl	8001578 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01c      	beq.n	8001c30 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e5b      	ldrb	r3, [r3, #25]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d111      	bne.n	8001c30 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d104      	bne.n	8001c48 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2208      	movs	r2, #8
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e008      	b.n	8001c5a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b6      	sub	sp, #216	@ 0xd8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x22>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e3d5      	b.n	800244e <HAL_ADC_ConfigChannel+0x7ce>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fd79 	bl	80017a6 <LL_ADC_REG_IsConversionOngoing>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 83ba 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d824      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	3b02      	subs	r3, #2
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d81b      	bhi.n	8001d0e <HAL_ADC_ConfigChannel+0x8e>
 8001cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cdc <HAL_ADC_ConfigChannel+0x5c>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001cf5 	.word	0x08001cf5
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d05 	.word	0x08001d05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001cec:	230c      	movs	r3, #12
 8001cee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cf2:	e010      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001cf4:	2312      	movs	r3, #18
 8001cf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001cfa:	e00c      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001cfc:	2318      	movs	r3, #24
 8001cfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d02:	e008      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d0e:	2306      	movs	r3, #6
 8001d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001d14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d24:	f7ff fc3b 	bl	800159e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fd3a 	bl	80017a6 <LL_ADC_REG_IsConversionOngoing>
 8001d32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fd46 	bl	80017cc <LL_ADC_INJ_IsConversionOngoing>
 8001d40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 81bf 	bne.w	80020cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 81ba 	bne.w	80020cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d60:	d10f      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fc42 	bl	80015f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fbe9 	bl	8001552 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d80:	e00e      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7ff fc31 	bl	80015f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fbd9 	bl	8001552 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6919      	ldr	r1, [r3, #16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001dd2:	f7ff fb69 	bl	80014a8 <LL_ADC_SetOffset>
 8001dd6:	e179      	b.n	80020cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb86 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x184>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fb7b 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	e01e      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x1c2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fb70 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e32:	2320      	movs	r3, #32
 8001e34:	e004      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x1da>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	e018      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x20c>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001e76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e004      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001e82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fb3f 	bl	800151c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb23 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x24a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fb18 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	e01e      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x288>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fb0d 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ee0:	fa93 f3a3 	rbit	r3, r3
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001ef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e004      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001efc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2a0>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	e018      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x2d2>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e004      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d106      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fadc 	bl	800151c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fac0 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10a      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x310>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fab5 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	e01e      	b.n	8001fce <HAL_ADC_ConfigChannel+0x34e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2102      	movs	r1, #2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff faaa 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	e004      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x366>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	e014      	b.n	8002010 <HAL_ADC_ConfigChannel+0x390>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002002:	2320      	movs	r3, #32
 8002004:	e004      	b.n	8002010 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002006:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	2102      	movs	r1, #2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fa7d 	bl	800151c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2103      	movs	r1, #3
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fa61 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10a      	bne.n	800204e <HAL_ADC_ConfigChannel+0x3ce>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2103      	movs	r1, #3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fa56 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	e017      	b.n	800207e <HAL_ADC_ConfigChannel+0x3fe>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2103      	movs	r1, #3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fa4b 	bl	80014f0 <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002068:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800206a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x416>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	e011      	b.n	80020ba <HAL_ADC_ConfigChannel+0x43a>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80020a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80020a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80020b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	2103      	movs	r1, #3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fa28 	bl	800151c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fb41 	bl	8001758 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 813f 	bne.w	800235c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f7ff faae 	bl	800164c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002330 <HAL_ADC_ConfigChannel+0x6b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	f040 8130 	bne.w	800235c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x4a4>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	3301      	adds	r3, #1
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	2b09      	cmp	r3, #9
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e019      	b.n	8002158 <HAL_ADC_ConfigChannel+0x4d8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002134:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e003      	b.n	8002148 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2b09      	cmp	r3, #9
 8002150:	bf94      	ite	ls
 8002152:	2301      	movls	r3, #1
 8002154:	2300      	movhi	r3, #0
 8002156:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002158:	2b00      	cmp	r3, #0
 800215a:	d079      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x4f8>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	3301      	adds	r3, #1
 8002170:	069b      	lsls	r3, r3, #26
 8002172:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002176:	e015      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x524>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002188:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800218a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e003      	b.n	800219c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	069b      	lsls	r3, r3, #26
 80021a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x544>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	e017      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x574>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e003      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80021e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	ea42 0103 	orr.w	r1, r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <HAL_ADC_ConfigChannel+0x59a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	051b      	lsls	r3, r3, #20
 8002218:	e018      	b.n	800224c <HAL_ADC_ConfigChannel+0x5cc>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800222c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e003      	b.n	800223e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224c:	430b      	orrs	r3, r1
 800224e:	e080      	b.n	8002352 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_ADC_ConfigChannel+0x5ec>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	3301      	adds	r3, #1
 8002264:	069b      	lsls	r3, r3, #26
 8002266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226a:	e015      	b.n	8002298 <HAL_ADC_ConfigChannel+0x618>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x638>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	e017      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x668>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	61bb      	str	r3, [r7, #24]
  return result;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e003      	b.n	80022dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x694>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	3b1e      	subs	r3, #30
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002312:	e01d      	b.n	8002350 <HAL_ADC_ConfigChannel+0x6d0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	60fb      	str	r3, [r7, #12]
  return result;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e005      	b.n	800233c <HAL_ADC_ConfigChannel+0x6bc>
 8002330:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	3b1e      	subs	r3, #30
 800234a:	051b      	lsls	r3, r3, #20
 800234c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002350:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	4619      	mov	r1, r3
 8002358:	f7ff f94d 	bl	80015f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b3d      	ldr	r3, [pc, #244]	@ (8002458 <HAL_ADC_ConfigChannel+0x7d8>)
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d06c      	beq.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002368:	483c      	ldr	r0, [pc, #240]	@ (800245c <HAL_ADC_ConfigChannel+0x7dc>)
 800236a:	f7ff f88f 	bl	800148c <LL_ADC_GetCommonPathInternalCh>
 800236e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a3a      	ldr	r2, [pc, #232]	@ (8002460 <HAL_ADC_ConfigChannel+0x7e0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d127      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d121      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a35      	ldr	r2, [pc, #212]	@ (8002464 <HAL_ADC_ConfigChannel+0x7e4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d157      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002392:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002396:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800239a:	4619      	mov	r1, r3
 800239c:	482f      	ldr	r0, [pc, #188]	@ (800245c <HAL_ADC_ConfigChannel+0x7dc>)
 800239e:	f7ff f862 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a2:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <HAL_ADC_ConfigChannel+0x7e8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	4a30      	ldr	r2, [pc, #192]	@ (800246c <HAL_ADC_ConfigChannel+0x7ec>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ca:	e03a      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a27      	ldr	r2, [pc, #156]	@ (8002470 <HAL_ADC_ConfigChannel+0x7f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d113      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_ADC_ConfigChannel+0x7e4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d12a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f4:	4619      	mov	r1, r3
 80023f6:	4819      	ldr	r0, [pc, #100]	@ (800245c <HAL_ADC_ConfigChannel+0x7dc>)
 80023f8:	f7ff f835 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fc:	e021      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1c      	ldr	r2, [pc, #112]	@ (8002474 <HAL_ADC_ConfigChannel+0x7f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d11c      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800240c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d116      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <HAL_ADC_ConfigChannel+0x7e4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d111      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002422:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002426:	4619      	mov	r1, r3
 8002428:	480c      	ldr	r0, [pc, #48]	@ (800245c <HAL_ADC_ConfigChannel+0x7dc>)
 800242a:	f7ff f81c 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
 800242e:	e008      	b.n	8002442 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800244a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800244e:	4618      	mov	r0, r3
 8002450:	37d8      	adds	r7, #216	@ 0xd8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	80080000 	.word	0x80080000
 800245c:	50040300 	.word	0x50040300
 8002460:	c7520000 	.word	0xc7520000
 8002464:	50040000 	.word	0x50040000
 8002468:	20000000 	.word	0x20000000
 800246c:	053e2d63 	.word	0x053e2d63
 8002470:	cb840000 	.word	0xcb840000
 8002474:	80000001 	.word	0x80000001

08002478 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f965 	bl	8001758 <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d169      	bne.n	8002568 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <ADC_Enable+0xfc>)
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00d      	beq.n	80024be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e055      	b.n	800256a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f934 	bl	8001730 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024c8:	482b      	ldr	r0, [pc, #172]	@ (8002578 <ADC_Enable+0x100>)
 80024ca:	f7fe ffdf 	bl	800148c <LL_ADC_GetCommonPathInternalCh>
 80024ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d8:	4b28      	ldr	r3, [pc, #160]	@ (800257c <ADC_Enable+0x104>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	4a28      	ldr	r2, [pc, #160]	@ (8002580 <ADC_Enable+0x108>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024f2:	e002      	b.n	80024fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002500:	f7fe ff6e 	bl	80013e0 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002506:	e028      	b.n	800255a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f923 	bl	8001758 <LL_ADC_IsEnabled>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d104      	bne.n	8002522 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f907 	bl	8001730 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002522:	f7fe ff5d 	bl	80013e0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d914      	bls.n	800255a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d00d      	beq.n	800255a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e007      	b.n	800256a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d1cf      	bne.n	8002508 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	8000003f 	.word	0x8000003f
 8002578:	50040300 	.word	0x50040300
 800257c:	20000000 	.word	0x20000000
 8002580:	053e2d63 	.word	0x053e2d63

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	@ (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff47 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff5c 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffb0 	bl	80026a4 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e166      	b.n	8002a2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8158 	beq.w	8002a28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d005      	beq.n	8002790 <HAL_GPIO_Init+0x40>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d130      	bne.n	80027f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c6:	2201      	movs	r2, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0201 	and.w	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d017      	beq.n	800282e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d123      	bne.n	8002882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	6939      	ldr	r1, [r7, #16]
 800287e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80b2 	beq.w	8002a28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c4:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c8:	4a60      	ldr	r2, [pc, #384]	@ (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80028d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a4c <HAL_GPIO_Init+0x2fc>)
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a50 <HAL_GPIO_Init+0x300>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	220f      	movs	r2, #15
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002906:	d02b      	beq.n	8002960 <HAL_GPIO_Init+0x210>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a52      	ldr	r2, [pc, #328]	@ (8002a54 <HAL_GPIO_Init+0x304>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d025      	beq.n	800295c <HAL_GPIO_Init+0x20c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a51      	ldr	r2, [pc, #324]	@ (8002a58 <HAL_GPIO_Init+0x308>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d01f      	beq.n	8002958 <HAL_GPIO_Init+0x208>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a50      	ldr	r2, [pc, #320]	@ (8002a5c <HAL_GPIO_Init+0x30c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d019      	beq.n	8002954 <HAL_GPIO_Init+0x204>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <HAL_GPIO_Init+0x310>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_GPIO_Init+0x200>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a64 <HAL_GPIO_Init+0x314>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00d      	beq.n	800294c <HAL_GPIO_Init+0x1fc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_GPIO_Init+0x318>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <HAL_GPIO_Init+0x1f8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a6c <HAL_GPIO_Init+0x31c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_GPIO_Init+0x1f4>
 8002940:	2307      	movs	r3, #7
 8002942:	e00e      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002944:	2308      	movs	r3, #8
 8002946:	e00c      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002948:	2306      	movs	r3, #6
 800294a:	e00a      	b.n	8002962 <HAL_GPIO_Init+0x212>
 800294c:	2305      	movs	r3, #5
 800294e:	e008      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002950:	2304      	movs	r3, #4
 8002952:	e006      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002954:	2303      	movs	r3, #3
 8002956:	e004      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002958:	2302      	movs	r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x212>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_GPIO_Init+0x212>
 8002960:	2300      	movs	r3, #0
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	f002 0203 	and.w	r2, r2, #3
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4093      	lsls	r3, r2
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002972:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_GPIO_Init+0x300>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002980:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a4:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ce:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029d4:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a22:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <HAL_GPIO_Init+0x320>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f47f ae91 	bne.w	8002760 <HAL_GPIO_Init+0x10>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	48000400 	.word	0x48000400
 8002a58:	48000800 	.word	0x48000800
 8002a5c:	48000c00 	.word	0x48000c00
 8002a60:	48001000 	.word	0x48001000
 8002a64:	48001400 	.word	0x48001400
 8002a68:	48001800 	.word	0x48001800
 8002a6c:	48001c00 	.word	0x48001c00
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a78:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a84:	d102      	bne.n	8002a8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a8a:	e00b      	b.n	8002aa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aa0:	e000      	b.n	8002aa4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002aa2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40007000 	.word	0x40007000

08002ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d141      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ace:	d131      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad0:	4b47      	ldr	r3, [pc, #284]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad6:	4a46      	ldr	r2, [pc, #280]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002adc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae0:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ae8:	4a41      	ldr	r2, [pc, #260]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002af0:	4b40      	ldr	r3, [pc, #256]	@ (8002bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2232      	movs	r2, #50	@ 0x32
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a3f      	ldr	r2, [pc, #252]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b06:	e002      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	4b38      	ldr	r3, [pc, #224]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f2      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b22:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2e:	d158      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e057      	b.n	8002be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b44:	e04d      	b.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b4c:	d141      	bne.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b4e:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b5a:	d131      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b5c:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b62:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b74:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2232      	movs	r2, #50	@ 0x32
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b92:	e002      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d102      	bne.n	8002bae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f2      	bne.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d112      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e011      	b.n	8002be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bd0:	e007      	b.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bd2:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002be0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0a:	6053      	str	r3, [r2, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000

08002c1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f000 bc08 	b.w	8003440 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c30:	4b96      	ldr	r3, [pc, #600]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3a:	4b94      	ldr	r3, [pc, #592]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80e4 	beq.w	8002e1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4c>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	f040 808b 	bne.w	8002d76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f040 8087 	bne.w	8002d76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c68:	4b88      	ldr	r3, [pc, #544]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x64>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e3df      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	4b81      	ldr	r3, [pc, #516]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_RCC_OscConfig+0x7e>
 8002c90:	4b7e      	ldr	r3, [pc, #504]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c98:	e005      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8a>
 8002c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d223      	bcs.n	8002cf2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd94 	bl	80037dc <RCC_SetFlashLatencyFromMSIRange>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e3c0      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbe:	4b73      	ldr	r3, [pc, #460]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a72      	ldr	r2, [pc, #456]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b70      	ldr	r3, [pc, #448]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	496d      	ldr	r1, [pc, #436]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4968      	ldr	r1, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	e025      	b.n	8002d3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b66      	ldr	r3, [pc, #408]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a65      	ldr	r2, [pc, #404]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002cf8:	f043 0308 	orr.w	r3, r3, #8
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4960      	ldr	r1, [pc, #384]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d10:	4b5e      	ldr	r3, [pc, #376]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	495b      	ldr	r1, [pc, #364]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd54 	bl	80037dc <RCC_SetFlashLatencyFromMSIRange>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e380      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3e:	f000 fcc1 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b51      	ldr	r3, [pc, #324]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	4950      	ldr	r1, [pc, #320]	@ (8002e90 <HAL_RCC_OscConfig+0x274>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e94 <HAL_RCC_OscConfig+0x278>)
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002e98 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe faec 	bl	8001340 <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d052      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	e364      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d032      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d7e:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a42      	ldr	r2, [pc, #264]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fb29 	bl	80013e0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d92:	f7fe fb25 	bl	80013e0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e34d      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da4:	4b39      	ldr	r3, [pc, #228]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db0:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a35      	ldr	r2, [pc, #212]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4930      	ldr	r1, [pc, #192]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dce:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	492b      	ldr	r1, [pc, #172]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
 8002de2:	e01a      	b.n	8002e1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de4:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df0:	f7fe faf6 	bl	80013e0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002df8:	f7fe faf2 	bl	80013e0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e31a      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1dc>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d073      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_OscConfig+0x21c>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d10e      	bne.n	8002e50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d063      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d15f      	bne.n	8002f0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e2f7      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x24c>
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e025      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e70:	d114      	bne.n	8002e9c <HAL_RCC_OscConfig+0x280>
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a02      	ldr	r2, [pc, #8]	@ (8002e8c <HAL_RCC_OscConfig+0x270>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e013      	b.n	8002eb4 <HAL_RCC_OscConfig+0x298>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	080043fc 	.word	0x080043fc
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9c      	ldr	r2, [pc, #624]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fa90 	bl	80013e0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fa8c 	bl	80013e0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	@ 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e2b4      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed6:	4b92      	ldr	r3, [pc, #584]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2a8>
 8002ee2:	e014      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fa7c 	bl	80013e0 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fa78 	bl	80013e0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e2a0      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efe:	4b88      	ldr	r3, [pc, #544]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x2d0>
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d060      	beq.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x310>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d119      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d116      	bne.n	8002f5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x328>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e27d      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b76      	ldr	r3, [pc, #472]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4973      	ldr	r1, [pc, #460]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e040      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d023      	beq.n	8002faa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	4b6f      	ldr	r3, [pc, #444]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fa37 	bl	80013e0 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fa33 	bl	80013e0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e25b      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	495f      	ldr	r1, [pc, #380]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	e018      	b.n	8002fdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b5d      	ldr	r3, [pc, #372]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5c      	ldr	r2, [pc, #368]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fa13 	bl	80013e0 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fa0f 	bl	80013e0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e237      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03c      	beq.n	8003062 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01c      	beq.n	800302a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe f9ee 	bl	80013e0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003008:	f7fe f9ea 	bl	80013e0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e212      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800301c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCC_OscConfig+0x3ec>
 8003028:	e01b      	b.n	8003062 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302a:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800302c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003030:	4a3b      	ldr	r2, [pc, #236]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7fe f9d1 	bl	80013e0 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003042:	f7fe f9cd 	bl	80013e0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1f5      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003054:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ef      	bne.n	8003042 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a6 	beq.w	80031bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308a:	6593      	str	r3, [r2, #88]	@ 0x58
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309c:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b4:	f7fe f994 	bl	80013e0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030bc:	f7fe f990 	bl	80013e0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1b8      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_OscConfig+0x508>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4d8>
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f2:	e029      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d115      	bne.n	8003128 <HAL_RCC_OscConfig+0x50c>
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	4a07      	ldr	r2, [pc, #28]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003112:	4a03      	ldr	r2, [pc, #12]	@ (8003120 <HAL_RCC_OscConfig+0x504>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800311c:	e014      	b.n	8003148 <HAL_RCC_OscConfig+0x52c>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
 8003128:	4b9d      	ldr	r3, [pc, #628]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	4a9c      	ldr	r2, [pc, #624]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003138:	4b99      	ldr	r3, [pc, #612]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	4a98      	ldr	r2, [pc, #608]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe f946 	bl	80013e0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe f942 	bl	80013e0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e168      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316e:	4b8c      	ldr	r3, [pc, #560]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ed      	beq.n	8003158 <HAL_RCC_OscConfig+0x53c>
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe f92f 	bl	80013e0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe f92b 	bl	80013e0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e151      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800319c:	4b80      	ldr	r3, [pc, #512]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1ed      	bne.n	8003186 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b0:	4b7b      	ldr	r3, [pc, #492]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	4a7a      	ldr	r2, [pc, #488]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80031b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03c      	beq.n	8003242 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d0:	4b73      	ldr	r3, [pc, #460]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80031d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d6:	4a72      	ldr	r2, [pc, #456]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe f8fe 	bl	80013e0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e8:	f7fe f8fa 	bl	80013e0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e122      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fa:	4b69      	ldr	r3, [pc, #420]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80031fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ef      	beq.n	80031e8 <HAL_RCC_OscConfig+0x5cc>
 8003208:	e01b      	b.n	8003242 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800320a:	4b65      	ldr	r3, [pc, #404]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800320c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003210:	4a63      	ldr	r2, [pc, #396]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe f8e1 	bl	80013e0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003222:	f7fe f8dd 	bl	80013e0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e105      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003234:	4b5a      	ldr	r3, [pc, #360]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80f9 	beq.w	800343e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	2b02      	cmp	r3, #2
 8003252:	f040 80cf 	bne.w	80033f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003256:	4b52      	ldr	r3, [pc, #328]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	429a      	cmp	r2, r3
 8003268:	d12c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	3b01      	subs	r3, #1
 8003276:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d123      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003286:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d11b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003296:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d113      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d109      	bne.n	80032c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d071      	beq.n	80033a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d068      	beq.n	800339c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032ca:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032d6:	4b32      	ldr	r3, [pc, #200]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0ac      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f2:	f7fe f875 	bl	80013e0 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe f871 	bl	80013e0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e099      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <HAL_RCC_OscConfig+0x788>)
 800331e:	4013      	ands	r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003328:	3a01      	subs	r2, #1
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	4311      	orrs	r1, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003332:	0212      	lsls	r2, r2, #8
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800333a:	0852      	lsrs	r2, r2, #1
 800333c:	3a01      	subs	r2, #1
 800333e:	0552      	lsls	r2, r2, #21
 8003340:	4311      	orrs	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003346:	0852      	lsrs	r2, r2, #1
 8003348:	3a01      	subs	r2, #1
 800334a:	0652      	lsls	r2, r2, #25
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003352:	06d2      	lsls	r2, r2, #27
 8003354:	430a      	orrs	r2, r1
 8003356:	4912      	ldr	r1, [pc, #72]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003358:	4313      	orrs	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0f      	ldr	r2, [pc, #60]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003368:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a0c      	ldr	r2, [pc, #48]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003374:	f7fe f834 	bl	80013e0 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe f830 	bl	80013e0 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e058      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <HAL_RCC_OscConfig+0x784>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800339a:	e050      	b.n	800343e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04f      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
 80033a0:	40021000 	.word	0x40021000
 80033a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d144      	bne.n	800343e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a23      	ldr	r2, [pc, #140]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c0:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fe f808 	bl	80013e0 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe f804 	bl	80013e0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e02c      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x7b8>
 80033f2:	e024      	b.n	800343e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d01f      	beq.n	800343a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 8003400:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd ffeb 	bl	80013e0 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd ffe7 	bl	80013e0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e00f      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	4905      	ldr	r1, [pc, #20]	@ (8003448 <HAL_RCC_OscConfig+0x82c>)
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_OscConfig+0x830>)
 8003434:	4013      	ands	r3, r2
 8003436:	60cb      	str	r3, [r1, #12]
 8003438:	e001      	b.n	800343e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	feeefffc 	.word	0xfeeefffc

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e11d      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b90      	ldr	r3, [pc, #576]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d910      	bls.n	8003498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b8d      	ldr	r3, [pc, #564]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 020f 	bic.w	r2, r3, #15
 800347e:	498b      	ldr	r1, [pc, #556]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b89      	ldr	r3, [pc, #548]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e105      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b81      	ldr	r3, [pc, #516]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b7e      	ldr	r3, [pc, #504]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	497b      	ldr	r1, [pc, #492]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d079      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d11e      	bne.n	8003518 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b75      	ldr	r3, [pc, #468]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0dc      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80034ea:	f000 f9d1 	bl	8003890 <RCC_GetSysClockFreqFromPLLSource>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4a70      	ldr	r2, [pc, #448]	@ (80036b4 <HAL_RCC_ClockConfig+0x264>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d946      	bls.n	8003584 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034f6:	4b6e      	ldr	r3, [pc, #440]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d140      	bne.n	8003584 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003502:	4b6b      	ldr	r3, [pc, #428]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800350a:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800350c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e035      	b.n	8003584 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d107      	bne.n	8003530 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003520:	4b63      	ldr	r3, [pc, #396]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d115      	bne.n	8003558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b9      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003538:	4b5d      	ldr	r3, [pc, #372]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0ad      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003548:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0a5      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003558:	f000 f8b4 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800355c:	4603      	mov	r3, r0
 800355e:	4a55      	ldr	r2, [pc, #340]	@ (80036b4 <HAL_RCC_ClockConfig+0x264>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d90f      	bls.n	8003584 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003564:	4b52      	ldr	r3, [pc, #328]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003570:	4b4f      	ldr	r3, [pc, #316]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003578:	4a4d      	ldr	r2, [pc, #308]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800357a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800357e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003584:	4b4a      	ldr	r3, [pc, #296]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 0203 	bic.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4947      	ldr	r1, [pc, #284]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003596:	f7fd ff23 	bl	80013e0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359e:	f7fd ff1f 	bl	80013e0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e077      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b4:	4b3e      	ldr	r3, [pc, #248]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 020c 	and.w	r2, r3, #12
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d1eb      	bne.n	800359e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035cc:	4b38      	ldr	r3, [pc, #224]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a37      	ldr	r2, [pc, #220]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b31      	ldr	r3, [pc, #196]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d208      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b2e      	ldr	r3, [pc, #184]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	492b      	ldr	r1, [pc, #172]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003606:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d210      	bcs.n	8003636 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003614:	4b25      	ldr	r3, [pc, #148]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 020f 	bic.w	r2, r3, #15
 800361c:	4923      	ldr	r1, [pc, #140]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003624:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <HAL_RCC_ClockConfig+0x25c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e036      	b.n	80036a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4918      	ldr	r1, [pc, #96]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003660:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4910      	ldr	r1, [pc, #64]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003674:	f000 f826 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_RCC_ClockConfig+0x260>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	490c      	ldr	r1, [pc, #48]	@ (80036b8 <HAL_RCC_ClockConfig+0x268>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <HAL_RCC_ClockConfig+0x26c>)
 8003692:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_RCC_ClockConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fe51 	bl	8001340 <HAL_InitTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	04c4b400 	.word	0x04c4b400
 80036b8:	080043fc 	.word	0x080043fc
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	4b3e      	ldr	r3, [pc, #248]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036dc:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11e      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f8:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003704:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003720:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003734:	e00a      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d102      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373c:	4b25      	ldr	r3, [pc, #148]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e004      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d101      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003748:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800374a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d134      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0xa6>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d003      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xac>
 8003768:	e005      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800376a:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800376c:	617b      	str	r3, [r7, #20]
      break;
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003770:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003772:	617b      	str	r3, [r7, #20]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	617b      	str	r3, [r7, #20]
      break;
 800377a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	fb03 f202 	mul.w	r2, r3, r2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	0e5b      	lsrs	r3, r3, #25
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	3301      	adds	r3, #1
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037bc:	69bb      	ldr	r3, [r7, #24]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	@ 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	0800440c 	.word	0x0800440c
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e8:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f4:	f7ff f93e 	bl	8002a74 <HAL_PWREx_GetVoltageRange>
 80037f8:	6178      	str	r0, [r7, #20]
 80037fa:	e014      	b.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003806:	6593      	str	r3, [r2, #88]	@ 0x58
 8003808:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003814:	f7ff f92e 	bl	8002a74 <HAL_PWREx_GetVoltageRange>
 8003818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	4a1a      	ldr	r2, [pc, #104]	@ (8003888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382c:	d10b      	bne.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d913      	bls.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2ba0      	cmp	r3, #160	@ 0xa0
 8003838:	d902      	bls.n	8003840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383a:	2302      	movs	r3, #2
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e00d      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003840:	2301      	movs	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	e00a      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b7f      	cmp	r3, #127	@ 0x7f
 800384a:	d902      	bls.n	8003852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800384c:	2302      	movs	r3, #2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e004      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b70      	cmp	r3, #112	@ 0x70
 8003856:	d101      	bne.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003858:	2301      	movs	r3, #1
 800385a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 020f 	bic.w	r2, r3, #15
 8003864:	4909      	ldr	r1, [pc, #36]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800386c:	4b07      	ldr	r3, [pc, #28]	@ (800388c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	40022000 	.word	0x40022000

08003890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d00b      	beq.n	80038be <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d825      	bhi.n	80038f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d008      	beq.n	80038c4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d11f      	bne.n	80038f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038ba:	613b      	str	r3, [r7, #16]
    break;
 80038bc:	e01f      	b.n	80038fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80038be:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80038c0:	613b      	str	r3, [r7, #16]
    break;
 80038c2:	e01c      	b.n	80038fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d107      	bne.n	80038e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038d0:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e005      	b.n	80038ec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80038ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003958 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
    break;
 80038f6:	e002      	b.n	80038fe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
    break;
 80038fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038fe:	4b13      	ldr	r3, [pc, #76]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	3301      	adds	r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800390c:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	fb03 f202 	mul.w	r2, r3, r2
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0e5b      	lsrs	r3, r3, #25
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800393e:	683b      	ldr	r3, [r7, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200
 8003958:	0800440c 	.word	0x0800440c

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003964:	2300      	movs	r3, #0
 8003966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003968:	2300      	movs	r3, #0
 800396a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d040      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	2b80      	cmp	r3, #128	@ 0x80
 800397e:	d02a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003980:	2b80      	cmp	r3, #128	@ 0x80
 8003982:	d825      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003984:	2b60      	cmp	r3, #96	@ 0x60
 8003986:	d026      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003988:	2b60      	cmp	r3, #96	@ 0x60
 800398a:	d821      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	d006      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003990:	2b40      	cmp	r3, #64	@ 0x40
 8003992:	d81d      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d009      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d010      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800399c:	e018      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800399e:	4b89      	ldr	r3, [pc, #548]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	4a88      	ldr	r2, [pc, #544]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039aa:	e015      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb02 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3320      	adds	r3, #32
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fbed 	bl	80041a4 <RCCEx_PLLSAI2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	74fb      	strb	r3, [r7, #19]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7cfb      	ldrb	r3, [r7, #19]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039de:	4b79      	ldr	r3, [pc, #484]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039e4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ec:	4975      	ldr	r1, [pc, #468]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80039f4:	e001      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d047      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0e:	d030      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a14:	d82a      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a1a:	d02a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a20:	d824      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2c:	d81e      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a36:	d010      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a38:	e018      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a3a:	4b62      	ldr	r3, [pc, #392]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4a61      	ldr	r2, [pc, #388]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a46:	e015      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fab4 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a58:	e00c      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3320      	adds	r3, #32
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fb9f 	bl	80041a4 <RCCEx_PLLSAI2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a7a:	4b52      	ldr	r3, [pc, #328]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a88:	494e      	ldr	r1, [pc, #312]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 809f 	beq.w	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa8:	4b46      	ldr	r3, [pc, #280]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b41      	ldr	r3, [pc, #260]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	4a40      	ldr	r2, [pc, #256]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aca:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fc7b 	bl	80013e0 <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aec:	e009      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd fc77 	bl	80013e0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d902      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	74fb      	strb	r3, [r7, #19]
        break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b02:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ef      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d15b      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b14:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01f      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d019      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b3e:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b44:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b54:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b5e:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fc36 	bl	80013e0 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b76:	e00b      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd fc32 	bl	80013e0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d902      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b8e:	e006      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ec      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba4:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	4903      	ldr	r1, [pc, #12]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	74bb      	strb	r3, [r7, #18]
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd0:	7c7b      	ldrb	r3, [r7, #17]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	4a9f      	ldr	r2, [pc, #636]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bee:	4b9a      	ldr	r3, [pc, #616]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf4:	f023 0203 	bic.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	4996      	ldr	r1, [pc, #600]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c10:	4b91      	ldr	r3, [pc, #580]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	f023 020c 	bic.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	498e      	ldr	r1, [pc, #568]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c32:	4b89      	ldr	r3, [pc, #548]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c40:	4985      	ldr	r1, [pc, #532]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c54:	4b80      	ldr	r3, [pc, #512]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c62:	497d      	ldr	r1, [pc, #500]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c76:	4b78      	ldr	r3, [pc, #480]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	4974      	ldr	r1, [pc, #464]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c98:	4b6f      	ldr	r3, [pc, #444]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca6:	496c      	ldr	r1, [pc, #432]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cba:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc8:	4963      	ldr	r1, [pc, #396]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cea:	495b      	ldr	r1, [pc, #364]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfe:	4b56      	ldr	r3, [pc, #344]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0c:	4952      	ldr	r1, [pc, #328]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	494a      	ldr	r1, [pc, #296]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d42:	4b45      	ldr	r3, [pc, #276]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d50:	4941      	ldr	r1, [pc, #260]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d64:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d72:	4939      	ldr	r1, [pc, #228]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d86:	4b34      	ldr	r3, [pc, #208]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d94:	4930      	ldr	r1, [pc, #192]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a2b      	ldr	r2, [pc, #172]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db0:	60d3      	str	r3, [r2, #12]
 8003db2:	e011      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f8f9 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d04d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dec:	d108      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df4:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dfa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003dfe:	e012      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e00:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003e10:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1e:	490e      	ldr	r1, [pc, #56]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e30:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a08      	ldr	r2, [pc, #32]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e3a:	60d3      	str	r3, [r2, #12]
 8003e3c:	e020      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e46:	d109      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a02      	ldr	r2, [pc, #8]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e014      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f8a5 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e7c:	7cfb      	ldrb	r3, [r7, #19]
 8003e7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d028      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9a:	4947      	ldr	r1, [pc, #284]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eaa:	d106      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eac:	4b42      	ldr	r3, [pc, #264]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a41      	ldr	r2, [pc, #260]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eb6:	60d3      	str	r3, [r2, #12]
 8003eb8:	e011      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f876 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eea:	4b33      	ldr	r3, [pc, #204]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003efa:	492f      	ldr	r1, [pc, #188]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2102      	movs	r1, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f851 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f34:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3a:	f023 0204 	bic.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f44:	491c      	ldr	r1, [pc, #112]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f58:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f5e:	f023 0218 	bic.w	r2, r3, #24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	4913      	ldr	r1, [pc, #76]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d017      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f8c:	490a      	ldr	r1, [pc, #40]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f9e:	d105      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003faa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000

08003fbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fca:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d103      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d142      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	e03f      	b.n	8004074 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d018      	beq.n	800402e <RCCEx_PLLSAI1_Config+0x72>
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d825      	bhi.n	800404c <RCCEx_PLLSAI1_Config+0x90>
 8004000:	2b01      	cmp	r3, #1
 8004002:	d002      	beq.n	800400a <RCCEx_PLLSAI1_Config+0x4e>
 8004004:	2b02      	cmp	r3, #2
 8004006:	d009      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x60>
 8004008:	e020      	b.n	800404c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800400a:	4b62      	ldr	r3, [pc, #392]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11d      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401a:	e01a      	b.n	8004052 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800401c:	4b5d      	ldr	r3, [pc, #372]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402c:	e013      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800402e:	4b59      	ldr	r3, [pc, #356]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800403a:	4b56      	ldr	r3, [pc, #344]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800404a:	e006      	b.n	800405a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e004      	b.n	800405c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800405a:	bf00      	nop
    }

    if(status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004062:	4b4c      	ldr	r3, [pc, #304]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4949      	ldr	r1, [pc, #292]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004070:	4313      	orrs	r3, r2
 8004072:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 8086 	bne.w	8004188 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a44      	ldr	r2, [pc, #272]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004082:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fd f9aa 	bl	80013e0 <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800408e:	e009      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004090:	f7fd f9a6 	bl	80013e0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	73fb      	strb	r3, [r7, #15]
        break;
 80040a2:	e005      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ef      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d168      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040bc:	4b35      	ldr	r3, [pc, #212]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	4b35      	ldr	r3, [pc, #212]	@ (8004198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6892      	ldr	r2, [r2, #8]
 80040c8:	0211      	lsls	r1, r2, #8
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	06d2      	lsls	r2, r2, #27
 80040d0:	4311      	orrs	r1, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6852      	ldr	r2, [r2, #4]
 80040d6:	3a01      	subs	r2, #1
 80040d8:	0112      	lsls	r2, r2, #4
 80040da:	430a      	orrs	r2, r1
 80040dc:	492d      	ldr	r1, [pc, #180]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	610b      	str	r3, [r1, #16]
 80040e2:	e02d      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d115      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	0211      	lsls	r1, r2, #8
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6912      	ldr	r2, [r2, #16]
 80040fc:	0852      	lsrs	r2, r2, #1
 80040fe:	3a01      	subs	r2, #1
 8004100:	0552      	lsls	r2, r2, #21
 8004102:	4311      	orrs	r1, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	3a01      	subs	r2, #1
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	430a      	orrs	r2, r1
 800410e:	4921      	ldr	r1, [pc, #132]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
 8004114:	e014      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004116:	4b1f      	ldr	r3, [pc, #124]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6892      	ldr	r2, [r2, #8]
 8004122:	0211      	lsls	r1, r2, #8
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6952      	ldr	r2, [r2, #20]
 8004128:	0852      	lsrs	r2, r2, #1
 800412a:	3a01      	subs	r2, #1
 800412c:	0652      	lsls	r2, r2, #25
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6852      	ldr	r2, [r2, #4]
 8004134:	3a01      	subs	r2, #1
 8004136:	0112      	lsls	r2, r2, #4
 8004138:	430a      	orrs	r2, r1
 800413a:	4916      	ldr	r1, [pc, #88]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004140:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800414a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd f948 	bl	80013e0 <HAL_GetTick>
 8004150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004152:	e009      	b.n	8004168 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004154:	f7fd f944 	bl	80013e0 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d902      	bls.n	8004168 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	73fb      	strb	r3, [r7, #15]
          break;
 8004166:	e005      	b.n	8004174 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ef      	beq.n	8004154 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	4904      	ldr	r1, [pc, #16]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	07ff800f 	.word	0x07ff800f
 800419c:	ff9f800f 	.word	0xff9f800f
 80041a0:	f9ff800f 	.word	0xf9ff800f

080041a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041b2:	4b72      	ldr	r3, [pc, #456]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041be:	4b6f      	ldr	r3, [pc, #444]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d103      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
       ||
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d142      	bne.n	800425c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	e03f      	b.n	800425c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d018      	beq.n	8004216 <RCCEx_PLLSAI2_Config+0x72>
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d825      	bhi.n	8004234 <RCCEx_PLLSAI2_Config+0x90>
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d002      	beq.n	80041f2 <RCCEx_PLLSAI2_Config+0x4e>
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d009      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x60>
 80041f0:	e020      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041f2:	4b62      	ldr	r3, [pc, #392]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11d      	bne.n	800423a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004202:	e01a      	b.n	800423a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004204:	4b5d      	ldr	r3, [pc, #372]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004214:	e013      	b.n	800423e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004216:	4b59      	ldr	r3, [pc, #356]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10f      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004222:	4b56      	ldr	r3, [pc, #344]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004232:	e006      	b.n	8004242 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	e004      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800423a:	bf00      	nop
 800423c:	e002      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800423e:	bf00      	nop
 8004240:	e000      	b.n	8004244 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004242:	bf00      	nop
    }

    if(status == HAL_OK)
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800424a:	4b4c      	ldr	r3, [pc, #304]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4949      	ldr	r1, [pc, #292]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004258:	4313      	orrs	r3, r2
 800425a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 8086 	bne.w	8004370 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004264:	4b45      	ldr	r3, [pc, #276]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a44      	ldr	r2, [pc, #272]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fd f8b6 	bl	80013e0 <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004276:	e009      	b.n	800428c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004278:	f7fd f8b2 	bl	80013e0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	73fb      	strb	r3, [r7, #15]
        break;
 800428a:	e005      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800428c:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ef      	bne.n	8004278 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d168      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d113      	bne.n	80042cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042a4:	4b35      	ldr	r3, [pc, #212]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <RCCEx_PLLSAI2_Config+0x1dc>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6892      	ldr	r2, [r2, #8]
 80042b0:	0211      	lsls	r1, r2, #8
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	68d2      	ldr	r2, [r2, #12]
 80042b6:	06d2      	lsls	r2, r2, #27
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6852      	ldr	r2, [r2, #4]
 80042be:	3a01      	subs	r2, #1
 80042c0:	0112      	lsls	r2, r2, #4
 80042c2:	430a      	orrs	r2, r1
 80042c4:	492d      	ldr	r1, [pc, #180]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	614b      	str	r3, [r1, #20]
 80042ca:	e02d      	b.n	8004328 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d115      	bne.n	80042fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d2:	4b2a      	ldr	r3, [pc, #168]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004384 <RCCEx_PLLSAI2_Config+0x1e0>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	0211      	lsls	r1, r2, #8
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6912      	ldr	r2, [r2, #16]
 80042e4:	0852      	lsrs	r2, r2, #1
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0552      	lsls	r2, r2, #21
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6852      	ldr	r2, [r2, #4]
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4921      	ldr	r1, [pc, #132]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	614b      	str	r3, [r1, #20]
 80042fc:	e014      	b.n	8004328 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042fe:	4b1f      	ldr	r3, [pc, #124]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004304:	4013      	ands	r3, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	0211      	lsls	r1, r2, #8
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6952      	ldr	r2, [r2, #20]
 8004310:	0852      	lsrs	r2, r2, #1
 8004312:	3a01      	subs	r2, #1
 8004314:	0652      	lsls	r2, r2, #25
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6852      	ldr	r2, [r2, #4]
 800431c:	3a01      	subs	r2, #1
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	430a      	orrs	r2, r1
 8004322:	4916      	ldr	r1, [pc, #88]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004324:	4313      	orrs	r3, r2
 8004326:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd f854 	bl	80013e0 <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800433c:	f7fd f850 	bl	80013e0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
          break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	4904      	ldr	r1, [pc, #16]	@ (800437c <RCCEx_PLLSAI2_Config+0x1d8>)
 800436c:	4313      	orrs	r3, r2
 800436e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000
 8004380:	07ff800f 	.word	0x07ff800f
 8004384:	ff9f800f 	.word	0xff9f800f
 8004388:	f9ff800f 	.word	0xf9ff800f

0800438c <memset>:
 800438c:	4402      	add	r2, r0
 800438e:	4603      	mov	r3, r0
 8004390:	4293      	cmp	r3, r2
 8004392:	d100      	bne.n	8004396 <memset+0xa>
 8004394:	4770      	bx	lr
 8004396:	f803 1b01 	strb.w	r1, [r3], #1
 800439a:	e7f9      	b.n	8004390 <memset+0x4>

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4d0d      	ldr	r5, [pc, #52]	@ (80043d4 <__libc_init_array+0x38>)
 80043a0:	4c0d      	ldr	r4, [pc, #52]	@ (80043d8 <__libc_init_array+0x3c>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	2600      	movs	r6, #0
 80043a8:	42a6      	cmp	r6, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	4d0b      	ldr	r5, [pc, #44]	@ (80043dc <__libc_init_array+0x40>)
 80043ae:	4c0c      	ldr	r4, [pc, #48]	@ (80043e0 <__libc_init_array+0x44>)
 80043b0:	f000 f818 	bl	80043e4 <_init>
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	2600      	movs	r6, #0
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c4:	4798      	blx	r3
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ce:	4798      	blx	r3
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	0800443c 	.word	0x0800443c
 80043d8:	0800443c 	.word	0x0800443c
 80043dc:	0800443c 	.word	0x0800443c
 80043e0:	08004440 	.word	0x08004440

080043e4 <_init>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr

080043f0 <_fini>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr
