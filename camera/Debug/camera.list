
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080086c8  080086c8  000096c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800884c  0800884c  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008854  08008854  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20040000  0800885c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20040074  080088d0  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004041c  080088d0  0000a41c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d07  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3e  00000000  00000000  0001cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3e  00000000  00000000  000207c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b54f  00000000  00000000  00021406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016201  00000000  00000000  0004c955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101674  00000000  00000000  00062b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001641ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  00164210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00168808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040074 	.word	0x20040074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080086b0 	.word	0x080086b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040078 	.word	0x20040078
 80001fc:	080086b0 	.word	0x080086b0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <VC0706_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];
    buffer[0] = VC0706_CMD_PREFIX;
 80005a0:	2356      	movs	r3, #86	@ 0x56
 80005a2:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 80005a4:	2300      	movs	r3, #0
 80005a6:	737b      	strb	r3, [r7, #13]
    buffer[2] = cmd;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < params_len; i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	77fb      	strb	r3, [r7, #31]
 80005b0:	e00c      	b.n	80005cc <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 80005b2:	7ffb      	ldrb	r3, [r7, #31]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	441a      	add	r2, r3
 80005b8:	7ffb      	ldrb	r3, [r7, #31]
 80005ba:	3303      	adds	r3, #3
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	3320      	adds	r3, #32
 80005c0:	443b      	add	r3, r7
 80005c2:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 80005c6:	7ffb      	ldrb	r3, [r7, #31]
 80005c8:	3301      	adds	r3, #1
 80005ca:	77fb      	strb	r3, [r7, #31]
 80005cc:	7ffa      	ldrb	r2, [r7, #31]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3ee      	bcc.n	80005b2 <VC0706_SendCommand+0x22>
//    for (uint8_t i = 0; i < params_len + 3; i++) {
//    	HAL_UART_Transmit(&huart3, buffer[i], 1, 1000);
//    }


    HAL_UART_Transmit(&huart3, buffer, 3 + params_len, HAL_MAX_DELAY);
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3303      	adds	r3, #3
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f107 010c 	add.w	r1, r7, #12
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <VC0706_SendCommand+0x64>)
 80005e6:	f003 fd4b 	bl	8004080 <HAL_UART_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200401f0 	.word	0x200401f0

080005f8 <VC0706_TakePhoto>:

uint8_t VC0706_TakePhoto(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 80005fe:	2301      	movs	r3, #1
 8000600:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2202      	movs	r2, #2
 8000608:	4619      	mov	r1, r3
 800060a:	2036      	movs	r0, #54	@ 0x36
 800060c:	f7ff ffc0 	bl	8000590 <VC0706_SendCommand>

    uint8_t response[5]={0};
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	2300      	movs	r3, #0
 8000616:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000); // 1-second timeout
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061e:	2205      	movs	r2, #5
 8000620:	4810      	ldr	r0, [pc, #64]	@ (8000664 <VC0706_TakePhoto+0x6c>)
 8000622:	f003 fdbb 	bl	800419c <HAL_UART_Receive>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8000630:	2300      	movs	r3, #0
 8000632:	e012      	b.n	800065a <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8000634:	793b      	ldrb	r3, [r7, #4]
 8000636:	2b76      	cmp	r3, #118	@ 0x76
 8000638:	d10d      	bne.n	8000656 <VC0706_TakePhoto+0x5e>
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10a      	bne.n	8000656 <VC0706_TakePhoto+0x5e>
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	2b36      	cmp	r3, #54	@ 0x36
 8000644:	d107      	bne.n	8000656 <VC0706_TakePhoto+0x5e>
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d104      	bne.n	8000656 <VC0706_TakePhoto+0x5e>
 800064c:	7a3b      	ldrb	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <VC0706_TakePhoto+0x5e>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <VC0706_TakePhoto+0x60>
 8000656:	2300      	movs	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200401f0 	.word	0x200401f0

08000668 <VC0706_ReadImageDataLength>:

uint16_t VC0706_ReadImageDataLength(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 800066e:	2301      	movs	r3, #1
 8000670:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2202      	movs	r2, #2
 8000678:	4619      	mov	r1, r3
 800067a:	2034      	movs	r0, #52	@ 0x34
 800067c:	f7ff ff88 	bl	8000590 <VC0706_SendCommand>

	uint8_t response[9];
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000);
 8000680:	1d39      	adds	r1, r7, #4
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	2209      	movs	r2, #9
 8000688:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <VC0706_ReadImageDataLength+0x50>)
 800068a:	f003 fd87 	bl	800419c <HAL_UART_Receive>
 800068e:	4603      	mov	r3, r0
 8000690:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <VC0706_ReadImageDataLength+0x34>
    	return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e008      	b.n	80006ae <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 800069c:	7afb      	ldrb	r3, [r7, #11]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	7b3b      	ldrb	r3, [r7, #12]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	82bb      	strh	r3, [r7, #20]

    return image_len;
 80006ac:	8abb      	ldrh	r3, [r7, #20]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200401f0 	.word	0x200401f0

080006bc <VC0706_ReadImage>:




uint8_t VC0706_ReadImage(uint8_t *imageBuffer, uint32_t start_address) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 80006c6:	230c      	movs	r3, #12
 80006c8:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 80006ce:	230a      	movs	r3, #10
 80006d0:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 80006f0:	2300      	movs	r3, #0
 80006f2:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 80006f4:	2320      	movs	r3, #32
 80006f6:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 80006f8:	2300      	movs	r3, #0
 80006fa:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 80006fc:	23ff      	movs	r3, #255	@ 0xff
 80006fe:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	220d      	movs	r2, #13
 8000706:	4619      	mov	r1, r3
 8000708:	2032      	movs	r0, #50	@ 0x32
 800070a:	f7ff ff41 	bl	8000590 <VC0706_SendCommand>

    return 1;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <VC0706_RecvImageBlock>:

uint8_t VC0706_RecvImageBlock(uint8_t *temp_buff) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, temp_buff, CAMERA_READ_SIZE + 10, 100000);
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <VC0706_RecvImageBlock+0x2c>)
 8000722:	222a      	movs	r2, #42	@ 0x2a
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	4808      	ldr	r0, [pc, #32]	@ (8000748 <VC0706_RecvImageBlock+0x30>)
 8000728:	f003 fd38 	bl	800419c <HAL_UART_Receive>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <VC0706_RecvImageBlock+0x22>
    	return 0;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <VC0706_RecvImageBlock+0x24>
    }

    return 1;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	000186a0 	.word	0x000186a0
 8000748:	200401f0 	.word	0x200401f0

0800074c <VC0706_ReadFullImage>:

void VC0706_ReadFullImage(uint16_t image_length) {
 800074c:	b580      	push	{r7, lr}
 800074e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000752:	af00      	add	r7, sp, #0
 8000754:	4602      	mov	r2, r0
 8000756:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800075a:	f2a3 2382 	subw	r3, r3, #642	@ 0x282
 800075e:	801a      	strh	r2, [r3, #0]
	 */

	uint8_t img_read_buf[CAMERA_READ_SIZE + 10]; // the plus ten is space for 10 bytes of ACK
//	memset(img_read_buf, 0xAA, siezof(img_read_buf));

	uint32_t img_start_address = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284

	UINT bytesWrote;

	char fname[20];

	sprintf(fname, "picture%d.jpg", PICTURE_INDEX);
 8000766:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <VC0706_ReadFullImage+0x138>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4945      	ldr	r1, [pc, #276]	@ (8000888 <VC0706_ReadFullImage+0x13c>)
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fafc 	bl	8007d70 <siprintf>

	fres = f_open(&fil, fname, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000778:	f107 010c 	add.w	r1, r7, #12
 800077c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000780:	221a      	movs	r2, #26
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fec0 	bl	8007508 <f_open>
 8000788:	4603      	mov	r3, r0
 800078a:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f

/*	fres = f_write(&fil,test_buf, 3, &bytesWrote);*/


	while(img_start_address < image_length) {
 800078e:	e02b      	b.n	80007e8 <VC0706_ReadFullImage+0x9c>
		uint8_t status = VC0706_ReadImage(img_read_buf, img_start_address);
 8000790:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8000794:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff8f 	bl	80006bc <VC0706_ReadImage>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 327e 	strb.w	r3, [r7, #638]	@ 0x27e

		if (!status) {
 80007a4:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d064      	beq.n	8000876 <VC0706_ReadFullImage+0x12a>
			return;
		}

//		HAL_Delay(35);

		status = VC0706_RecvImageBlock(img_read_buf);
 80007ac:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffb1 	bl	8000718 <VC0706_RecvImageBlock>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 327e 	strb.w	r3, [r7, #638]	@ 0x27e

		if (status == 0) {
 80007bc:	f897 327e 	ldrb.w	r3, [r7, #638]	@ 0x27e
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d05a      	beq.n	800087a <VC0706_ReadFullImage+0x12e>
			return;
		}

		// extract just the image data from the img_read_buf
//		memcpy(CAMERA_BUFFER + CAMERA_BUFFER_OFFSET, img_read_buf + 5, 32);
		fres = f_write(&fil, img_read_buf + 5, 32, &bytesWrote);
 80007c4:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 80007c8:	3105      	adds	r1, #5
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80007d2:	2220      	movs	r2, #32
 80007d4:	f007 f852 	bl	800787c <f_write>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f


		// check if the end flag
//		RECEIVED_JPEG_END_FLAG = (img_read_buf[30+5] == 0xFF && img_read_buf[31+5] == 0xD9);

		img_start_address += 0x20;
 80007de:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80007e2:	3320      	adds	r3, #32
 80007e4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
	while(img_start_address < image_length) {
 80007e8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80007ec:	f2a3 2382 	subw	r3, r3, #642	@ 0x282
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3ca      	bcc.n	8000790 <VC0706_ReadFullImage+0x44>
	}

	/*
	 * Final iteration to find end flag
	 */
	VC0706_ReadImage(img_read_buf, img_start_address);
 80007fa:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 80007fe:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff5a 	bl	80006bc <VC0706_ReadImage>
//	memcpy(CAMERA_BUFFER + CAMERA_BUFFER_OFFSET, img_read_buf + 5, 32);

	// find where the end sequence was in the last frame
	for (uint32_t i = 1; i < 32; i++) {
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800080e:	e028      	b.n	8000862 <VC0706_ReadFullImage+0x116>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 8000810:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8000814:	3304      	adds	r3, #4
 8000816:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800081a:	443b      	add	r3, r7
 800081c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d119      	bne.n	8000858 <VC0706_ReadFullImage+0x10c>
 8000824:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8000828:	3305      	adds	r3, #5
 800082a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800082e:	443b      	add	r3, r7
 8000830:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8000834:	2bd9      	cmp	r3, #217	@ 0xd9
 8000836:	d10f      	bne.n	8000858 <VC0706_ReadFullImage+0x10c>
			// found end sequence
//			CAMERA_BUFFER_OFFSET += i + 1;
			fres = f_write(&fil, img_read_buf + 5, i + 1, &bytesWrote);
 8000838:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 800083c:	3105      	adds	r1, #5
 800083e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800084c:	f007 f816 	bl	800787c <f_write>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
			break;
 8000856:	e008      	b.n	800086a <VC0706_ReadFullImage+0x11e>
	for (uint32_t i = 1; i < 32; i++) {
 8000858:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 800085c:	3301      	adds	r3, #1
 800085e:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8000862:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8000866:	2b1f      	cmp	r3, #31
 8000868:	d9d2      	bls.n	8000810 <VC0706_ReadFullImage+0xc4>
		}
	}

	f_close(&fil);
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f007 f9f7 	bl	8007c62 <f_close>
 8000874:	e002      	b.n	800087c <VC0706_ReadFullImage+0x130>
			return;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <VC0706_ReadFullImage+0x130>
			return;
 800087a:	bf00      	nop

//	CAMERA_BUFFER_STATUS = 1;

}
 800087c:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20040090 	.word	0x20040090
 8000888:	080086c8 	.word	0x080086c8

0800088c <VC0706_StopCapture>:

    return (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x26 && response[3] == 0x00); // Check if reset was successful
//    return response[3] == 0x00;
}

uint8_t VC0706_StopCapture(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8000892:	f240 3301 	movw	r3, #769	@ 0x301
 8000896:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	2300      	movs	r3, #0
 800089e:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2202      	movs	r2, #2
 80008a6:	4619      	mov	r1, r3
 80008a8:	2036      	movs	r0, #54	@ 0x36
 80008aa:	f7ff fe71 	bl	8000590 <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000);
 80008ae:	1d39      	adds	r1, r7, #4
 80008b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b4:	2205      	movs	r2, #5
 80008b6:	4810      	ldr	r0, [pc, #64]	@ (80008f8 <VC0706_StopCapture+0x6c>)
 80008b8:	f003 fc70 	bl	800419c <HAL_UART_Receive>
 80008bc:	4603      	mov	r3, r0
 80008be:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <VC0706_StopCapture+0x3e>
        return 0; // Indicate failure
 80008c6:	2300      	movs	r3, #0
 80008c8:	e012      	b.n	80008f0 <VC0706_StopCapture+0x64>
    }

    // Check if the response is as expected
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 80008ca:	793b      	ldrb	r3, [r7, #4]
 80008cc:	2b76      	cmp	r3, #118	@ 0x76
 80008ce:	d10d      	bne.n	80008ec <VC0706_StopCapture+0x60>
 80008d0:	797b      	ldrb	r3, [r7, #5]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10a      	bne.n	80008ec <VC0706_StopCapture+0x60>
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	2b36      	cmp	r3, #54	@ 0x36
 80008da:	d107      	bne.n	80008ec <VC0706_StopCapture+0x60>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d104      	bne.n	80008ec <VC0706_StopCapture+0x60>
 80008e2:	7a3b      	ldrb	r3, [r7, #8]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <VC0706_StopCapture+0x60>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <VC0706_StopCapture+0x62>
 80008ec:	2300      	movs	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200401f0 	.word	0x200401f0

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	f5ad 6d8f 	sub.w	sp, sp, #1144	@ 0x478
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000904:	f000 fde3 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000908:	f000 f852 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090c:	f000 f9aa 	bl	8000c64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000910:	f000 f910 	bl	8000b34 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000914:	f000 f95a 	bl	8000bcc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000918:	f000 f890 	bl	8000a3c <MX_SPI1_Init>
  MX_FATFS_Init();
 800091c:	f004 fb26 	bl	8004f6c <MX_FATFS_Init>
  MX_SPI3_Init();
 8000920:	f000 f8ca 	bl	8000ab8 <MX_SPI3_Init>
  //some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000924:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8000928:	2201      	movs	r2, #1
 800092a:	4920      	ldr	r1, [pc, #128]	@ (80009ac <main+0xb0>)
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fda5 	bl	800747c <f_mount>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
  if (fres != FR_OK) {
 8000938:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <main+0x48>
  	while(1);
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <main+0x44>
  }

  HAL_Delay(2500); // camera startup delay
 8000944:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8000948:	f000 fe36 	bl	80015b8 <HAL_Delay>
//  int reset = 0;
//  if (VC0706_Reset()){
//    reset = 1;
//  }

  int stop_the_cap = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
  if (VC0706_StopCapture()) {
 8000952:	f7ff ff9b 	bl	800088c <VC0706_StopCapture>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <main+0x66>
	  stop_the_cap = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
  }

  HAL_Delay(100);
 8000962:	2064      	movs	r0, #100	@ 0x64
 8000964:	f000 fe28 	bl	80015b8 <HAL_Delay>


  int photo = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
  // Take a photo
  if (VC0706_TakePhoto()) {
 800096e:	f7ff fe43 	bl	80005f8 <VC0706_TakePhoto>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00f      	beq.n	8000998 <main+0x9c>
	  photo = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c

	  HAL_Delay(100);
 800097e:	2064      	movs	r0, #100	@ 0x64
 8000980:	f000 fe1a 	bl	80015b8 <HAL_Delay>
      // Capture the image into the buffer
	  uint16_t image_len = VC0706_ReadImageDataLength();
 8000984:	f7ff fe70 	bl	8000668 <VC0706_ReadImageDataLength>
 8000988:	4603      	mov	r3, r0
 800098a:	f8a7 346a 	strh.w	r3, [r7, #1130]	@ 0x46a

	  VC0706_ReadFullImage(image_len);
 800098e:	f8b7 346a 	ldrh.w	r3, [r7, #1130]	@ 0x46a
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff feda 	bl	800074c <VC0706_ReadFullImage>
  }

  int r = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464

  f_mount(NULL, "", 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	4902      	ldr	r1, [pc, #8]	@ (80009ac <main+0xb0>)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f006 fd6a 	bl	800747c <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <main+0xac>
 80009ac:	080086e0 	.word	0x080086e0

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	@ 0x58
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2244      	movs	r2, #68	@ 0x44
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f007 f9f6 	bl	8007db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d6:	f001 f8c3 	bl	8001b60 <HAL_PWREx_ControlVoltageScaling>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e0:	f000 fb8e 	bl	8001100 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e4:	2310      	movs	r3, #16
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f0:	2360      	movs	r3, #96	@ 0x60
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f963 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fb7a 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fd69 	bl	80024fc <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a30:	f000 fb66 	bl	8001100 <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3758      	adds	r7, #88	@ 0x58
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_SPI1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a72:	2218      	movs	r2, #24
 8000a74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_SPI1_Init+0x74>)
 8000a9c:	f002 fd04 	bl	80034a8 <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fb2b 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20040094 	.word	0x20040094
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_SPI3_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000ad2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ad6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000aee:	2218      	movs	r2, #24
 8000af0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_SPI3_Init+0x74>)
 8000b18:	f002 fcc6 	bl	80034a8 <HAL_SPI_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 faed 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200400f8 	.word	0x200400f8
 8000b30:	40003c00 	.word	0x40003c00

08000b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <MX_USART1_UART_Init+0x94>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b7e:	f003 fa2f 	bl	8003fe0 <HAL_UART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 faba 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000b90:	f004 f922 	bl	8004dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f000 fab1 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000ba2:	f004 f957 	bl	8004e54 <HAL_UARTEx_SetRxFifoThreshold>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bac:	f000 faa8 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f004 f8d8 	bl	8004d66 <HAL_UARTEx_DisableFifoMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bbc:	f000 faa0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2004015c 	.word	0x2004015c
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_USART3_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bd8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000bdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c16:	f003 f9e3 	bl	8003fe0 <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 fa6e 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c28:	f004 f8d6 	bl	8004dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 fa65 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c3a:	f004 f90b 	bl	8004e54 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 fa5c 	bl	8001100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f004 f88c 	bl	8004d66 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 fa54 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200401f0 	.word	0x200401f0
 8000c60:	40004800 	.word	0x40004800

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	4bb4      	ldr	r3, [pc, #720]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4ab3      	ldr	r2, [pc, #716]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4bb1      	ldr	r3, [pc, #708]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	623b      	str	r3, [r7, #32]
 8000c90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4bae      	ldr	r3, [pc, #696]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4aad      	ldr	r2, [pc, #692]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4bab      	ldr	r3, [pc, #684]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000caa:	4ba8      	ldr	r3, [pc, #672]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4aa7      	ldr	r2, [pc, #668]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4ba5      	ldr	r3, [pc, #660]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	4ba2      	ldr	r3, [pc, #648]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4aa1      	ldr	r2, [pc, #644]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b9f      	ldr	r3, [pc, #636]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b9c      	ldr	r3, [pc, #624]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a9b      	ldr	r2, [pc, #620]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b99      	ldr	r3, [pc, #612]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b96      	ldr	r3, [pc, #600]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a95      	ldr	r2, [pc, #596]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b93      	ldr	r3, [pc, #588]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b90      	ldr	r3, [pc, #576]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a8f      	ldr	r2, [pc, #572]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b8d      	ldr	r3, [pc, #564]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d22:	4b8a      	ldr	r3, [pc, #552]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a89      	ldr	r2, [pc, #548]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b87      	ldr	r3, [pc, #540]	@ (8000f4c <MX_GPIO_Init+0x2e8>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d3a:	f000 ffb5 	bl	8001ca8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_OLD_GPIO_Port, SD_CS_OLD_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2110      	movs	r1, #16
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 fed3 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d50:	487f      	ldr	r0, [pc, #508]	@ (8000f50 <MX_GPIO_Init+0x2ec>)
 8000d52:	f000 fecd 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d56:	230c      	movs	r3, #12
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d66:	230d      	movs	r3, #13
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4878      	ldr	r0, [pc, #480]	@ (8000f54 <MX_GPIO_Init+0x2f0>)
 8000d72:	f000 fd2b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000d76:	2307      	movs	r3, #7
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4871      	ldr	r0, [pc, #452]	@ (8000f58 <MX_GPIO_Init+0x2f4>)
 8000d92:	f000 fd1b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d96:	2380      	movs	r3, #128	@ 0x80
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000da6:	230d      	movs	r3, #13
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4869      	ldr	r0, [pc, #420]	@ (8000f58 <MX_GPIO_Init+0x2f4>)
 8000db2:	f000 fd0b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000db6:	233f      	movs	r3, #63	@ 0x3f
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dba:	230b      	movs	r3, #11
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4861      	ldr	r0, [pc, #388]	@ (8000f50 <MX_GPIO_Init+0x2ec>)
 8000dca:	f000 fcff 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dde:	2301      	movs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dec:	f000 fcee 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000df0:	230a      	movs	r3, #10
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000df4:	230b      	movs	r3, #11
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f000 fce1 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_OLD_Pin */
  GPIO_InitStruct.Pin = SD_CS_OLD_Pin;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_OLD_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 fcd2 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4846      	ldr	r0, [pc, #280]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000e44:	f000 fcc2 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4840      	ldr	r0, [pc, #256]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000e5c:	f000 fcb6 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000e60:	2344      	movs	r3, #68	@ 0x44
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	483a      	ldr	r0, [pc, #232]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000e74:	f000 fcaa 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e78:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	482f      	ldr	r0, [pc, #188]	@ (8000f54 <MX_GPIO_Init+0x2f0>)
 8000e96:	f000 fc99 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e9a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000eac:	2303      	movs	r3, #3
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4827      	ldr	r0, [pc, #156]	@ (8000f54 <MX_GPIO_Init+0x2f0>)
 8000eb8:	f000 fc88 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4820      	ldr	r0, [pc, #128]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000eda:	f000 fc77 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000ede:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ef0:	230d      	movs	r3, #13
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4818      	ldr	r0, [pc, #96]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000efc:	f000 fc66 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000f12:	230e      	movs	r3, #14
 8000f14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <MX_GPIO_Init+0x2f8>)
 8000f1e:	f000 fc55 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f22:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f34:	2302      	movs	r3, #2
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <MX_GPIO_Init+0x2fc>)
 8000f40:	f000 fc44 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f44:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f48:	e00c      	b.n	8000f64 <MX_GPIO_Init+0x300>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000c00 	.word	0x48000c00
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f72:	2308      	movs	r3, #8
 8000f74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	485b      	ldr	r0, [pc, #364]	@ (80010ec <MX_GPIO_Init+0x488>)
 8000f7e:	f000 fc25 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f82:	2340      	movs	r3, #64	@ 0x40
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f92:	230d      	movs	r3, #13
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4854      	ldr	r0, [pc, #336]	@ (80010f0 <MX_GPIO_Init+0x48c>)
 8000f9e:	f000 fc15 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484c      	ldr	r0, [pc, #304]	@ (80010f0 <MX_GPIO_Init+0x48c>)
 8000fbe:	f000 fc05 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4844      	ldr	r0, [pc, #272]	@ (80010f0 <MX_GPIO_Init+0x48c>)
 8000fe0:	f000 fbf4 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	483c      	ldr	r0, [pc, #240]	@ (80010f0 <MX_GPIO_Init+0x48c>)
 8000ffe:	f000 fbe5 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001002:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001014:	230a      	movs	r3, #10
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001022:	f000 fbd3 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f000 fbc5 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001052:	2309      	movs	r3, #9
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4825      	ldr	r0, [pc, #148]	@ (80010f4 <MX_GPIO_Init+0x490>)
 800105e:	f000 fbb5 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001062:	2304      	movs	r3, #4
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001072:	230c      	movs	r3, #12
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	481d      	ldr	r0, [pc, #116]	@ (80010f4 <MX_GPIO_Init+0x490>)
 800107e:	f000 fba5 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001082:	2378      	movs	r3, #120	@ 0x78
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001092:	2307      	movs	r3, #7
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	4815      	ldr	r0, [pc, #84]	@ (80010f4 <MX_GPIO_Init+0x490>)
 800109e:	f000 fb95 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b4:	2304      	movs	r3, #4
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	480e      	ldr	r0, [pc, #56]	@ (80010f8 <MX_GPIO_Init+0x494>)
 80010c0:	f000 fb84 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c4:	2301      	movs	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010d4:	2302      	movs	r3, #2
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_GPIO_Init+0x498>)
 80010e0:	f000 fb74 	bl	80017cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	@ 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	48001800 	.word	0x48001800
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48001000 	.word	0x48001000

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <Error_Handler+0x8>

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_MspInit+0x44>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001116:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_MspInit+0x44>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6613      	str	r3, [r2, #96]	@ 0x60
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_MspInit+0x44>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_MspInit+0x44>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_MspInit+0x44>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001134:	6593      	str	r3, [r2, #88]	@ 0x58
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_MspInit+0x44>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	@ 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a2f      	ldr	r2, [pc, #188]	@ (8001230 <HAL_SPI_MspInit+0xdc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d129      	bne.n	80011ca <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	4a2e      	ldr	r2, [pc, #184]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 800117c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001180:	6613      	str	r3, [r2, #96]	@ 0x60
 8001182:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011a6:	23e0      	movs	r3, #224	@ 0xe0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2305      	movs	r3, #5
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c4:	f000 fb02 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c8:	e02d      	b.n	8001226 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001238 <HAL_SPI_MspInit+0xe4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d128      	bne.n	8001226 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d8:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011de:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_SPI_MspInit+0xe0>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001204:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001216:	2306      	movs	r3, #6
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4806      	ldr	r0, [pc, #24]	@ (800123c <HAL_SPI_MspInit+0xe8>)
 8001222:	f000 fad3 	bl	80017cc <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	@ 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40013000 	.word	0x40013000
 8001234:	40021000 	.word	0x40021000
 8001238:	40003c00 	.word	0x40003c00
 800123c:	48000800 	.word	0x48000800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b0      	sub	sp, #192	@ 0xc0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	2294      	movs	r2, #148	@ 0x94
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fda5 	bl	8007db0 <memset>
  if(huart->Instance==USART1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <HAL_UART_MspInit+0x138>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13e      	bne.n	80012ee <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001274:	2300      	movs	r3, #0
 8001276:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fbfb 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff ff3a 	bl	8001100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800128c:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <HAL_UART_MspInit+0x13c>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001290:	4a3a      	ldr	r2, [pc, #232]	@ (800137c <HAL_UART_MspInit+0x13c>)
 8001292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001296:	6613      	str	r3, [r2, #96]	@ 0x60
 8001298:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_UART_MspInit+0x13c>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a4:	4b35      	ldr	r3, [pc, #212]	@ (800137c <HAL_UART_MspInit+0x13c>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	4a34      	ldr	r2, [pc, #208]	@ (800137c <HAL_UART_MspInit+0x13c>)
 80012aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b0:	4b32      	ldr	r3, [pc, #200]	@ (800137c <HAL_UART_MspInit+0x13c>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80012bc:	f000 fcf4 	bl	8001ca8 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012da:	2307      	movs	r3, #7
 80012dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012e4:	4619      	mov	r1, r3
 80012e6:	4826      	ldr	r0, [pc, #152]	@ (8001380 <HAL_UART_MspInit+0x140>)
 80012e8:	f000 fa70 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ec:	e040      	b.n	8001370 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a24      	ldr	r2, [pc, #144]	@ (8001384 <HAL_UART_MspInit+0x144>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d13b      	bne.n	8001370 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012f8:	2304      	movs	r3, #4
 80012fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4618      	mov	r0, r3
 8001306:	f001 fbb7 	bl	8002a78 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001310:	f7ff fef6 	bl	8001100 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_UART_MspInit+0x13c>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_UART_MspInit+0x13c>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_UART_MspInit+0x13c>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_UART_MspInit+0x13c>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <HAL_UART_MspInit+0x13c>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_UART_MspInit+0x13c>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001344:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135e:	2307      	movs	r3, #7
 8001360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001364:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	@ (8001388 <HAL_UART_MspInit+0x148>)
 800136c:	f000 fa2e 	bl	80017cc <HAL_GPIO_Init>
}
 8001370:	bf00      	nop
 8001372:	37c0      	adds	r7, #192	@ 0xc0
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	48001800 	.word	0x48001800
 8001384:	40004800 	.word	0x40004800
 8001388:	48000c00 	.word	0x48000c00

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <NMI_Handler+0x4>

08001394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <MemManage_Handler+0x4>

080013a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e2:	f000 f8c9 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f006 fcd0 	bl	8007dc0 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200a0000 	.word	0x200a0000
 800144c:	00000400 	.word	0x00000400
 8001450:	20040284 	.word	0x20040284
 8001454:	20040420 	.word	0x20040420

08001458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ffea 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f006 fc8f 	bl	8007dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fa25 	bl	80008fc <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014b8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80014bc:	20040074 	.word	0x20040074
  ldr r2, =_sidata
 80014c0:	0800885c 	.word	0x0800885c
  ldr r2, =_sbss
 80014c4:	20040074 	.word	0x20040074
  ldr r4, =_ebss
 80014c8:	2004041c 	.word	0x2004041c

080014cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f943 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f80e 	bl	8001500 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fe0c 	bl	800110c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <HAL_InitTick+0x6c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d023      	beq.n	800155c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_InitTick+0x70>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f941 	bl	80017b2 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d809      	bhi.n	8001550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f919 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_InitTick+0x74>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e007      	b.n	8001560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e001      	b.n	8001560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20040008 	.word	0x20040008
 8001570:	20040000 	.word	0x20040000
 8001574:	20040004 	.word	0x20040004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20040008 	.word	0x20040008
 800159c:	20040288 	.word	0x20040288

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20040288 	.word	0x20040288

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20040008 	.word	0x20040008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	@ (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff47 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff5c 	bl	8001648 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffb0 	bl	8001720 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	e166      	b.n	8001aaa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	4013      	ands	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8158 	beq.w	8001aa4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d005      	beq.n	800180c <HAL_GPIO_Init+0x40>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d130      	bne.n	800186e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 0201 	and.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b03      	cmp	r3, #3
 8001878:	d017      	beq.n	80018aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d123      	bne.n	80018fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	220f      	movs	r2, #15
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	691a      	ldr	r2, [r3, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	6939      	ldr	r1, [r7, #16]
 80018fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0203 	and.w	r2, r3, #3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80b2 	beq.w	8001aa4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001940:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001944:	4a60      	ldr	r2, [pc, #384]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6613      	str	r3, [r2, #96]	@ 0x60
 800194c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ac8 <HAL_GPIO_Init+0x2fc>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001958:	4a5c      	ldr	r2, [pc, #368]	@ (8001acc <HAL_GPIO_Init+0x300>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001982:	d02b      	beq.n	80019dc <HAL_GPIO_Init+0x210>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_GPIO_Init+0x304>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d025      	beq.n	80019d8 <HAL_GPIO_Init+0x20c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a51      	ldr	r2, [pc, #324]	@ (8001ad4 <HAL_GPIO_Init+0x308>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01f      	beq.n	80019d4 <HAL_GPIO_Init+0x208>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a50      	ldr	r2, [pc, #320]	@ (8001ad8 <HAL_GPIO_Init+0x30c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d019      	beq.n	80019d0 <HAL_GPIO_Init+0x204>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <HAL_GPIO_Init+0x310>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_GPIO_Init+0x200>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <HAL_GPIO_Init+0x314>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_GPIO_Init+0x1fc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <HAL_GPIO_Init+0x318>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1f8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae8 <HAL_GPIO_Init+0x31c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_GPIO_Init+0x1f4>
 80019bc:	2307      	movs	r3, #7
 80019be:	e00e      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019c0:	2308      	movs	r3, #8
 80019c2:	e00c      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019c4:	2306      	movs	r3, #6
 80019c6:	e00a      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019c8:	2305      	movs	r3, #5
 80019ca:	e008      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019cc:	2304      	movs	r3, #4
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e004      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_GPIO_Init+0x212>
 80019dc:	2300      	movs	r3, #0
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ee:	4937      	ldr	r1, [pc, #220]	@ (8001acc <HAL_GPIO_Init+0x300>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_GPIO_Init+0x320>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a20:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4a:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a74:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a9e:	4a13      	ldr	r2, [pc, #76]	@ (8001aec <HAL_GPIO_Init+0x320>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f ae91 	bne.w	80017dc <HAL_GPIO_Init+0x10>
  }
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	48000c00 	.word	0x48000c00
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	48001400 	.word	0x48001400
 8001ae4:	48001800 	.word	0x48001800
 8001ae8:	48001c00 	.word	0x48001c00
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b30:	d102      	bne.n	8001b38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b36:	e00b      	b.n	8001b50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b46:	d102      	bne.n	8001b4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b4c:	e000      	b.n	8001b50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000

08001b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d141      	bne.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7a:	d131      	bne.n	8001be0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b7c:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b82:	4a46      	ldr	r2, [pc, #280]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8c:	4b43      	ldr	r3, [pc, #268]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b94:	4a41      	ldr	r2, [pc, #260]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2232      	movs	r2, #50	@ 0x32
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb2:	e002      	b.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bba:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc6:	d102      	bne.n	8001bce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f2      	bne.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bce:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bda:	d158      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e057      	b.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001be6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bf0:	e04d      	b.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bf8:	d141      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfa:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c06:	d131      	bne.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0e:	4a23      	ldr	r2, [pc, #140]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c20:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2232      	movs	r2, #50	@ 0x32
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3e:	e002      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c52:	d102      	bne.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f2      	bne.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c66:	d112      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e011      	b.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c7c:	e007      	b.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	20040000 	.word	0x20040000
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb6:	6053      	str	r3, [r2, #4]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f000 bc08 	b.w	80024ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cdc:	4b96      	ldr	r3, [pc, #600]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce6:	4b94      	ldr	r3, [pc, #592]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80e4 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4c>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	f040 808b 	bne.w	8001e22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	f040 8087 	bne.w	8001e22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d14:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x64>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e3df      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	4b81      	ldr	r3, [pc, #516]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_RCC_OscConfig+0x7e>
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_OscConfig+0x8a>
 8001d46:	4b7c      	ldr	r3, [pc, #496]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d223      	bcs.n	8001d9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fdcc 	bl	80028f8 <RCC_SetFlashLatencyFromMSIRange>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e3c0      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6a:	4b73      	ldr	r3, [pc, #460]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a72      	ldr	r2, [pc, #456]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b70      	ldr	r3, [pc, #448]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	496d      	ldr	r1, [pc, #436]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d88:	4b6b      	ldr	r3, [pc, #428]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	4968      	ldr	r1, [pc, #416]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
 8001d9c:	e025      	b.n	8001dea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9e:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a65      	ldr	r2, [pc, #404]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b63      	ldr	r3, [pc, #396]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4960      	ldr	r1, [pc, #384]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	495b      	ldr	r1, [pc, #364]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fd8c 	bl	80028f8 <RCC_SetFlashLatencyFromMSIRange>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e380      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dea:	f000 fcc1 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	4950      	ldr	r1, [pc, #320]	@ (8001f3c <HAL_RCC_OscConfig+0x274>)
 8001dfc:	5ccb      	ldrb	r3, [r1, r3]
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a4e      	ldr	r2, [pc, #312]	@ (8001f40 <HAL_RCC_OscConfig+0x278>)
 8001e08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f44 <HAL_RCC_OscConfig+0x27c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fb76 	bl	8001500 <HAL_InitTick>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d052      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	e364      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d032      	beq.n	8001e90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e2a:	4b43      	ldr	r3, [pc, #268]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a42      	ldr	r2, [pc, #264]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e36:	f7ff fbb3 	bl	80015a0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fbaf 	bl	80015a0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e34d      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4930      	ldr	r1, [pc, #192]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	492b      	ldr	r1, [pc, #172]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e01a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e90:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a28      	ldr	r2, [pc, #160]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb80 	bl	80015a0 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fb7c 	bl	80015a0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e31a      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1dc>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d073      	beq.n	8001fba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x21c>
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d10e      	bne.n	8001efc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d063      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d15f      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2f7      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x24c>
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e025      	b.n	8001f60 <HAL_RCC_OscConfig+0x298>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1c:	d114      	bne.n	8001f48 <HAL_RCC_OscConfig+0x280>
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a02      	ldr	r2, [pc, #8]	@ (8001f38 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e013      	b.n	8001f60 <HAL_RCC_OscConfig+0x298>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08008728 	.word	0x08008728
 8001f40:	20040000 	.word	0x20040000
 8001f44:	20040004 	.word	0x20040004
 8001f48:	4ba0      	ldr	r3, [pc, #640]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a9f      	ldr	r2, [pc, #636]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b9d      	ldr	r3, [pc, #628]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a9c      	ldr	r2, [pc, #624]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fb1a 	bl	80015a0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fb16 	bl	80015a0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e2b4      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	4b92      	ldr	r3, [pc, #584]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x2a8>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fb06 	bl	80015a0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fb02 	bl	80015a0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e2a0      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001faa:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2d0>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d060      	beq.n	8002088 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x310>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d116      	bne.n	8002006 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x328>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e27d      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4973      	ldr	r1, [pc, #460]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002004:	e040      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d023      	beq.n	8002056 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200e:	4b6f      	ldr	r3, [pc, #444]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6e      	ldr	r2, [pc, #440]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff fac1 	bl	80015a0 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7ff fabd 	bl	80015a0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e25b      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002034:	4b65      	ldr	r3, [pc, #404]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b62      	ldr	r3, [pc, #392]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	495f      	ldr	r1, [pc, #380]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e018      	b.n	8002088 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002056:	4b5d      	ldr	r3, [pc, #372]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5c      	ldr	r2, [pc, #368]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 800205c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fa9d 	bl	80015a0 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff fa99 	bl	80015a0 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e237      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800207c:	4b53      	ldr	r3, [pc, #332]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d03c      	beq.n	800210e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209c:	4b4b      	ldr	r3, [pc, #300]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a2:	4a4a      	ldr	r2, [pc, #296]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff fa78 	bl	80015a0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff fa74 	bl	80015a0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e212      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c6:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80020c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ef      	beq.n	80020b4 <HAL_RCC_OscConfig+0x3ec>
 80020d4:	e01b      	b.n	800210e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020dc:	4a3b      	ldr	r2, [pc, #236]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff fa5b 	bl	80015a0 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff fa57 	bl	80015a0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1f5      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1ef      	bne.n	80020ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a6 	beq.w	8002268 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002120:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	4a26      	ldr	r2, [pc, #152]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	@ 0x58
 8002138:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002144:	2301      	movs	r3, #1
 8002146:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_RCC_OscConfig+0x508>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d118      	bne.n	8002186 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_OscConfig+0x508>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_RCC_OscConfig+0x508>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002160:	f7ff fa1e 	bl	80015a0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff fa1a 	bl	80015a0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1b8      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_RCC_OscConfig+0x508>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4d8>
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800219e:	e029      	b.n	80021f4 <HAL_RCC_OscConfig+0x52c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_OscConfig+0x50c>
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <HAL_RCC_OscConfig+0x504>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c8:	e014      	b.n	80021f4 <HAL_RCC_OscConfig+0x52c>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
 80021d4:	4b9d      	ldr	r3, [pc, #628]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	4a9c      	ldr	r2, [pc, #624]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021e4:	4b99      	ldr	r3, [pc, #612]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	4a98      	ldr	r2, [pc, #608]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff f9d0 	bl	80015a0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7ff f9cc 	bl	80015a0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e168      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221a:	4b8c      	ldr	r3, [pc, #560]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ed      	beq.n	8002204 <HAL_RCC_OscConfig+0x53c>
 8002228:	e015      	b.n	8002256 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f9b9 	bl	80015a0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7ff f9b5 	bl	80015a0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e151      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002248:	4b80      	ldr	r3, [pc, #512]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ed      	bne.n	8002232 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7ffb      	ldrb	r3, [r7, #31]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	4a7a      	ldr	r2, [pc, #488]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800227c:	4b73      	ldr	r3, [pc, #460]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800227e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002282:	4a72      	ldr	r2, [pc, #456]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff f988 	bl	80015a0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002294:	f7ff f984 	bl	80015a0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e122      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022a6:	4b69      	ldr	r3, [pc, #420]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80022a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x5cc>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022b6:	4b65      	ldr	r3, [pc, #404]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80022b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7ff f96b 	bl	80015a0 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ce:	f7ff f967 	bl	80015a0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e105      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e0:	4b5a      	ldr	r3, [pc, #360]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80022e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80f9 	beq.w	80024ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 80cf 	bne.w	80024a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002302:	4b52      	ldr	r3, [pc, #328]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0203 	and.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	429a      	cmp	r2, r3
 8002314:	d12c      	bne.n	8002370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	3b01      	subs	r3, #1
 8002322:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d123      	bne.n	8002370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d11b      	bne.n	8002370 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d113      	bne.n	8002370 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	3b01      	subs	r3, #1
 8002356:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d109      	bne.n	8002370 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d071      	beq.n	8002454 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d068      	beq.n	8002448 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002376:	4b35      	ldr	r3, [pc, #212]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002382:	4b32      	ldr	r3, [pc, #200]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0ac      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800239e:	f7ff f8ff 	bl	80015a0 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f8fb 	bl	80015a0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e099      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_RCC_OscConfig+0x788>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	4311      	orrs	r1, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023de:	0212      	lsls	r2, r2, #8
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023e6:	0852      	lsrs	r2, r2, #1
 80023e8:	3a01      	subs	r2, #1
 80023ea:	0552      	lsls	r2, r2, #21
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023f2:	0852      	lsrs	r2, r2, #1
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0652      	lsls	r2, r2, #25
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023fe:	06d2      	lsls	r2, r2, #27
 8002400:	430a      	orrs	r2, r1
 8002402:	4912      	ldr	r1, [pc, #72]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002408:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0f      	ldr	r2, [pc, #60]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002414:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002420:	f7ff f8be 	bl	80015a0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f8ba 	bl	80015a0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e058      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <HAL_RCC_OscConfig+0x784>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002446:	e050      	b.n	80024ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e04f      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
 800244c:	40021000 	.word	0x40021000
 8002450:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d144      	bne.n	80024ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 8002466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800246c:	4b21      	ldr	r3, [pc, #132]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002478:	f7ff f892 	bl	80015a0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff f88e 	bl	80015a0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002492:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x7b8>
 800249e:	e024      	b.n	80024ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d01f      	beq.n	80024e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 80024ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f875 	bl	80015a0 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f871 	bl	80015a0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4905      	ldr	r1, [pc, #20]	@ (80024f4 <HAL_RCC_OscConfig+0x82c>)
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_RCC_OscConfig+0x830>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60cb      	str	r3, [r1, #12]
 80024e4:	e001      	b.n	80024ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	feeefffc 	.word	0xfeeefffc

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e11d      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b90      	ldr	r3, [pc, #576]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d910      	bls.n	8002544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b8d      	ldr	r3, [pc, #564]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 020f 	bic.w	r2, r3, #15
 800252a:	498b      	ldr	r1, [pc, #556]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b89      	ldr	r3, [pc, #548]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e105      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d010      	beq.n	8002572 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	4b81      	ldr	r3, [pc, #516]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800255c:	429a      	cmp	r2, r3
 800255e:	d908      	bls.n	8002572 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b7e      	ldr	r3, [pc, #504]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	497b      	ldr	r1, [pc, #492]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d079      	beq.n	8002672 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d11e      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002586:	4b75      	ldr	r3, [pc, #468]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0dc      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002596:	f000 fa09 	bl	80029ac <RCC_GetSysClockFreqFromPLLSource>
 800259a:	4603      	mov	r3, r0
 800259c:	4a70      	ldr	r2, [pc, #448]	@ (8002760 <HAL_RCC_ClockConfig+0x264>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d946      	bls.n	8002630 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025a2:	4b6e      	ldr	r3, [pc, #440]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d140      	bne.n	8002630 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ae:	4b6b      	ldr	r3, [pc, #428]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b6:	4a69      	ldr	r2, [pc, #420]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e035      	b.n	8002630 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025cc:	4b63      	ldr	r3, [pc, #396]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d115      	bne.n	8002604 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b9      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e4:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0ad      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b59      	ldr	r3, [pc, #356]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0a5      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002604:	f000 f8b4 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 8002608:	4603      	mov	r3, r0
 800260a:	4a55      	ldr	r2, [pc, #340]	@ (8002760 <HAL_RCC_ClockConfig+0x264>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d90f      	bls.n	8002630 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002610:	4b52      	ldr	r3, [pc, #328]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800261c:	4b4f      	ldr	r3, [pc, #316]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002624:	4a4d      	ldr	r2, [pc, #308]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 0203 	bic.w	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4947      	ldr	r1, [pc, #284]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7fe ffad 	bl	80015a0 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e00a      	b.n	8002660 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe ffa9 	bl	80015a0 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e077      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 020c 	and.w	r2, r3, #12
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	429a      	cmp	r2, r3
 8002670:	d1eb      	bne.n	800264a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b80      	cmp	r3, #128	@ 0x80
 8002676:	d105      	bne.n	8002684 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002678:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a37      	ldr	r2, [pc, #220]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800267e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002682:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b31      	ldr	r3, [pc, #196]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800269c:	429a      	cmp	r2, r3
 800269e:	d208      	bcs.n	80026b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	492b      	ldr	r1, [pc, #172]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d210      	bcs.n	80026e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 020f 	bic.w	r2, r3, #15
 80026c8:	4923      	ldr	r1, [pc, #140]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d0:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <HAL_RCC_ClockConfig+0x25c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e036      	b.n	8002750 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ee:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4918      	ldr	r1, [pc, #96]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4910      	ldr	r1, [pc, #64]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002720:	f000 f826 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <HAL_RCC_ClockConfig+0x260>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <HAL_RCC_ClockConfig+0x268>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
 800273c:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x26c>)
 800273e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_RCC_ClockConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fedb 	bl	8001500 <HAL_InitTick>
 800274a:	4603      	mov	r3, r0
 800274c:	73fb      	strb	r3, [r7, #15]

  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40022000 	.word	0x40022000
 800275c:	40021000 	.word	0x40021000
 8002760:	04c4b400 	.word	0x04c4b400
 8002764:	08008728 	.word	0x08008728
 8002768:	20040000 	.word	0x20040000
 800276c:	20040004 	.word	0x20040004

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	@ 0x24
 8002774:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b3e      	ldr	r3, [pc, #248]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d121      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d11e      	bne.n	80027e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b0:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027cc:	4a2b      	ldr	r2, [pc, #172]	@ (800287c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e004      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f4:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x114>)
 80027f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d134      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0xa6>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d003      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0xac>
 8002814:	e005      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x110>)
 8002818:	617b      	str	r3, [r7, #20]
      break;
 800281a:	e005      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x114>)
 800281e:	617b      	str	r3, [r7, #20]
      break;
 8002820:	e002      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	617b      	str	r3, [r7, #20]
      break;
 8002826:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3301      	adds	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	fb03 f202 	mul.w	r2, r3, r2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800284e:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	0e5b      	lsrs	r3, r3, #25
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	3301      	adds	r3, #1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002868:	69bb      	ldr	r3, [r7, #24]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	08008740 	.word	0x08008740
 8002880:	00f42400 	.word	0x00f42400
 8002884:	007a1200 	.word	0x007a1200

08002888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b03      	ldr	r3, [pc, #12]	@ (800289c <HAL_RCC_GetHCLKFreq+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20040000 	.word	0x20040000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028a4:	f7ff fff0 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08008738 	.word	0x08008738

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028d0:	f7ff ffda 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0adb      	lsrs	r3, r3, #11
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4904      	ldr	r1, [pc, #16]	@ (80028f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08008738 	.word	0x08008738

080028f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002910:	f7ff f906 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 8002914:	6178      	str	r0, [r7, #20]
 8002916:	e014      	b.n	8002942 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6593      	str	r3, [r2, #88]	@ 0x58
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002930:	f7ff f8f6 	bl	8001b20 <HAL_PWREx_GetVoltageRange>
 8002934:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002940:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002948:	d10b      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b80      	cmp	r3, #128	@ 0x80
 800294e:	d913      	bls.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2ba0      	cmp	r3, #160	@ 0xa0
 8002954:	d902      	bls.n	800295c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002956:	2302      	movs	r3, #2
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e00d      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	e00a      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b7f      	cmp	r3, #127	@ 0x7f
 8002966:	d902      	bls.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002968:	2302      	movs	r3, #2
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	e004      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b70      	cmp	r3, #112	@ 0x70
 8002972:	d101      	bne.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002974:	2301      	movs	r3, #1
 8002976:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 020f 	bic.w	r2, r3, #15
 8002980:	4909      	ldr	r1, [pc, #36]	@ (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002988:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40022000 	.word	0x40022000

080029ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d00b      	beq.n	80029da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d825      	bhi.n	8002a14 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d008      	beq.n	80029e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d11f      	bne.n	8002a14 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80029d4:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029d6:	613b      	str	r3, [r7, #16]
    break;
 80029d8:	e01f      	b.n	8002a1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80029da:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80029dc:	613b      	str	r3, [r7, #16]
    break;
 80029de:	e01c      	b.n	8002a1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e0:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e005      	b.n	8002a08 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002a08:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	613b      	str	r3, [r7, #16]
    break;
 8002a12:	e002      	b.n	8002a1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
    break;
 8002a18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	3301      	adds	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	fb03 f202 	mul.w	r2, r3, r2
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0e5b      	lsrs	r3, r3, #25
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a5a:	683b      	ldr	r3, [r7, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	08008740 	.word	0x08008740

08002a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a80:	2300      	movs	r3, #0
 8002a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a84:	2300      	movs	r3, #0
 8002a86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d040      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a98:	2b80      	cmp	r3, #128	@ 0x80
 8002a9a:	d02a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a9c:	2b80      	cmp	r3, #128	@ 0x80
 8002a9e:	d825      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002aa0:	2b60      	cmp	r3, #96	@ 0x60
 8002aa2:	d026      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002aa4:	2b60      	cmp	r3, #96	@ 0x60
 8002aa6:	d821      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d006      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	d81d      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d010      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ab8:	e018      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aba:	4b89      	ldr	r3, [pc, #548]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a88      	ldr	r2, [pc, #544]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac6:	e015      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fb02 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3320      	adds	r3, #32
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fbed 	bl	80032c0 <RCCEx_PLLSAI2_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aea:	e003      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	74fb      	strb	r3, [r7, #19]
      break;
 8002af0:	e000      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002afa:	4b79      	ldr	r3, [pc, #484]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b00:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b08:	4975      	ldr	r1, [pc, #468]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b10:	e001      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d047      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d030      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b30:	d82a      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b36:	d02a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b3c:	d824      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b42:	d008      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d81e      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b52:	d010      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b54:	e018      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b56:	4b62      	ldr	r3, [pc, #392]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a61      	ldr	r2, [pc, #388]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b62:	e015      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fab4 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3320      	adds	r3, #32
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fb9f 	bl	80032c0 <RCCEx_PLLSAI2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b96:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	494e      	ldr	r1, [pc, #312]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002bac:	e001      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 809f 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bc4:	4b46      	ldr	r3, [pc, #280]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b41      	ldr	r3, [pc, #260]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	4a40      	ldr	r2, [pc, #256]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c02:	f7fe fccd 	bl	80015a0 <HAL_GetTick>
 8002c06:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c08:	e009      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0a:	f7fe fcc9 	bl	80015a0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d902      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c1c:	e005      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0ef      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d15b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c3a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01f      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d019      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d016      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fc88 	bl	80015a0 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c92:	e00b      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fc84 	bl	80015a0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d902      	bls.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	74fb      	strb	r3, [r7, #19]
            break;
 8002caa:	e006      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ec      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc0:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd0:	4903      	ldr	r1, [pc, #12]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002cd8:	e008      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	74bb      	strb	r3, [r7, #18]
 8002cde:	e005      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cec:	7c7b      	ldrb	r3, [r7, #17]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf2:	4ba0      	ldr	r3, [pc, #640]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	4a9f      	ldr	r2, [pc, #636]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d0a:	4b9a      	ldr	r3, [pc, #616]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d10:	f023 0203 	bic.w	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d18:	4996      	ldr	r1, [pc, #600]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d2c:	4b91      	ldr	r3, [pc, #580]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	f023 020c 	bic.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	498e      	ldr	r1, [pc, #568]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4e:	4b89      	ldr	r3, [pc, #548]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	4985      	ldr	r1, [pc, #532]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d70:	4b80      	ldr	r3, [pc, #512]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	497d      	ldr	r1, [pc, #500]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d92:	4b78      	ldr	r3, [pc, #480]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da0:	4974      	ldr	r1, [pc, #464]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc2:	496c      	ldr	r1, [pc, #432]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd6:	4b67      	ldr	r3, [pc, #412]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002de4:	4963      	ldr	r1, [pc, #396]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002df8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e06:	495b      	ldr	r1, [pc, #364]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1a:	4b56      	ldr	r3, [pc, #344]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e28:	4952      	ldr	r1, [pc, #328]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	494a      	ldr	r1, [pc, #296]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5e:	4b45      	ldr	r3, [pc, #276]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	4941      	ldr	r1, [pc, #260]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8e:	4939      	ldr	r1, [pc, #228]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea2:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb0:	4930      	ldr	r1, [pc, #192]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ecc:	60d3      	str	r3, [r2, #12]
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f8f9 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d04d      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f08:	d108      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f10:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f16:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f1a:	e012      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002f1c:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f22:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f28:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3a:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a08      	ldr	r2, [pc, #32]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
 8002f58:	e020      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f62:	d109      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a02      	ldr	r2, [pc, #8]	@ (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6e:	60d3      	str	r3, [r2, #12]
 8002f70:	e014      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8a5 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d028      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb6:	4947      	ldr	r1, [pc, #284]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc8:	4b42      	ldr	r3, [pc, #264]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a41      	ldr	r2, [pc, #260]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd2:	60d3      	str	r3, [r2, #12]
 8002fd4:	e011      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f876 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01e      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003016:	492f      	ldr	r1, [pc, #188]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003028:	d10c      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	2102      	movs	r1, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f851 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003050:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003056:	f023 0204 	bic.w	r2, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003060:	491c      	ldr	r1, [pc, #112]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800307a:	f023 0218 	bic.w	r2, r3, #24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003084:	4913      	ldr	r1, [pc, #76]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d017      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003098:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ba:	d105      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000

080030d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030e6:	4b72      	ldr	r3, [pc, #456]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f2:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0203 	and.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d103      	bne.n	800310a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
       ||
 8003106:	2b00      	cmp	r3, #0
 8003108:	d142      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e03f      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d018      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x72>
 8003118:	2b03      	cmp	r3, #3
 800311a:	d825      	bhi.n	8003168 <RCCEx_PLLSAI1_Config+0x90>
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x4e>
 8003120:	2b02      	cmp	r3, #2
 8003122:	d009      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x60>
 8003124:	e020      	b.n	8003168 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003126:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11d      	bne.n	800316e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e01a      	b.n	800316e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003138:	4b5d      	ldr	r3, [pc, #372]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e013      	b.n	8003172 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800314a:	4b59      	ldr	r3, [pc, #356]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003156:	4b56      	ldr	r3, [pc, #344]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003166:	e006      	b.n	8003176 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e004      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003176:	bf00      	nop
    }

    if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800317e:	4b4c      	ldr	r3, [pc, #304]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4949      	ldr	r1, [pc, #292]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8086 	bne.w	80032a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003198:	4b45      	ldr	r3, [pc, #276]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a44      	ldr	r2, [pc, #272]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fe f9fc 	bl	80015a0 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031aa:	e009      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ac:	f7fe f9f8 	bl	80015a0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d902      	bls.n	80031c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	73fb      	strb	r3, [r7, #15]
        break;
 80031be:	e005      	b.n	80031cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c0:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ef      	bne.n	80031ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d168      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d113      	bne.n	8003200 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d8:	4b35      	ldr	r3, [pc, #212]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	4b35      	ldr	r3, [pc, #212]	@ (80032b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	06d2      	lsls	r2, r2, #27
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6852      	ldr	r2, [r2, #4]
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	430a      	orrs	r2, r1
 80031f8:	492d      	ldr	r1, [pc, #180]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	610b      	str	r3, [r1, #16]
 80031fe:	e02d      	b.n	800325c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d115      	bne.n	8003232 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003206:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	4b2b      	ldr	r3, [pc, #172]	@ (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	0211      	lsls	r1, r2, #8
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6912      	ldr	r2, [r2, #16]
 8003218:	0852      	lsrs	r2, r2, #1
 800321a:	3a01      	subs	r2, #1
 800321c:	0552      	lsls	r2, r2, #21
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6852      	ldr	r2, [r2, #4]
 8003224:	3a01      	subs	r2, #1
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	430a      	orrs	r2, r1
 800322a:	4921      	ldr	r1, [pc, #132]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	610b      	str	r3, [r1, #16]
 8003230:	e014      	b.n	800325c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003232:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	0211      	lsls	r1, r2, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6952      	ldr	r2, [r2, #20]
 8003244:	0852      	lsrs	r2, r2, #1
 8003246:	3a01      	subs	r2, #1
 8003248:	0652      	lsls	r2, r2, #25
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6852      	ldr	r2, [r2, #4]
 8003250:	3a01      	subs	r2, #1
 8003252:	0112      	lsls	r2, r2, #4
 8003254:	430a      	orrs	r2, r1
 8003256:	4916      	ldr	r1, [pc, #88]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003258:	4313      	orrs	r3, r2
 800325a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800325c:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003262:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003266:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f99a 	bl	80015a0 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800326e:	e009      	b.n	8003284 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003270:	f7fe f996 	bl	80015a0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	73fb      	strb	r3, [r7, #15]
          break;
 8003282:	e005      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003284:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	4904      	ldr	r1, [pc, #16]	@ (80032b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	07ff800f 	.word	0x07ff800f
 80032b8:	ff9f800f 	.word	0xff9f800f
 80032bc:	f9ff800f 	.word	0xf9ff800f

080032c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ce:	4b72      	ldr	r3, [pc, #456]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032da:	4b6f      	ldr	r3, [pc, #444]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d103      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
       ||
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d142      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e03f      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d018      	beq.n	8003332 <RCCEx_PLLSAI2_Config+0x72>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d825      	bhi.n	8003350 <RCCEx_PLLSAI2_Config+0x90>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <RCCEx_PLLSAI2_Config+0x4e>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d009      	beq.n	8003320 <RCCEx_PLLSAI2_Config+0x60>
 800330c:	e020      	b.n	8003350 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330e:	4b62      	ldr	r3, [pc, #392]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e01a      	b.n	8003356 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003320:	4b5d      	ldr	r3, [pc, #372]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e013      	b.n	800335a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003332:	4b59      	ldr	r3, [pc, #356]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333e:	4b56      	ldr	r3, [pc, #344]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334e:	e006      	b.n	800335e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e004      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800335e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003366:	4b4c      	ldr	r3, [pc, #304]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4949      	ldr	r1, [pc, #292]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003374:	4313      	orrs	r3, r2
 8003376:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 8086 	bne.w	800348c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003380:	4b45      	ldr	r3, [pc, #276]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a44      	ldr	r2, [pc, #272]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800338a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fe f908 	bl	80015a0 <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003392:	e009      	b.n	80033a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003394:	f7fe f904 	bl	80015a0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d902      	bls.n	80033a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	73fb      	strb	r3, [r7, #15]
        break;
 80033a6:	e005      	b.n	80033b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ef      	bne.n	8003394 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d168      	bne.n	800348c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c0:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <RCCEx_PLLSAI2_Config+0x1dc>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	06d2      	lsls	r2, r2, #27
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6852      	ldr	r2, [r2, #4]
 80033da:	3a01      	subs	r2, #1
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	430a      	orrs	r2, r1
 80033e0:	492d      	ldr	r1, [pc, #180]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	614b      	str	r3, [r1, #20]
 80033e6:	e02d      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d115      	bne.n	800341a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6892      	ldr	r2, [r2, #8]
 80033fa:	0211      	lsls	r1, r2, #8
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6912      	ldr	r2, [r2, #16]
 8003400:	0852      	lsrs	r2, r2, #1
 8003402:	3a01      	subs	r2, #1
 8003404:	0552      	lsls	r2, r2, #21
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6852      	ldr	r2, [r2, #4]
 800340c:	3a01      	subs	r2, #1
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	430a      	orrs	r2, r1
 8003412:	4921      	ldr	r1, [pc, #132]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003414:	4313      	orrs	r3, r2
 8003416:	614b      	str	r3, [r1, #20]
 8003418:	e014      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800341a:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003420:	4013      	ands	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	0211      	lsls	r1, r2, #8
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6952      	ldr	r2, [r2, #20]
 800342c:	0852      	lsrs	r2, r2, #1
 800342e:	3a01      	subs	r2, #1
 8003430:	0652      	lsls	r2, r2, #25
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6852      	ldr	r2, [r2, #4]
 8003438:	3a01      	subs	r2, #1
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	430a      	orrs	r2, r1
 800343e:	4916      	ldr	r1, [pc, #88]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003440:	4313      	orrs	r3, r2
 8003442:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003444:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a13      	ldr	r2, [pc, #76]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe f8a6 	bl	80015a0 <HAL_GetTick>
 8003454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003456:	e009      	b.n	800346c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003458:	f7fe f8a2 	bl	80015a0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	73fb      	strb	r3, [r7, #15]
          break;
 800346a:	e005      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4904      	ldr	r1, [pc, #16]	@ (8003498 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003488:	4313      	orrs	r3, r2
 800348a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	07ff800f 	.word	0x07ff800f
 80034a0:	ff9f800f 	.word	0xff9f800f
 80034a4:	f9ff800f 	.word	0xf9ff800f

080034a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e095      	b.n	80035e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d009      	beq.n	80034e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fe2a 	bl	8001154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003520:	d902      	bls.n	8003528 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e002      	b.n	800352e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800352c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003536:	d007      	beq.n	8003548 <HAL_SPI_Init+0xa0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	ea42 0103 	orr.w	r1, r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	f003 0204 	and.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b088      	sub	sp, #32
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fe:	f7fd ffcf 	bl	80015a0 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
 8003616:	e15c      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Transmit+0x36>
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e154      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_SPI_Transmit+0x48>
 8003632:	2302      	movs	r3, #2
 8003634:	e14d      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003688:	d10f      	bne.n	80036aa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003698:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d007      	beq.n	80036c8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d0:	d952      	bls.n	8003778 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_SPI_Transmit+0xf2>
 80036da:	8b7b      	ldrh	r3, [r7, #26]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d145      	bne.n	800376c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003704:	e032      	b.n	800376c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d112      	bne.n	800373a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003738:	e018      	b.n	800376c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373a:	f7fd ff31 	bl	80015a0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_Transmit+0x164>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Transmit+0x16a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0b2      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1c7      	bne.n	8003706 <HAL_SPI_Transmit+0x118>
 8003776:	e083      	b.n	8003880 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_Transmit+0x198>
 8003780:	8b7b      	ldrh	r3, [r7, #26]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d177      	bne.n	8003876 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d912      	bls.n	80037b6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b02      	subs	r3, #2
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037b4:	e05f      	b.n	8003876 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037dc:	e04b      	b.n	8003876 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d12b      	bne.n	8003844 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d912      	bls.n	800381c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	1c9a      	adds	r2, r3, #2
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b02      	subs	r3, #2
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800381a:	e02c      	b.n	8003876 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003842:	e018      	b.n	8003876 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003844:	f7fd feac 	bl	80015a0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_Transmit+0x26e>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Transmit+0x274>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e02d      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ae      	bne.n	80037de <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fb65 	bl	8003f54 <SPI_EndRxTxTransaction>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08a      	sub	sp, #40	@ 0x28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038e8:	2301      	movs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ec:	f7fd fe58 	bl	80015a0 <HAL_GetTick>
 80038f0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038f8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003908:	7ffb      	ldrb	r3, [r7, #31]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d00c      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x4e>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003914:	d106      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x4a>
 800391e:	7ffb      	ldrb	r3, [r7, #31]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d001      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	e1f3      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_SPI_TransmitReceive+0x60>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_TransmitReceive+0x60>
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1e8      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_SPI_TransmitReceive+0x72>
 8003948:	2302      	movs	r3, #2
 800394a:	e1e1      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b04      	cmp	r3, #4
 800395e:	d003      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2205      	movs	r2, #5
 8003964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	887a      	ldrh	r2, [r7, #2]
 800398e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	887a      	ldrh	r2, [r7, #2]
 8003994:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039aa:	d802      	bhi.n	80039b2 <HAL_SPI_TransmitReceive+0xd8>
 80039ac:	8abb      	ldrh	r3, [r7, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d908      	bls.n	80039c4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	e007      	b.n	80039d4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d007      	beq.n	80039f2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039fa:	f240 8083 	bls.w	8003b04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x132>
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d16f      	bne.n	8003aec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a30:	e05c      	b.n	8003aec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x19e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x19e>
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d113      	bne.n	8003a78 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d11c      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x1e6>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	1c9a      	adds	r2, r3, #2
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003abc:	2301      	movs	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ac0:	f7fd fd6e 	bl	80015a0 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d80d      	bhi.n	8003aec <HAL_SPI_TransmitReceive+0x212>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d009      	beq.n	8003aec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e111      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d19d      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x158>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d197      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x158>
 8003b02:	e0e5      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x23a>
 8003b0c:	8afb      	ldrh	r3, [r7, #22]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f040 80d1 	bne.w	8003cb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d912      	bls.n	8003b44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	1c9a      	adds	r2, r3, #2
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b02      	subs	r3, #2
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b42:	e0b8      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b6a:	e0a4      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d134      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x30a>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02f      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x30a>
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d12c      	bne.n	8003be4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d912      	bls.n	8003bba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b02      	subs	r3, #2
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bb8:	e012      	b.n	8003be0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d148      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x3aa>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d042      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d923      	bls.n	8003c52 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b02      	subs	r3, #2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d81f      	bhi.n	8003c80 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	e016      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f103 020c 	add.w	r2, r3, #12
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c80:	2301      	movs	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c84:	f7fd fc8c 	bl	80015a0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d803      	bhi.n	8003c9c <HAL_SPI_TransmitReceive+0x3c2>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d102      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x3c8>
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e02c      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f af55 	bne.w	8003b6c <HAL_SPI_TransmitReceive+0x292>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f47f af4e 	bne.w	8003b6c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f93d 	bl	8003f54 <SPI_EndRxTxTransaction>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e00e      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3728      	adds	r7, #40	@ 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d28:	f7fd fc3a 	bl	80015a0 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d38:	f7fd fc32 	bl	80015a0 <HAL_GetTick>
 8003d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d3e:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	015b      	lsls	r3, r3, #5
 8003d44:	0d1b      	lsrs	r3, r3, #20
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d4e:	e054      	b.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d050      	beq.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d58:	f7fd fc22 	bl	80015a0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d902      	bls.n	8003d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13d      	bne.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d86:	d111      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d90:	d004      	beq.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d107      	bne.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db4:	d10f      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e017      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d19b      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20040000 	.word	0x20040000

08003e28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e3a:	f7fd fbb1 	bl	80015a0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e4a:	f7fd fba9 	bl	80015a0 <HAL_GetTick>
 8003e4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	330c      	adds	r3, #12
 8003e56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e58:	4b3d      	ldr	r3, [pc, #244]	@ (8003f50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00da      	lsls	r2, r3, #3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	0d1b      	lsrs	r3, r3, #20
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e70:	e060      	b.n	8003f34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e78:	d107      	bne.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d050      	beq.n	8003f34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e92:	f7fd fb85 	bl	80015a0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d902      	bls.n	8003ea8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13d      	bne.n	8003f24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec0:	d111      	bne.n	8003ee6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eca:	d004      	beq.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed4:	d107      	bne.n	8003ee6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eee:	d10f      	bne.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e010      	b.n	8003f46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d196      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3728      	adds	r7, #40	@ 0x28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20040000 	.word	0x20040000

08003f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff ff5b 	bl	8003e28 <SPI_WaitFifoStateUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e027      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2180      	movs	r1, #128	@ 0x80
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7ff fec0 	bl	8003d18 <SPI_WaitFlagStateUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e014      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff ff34 	bl	8003e28 <SPI_WaitFifoStateUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e000      	b.n	8003fd8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e042      	b.n	8004078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fd f91b 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	@ 0x24
 800400e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fc7c 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f97d 	bl	8004330 <UART_SetConfig>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e01b      	b.n	8004078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800404e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800405e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fcfb 	bl	8004a6c <UART_CheckIdleState>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	@ 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	2b20      	cmp	r3, #32
 8004098:	d17b      	bne.n	8004192 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_Transmit+0x26>
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e074      	b.n	8004194 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2221      	movs	r2, #33	@ 0x21
 80040b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ba:	f7fd fa71 	bl	80015a0 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d108      	bne.n	80040ec <HAL_UART_Transmit+0x6c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e003      	b.n	80040f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f4:	e030      	b.n	8004158 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fd5d 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e03d      	b.n	8004194 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	881a      	ldrh	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412a:	b292      	uxth	r2, r2
 800412c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3302      	adds	r3, #2
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e007      	b.n	8004146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1c8      	bne.n	80040f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2200      	movs	r2, #0
 800416c:	2140      	movs	r1, #64	@ 0x40
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fd26 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e006      	b.n	8004194 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	@ 0x28
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	f040 80b6 	bne.w	8004324 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Receive+0x28>
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0ae      	b.n	8004326 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2222      	movs	r2, #34	@ 0x22
 80041d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041de:	f7fd f9df 	bl	80015a0 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fc:	d10e      	bne.n	800421c <HAL_UART_Receive+0x80>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_UART_Receive+0x76>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800420c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004210:	e02d      	b.n	800426e <HAL_UART_Receive+0xd2>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	22ff      	movs	r2, #255	@ 0xff
 8004216:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800421a:	e028      	b.n	800426e <HAL_UART_Receive+0xd2>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_UART_Receive+0xa4>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_UART_Receive+0x9a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	22ff      	movs	r2, #255	@ 0xff
 8004230:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004234:	e01b      	b.n	800426e <HAL_UART_Receive+0xd2>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	227f      	movs	r2, #127	@ 0x7f
 800423a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800423e:	e016      	b.n	800426e <HAL_UART_Receive+0xd2>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004248:	d10d      	bne.n	8004266 <HAL_UART_Receive+0xca>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <HAL_UART_Receive+0xc0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	227f      	movs	r2, #127	@ 0x7f
 8004256:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800425a:	e008      	b.n	800426e <HAL_UART_Receive+0xd2>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	223f      	movs	r2, #63	@ 0x3f
 8004260:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004264:	e003      	b.n	800426e <HAL_UART_Receive+0xd2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004274:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427e:	d108      	bne.n	8004292 <HAL_UART_Receive+0xf6>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e003      	b.n	800429a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800429a:	e037      	b.n	800430c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2120      	movs	r1, #32
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fc8a 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e033      	b.n	8004326 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10c      	bne.n	80042de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	8a7b      	ldrh	r3, [r7, #18]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	3302      	adds	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	e00d      	b.n	80042fa <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8a7b      	ldrh	r3, [r7, #18]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	4013      	ands	r3, r2
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1c1      	bne.n	800429c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b08c      	sub	sp, #48	@ 0x30
 8004336:	af00      	add	r7, sp, #0
 8004338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4baa      	ldr	r3, [pc, #680]	@ (8004608 <UART_SetConfig+0x2d8>)
 8004360:	4013      	ands	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004368:	430b      	orrs	r3, r1
 800436a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a9f      	ldr	r2, [pc, #636]	@ (800460c <UART_SetConfig+0x2dc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004398:	4313      	orrs	r3, r2
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f023 010f 	bic.w	r1, r3, #15
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a90      	ldr	r2, [pc, #576]	@ (8004610 <UART_SetConfig+0x2e0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d125      	bne.n	8004420 <UART_SetConfig+0xf0>
 80043d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004614 <UART_SetConfig+0x2e4>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d81a      	bhi.n	8004418 <UART_SetConfig+0xe8>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <UART_SetConfig+0xb8>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004411 	.word	0x08004411
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	e116      	b.n	800462e <UART_SetConfig+0x2fe>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004406:	e112      	b.n	800462e <UART_SetConfig+0x2fe>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440e:	e10e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004416:	e10a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e106      	b.n	800462e <UART_SetConfig+0x2fe>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a7c      	ldr	r2, [pc, #496]	@ (8004618 <UART_SetConfig+0x2e8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d138      	bne.n	800449c <UART_SetConfig+0x16c>
 800442a:	4b7a      	ldr	r3, [pc, #488]	@ (8004614 <UART_SetConfig+0x2e4>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d82d      	bhi.n	8004494 <UART_SetConfig+0x164>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <UART_SetConfig+0x110>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004475 	.word	0x08004475
 8004444:	08004495 	.word	0x08004495
 8004448:	08004495 	.word	0x08004495
 800444c:	08004495 	.word	0x08004495
 8004450:	08004485 	.word	0x08004485
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004495 	.word	0x08004495
 8004460:	0800447d 	.word	0x0800447d
 8004464:	08004495 	.word	0x08004495
 8004468:	08004495 	.word	0x08004495
 800446c:	08004495 	.word	0x08004495
 8004470:	0800448d 	.word	0x0800448d
 8004474:	2300      	movs	r3, #0
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e0d8      	b.n	800462e <UART_SetConfig+0x2fe>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e0d4      	b.n	800462e <UART_SetConfig+0x2fe>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e0d0      	b.n	800462e <UART_SetConfig+0x2fe>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e0cc      	b.n	800462e <UART_SetConfig+0x2fe>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e0c8      	b.n	800462e <UART_SetConfig+0x2fe>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5e      	ldr	r2, [pc, #376]	@ (800461c <UART_SetConfig+0x2ec>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d125      	bne.n	80044f2 <UART_SetConfig+0x1c2>
 80044a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004614 <UART_SetConfig+0x2e4>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044b0:	2b30      	cmp	r3, #48	@ 0x30
 80044b2:	d016      	beq.n	80044e2 <UART_SetConfig+0x1b2>
 80044b4:	2b30      	cmp	r3, #48	@ 0x30
 80044b6:	d818      	bhi.n	80044ea <UART_SetConfig+0x1ba>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d00a      	beq.n	80044d2 <UART_SetConfig+0x1a2>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d814      	bhi.n	80044ea <UART_SetConfig+0x1ba>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <UART_SetConfig+0x19a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d008      	beq.n	80044da <UART_SetConfig+0x1aa>
 80044c8:	e00f      	b.n	80044ea <UART_SetConfig+0x1ba>
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d0:	e0ad      	b.n	800462e <UART_SetConfig+0x2fe>
 80044d2:	2302      	movs	r3, #2
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d8:	e0a9      	b.n	800462e <UART_SetConfig+0x2fe>
 80044da:	2304      	movs	r3, #4
 80044dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e0:	e0a5      	b.n	800462e <UART_SetConfig+0x2fe>
 80044e2:	2308      	movs	r3, #8
 80044e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e8:	e0a1      	b.n	800462e <UART_SetConfig+0x2fe>
 80044ea:	2310      	movs	r3, #16
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f0:	e09d      	b.n	800462e <UART_SetConfig+0x2fe>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004620 <UART_SetConfig+0x2f0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d125      	bne.n	8004548 <UART_SetConfig+0x218>
 80044fc:	4b45      	ldr	r3, [pc, #276]	@ (8004614 <UART_SetConfig+0x2e4>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004506:	2bc0      	cmp	r3, #192	@ 0xc0
 8004508:	d016      	beq.n	8004538 <UART_SetConfig+0x208>
 800450a:	2bc0      	cmp	r3, #192	@ 0xc0
 800450c:	d818      	bhi.n	8004540 <UART_SetConfig+0x210>
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d00a      	beq.n	8004528 <UART_SetConfig+0x1f8>
 8004512:	2b80      	cmp	r3, #128	@ 0x80
 8004514:	d814      	bhi.n	8004540 <UART_SetConfig+0x210>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <UART_SetConfig+0x1f0>
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	d008      	beq.n	8004530 <UART_SetConfig+0x200>
 800451e:	e00f      	b.n	8004540 <UART_SetConfig+0x210>
 8004520:	2300      	movs	r3, #0
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e082      	b.n	800462e <UART_SetConfig+0x2fe>
 8004528:	2302      	movs	r3, #2
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e07e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e07a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e076      	b.n	800462e <UART_SetConfig+0x2fe>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e072      	b.n	800462e <UART_SetConfig+0x2fe>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a35      	ldr	r2, [pc, #212]	@ (8004624 <UART_SetConfig+0x2f4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12a      	bne.n	80045a8 <UART_SetConfig+0x278>
 8004552:	4b30      	ldr	r3, [pc, #192]	@ (8004614 <UART_SetConfig+0x2e4>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004560:	d01a      	beq.n	8004598 <UART_SetConfig+0x268>
 8004562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004566:	d81b      	bhi.n	80045a0 <UART_SetConfig+0x270>
 8004568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800456c:	d00c      	beq.n	8004588 <UART_SetConfig+0x258>
 800456e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004572:	d815      	bhi.n	80045a0 <UART_SetConfig+0x270>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <UART_SetConfig+0x250>
 8004578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800457c:	d008      	beq.n	8004590 <UART_SetConfig+0x260>
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x270>
 8004580:	2300      	movs	r3, #0
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e052      	b.n	800462e <UART_SetConfig+0x2fe>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e04e      	b.n	800462e <UART_SetConfig+0x2fe>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e04a      	b.n	800462e <UART_SetConfig+0x2fe>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459e:	e046      	b.n	800462e <UART_SetConfig+0x2fe>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e042      	b.n	800462e <UART_SetConfig+0x2fe>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	@ (800460c <UART_SetConfig+0x2dc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d13a      	bne.n	8004628 <UART_SetConfig+0x2f8>
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <UART_SetConfig+0x2e4>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c0:	d01a      	beq.n	80045f8 <UART_SetConfig+0x2c8>
 80045c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045c6:	d81b      	bhi.n	8004600 <UART_SetConfig+0x2d0>
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045cc:	d00c      	beq.n	80045e8 <UART_SetConfig+0x2b8>
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d2:	d815      	bhi.n	8004600 <UART_SetConfig+0x2d0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <UART_SetConfig+0x2b0>
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045dc:	d008      	beq.n	80045f0 <UART_SetConfig+0x2c0>
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x2d0>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e6:	e022      	b.n	800462e <UART_SetConfig+0x2fe>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	e01e      	b.n	800462e <UART_SetConfig+0x2fe>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f6:	e01a      	b.n	800462e <UART_SetConfig+0x2fe>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	e016      	b.n	800462e <UART_SetConfig+0x2fe>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004606:	e012      	b.n	800462e <UART_SetConfig+0x2fe>
 8004608:	cfff69f3 	.word	0xcfff69f3
 800460c:	40008000 	.word	0x40008000
 8004610:	40013800 	.word	0x40013800
 8004614:	40021000 	.word	0x40021000
 8004618:	40004400 	.word	0x40004400
 800461c:	40004800 	.word	0x40004800
 8004620:	40004c00 	.word	0x40004c00
 8004624:	40005000 	.word	0x40005000
 8004628:	2310      	movs	r3, #16
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4aae      	ldr	r2, [pc, #696]	@ (80048ec <UART_SetConfig+0x5bc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f040 8097 	bne.w	8004768 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800463a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800463e:	2b08      	cmp	r3, #8
 8004640:	d823      	bhi.n	800468a <UART_SetConfig+0x35a>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x318>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800466d 	.word	0x0800466d
 800464c:	0800468b 	.word	0x0800468b
 8004650:	08004675 	.word	0x08004675
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800467b 	.word	0x0800467b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	0800468b 	.word	0x0800468b
 8004664:	0800468b 	.word	0x0800468b
 8004668:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe f918 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8004670:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b9e      	ldr	r3, [pc, #632]	@ (80048f0 <UART_SetConfig+0x5c0>)
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe f879 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800467e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8130 	beq.w	80048fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	4a94      	ldr	r2, [pc, #592]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80046a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d305      	bcc.n	80046ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046d4:	e113      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2200      	movs	r2, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	60fa      	str	r2, [r7, #12]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	4a84      	ldr	r2, [pc, #528]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80046e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2200      	movs	r2, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f8:	f7fb fdd2 	bl	80002a0 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	020b      	lsls	r3, r1, #8
 800470e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004712:	0202      	lsls	r2, r0, #8
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	6849      	ldr	r1, [r1, #4]
 8004718:	0849      	lsrs	r1, r1, #1
 800471a:	2000      	movs	r0, #0
 800471c:	460c      	mov	r4, r1
 800471e:	4605      	mov	r5, r0
 8004720:	eb12 0804 	adds.w	r8, r2, r4
 8004724:	eb43 0905 	adc.w	r9, r3, r5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	469a      	mov	sl, r3
 8004730:	4693      	mov	fp, r2
 8004732:	4652      	mov	r2, sl
 8004734:	465b      	mov	r3, fp
 8004736:	4640      	mov	r0, r8
 8004738:	4649      	mov	r1, r9
 800473a:	f7fb fdb1 	bl	80002a0 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4613      	mov	r3, r2
 8004744:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474c:	d308      	bcc.n	8004760 <UART_SetConfig+0x430>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004754:	d204      	bcs.n	8004760 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e0ce      	b.n	80048fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004766:	e0ca      	b.n	80048fe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004770:	d166      	bne.n	8004840 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004772:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004776:	2b08      	cmp	r3, #8
 8004778:	d827      	bhi.n	80047ca <UART_SetConfig+0x49a>
 800477a:	a201      	add	r2, pc, #4	@ (adr r2, 8004780 <UART_SetConfig+0x450>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047bb 	.word	0x080047bb
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047cb 	.word	0x080047cb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a4:	f7fe f87c 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047aa:	e014      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe f88e 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b2:	e010      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b4e      	ldr	r3, [pc, #312]	@ (80048f0 <UART_SetConfig+0x5c0>)
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047b8:	e00d      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fd ffd9 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 80047be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c0:	e009      	b.n	80047d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047c8:	e005      	b.n	80047d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8090 	beq.w	80048fe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	4a44      	ldr	r2, [pc, #272]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80047e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d916      	bls.n	8004838 <UART_SetConfig+0x508>
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d212      	bcs.n	8004838 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f023 030f 	bic.w	r3, r3, #15
 800481a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	b29b      	uxth	r3, r3
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	b29a      	uxth	r2, r3
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	4313      	orrs	r3, r2
 800482c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	8bfa      	ldrh	r2, [r7, #30]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e062      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800483e:	e05e      	b.n	80048fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004844:	2b08      	cmp	r3, #8
 8004846:	d828      	bhi.n	800489a <UART_SetConfig+0x56a>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <UART_SetConfig+0x520>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004875 	.word	0x08004875
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004885 	.word	0x08004885
 800485c:	0800489b 	.word	0x0800489b
 8004860:	0800488b 	.word	0x0800488b
 8004864:	0800489b 	.word	0x0800489b
 8004868:	0800489b 	.word	0x0800489b
 800486c:	0800489b 	.word	0x0800489b
 8004870:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fe f814 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8004878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487a:	e014      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7fe f826 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 8004880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004882:	e010      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <UART_SetConfig+0x5c0>)
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004888:	e00d      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7fd ff71 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800488e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004890:	e009      	b.n	80048a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004898:	e005      	b.n	80048a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a4:	bf00      	nop
    }

    if (pclk != 0U)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <UART_SetConfig+0x5c4>)
 80048b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d910      	bls.n	80048f8 <UART_SetConfig+0x5c8>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d20c      	bcs.n	80048f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x5ce>
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	08008770 	.word	0x08008770
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2201      	movs	r2, #1
 8004902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2201      	movs	r2, #1
 800490a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800491a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800491e:	4618      	mov	r0, r3
 8004920:	3730      	adds	r7, #48	@ 0x30
 8004922:	46bd      	mov	sp, r7
 8004924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b098      	sub	sp, #96	@ 0x60
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a7c:	f7fc fd90 	bl	80015a0 <HAL_GetTick>
 8004a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d12f      	bne.n	8004af0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f88e 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d022      	beq.n	8004af0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e063      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d149      	bne.n	8004b92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f857 	bl	8004bc0 <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03c      	beq.n	8004b92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	623b      	str	r3, [r7, #32]
   return(result);
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69b9      	ldr	r1, [r7, #24]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	617b      	str	r3, [r7, #20]
   return(result);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e012      	b.n	8004bb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3758      	adds	r7, #88	@ 0x58
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd0:	e04f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d04b      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fc fce1 	bl	80015a0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e04e      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d037      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	d034      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d031      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d110      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f838 	bl	8004c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e029      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d111      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f81e 	bl	8004c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d0a0      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b095      	sub	sp, #84	@ 0x54
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d118      	bne.n	8004d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d5a:	bf00      	nop
 8004d5c:	3754      	adds	r7, #84	@ 0x54
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e027      	b.n	8004dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e02d      	b.n	8004e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2224      	movs	r2, #36	@ 0x24
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f84f 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e02d      	b.n	8004ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f811 	bl	8004ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ef0:	e031      	b.n	8004f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0e5b      	lsrs	r3, r3, #25
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	0f5b      	lsrs	r3, r3, #29
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	7b3a      	ldrb	r2, [r7, #12]
 8004f1e:	4911      	ldr	r1, [pc, #68]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f20:	5c8a      	ldrb	r2, [r1, r2]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f26:	7b3a      	ldrb	r2, [r7, #12]
 8004f28:	490f      	ldr	r1, [pc, #60]	@ (8004f68 <UARTEx_SetNbDataToProcess+0x98>)
 8004f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	7b7a      	ldrb	r2, [r7, #13]
 8004f3c:	4909      	ldr	r1, [pc, #36]	@ (8004f64 <UARTEx_SetNbDataToProcess+0x94>)
 8004f3e:	5c8a      	ldrb	r2, [r1, r2]
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f44:	7b7a      	ldrb	r2, [r7, #13]
 8004f46:	4908      	ldr	r1, [pc, #32]	@ (8004f68 <UARTEx_SetNbDataToProcess+0x98>)
 8004f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	08008788 	.word	0x08008788
 8004f68:	08008790 	.word	0x08008790

08004f6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004f70:	4904      	ldr	r1, [pc, #16]	@ (8004f84 <MX_FATFS_Init+0x18>)
 8004f72:	4805      	ldr	r0, [pc, #20]	@ (8004f88 <MX_FATFS_Init+0x1c>)
 8004f74:	f002 feec 	bl	8007d50 <FATFS_LinkDriver>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b03      	ldr	r3, [pc, #12]	@ (8004f8c <MX_FATFS_Init+0x20>)
 8004f7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20040290 	.word	0x20040290
 8004f88:	2004000c 	.word	0x2004000c
 8004f8c:	2004028c 	.word	0x2004028c

08004f90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f9d7 	bl	8005360 <USER_SPI_initialize>
 8004fb2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fab5 	bl	8005538 <USER_SPI_status>
 8004fce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004fe8:	7bf8      	ldrb	r0, [r7, #15]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	f000 fab8 	bl	8005564 <USER_SPI_read>
 8004ff4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	4603      	mov	r3, r0
 800500c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800500e:	7bf8      	ldrb	r0, [r7, #15]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	f000 fb0b 	bl	8005630 <USER_SPI_write>
 800501a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	603a      	str	r2, [r7, #0]
 800502e:	71fb      	strb	r3, [r7, #7]
 8005030:	460b      	mov	r3, r1
 8005032:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005034:	79b9      	ldrb	r1, [r7, #6]
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb74 	bl	8005728 <USER_SPI_ioctl>
 8005040:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005054:	f7fc faa4 	bl	80015a0 <HAL_GetTick>
 8005058:	4603      	mov	r3, r0
 800505a:	4a04      	ldr	r2, [pc, #16]	@ (800506c <SPI_Timer_On+0x20>)
 800505c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800505e:	4a04      	ldr	r2, [pc, #16]	@ (8005070 <SPI_Timer_On+0x24>)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20040298 	.word	0x20040298
 8005070:	2004029c 	.word	0x2004029c

08005074 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005078:	f7fc fa92 	bl	80015a0 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <SPI_Timer_Status+0x24>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1ad2      	subs	r2, r2, r3
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <SPI_Timer_Status+0x28>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	bf34      	ite	cc
 800508c:	2301      	movcc	r3, #1
 800508e:	2300      	movcs	r3, #0
 8005090:	b2db      	uxtb	r3, r3
}
 8005092:	4618      	mov	r0, r3
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20040298 	.word	0x20040298
 800509c:	2004029c 	.word	0x2004029c

080050a0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80050aa:	f107 020f 	add.w	r2, r7, #15
 80050ae:	1df9      	adds	r1, r7, #7
 80050b0:	2332      	movs	r3, #50	@ 0x32
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2301      	movs	r3, #1
 80050b6:	4804      	ldr	r0, [pc, #16]	@ (80050c8 <xchg_spi+0x28>)
 80050b8:	f7fe fc0f 	bl	80038da <HAL_SPI_TransmitReceive>
    return rxDat;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200400f8 	.word	0x200400f8

080050cc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e00a      	b.n	80050f2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	18d4      	adds	r4, r2, r3
 80050e2:	20ff      	movs	r0, #255	@ 0xff
 80050e4:	f7ff ffdc 	bl	80050a0 <xchg_spi>
 80050e8:	4603      	mov	r3, r0
 80050ea:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d3f0      	bcc.n	80050dc <rcvr_spi_multi+0x10>
	}
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bd90      	pop	{r4, r7, pc}

08005104 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	b29a      	uxth	r2, r3
 8005112:	f04f 33ff 	mov.w	r3, #4294967295
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4803      	ldr	r0, [pc, #12]	@ (8005128 <xmit_spi_multi+0x24>)
 800511a:	f7fe fa68 	bl	80035ee <HAL_SPI_Transmit>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200400f8 	.word	0x200400f8

0800512c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005134:	f7fc fa34 	bl	80015a0 <HAL_GetTick>
 8005138:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800513e:	20ff      	movs	r0, #255	@ 0xff
 8005140:	f7ff ffae 	bl	80050a0 <xchg_spi>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2bff      	cmp	r3, #255	@ 0xff
 800514c:	d007      	beq.n	800515e <wait_ready+0x32>
 800514e:	f7fc fa27 	bl	80015a0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d8ef      	bhi.n	800513e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2bff      	cmp	r3, #255	@ 0xff
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005178:	2201      	movs	r2, #1
 800517a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800517e:	4804      	ldr	r0, [pc, #16]	@ (8005190 <despiselect+0x1c>)
 8005180:	f7fc fcb6 	bl	8001af0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005184:	20ff      	movs	r0, #255	@ 0xff
 8005186:	f7ff ff8b 	bl	80050a0 <xchg_spi>

}
 800518a:	bf00      	nop
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	48000800 	.word	0x48000800

08005194 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005198:	2200      	movs	r2, #0
 800519a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800519e:	480a      	ldr	r0, [pc, #40]	@ (80051c8 <spiselect+0x34>)
 80051a0:	f7fc fca6 	bl	8001af0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80051a4:	20ff      	movs	r0, #255	@ 0xff
 80051a6:	f7ff ff7b 	bl	80050a0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80051aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80051ae:	f7ff ffbd 	bl	800512c <wait_ready>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <spiselect+0x28>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e002      	b.n	80051c2 <spiselect+0x2e>

	despiselect();
 80051bc:	f7ff ffda 	bl	8005174 <despiselect>
	return 0;	/* Timeout */
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	48000800 	.word	0x48000800

080051cc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80051d6:	20c8      	movs	r0, #200	@ 0xc8
 80051d8:	f7ff ff38 	bl	800504c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80051dc:	20ff      	movs	r0, #255	@ 0xff
 80051de:	f7ff ff5f 	bl	80050a0 <xchg_spi>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2bff      	cmp	r3, #255	@ 0xff
 80051ea:	d104      	bne.n	80051f6 <rcvr_datablock+0x2a>
 80051ec:	f7ff ff42 	bl	8005074 <SPI_Timer_Status>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f2      	bne.n	80051dc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80051fa:	d001      	beq.n	8005200 <rcvr_datablock+0x34>
 80051fc:	2300      	movs	r3, #0
 80051fe:	e00a      	b.n	8005216 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff62 	bl	80050cc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005208:	20ff      	movs	r0, #255	@ 0xff
 800520a:	f7ff ff49 	bl	80050a0 <xchg_spi>
 800520e:	20ff      	movs	r0, #255	@ 0xff
 8005210:	f7ff ff46 	bl	80050a0 <xchg_spi>

	return 1;						/* Function succeeded */
 8005214:	2301      	movs	r3, #1
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800522a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800522e:	f7ff ff7d 	bl	800512c <wait_ready>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <xmit_datablock+0x1e>
 8005238:	2300      	movs	r3, #0
 800523a:	e01e      	b.n	800527a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ff2e 	bl	80050a0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	2bfd      	cmp	r3, #253	@ 0xfd
 8005248:	d016      	beq.n	8005278 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800524a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff58 	bl	8005104 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005254:	20ff      	movs	r0, #255	@ 0xff
 8005256:	f7ff ff23 	bl	80050a0 <xchg_spi>
 800525a:	20ff      	movs	r0, #255	@ 0xff
 800525c:	f7ff ff20 	bl	80050a0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005260:	20ff      	movs	r0, #255	@ 0xff
 8005262:	f7ff ff1d 	bl	80050a0 <xchg_spi>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2b05      	cmp	r3, #5
 8005272:	d001      	beq.n	8005278 <xmit_datablock+0x5a>
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <xmit_datablock+0x5c>
	}
	return 1;
 8005278:	2301      	movs	r3, #1
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	6039      	str	r1, [r7, #0]
 800528c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da0e      	bge.n	80052b4 <send_cmd+0x32>
		cmd &= 0x7F;
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800529e:	2100      	movs	r1, #0
 80052a0:	2037      	movs	r0, #55	@ 0x37
 80052a2:	f7ff ffee 	bl	8005282 <send_cmd>
 80052a6:	4603      	mov	r3, r0
 80052a8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d901      	bls.n	80052b4 <send_cmd+0x32>
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	e051      	b.n	8005358 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d008      	beq.n	80052cc <send_cmd+0x4a>
		despiselect();
 80052ba:	f7ff ff5b 	bl	8005174 <despiselect>
		if (!spiselect()) return 0xFF;
 80052be:	f7ff ff69 	bl	8005194 <spiselect>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <send_cmd+0x4a>
 80052c8:	23ff      	movs	r3, #255	@ 0xff
 80052ca:	e045      	b.n	8005358 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fee3 	bl	80050a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fedd 	bl	80050a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff fed7 	bl	80050a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	0a1b      	lsrs	r3, r3, #8
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fed1 	bl	80050a0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fecc 	bl	80050a0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <send_cmd+0x94>
 8005312:	2395      	movs	r3, #149	@ 0x95
 8005314:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d101      	bne.n	8005320 <send_cmd+0x9e>
 800531c:	2387      	movs	r3, #135	@ 0x87
 800531e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff febc 	bl	80050a0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d102      	bne.n	8005334 <send_cmd+0xb2>
 800532e:	20ff      	movs	r0, #255	@ 0xff
 8005330:	f7ff feb6 	bl	80050a0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005334:	230a      	movs	r3, #10
 8005336:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005338:	20ff      	movs	r0, #255	@ 0xff
 800533a:	f7ff feb1 	bl	80050a0 <xchg_spi>
 800533e:	4603      	mov	r3, r0
 8005340:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da05      	bge.n	8005356 <send_cmd+0xd4>
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	3b01      	subs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005356:	7bbb      	ldrb	r3, [r7, #14]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <USER_SPI_initialize+0x14>
 8005370:	2301      	movs	r3, #1
 8005372:	e0d6      	b.n	8005522 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005374:	4b6d      	ldr	r3, [pc, #436]	@ (800552c <USER_SPI_initialize+0x1cc>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <USER_SPI_initialize+0x2a>
 8005382:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <USER_SPI_initialize+0x1cc>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e0cb      	b.n	8005522 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800538a:	4b69      	ldr	r3, [pc, #420]	@ (8005530 <USER_SPI_initialize+0x1d0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005394:	4b66      	ldr	r3, [pc, #408]	@ (8005530 <USER_SPI_initialize+0x1d0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800539c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800539e:	230a      	movs	r3, #10
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	e005      	b.n	80053b0 <USER_SPI_initialize+0x50>
 80053a4:	20ff      	movs	r0, #255	@ 0xff
 80053a6:	f7ff fe7b 	bl	80050a0 <xchg_spi>
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f6      	bne.n	80053a4 <USER_SPI_initialize+0x44>

	ty = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80053ba:	2100      	movs	r1, #0
 80053bc:	2000      	movs	r0, #0
 80053be:	f7ff ff60 	bl	8005282 <send_cmd>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 808b 	bne.w	80054e0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80053ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053ce:	f7ff fe3d 	bl	800504c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80053d2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80053d6:	2008      	movs	r0, #8
 80053d8:	f7ff ff53 	bl	8005282 <send_cmd>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d151      	bne.n	8005486 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e00d      	b.n	8005404 <USER_SPI_initialize+0xa4>
 80053e8:	7bfc      	ldrb	r4, [r7, #15]
 80053ea:	20ff      	movs	r0, #255	@ 0xff
 80053ec:	f7ff fe58 	bl	80050a0 <xchg_spi>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	f104 0310 	add.w	r3, r4, #16
 80053f8:	443b      	add	r3, r7
 80053fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	3301      	adds	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d9ee      	bls.n	80053e8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800540a:	7abb      	ldrb	r3, [r7, #10]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d167      	bne.n	80054e0 <USER_SPI_initialize+0x180>
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	2baa      	cmp	r3, #170	@ 0xaa
 8005414:	d164      	bne.n	80054e0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005416:	bf00      	nop
 8005418:	f7ff fe2c 	bl	8005074 <SPI_Timer_Status>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <USER_SPI_initialize+0xd2>
 8005422:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005426:	20a9      	movs	r0, #169	@ 0xa9
 8005428:	f7ff ff2b 	bl	8005282 <send_cmd>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f2      	bne.n	8005418 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005432:	f7ff fe1f 	bl	8005074 <SPI_Timer_Status>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d051      	beq.n	80054e0 <USER_SPI_initialize+0x180>
 800543c:	2100      	movs	r1, #0
 800543e:	203a      	movs	r0, #58	@ 0x3a
 8005440:	f7ff ff1f 	bl	8005282 <send_cmd>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d14a      	bne.n	80054e0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
 800544e:	e00d      	b.n	800546c <USER_SPI_initialize+0x10c>
 8005450:	7bfc      	ldrb	r4, [r7, #15]
 8005452:	20ff      	movs	r0, #255	@ 0xff
 8005454:	f7ff fe24 	bl	80050a0 <xchg_spi>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	f104 0310 	add.w	r3, r4, #16
 8005460:	443b      	add	r3, r7
 8005462:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	3301      	adds	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d9ee      	bls.n	8005450 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005472:	7a3b      	ldrb	r3, [r7, #8]
 8005474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USER_SPI_initialize+0x120>
 800547c:	230c      	movs	r3, #12
 800547e:	e000      	b.n	8005482 <USER_SPI_initialize+0x122>
 8005480:	2304      	movs	r3, #4
 8005482:	737b      	strb	r3, [r7, #13]
 8005484:	e02c      	b.n	80054e0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005486:	2100      	movs	r1, #0
 8005488:	20a9      	movs	r0, #169	@ 0xa9
 800548a:	f7ff fefa 	bl	8005282 <send_cmd>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d804      	bhi.n	800549e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005494:	2302      	movs	r3, #2
 8005496:	737b      	strb	r3, [r7, #13]
 8005498:	23a9      	movs	r3, #169	@ 0xa9
 800549a:	73bb      	strb	r3, [r7, #14]
 800549c:	e003      	b.n	80054a6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800549e:	2301      	movs	r3, #1
 80054a0:	737b      	strb	r3, [r7, #13]
 80054a2:	2301      	movs	r3, #1
 80054a4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80054a6:	bf00      	nop
 80054a8:	f7ff fde4 	bl	8005074 <SPI_Timer_Status>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <USER_SPI_initialize+0x162>
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff fee3 	bl	8005282 <send_cmd>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f2      	bne.n	80054a8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80054c2:	f7ff fdd7 	bl	8005074 <SPI_Timer_Status>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <USER_SPI_initialize+0x17c>
 80054cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054d0:	2010      	movs	r0, #16
 80054d2:	f7ff fed6 	bl	8005282 <send_cmd>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <USER_SPI_initialize+0x180>
				ty = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80054e0:	4a14      	ldr	r2, [pc, #80]	@ (8005534 <USER_SPI_initialize+0x1d4>)
 80054e2:	7b7b      	ldrb	r3, [r7, #13]
 80054e4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80054e6:	f7ff fe45 	bl	8005174 <despiselect>

	if (ty) {			/* OK */
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d012      	beq.n	8005516 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80054f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <USER_SPI_initialize+0x1d0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <USER_SPI_initialize+0x1d0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0210 	orr.w	r2, r2, #16
 8005502:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005504:	4b09      	ldr	r3, [pc, #36]	@ (800552c <USER_SPI_initialize+0x1cc>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	4b06      	ldr	r3, [pc, #24]	@ (800552c <USER_SPI_initialize+0x1cc>)
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e002      	b.n	800551c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005516:	4b05      	ldr	r3, [pc, #20]	@ (800552c <USER_SPI_initialize+0x1cc>)
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <USER_SPI_initialize+0x1cc>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	20040020 	.word	0x20040020
 8005530:	200400f8 	.word	0x200400f8
 8005534:	20040294 	.word	0x20040294

08005538 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <USER_SPI_status+0x14>
 8005548:	2301      	movs	r3, #1
 800554a:	e002      	b.n	8005552 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <USER_SPI_status+0x28>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20040020 	.word	0x20040020

08005564 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <USER_SPI_read+0x1c>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <USER_SPI_read+0x20>
 8005580:	2304      	movs	r3, #4
 8005582:	e04d      	b.n	8005620 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005584:	4b28      	ldr	r3, [pc, #160]	@ (8005628 <USER_SPI_read+0xc4>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <USER_SPI_read+0x32>
 8005592:	2303      	movs	r3, #3
 8005594:	e044      	b.n	8005620 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005596:	4b25      	ldr	r3, [pc, #148]	@ (800562c <USER_SPI_read+0xc8>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <USER_SPI_read+0x44>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d111      	bne.n	80055d2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	2011      	movs	r0, #17
 80055b2:	f7ff fe66 	bl	8005282 <send_cmd>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d129      	bne.n	8005610 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80055bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055c0:	68b8      	ldr	r0, [r7, #8]
 80055c2:	f7ff fe03 	bl	80051cc <rcvr_datablock>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d021      	beq.n	8005610 <USER_SPI_read+0xac>
			count = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	e01e      	b.n	8005610 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	2012      	movs	r0, #18
 80055d6:	f7ff fe54 	bl	8005282 <send_cmd>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d117      	bne.n	8005610 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80055e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055e4:	68b8      	ldr	r0, [r7, #8]
 80055e6:	f7ff fdf1 	bl	80051cc <rcvr_datablock>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <USER_SPI_read+0xa2>
				buff += 512;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80055f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1ed      	bne.n	80055e0 <USER_SPI_read+0x7c>
 8005604:	e000      	b.n	8005608 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005606:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005608:	2100      	movs	r1, #0
 800560a:	200c      	movs	r0, #12
 800560c:	f7ff fe39 	bl	8005282 <send_cmd>
		}
	}
	despiselect();
 8005610:	f7ff fdb0 	bl	8005174 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20040020 	.word	0x20040020
 800562c:	20040294 	.word	0x20040294

08005630 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USER_SPI_write+0x1c>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USER_SPI_write+0x20>
 800564c:	2304      	movs	r3, #4
 800564e:	e063      	b.n	8005718 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005650:	4b33      	ldr	r3, [pc, #204]	@ (8005720 <USER_SPI_write+0xf0>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <USER_SPI_write+0x32>
 800565e:	2303      	movs	r3, #3
 8005660:	e05a      	b.n	8005718 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005662:	4b2f      	ldr	r3, [pc, #188]	@ (8005720 <USER_SPI_write+0xf0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <USER_SPI_write+0x44>
 8005670:	2302      	movs	r3, #2
 8005672:	e051      	b.n	8005718 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005674:	4b2b      	ldr	r3, [pc, #172]	@ (8005724 <USER_SPI_write+0xf4>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <USER_SPI_write+0x56>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	025b      	lsls	r3, r3, #9
 8005684:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d110      	bne.n	80056ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	2018      	movs	r0, #24
 8005690:	f7ff fdf7 	bl	8005282 <send_cmd>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d136      	bne.n	8005708 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800569a:	21fe      	movs	r1, #254	@ 0xfe
 800569c:	68b8      	ldr	r0, [r7, #8]
 800569e:	f7ff fdbe 	bl	800521e <xmit_datablock>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02f      	beq.n	8005708 <USER_SPI_write+0xd8>
			count = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	e02c      	b.n	8005708 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80056ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005724 <USER_SPI_write+0xf4>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0306 	and.w	r3, r3, #6
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <USER_SPI_write+0x92>
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	2097      	movs	r0, #151	@ 0x97
 80056be:	f7ff fde0 	bl	8005282 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	2019      	movs	r0, #25
 80056c6:	f7ff fddc 	bl	8005282 <send_cmd>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11b      	bne.n	8005708 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80056d0:	21fc      	movs	r1, #252	@ 0xfc
 80056d2:	68b8      	ldr	r0, [r7, #8]
 80056d4:	f7ff fda3 	bl	800521e <xmit_datablock>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <USER_SPI_write+0xc4>
				buff += 512;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80056e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ee      	bne.n	80056d0 <USER_SPI_write+0xa0>
 80056f2:	e000      	b.n	80056f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80056f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80056f6:	21fd      	movs	r1, #253	@ 0xfd
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7ff fd90 	bl	800521e <xmit_datablock>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <USER_SPI_write+0xd8>
 8005704:	2301      	movs	r3, #1
 8005706:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005708:	f7ff fd34 	bl	8005174 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20040020 	.word	0x20040020
 8005724:	20040294 	.word	0x20040294

08005728 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	@ 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	603a      	str	r2, [r7, #0]
 8005732:	71fb      	strb	r3, [r7, #7]
 8005734:	460b      	mov	r3, r1
 8005736:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <USER_SPI_ioctl+0x1a>
 800573e:	2304      	movs	r3, #4
 8005740:	e15a      	b.n	80059f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005742:	4baf      	ldr	r3, [pc, #700]	@ (8005a00 <USER_SPI_ioctl+0x2d8>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <USER_SPI_ioctl+0x2c>
 8005750:	2303      	movs	r3, #3
 8005752:	e151      	b.n	80059f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800575a:	79bb      	ldrb	r3, [r7, #6]
 800575c:	2b04      	cmp	r3, #4
 800575e:	f200 8136 	bhi.w	80059ce <USER_SPI_ioctl+0x2a6>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <USER_SPI_ioctl+0x40>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800577d 	.word	0x0800577d
 800576c:	08005791 	.word	0x08005791
 8005770:	080059cf 	.word	0x080059cf
 8005774:	0800583d 	.word	0x0800583d
 8005778:	08005933 	.word	0x08005933
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800577c:	f7ff fd0a 	bl	8005194 <spiselect>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8127 	beq.w	80059d6 <USER_SPI_ioctl+0x2ae>
 8005788:	2300      	movs	r3, #0
 800578a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800578e:	e122      	b.n	80059d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005790:	2100      	movs	r1, #0
 8005792:	2009      	movs	r0, #9
 8005794:	f7ff fd75 	bl	8005282 <send_cmd>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 811d 	bne.w	80059da <USER_SPI_ioctl+0x2b2>
 80057a0:	f107 030c 	add.w	r3, r7, #12
 80057a4:	2110      	movs	r1, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fd10 	bl	80051cc <rcvr_datablock>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8113 	beq.w	80059da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80057b4:	7b3b      	ldrb	r3, [r7, #12]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d111      	bne.n	80057e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80057be:	7d7b      	ldrb	r3, [r7, #21]
 80057c0:	461a      	mov	r2, r3
 80057c2:	7d3b      	ldrb	r3, [r7, #20]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	4413      	add	r3, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	7cfb      	ldrb	r3, [r7, #19]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80057d2:	4413      	add	r3, r2
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	029a      	lsls	r2, r3, #10
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e028      	b.n	8005834 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80057e2:	7c7b      	ldrb	r3, [r7, #17]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	7dbb      	ldrb	r3, [r7, #22]
 80057ec:	09db      	lsrs	r3, r3, #7
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	7d7b      	ldrb	r3, [r7, #21]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 0306 	and.w	r3, r3, #6
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4413      	add	r3, r2
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3302      	adds	r3, #2
 8005806:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800580a:	7d3b      	ldrb	r3, [r7, #20]
 800580c:	099b      	lsrs	r3, r3, #6
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	7cbb      	ldrb	r3, [r7, #18]
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005820:	4413      	add	r3, r2
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005826:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800582a:	3b09      	subs	r3, #9
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	409a      	lsls	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800583a:	e0ce      	b.n	80059da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800583c:	4b71      	ldr	r3, [pc, #452]	@ (8005a04 <USER_SPI_ioctl+0x2dc>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d031      	beq.n	80058ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005848:	2100      	movs	r1, #0
 800584a:	208d      	movs	r0, #141	@ 0x8d
 800584c:	f7ff fd19 	bl	8005282 <send_cmd>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 80c3 	bne.w	80059de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005858:	20ff      	movs	r0, #255	@ 0xff
 800585a:	f7ff fc21 	bl	80050a0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	2110      	movs	r1, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fcb1 	bl	80051cc <rcvr_datablock>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80b6 	beq.w	80059de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005872:	2330      	movs	r3, #48	@ 0x30
 8005874:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005878:	e007      	b.n	800588a <USER_SPI_ioctl+0x162>
 800587a:	20ff      	movs	r0, #255	@ 0xff
 800587c:	f7ff fc10 	bl	80050a0 <xchg_spi>
 8005880:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005884:	3b01      	subs	r3, #1
 8005886:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800588a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f3      	bne.n	800587a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005892:	7dbb      	ldrb	r3, [r7, #22]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	2310      	movs	r3, #16
 800589c:	fa03 f202 	lsl.w	r2, r3, r2
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80058aa:	e098      	b.n	80059de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80058ac:	2100      	movs	r1, #0
 80058ae:	2009      	movs	r0, #9
 80058b0:	f7ff fce7 	bl	8005282 <send_cmd>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 8091 	bne.w	80059de <USER_SPI_ioctl+0x2b6>
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	2110      	movs	r1, #16
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fc82 	bl	80051cc <rcvr_datablock>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8087 	beq.w	80059de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80058d0:	4b4c      	ldr	r3, [pc, #304]	@ (8005a04 <USER_SPI_ioctl+0x2dc>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80058dc:	7dbb      	ldrb	r3, [r7, #22]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80058e4:	7dfa      	ldrb	r2, [r7, #23]
 80058e6:	09d2      	lsrs	r2, r2, #7
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	4413      	add	r3, r2
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	7e7b      	ldrb	r3, [r7, #25]
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e013      	b.n	800592a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005902:	7dbb      	ldrb	r3, [r7, #22]
 8005904:	109b      	asrs	r3, r3, #2
 8005906:	b29b      	uxth	r3, r3
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	3301      	adds	r3, #1
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	00d2      	lsls	r2, r2, #3
 8005912:	f002 0218 	and.w	r2, r2, #24
 8005916:	7df9      	ldrb	r1, [r7, #23]
 8005918:	0949      	lsrs	r1, r1, #5
 800591a:	b2c9      	uxtb	r1, r1
 800591c:	440a      	add	r2, r1
 800591e:	3201      	adds	r2, #1
 8005920:	fb02 f303 	mul.w	r3, r2, r3
 8005924:	461a      	mov	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005930:	e055      	b.n	80059de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005932:	4b34      	ldr	r3, [pc, #208]	@ (8005a04 <USER_SPI_ioctl+0x2dc>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f003 0306 	and.w	r3, r3, #6
 800593a:	2b00      	cmp	r3, #0
 800593c:	d051      	beq.n	80059e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800593e:	f107 020c 	add.w	r2, r7, #12
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	210b      	movs	r1, #11
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff feee 	bl	8005728 <USER_SPI_ioctl>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d149      	bne.n	80059e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005952:	7b3b      	ldrb	r3, [r7, #12]
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <USER_SPI_ioctl+0x23e>
 800595c:	7dbb      	ldrb	r3, [r7, #22]
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d041      	beq.n	80059ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005976:	4b23      	ldr	r3, [pc, #140]	@ (8005a04 <USER_SPI_ioctl+0x2dc>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005984:	025b      	lsls	r3, r3, #9
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	025b      	lsls	r3, r3, #9
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800598e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005990:	2020      	movs	r0, #32
 8005992:	f7ff fc76 	bl	8005282 <send_cmd>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d128      	bne.n	80059ee <USER_SPI_ioctl+0x2c6>
 800599c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800599e:	2021      	movs	r0, #33	@ 0x21
 80059a0:	f7ff fc6f 	bl	8005282 <send_cmd>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d121      	bne.n	80059ee <USER_SPI_ioctl+0x2c6>
 80059aa:	2100      	movs	r1, #0
 80059ac:	2026      	movs	r0, #38	@ 0x26
 80059ae:	f7ff fc68 	bl	8005282 <send_cmd>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11a      	bne.n	80059ee <USER_SPI_ioctl+0x2c6>
 80059b8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80059bc:	f7ff fbb6 	bl	800512c <wait_ready>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80059cc:	e00f      	b.n	80059ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80059ce:	2304      	movs	r3, #4
 80059d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80059d4:	e00c      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		break;
 80059d6:	bf00      	nop
 80059d8:	e00a      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		break;
 80059da:	bf00      	nop
 80059dc:	e008      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		break;
 80059de:	bf00      	nop
 80059e0:	e006      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80059e2:	bf00      	nop
 80059e4:	e004      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80059e6:	bf00      	nop
 80059e8:	e002      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <USER_SPI_ioctl+0x2c8>
		break;
 80059ee:	bf00      	nop
	}

	despiselect();
 80059f0:	f7ff fbc0 	bl	8005174 <despiselect>

	return res;
 80059f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	@ 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20040020 	.word	0x20040020
 8005a04:	20040294 	.word	0x20040294

08005a08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <disk_status+0x30>)
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	79fa      	ldrb	r2, [r7, #7]
 8005a20:	4905      	ldr	r1, [pc, #20]	@ (8005a38 <disk_status+0x30>)
 8005a22:	440a      	add	r2, r1
 8005a24:	7a12      	ldrb	r2, [r2, #8]
 8005a26:	4610      	mov	r0, r2
 8005a28:	4798      	blx	r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	200402c8 	.word	0x200402c8

08005a3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a84 <disk_initialize+0x48>)
 8005a4e:	5cd3      	ldrb	r3, [r2, r3]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d111      	bne.n	8005a78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	4a0b      	ldr	r2, [pc, #44]	@ (8005a84 <disk_initialize+0x48>)
 8005a58:	2101      	movs	r1, #1
 8005a5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <disk_initialize+0x48>)
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	4906      	ldr	r1, [pc, #24]	@ (8005a84 <disk_initialize+0x48>)
 8005a6c:	440a      	add	r2, r1
 8005a6e:	7a12      	ldrb	r2, [r2, #8]
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200402c8 	.word	0x200402c8

08005a88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac4 <disk_read+0x3c>)
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	689c      	ldr	r4, [r3, #8]
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	@ (8005ac4 <disk_read+0x3c>)
 8005aa8:	4413      	add	r3, r2
 8005aaa:	7a18      	ldrb	r0, [r3, #8]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	47a0      	blx	r4
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	200402c8 	.word	0x200402c8

08005ac8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	@ (8005b04 <disk_write+0x3c>)
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68dc      	ldr	r4, [r3, #12]
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <disk_write+0x3c>)
 8005ae8:	4413      	add	r3, r2
 8005aea:	7a18      	ldrb	r0, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	47a0      	blx	r4
 8005af4:	4603      	mov	r3, r0
 8005af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200402c8 	.word	0x200402c8

08005b08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	603a      	str	r2, [r7, #0]
 8005b12:	71fb      	strb	r3, [r7, #7]
 8005b14:	460b      	mov	r3, r1
 8005b16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <disk_ioctl+0x38>)
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	79fa      	ldrb	r2, [r7, #7]
 8005b26:	4906      	ldr	r1, [pc, #24]	@ (8005b40 <disk_ioctl+0x38>)
 8005b28:	440a      	add	r2, r1
 8005b2a:	7a10      	ldrb	r0, [r2, #8]
 8005b2c:	79b9      	ldrb	r1, [r7, #6]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	4798      	blx	r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	200402c8 	.word	0x200402c8

08005b44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b54:	89fb      	ldrh	r3, [r7, #14]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	b21a      	sxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	b21b      	sxth	r3, r3
 8005b64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b66:	89fb      	ldrh	r3, [r7, #14]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3303      	adds	r3, #3
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	3202      	adds	r2, #2
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	3201      	adds	r2, #1
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
	return rv;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	887a      	ldrh	r2, [r7, #2]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	887b      	ldrh	r3, [r7, #2]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	887a      	ldrh	r2, [r7, #2]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	1c53      	adds	r3, r2, #1
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	6179      	str	r1, [r7, #20]
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f1      	bne.n	8005c62 <mem_cpy+0x1a>
	}
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	617a      	str	r2, [r7, #20]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f3      	bne.n	8005c9a <mem_set+0x10>
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	@ 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	61ba      	str	r2, [r7, #24]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	1acb      	subs	r3, r1, r3
 8005cec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <mem_cmp+0x40>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0eb      	beq.n	8005cd8 <mem_cmp+0x18>

	return r;
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3724      	adds	r7, #36	@ 0x24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d18:	e002      	b.n	8005d20 <chk_chr+0x12>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <chk_chr+0x26>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d1f2      	bne.n	8005d1a <chk_chr+0xc>
	return *str;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	781b      	ldrb	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e029      	b.n	8005dac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005d58:	4a27      	ldr	r2, [pc, #156]	@ (8005df8 <chk_lock+0xb4>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	4413      	add	r3, r2
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01d      	beq.n	8005da2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d66:	4a24      	ldr	r2, [pc, #144]	@ (8005df8 <chk_lock+0xb4>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	4413      	add	r3, r2
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d116      	bne.n	8005da6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d78:	4a1f      	ldr	r2, [pc, #124]	@ (8005df8 <chk_lock+0xb4>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d10c      	bne.n	8005da6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005df8 <chk_lock+0xb4>)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	4413      	add	r3, r2
 8005d94:	3308      	adds	r3, #8
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d102      	bne.n	8005da6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005da0:	e007      	b.n	8005db2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d9d2      	bls.n	8005d58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d109      	bne.n	8005dcc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <chk_lock+0x80>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d101      	bne.n	8005dc8 <chk_lock+0x84>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e010      	b.n	8005dea <chk_lock+0xa6>
 8005dc8:	2312      	movs	r3, #18
 8005dca:	e00e      	b.n	8005dea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <chk_lock+0xa0>
 8005dd2:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <chk_lock+0xb4>)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	4413      	add	r3, r2
 8005dda:	330c      	adds	r3, #12
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de2:	d101      	bne.n	8005de8 <chk_lock+0xa4>
 8005de4:	2310      	movs	r3, #16
 8005de6:	e000      	b.n	8005dea <chk_lock+0xa6>
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	200402a8 	.word	0x200402a8

08005dfc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	e002      	b.n	8005e0e <enq_lock+0x12>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d806      	bhi.n	8005e22 <enq_lock+0x26>
 8005e14:	4a09      	ldr	r2, [pc, #36]	@ (8005e3c <enq_lock+0x40>)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f2      	bne.n	8005e08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	200402a8 	.word	0x200402a8

08005e40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e01f      	b.n	8005e90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005e50:	4a41      	ldr	r2, [pc, #260]	@ (8005f58 <inc_lock+0x118>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	4413      	add	r3, r2
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d113      	bne.n	8005e8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005e62:	4a3d      	ldr	r2, [pc, #244]	@ (8005f58 <inc_lock+0x118>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	4413      	add	r3, r2
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d109      	bne.n	8005e8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e76:	4a38      	ldr	r2, [pc, #224]	@ (8005f58 <inc_lock+0x118>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3308      	adds	r3, #8
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d006      	beq.n	8005e98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d9dc      	bls.n	8005e50 <inc_lock+0x10>
 8005e96:	e000      	b.n	8005e9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005e98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d132      	bne.n	8005f06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	e002      	b.n	8005eac <inc_lock+0x6c>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d806      	bhi.n	8005ec0 <inc_lock+0x80>
 8005eb2:	4a29      	ldr	r2, [pc, #164]	@ (8005f58 <inc_lock+0x118>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	4413      	add	r3, r2
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f2      	bne.n	8005ea6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d101      	bne.n	8005eca <inc_lock+0x8a>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e040      	b.n	8005f4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4922      	ldr	r1, [pc, #136]	@ (8005f58 <inc_lock+0x118>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	440b      	add	r3, r1
 8005ed6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	491e      	ldr	r1, [pc, #120]	@ (8005f58 <inc_lock+0x118>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	491a      	ldr	r1, [pc, #104]	@ (8005f58 <inc_lock+0x118>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ef8:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <inc_lock+0x118>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	4413      	add	r3, r2
 8005f00:	330c      	adds	r3, #12
 8005f02:	2200      	movs	r2, #0
 8005f04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <inc_lock+0xe0>
 8005f0c:	4a12      	ldr	r2, [pc, #72]	@ (8005f58 <inc_lock+0x118>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	4413      	add	r3, r2
 8005f14:	330c      	adds	r3, #12
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <inc_lock+0xe0>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e015      	b.n	8005f4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <inc_lock+0xf8>
 8005f26:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <inc_lock+0x118>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	330c      	adds	r3, #12
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	e001      	b.n	8005f3c <inc_lock+0xfc>
 8005f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f3c:	4906      	ldr	r1, [pc, #24]	@ (8005f58 <inc_lock+0x118>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	440b      	add	r3, r1
 8005f44:	330c      	adds	r3, #12
 8005f46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3301      	adds	r3, #1
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	200402a8 	.word	0x200402a8

08005f5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d825      	bhi.n	8005fbc <dec_lock+0x60>
		n = Files[i].ctr;
 8005f70:	4a17      	ldr	r2, [pc, #92]	@ (8005fd0 <dec_lock+0x74>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	4413      	add	r3, r2
 8005f78:	330c      	adds	r3, #12
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f7e:	89fb      	ldrh	r3, [r7, #14]
 8005f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f84:	d101      	bne.n	8005f8a <dec_lock+0x2e>
 8005f86:	2300      	movs	r3, #0
 8005f88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005f8a:	89fb      	ldrh	r3, [r7, #14]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <dec_lock+0x3a>
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005f96:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd0 <dec_lock+0x74>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	89fa      	ldrh	r2, [r7, #14]
 8005fa2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <dec_lock+0x5a>
 8005faa:	4a09      	ldr	r2, [pc, #36]	@ (8005fd0 <dec_lock+0x74>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	737b      	strb	r3, [r7, #13]
 8005fba:	e001      	b.n	8005fc0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005fc0:	7b7b      	ldrb	r3, [r7, #13]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	200402a8 	.word	0x200402a8

08005fd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e010      	b.n	8006004 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8006018 <clear_lock+0x44>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	4413      	add	r3, r2
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d105      	bne.n	8005ffe <clear_lock+0x2a>
 8005ff2:	4a09      	ldr	r2, [pc, #36]	@ (8006018 <clear_lock+0x44>)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d9eb      	bls.n	8005fe2 <clear_lock+0xe>
	}
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	200402a8 	.word	0x200402a8

0800601c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d034      	beq.n	800609a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	7858      	ldrb	r0, [r3, #1]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006040:	2301      	movs	r3, #1
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	f7ff fd40 	bl	8005ac8 <disk_write>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <sync_window+0x38>
			res = FR_DISK_ERR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e022      	b.n	800609a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d217      	bcs.n	800609a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	789b      	ldrb	r3, [r3, #2]
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <sync_window+0x78>
					wsect += fs->fsize;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7858      	ldrb	r0, [r3, #1]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006086:	2301      	movs	r3, #1
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	f7ff fd1d 	bl	8005ac8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	3b01      	subs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d8eb      	bhi.n	8006072 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d01b      	beq.n	80060f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ffad 	bl	800601c <sync_window>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d113      	bne.n	80060f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7858      	ldrb	r0, [r3, #1]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060d6:	2301      	movs	r3, #1
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	f7ff fcd5 	bl	8005a88 <disk_read>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff87 	bl	800601c <sync_window>
 800610e:	4603      	mov	r3, r0
 8006110:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d158      	bne.n	80061ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d148      	bne.n	80061b2 <sync_fs+0xb2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d144      	bne.n	80061b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3330      	adds	r3, #48	@ 0x30
 800612c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fda9 	bl	8005c8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3330      	adds	r3, #48	@ 0x30
 800613c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006140:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fd38 	bl	8005bba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3330      	adds	r3, #48	@ 0x30
 800614e:	4921      	ldr	r1, [pc, #132]	@ (80061d4 <sync_fs+0xd4>)
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fd4d 	bl	8005bf0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3330      	adds	r3, #48	@ 0x30
 800615a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800615e:	491e      	ldr	r1, [pc, #120]	@ (80061d8 <sync_fs+0xd8>)
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fd45 	bl	8005bf0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3330      	adds	r3, #48	@ 0x30
 800616a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7ff fd3b 	bl	8005bf0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3330      	adds	r3, #48	@ 0x30
 800617e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f7ff fd31 	bl	8005bf0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	7858      	ldrb	r0, [r3, #1]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a6:	2301      	movs	r3, #1
 80061a8:	f7ff fc8e 	bl	8005ac8 <disk_write>
			fs->fsi_flag = 0;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fca4 	bl	8005b08 <disk_ioctl>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <sync_fs+0xca>
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	41615252 	.word	0x41615252
 80061d8:	61417272 	.word	0x61417272

080061dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3b02      	subs	r3, #2
 80061ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	3b02      	subs	r3, #2
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d301      	bcc.n	80061fc <clust2sect+0x20>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e008      	b.n	800620e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	895b      	ldrh	r3, [r3, #10]
 8006200:	461a      	mov	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	fb03 f202 	mul.w	r2, r3, r2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	4413      	add	r3, r2
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d904      	bls.n	800623a <get_fat+0x20>
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d302      	bcc.n	8006240 <get_fat+0x26>
		val = 1;	/* Internal error */
 800623a:	2301      	movs	r3, #1
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e08e      	b.n	800635e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
 8006244:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d061      	beq.n	8006312 <get_fat+0xf8>
 800624e:	2b03      	cmp	r3, #3
 8006250:	dc7b      	bgt.n	800634a <get_fat+0x130>
 8006252:	2b01      	cmp	r3, #1
 8006254:	d002      	beq.n	800625c <get_fat+0x42>
 8006256:	2b02      	cmp	r3, #2
 8006258:	d041      	beq.n	80062de <get_fat+0xc4>
 800625a:	e076      	b.n	800634a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	0a5b      	lsrs	r3, r3, #9
 8006272:	4413      	add	r3, r2
 8006274:	4619      	mov	r1, r3
 8006276:	6938      	ldr	r0, [r7, #16]
 8006278:	f7ff ff14 	bl	80060a4 <move_window>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d166      	bne.n	8006350 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	60fa      	str	r2, [r7, #12]
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006294:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	0a5b      	lsrs	r3, r3, #9
 800629e:	4413      	add	r3, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	6938      	ldr	r0, [r7, #16]
 80062a4:	f7ff fefe 	bl	80060a4 <move_window>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d152      	bne.n	8006354 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <get_fat+0xba>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	e002      	b.n	80062da <get_fat+0xc0>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	617b      	str	r3, [r7, #20]
			break;
 80062dc:	e03f      	b.n	800635e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	4413      	add	r3, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	6938      	ldr	r0, [r7, #16]
 80062ec:	f7ff feda 	bl	80060a4 <move_window>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d130      	bne.n	8006358 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006304:	4413      	add	r3, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fc1c 	bl	8005b44 <ld_word>
 800630c:	4603      	mov	r3, r0
 800630e:	617b      	str	r3, [r7, #20]
			break;
 8006310:	e025      	b.n	800635e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	4413      	add	r3, r2
 800631c:	4619      	mov	r1, r3
 800631e:	6938      	ldr	r0, [r7, #16]
 8006320:	f7ff fec0 	bl	80060a4 <move_window>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d118      	bne.n	800635c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006338:	4413      	add	r3, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fc1a 	bl	8005b74 <ld_dword>
 8006340:	4603      	mov	r3, r0
 8006342:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006346:	617b      	str	r3, [r7, #20]
			break;
 8006348:	e009      	b.n	800635e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800634a:	2301      	movs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e006      	b.n	800635e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006350:	bf00      	nop
 8006352:	e004      	b.n	800635e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800635c:	bf00      	nop
		}
	}

	return val;
 800635e:	697b      	ldr	r3, [r7, #20]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b089      	sub	sp, #36	@ 0x24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006374:	2302      	movs	r3, #2
 8006376:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	f240 80d9 	bls.w	8006532 <put_fat+0x1ca>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	429a      	cmp	r2, r3
 8006388:	f080 80d3 	bcs.w	8006532 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b03      	cmp	r3, #3
 8006392:	f000 8096 	beq.w	80064c2 <put_fat+0x15a>
 8006396:	2b03      	cmp	r3, #3
 8006398:	f300 80cb 	bgt.w	8006532 <put_fat+0x1ca>
 800639c:	2b01      	cmp	r3, #1
 800639e:	d002      	beq.n	80063a6 <put_fat+0x3e>
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d06e      	beq.n	8006482 <put_fat+0x11a>
 80063a4:	e0c5      	b.n	8006532 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	085b      	lsrs	r3, r3, #1
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4413      	add	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	0a5b      	lsrs	r3, r3, #9
 80063bc:	4413      	add	r3, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7ff fe6f 	bl	80060a4 <move_window>
 80063c6:	4603      	mov	r3, r0
 80063c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 80a9 	bne.w	8006524 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	1c59      	adds	r1, r3, #1
 80063dc:	61b9      	str	r1, [r7, #24]
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	4413      	add	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <put_fat+0xa4>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	b25a      	sxtb	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	b25b      	sxtb	r3, r3
 8006404:	4313      	orrs	r3, r2
 8006406:	b25b      	sxtb	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e001      	b.n	8006410 <put_fat+0xa8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	0a5b      	lsrs	r3, r3, #9
 8006422:	4413      	add	r3, r2
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff fe3c 	bl	80060a4 <move_window>
 800642c:	4603      	mov	r3, r0
 800642e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006430:	7ffb      	ldrb	r3, [r7, #31]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d178      	bne.n	8006528 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	4413      	add	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <put_fat+0xf0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	091b      	lsrs	r3, r3, #4
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e00e      	b.n	8006476 <put_fat+0x10e>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	b25b      	sxtb	r3, r3
 800645e:	f023 030f 	bic.w	r3, r3, #15
 8006462:	b25a      	sxtb	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	b25b      	sxtb	r3, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	b25b      	sxtb	r3, r3
 8006474:	b2db      	uxtb	r3, r3
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	70da      	strb	r2, [r3, #3]
			break;
 8006480:	e057      	b.n	8006532 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	4413      	add	r3, r2
 800648c:	4619      	mov	r1, r3
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fe08 	bl	80060a4 <move_window>
 8006494:	4603      	mov	r3, r0
 8006496:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006498:	7ffb      	ldrb	r3, [r7, #31]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d146      	bne.n	800652c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80064ac:	4413      	add	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	b292      	uxth	r2, r2
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fb80 	bl	8005bba <st_word>
			fs->wflag = 1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	70da      	strb	r2, [r3, #3]
			break;
 80064c0:	e037      	b.n	8006532 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	09db      	lsrs	r3, r3, #7
 80064ca:	4413      	add	r3, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fde8 	bl	80060a4 <move_window>
 80064d4:	4603      	mov	r3, r0
 80064d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064d8:	7ffb      	ldrb	r3, [r7, #31]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d128      	bne.n	8006530 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80064f2:	4413      	add	r3, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fb3d 	bl	8005b74 <ld_dword>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006500:	4323      	orrs	r3, r4
 8006502:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006512:	4413      	add	r3, r2
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fb6a 	bl	8005bf0 <st_dword>
			fs->wflag = 1;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	70da      	strb	r2, [r3, #3]
			break;
 8006522:	e006      	b.n	8006532 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006524:	bf00      	nop
 8006526:	e004      	b.n	8006532 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006530:	bf00      	nop
		}
	}
	return res;
 8006532:	7ffb      	ldrb	r3, [r7, #31]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3724      	adds	r7, #36	@ 0x24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd90      	pop	{r4, r7, pc}

0800653c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d904      	bls.n	8006562 <remove_chain+0x26>
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d301      	bcc.n	8006566 <remove_chain+0x2a>
 8006562:	2302      	movs	r3, #2
 8006564:	e04b      	b.n	80065fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	69b8      	ldr	r0, [r7, #24]
 8006574:	f7ff fef8 	bl	8006368 <put_fat>
 8006578:	4603      	mov	r3, r0
 800657a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800657c:	7ffb      	ldrb	r3, [r7, #31]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <remove_chain+0x4a>
 8006582:	7ffb      	ldrb	r3, [r7, #31]
 8006584:	e03b      	b.n	80065fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff fe46 	bl	800621a <get_fat>
 800658e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d031      	beq.n	80065fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <remove_chain+0x64>
 800659c:	2302      	movs	r3, #2
 800659e:	e02e      	b.n	80065fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d101      	bne.n	80065ac <remove_chain+0x70>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e028      	b.n	80065fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80065ac:	2200      	movs	r2, #0
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	69b8      	ldr	r0, [r7, #24]
 80065b2:	f7ff fed9 	bl	8006368 <put_fat>
 80065b6:	4603      	mov	r3, r0
 80065b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <remove_chain+0x88>
 80065c0:	7ffb      	ldrb	r3, [r7, #31]
 80065c2:	e01c      	b.n	80065fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	3b02      	subs	r3, #2
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d20b      	bcs.n	80065ea <remove_chain+0xae>
			fs->free_clst++;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d3c6      	bcc.n	8006586 <remove_chain+0x4a>
 80065f8:	e000      	b.n	80065fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80065fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <create_chain+0x2c>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	429a      	cmp	r2, r3
 8006630:	d31b      	bcc.n	800666a <create_chain+0x64>
 8006632:	2301      	movs	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e018      	b.n	800666a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fded 	bl	800621a <get_fat>
 8006640:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d801      	bhi.n	800664c <create_chain+0x46>
 8006648:	2301      	movs	r3, #1
 800664a:	e070      	b.n	800672e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d101      	bne.n	8006658 <create_chain+0x52>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	e06a      	b.n	800672e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	429a      	cmp	r2, r3
 8006660:	d201      	bcs.n	8006666 <create_chain+0x60>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	e063      	b.n	800672e <create_chain+0x128>
		scl = clst;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	3301      	adds	r3, #1
 8006672:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	429a      	cmp	r2, r3
 800667c:	d307      	bcc.n	800668e <create_chain+0x88>
				ncl = 2;
 800667e:	2302      	movs	r3, #2
 8006680:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	429a      	cmp	r2, r3
 8006688:	d901      	bls.n	800668e <create_chain+0x88>
 800668a:	2300      	movs	r3, #0
 800668c:	e04f      	b.n	800672e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800668e:	69f9      	ldr	r1, [r7, #28]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fdc2 	bl	800621a <get_fat>
 8006696:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d003      	beq.n	80066ac <create_chain+0xa6>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d101      	bne.n	80066b0 <create_chain+0xaa>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	e03e      	b.n	800672e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d1da      	bne.n	800666e <create_chain+0x68>
 80066b8:	2300      	movs	r3, #0
 80066ba:	e038      	b.n	800672e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80066bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80066be:	f04f 32ff 	mov.w	r2, #4294967295
 80066c2:	69f9      	ldr	r1, [r7, #28]
 80066c4:	6938      	ldr	r0, [r7, #16]
 80066c6:	f7ff fe4f 	bl	8006368 <put_fat>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <create_chain+0xe2>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6938      	ldr	r0, [r7, #16]
 80066e0:	f7ff fe42 	bl	8006368 <put_fat>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <create_chain+0x116>
		fs->last_clst = ncl;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	3b02      	subs	r3, #2
 80066fe:	429a      	cmp	r2, r3
 8006700:	d804      	bhi.n	800670c <create_chain+0x106>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	791b      	ldrb	r3, [r3, #4]
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	711a      	strb	r2, [r3, #4]
 800671a:	e007      	b.n	800672c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d102      	bne.n	8006728 <create_chain+0x122>
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
 8006726:	e000      	b.n	800672a <create_chain+0x124>
 8006728:	2301      	movs	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800672c:	69fb      	ldr	r3, [r7, #28]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	3304      	adds	r3, #4
 800674c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	0a5b      	lsrs	r3, r3, #9
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	8952      	ldrh	r2, [r2, #10]
 8006756:	fbb3 f3f2 	udiv	r3, r3, r2
 800675a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	613a      	str	r2, [r7, #16]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <clmt_clust+0x3a>
 800676c:	2300      	movs	r3, #0
 800676e:	e010      	b.n	8006792 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d307      	bcc.n	8006788 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3304      	adds	r3, #4
 8006784:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006786:	e7e9      	b.n	800675c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006788:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b4:	d204      	bcs.n	80067c0 <dir_sdi+0x22>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e063      	b.n	800688c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <dir_sdi+0x46>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d902      	bls.n	80067e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10c      	bne.n	8006804 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	8912      	ldrh	r2, [r2, #8]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d301      	bcc.n	80067fa <dir_sdi+0x5c>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e048      	b.n	800688c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	61da      	str	r2, [r3, #28]
 8006802:	e029      	b.n	8006858 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	895b      	ldrh	r3, [r3, #10]
 8006808:	025b      	lsls	r3, r3, #9
 800680a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800680c:	e019      	b.n	8006842 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fd01 	bl	800621a <get_fat>
 8006818:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d101      	bne.n	8006826 <dir_sdi+0x88>
 8006822:	2301      	movs	r3, #1
 8006824:	e032      	b.n	800688c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d904      	bls.n	8006836 <dir_sdi+0x98>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	429a      	cmp	r2, r3
 8006834:	d301      	bcc.n	800683a <dir_sdi+0x9c>
 8006836:	2302      	movs	r3, #2
 8006838:	e028      	b.n	800688c <dir_sdi+0xee>
			ofs -= csz;
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	429a      	cmp	r2, r3
 8006848:	d2e1      	bcs.n	800680e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800684a:	6979      	ldr	r1, [r7, #20]
 800684c:	6938      	ldr	r0, [r7, #16]
 800684e:	f7ff fcc5 	bl	80061dc <clust2sect>
 8006852:	4602      	mov	r2, r0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <dir_sdi+0xcc>
 8006866:	2302      	movs	r3, #2
 8006868:	e010      	b.n	800688c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	0a5b      	lsrs	r3, r3, #9
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006884:	441a      	add	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	3320      	adds	r3, #32
 80068aa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <dir_next+0x28>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ba:	d301      	bcc.n	80068c0 <dir_next+0x2c>
 80068bc:	2304      	movs	r3, #4
 80068be:	e0aa      	b.n	8006a16 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8098 	bne.w	80069fc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	8912      	ldrh	r2, [r2, #8]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	f0c0 8088 	bcc.w	80069fc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	61da      	str	r2, [r3, #28]
 80068f2:	2304      	movs	r3, #4
 80068f4:	e08f      	b.n	8006a16 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	0a5b      	lsrs	r3, r3, #9
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	8952      	ldrh	r2, [r2, #10]
 80068fe:	3a01      	subs	r2, #1
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d17a      	bne.n	80069fc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7ff fc83 	bl	800621a <get_fat>
 8006914:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d801      	bhi.n	8006920 <dir_next+0x8c>
 800691c:	2302      	movs	r3, #2
 800691e:	e07a      	b.n	8006a16 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d101      	bne.n	800692c <dir_next+0x98>
 8006928:	2301      	movs	r3, #1
 800692a:	e074      	b.n	8006a16 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	429a      	cmp	r2, r3
 8006934:	d358      	bcc.n	80069e8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	61da      	str	r2, [r3, #28]
 8006942:	2304      	movs	r3, #4
 8006944:	e067      	b.n	8006a16 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f7ff fe59 	bl	8006606 <create_chain>
 8006954:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <dir_next+0xcc>
 800695c:	2307      	movs	r3, #7
 800695e:	e05a      	b.n	8006a16 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <dir_next+0xd6>
 8006966:	2302      	movs	r3, #2
 8006968:	e055      	b.n	8006a16 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d101      	bne.n	8006976 <dir_next+0xe2>
 8006972:	2301      	movs	r3, #1
 8006974:	e04f      	b.n	8006a16 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fb50 	bl	800601c <sync_window>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <dir_next+0xf2>
 8006982:	2301      	movs	r3, #1
 8006984:	e047      	b.n	8006a16 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3330      	adds	r3, #48	@ 0x30
 800698a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff f97a 	bl	8005c8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fc1d 	bl	80061dc <clust2sect>
 80069a2:	4602      	mov	r2, r0
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069a8:	e012      	b.n	80069d0 <dir_next+0x13c>
						fs->wflag = 1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff fb33 	bl	800601c <sync_window>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <dir_next+0x12c>
 80069bc:	2301      	movs	r3, #1
 80069be:	e02a      	b.n	8006a16 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	3301      	adds	r3, #1
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	895b      	ldrh	r3, [r3, #10]
 80069d4:	461a      	mov	r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4293      	cmp	r3, r2
 80069da:	d3e6      	bcc.n	80069aa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad2      	subs	r2, r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069ee:	6979      	ldr	r1, [r7, #20]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff fbf3 	bl	80061dc <clust2sect>
 80069f6:	4602      	mov	r2, r0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	441a      	add	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff feb4 	bl	800679e <dir_sdi>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d12b      	bne.n	8006a98 <dir_alloc+0x7a>
		n = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff fb2a 	bl	80060a4 <move_window>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11d      	bne.n	8006a96 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2be5      	cmp	r3, #229	@ 0xe5
 8006a62:	d004      	beq.n	8006a6e <dir_alloc+0x50>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d102      	bne.n	8006a82 <dir_alloc+0x64>
 8006a7c:	e00c      	b.n	8006a98 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a82:	2101      	movs	r1, #1
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff05 	bl	8006894 <dir_next>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0d7      	beq.n	8006a44 <dir_alloc+0x26>
 8006a94:	e000      	b.n	8006a98 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a96:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d101      	bne.n	8006aa2 <dir_alloc+0x84>
 8006a9e:	2307      	movs	r3, #7
 8006aa0:	75fb      	strb	r3, [r7, #23]
	return res;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	331a      	adds	r3, #26
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff f842 	bl	8005b44 <ld_word>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d109      	bne.n	8006ae0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff f837 	bl	8005b44 <ld_word>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	331a      	adds	r3, #26
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	b292      	uxth	r2, r2
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff f85a 	bl	8005bba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d109      	bne.n	8006b22 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f103 0214 	add.w	r2, r3, #20
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7ff f84c 	bl	8005bba <st_word>
	}
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fe2f 	bl	800679e <dir_sdi>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <dir_find+0x24>
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	e03e      	b.n	8006bcc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6938      	ldr	r0, [r7, #16]
 8006b56:	f7ff faa5 	bl	80060a4 <move_window>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d12f      	bne.n	8006bc4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d102      	bne.n	8006b78 <dir_find+0x4e>
 8006b72:	2304      	movs	r3, #4
 8006b74:	75fb      	strb	r3, [r7, #23]
 8006b76:	e028      	b.n	8006bca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	330b      	adds	r3, #11
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	330b      	adds	r3, #11
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <dir_find+0x86>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a18      	ldr	r0, [r3, #32]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3324      	adds	r3, #36	@ 0x24
 8006ba2:	220b      	movs	r2, #11
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f7ff f88b 	bl	8005cc0 <mem_cmp>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fe6e 	bl	8006894 <dir_next>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0c5      	beq.n	8006b4e <dir_find+0x24>
 8006bc2:	e002      	b.n	8006bca <dir_find+0xa0>
		if (res != FR_OK) break;
 8006bc4:	bf00      	nop
 8006bc6:	e000      	b.n	8006bca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006bc8:	bf00      	nop

	return res;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff1a 	bl	8006a1e <dir_alloc>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11c      	bne.n	8006c2e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	68b8      	ldr	r0, [r7, #8]
 8006bfc:	f7ff fa52 	bl	80060a4 <move_window>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d111      	bne.n	8006c2e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f839 	bl	8005c8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a18      	ldr	r0, [r3, #32]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3324      	adds	r3, #36	@ 0x24
 8006c20:	220b      	movs	r2, #11
 8006c22:	4619      	mov	r1, r3
 8006c24:	f7ff f810 	bl	8005c48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3324      	adds	r3, #36	@ 0x24
 8006c4c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c4e:	220b      	movs	r2, #11
 8006c50:	2120      	movs	r1, #32
 8006c52:	68b8      	ldr	r0, [r7, #8]
 8006c54:	f7ff f819 	bl	8005c8a <mem_set>
	si = i = 0; ni = 8;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	2308      	movs	r3, #8
 8006c62:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	61fa      	str	r2, [r7, #28]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c72:	7efb      	ldrb	r3, [r7, #27]
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d94e      	bls.n	8006d16 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c78:	7efb      	ldrb	r3, [r7, #27]
 8006c7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c7c:	d006      	beq.n	8006c8c <create_name+0x54>
 8006c7e:	7efb      	ldrb	r3, [r7, #27]
 8006c80:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c82:	d110      	bne.n	8006ca6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c84:	e002      	b.n	8006c8c <create_name+0x54>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b2f      	cmp	r3, #47	@ 0x2f
 8006c96:	d0f6      	beq.n	8006c86 <create_name+0x4e>
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ca2:	d0f0      	beq.n	8006c86 <create_name+0x4e>
			break;
 8006ca4:	e038      	b.n	8006d18 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ca6:	7efb      	ldrb	r3, [r7, #27]
 8006ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006caa:	d003      	beq.n	8006cb4 <create_name+0x7c>
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d30c      	bcc.n	8006cce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b0b      	cmp	r3, #11
 8006cb8:	d002      	beq.n	8006cc0 <create_name+0x88>
 8006cba:	7efb      	ldrb	r3, [r7, #27]
 8006cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cbe:	d001      	beq.n	8006cc4 <create_name+0x8c>
 8006cc0:	2306      	movs	r3, #6
 8006cc2:	e044      	b.n	8006d4e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	230b      	movs	r3, #11
 8006cca:	617b      	str	r3, [r7, #20]
			continue;
 8006ccc:	e022      	b.n	8006d14 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da04      	bge.n	8006ce0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cd6:	7efb      	ldrb	r3, [r7, #27]
 8006cd8:	3b80      	subs	r3, #128	@ 0x80
 8006cda:	4a1f      	ldr	r2, [pc, #124]	@ (8006d58 <create_name+0x120>)
 8006cdc:	5cd3      	ldrb	r3, [r2, r3]
 8006cde:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006ce0:	7efb      	ldrb	r3, [r7, #27]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	481d      	ldr	r0, [pc, #116]	@ (8006d5c <create_name+0x124>)
 8006ce6:	f7ff f812 	bl	8005d0e <chk_chr>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <create_name+0xbc>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e02c      	b.n	8006d4e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cf4:	7efb      	ldrb	r3, [r7, #27]
 8006cf6:	2b60      	cmp	r3, #96	@ 0x60
 8006cf8:	d905      	bls.n	8006d06 <create_name+0xce>
 8006cfa:	7efb      	ldrb	r3, [r7, #27]
 8006cfc:	2b7a      	cmp	r3, #122	@ 0x7a
 8006cfe:	d802      	bhi.n	8006d06 <create_name+0xce>
 8006d00:	7efb      	ldrb	r3, [r7, #27]
 8006d02:	3b20      	subs	r3, #32
 8006d04:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	613a      	str	r2, [r7, #16]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	4413      	add	r3, r2
 8006d10:	7efa      	ldrb	r2, [r7, #27]
 8006d12:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d14:	e7a6      	b.n	8006c64 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d16:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	441a      	add	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <create_name+0xf4>
 8006d28:	2306      	movs	r3, #6
 8006d2a:	e010      	b.n	8006d4e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2be5      	cmp	r3, #229	@ 0xe5
 8006d32:	d102      	bne.n	8006d3a <create_name+0x102>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2205      	movs	r2, #5
 8006d38:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d3a:	7efb      	ldrb	r3, [r7, #27]
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d801      	bhi.n	8006d44 <create_name+0x10c>
 8006d40:	2204      	movs	r2, #4
 8006d42:	e000      	b.n	8006d46 <create_name+0x10e>
 8006d44:	2200      	movs	r2, #0
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	330b      	adds	r3, #11
 8006d4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d4c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	08008798 	.word	0x08008798
 8006d5c:	080086e4 	.word	0x080086e4

08006d60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d74:	e002      	b.n	8006d7c <follow_path+0x1c>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d82:	d0f8      	beq.n	8006d76 <follow_path+0x16>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d8a:	d0f4      	beq.n	8006d76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b1f      	cmp	r3, #31
 8006d98:	d80a      	bhi.n	8006db0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2280      	movs	r2, #128	@ 0x80
 8006d9e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006da2:	2100      	movs	r1, #0
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff fcfa 	bl	800679e <dir_sdi>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]
 8006dae:	e043      	b.n	8006e38 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006db0:	463b      	mov	r3, r7
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ff3f 	bl	8006c38 <create_name>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d134      	bne.n	8006e2e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff feb0 	bl	8006b2a <dir_find>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006dd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d127      	bne.n	8006e32 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d122      	bne.n	8006e32 <follow_path+0xd2>
 8006dec:	2305      	movs	r3, #5
 8006dee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006df0:	e01f      	b.n	8006e32 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11c      	bne.n	8006e36 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	799b      	ldrb	r3, [r3, #6]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e08:	2305      	movs	r3, #5
 8006e0a:	75fb      	strb	r3, [r7, #23]
 8006e0c:	e014      	b.n	8006e38 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fe43 	bl	8006aac <ld_clust>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e2c:	e7c0      	b.n	8006db0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <follow_path+0xd8>
				break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e36:	bf00      	nop
			}
		}
	}

	return res;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d031      	beq.n	8006ebc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e002      	b.n	8006e66 <get_ldnumber+0x24>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3301      	adds	r3, #1
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b20      	cmp	r3, #32
 8006e6c:	d903      	bls.n	8006e76 <get_ldnumber+0x34>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e74:	d1f4      	bne.n	8006e60 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b3a      	cmp	r3, #58	@ 0x3a
 8006e7c:	d11c      	bne.n	8006eb8 <get_ldnumber+0x76>
			tp = *path;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	60fa      	str	r2, [r7, #12]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	3b30      	subs	r3, #48	@ 0x30
 8006e8e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	d80e      	bhi.n	8006eb4 <get_ldnumber+0x72>
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d10a      	bne.n	8006eb4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <get_ldnumber+0x72>
					vol = (int)i;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	e002      	b.n	8006ebe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ebc:	693b      	ldr	r3, [r7, #16]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	70da      	strb	r2, [r3, #3]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff f8dc 	bl	80060a4 <move_window>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <check_fs+0x2a>
 8006ef2:	2304      	movs	r3, #4
 8006ef4:	e038      	b.n	8006f68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3330      	adds	r3, #48	@ 0x30
 8006efa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fe20 	bl	8005b44 <ld_word>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <check_fs+0x48>
 8006f10:	2303      	movs	r3, #3
 8006f12:	e029      	b.n	8006f68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f1a:	2be9      	cmp	r3, #233	@ 0xe9
 8006f1c:	d009      	beq.n	8006f32 <check_fs+0x66>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f24:	2beb      	cmp	r3, #235	@ 0xeb
 8006f26:	d11e      	bne.n	8006f66 <check_fs+0x9a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006f2e:	2b90      	cmp	r3, #144	@ 0x90
 8006f30:	d119      	bne.n	8006f66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3330      	adds	r3, #48	@ 0x30
 8006f36:	3336      	adds	r3, #54	@ 0x36
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fe1b 	bl	8005b74 <ld_dword>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006f44:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <check_fs+0xa4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <check_fs+0x82>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e00c      	b.n	8006f68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3330      	adds	r3, #48	@ 0x30
 8006f52:	3352      	adds	r3, #82	@ 0x52
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fe0d 	bl	8005b74 <ld_dword>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4a05      	ldr	r2, [pc, #20]	@ (8006f74 <check_fs+0xa8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d101      	bne.n	8006f66 <check_fs+0x9a>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f66:	2302      	movs	r3, #2
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	00544146 	.word	0x00544146
 8006f74:	33544146 	.word	0x33544146

08006f78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b096      	sub	sp, #88	@ 0x58
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff ff58 	bl	8006e42 <get_ldnumber>
 8006f92:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da01      	bge.n	8006f9e <find_volume+0x26>
 8006f9a:	230b      	movs	r3, #11
 8006f9c:	e22d      	b.n	80073fa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f9e:	4aa1      	ldr	r2, [pc, #644]	@ (8007224 <find_volume+0x2ac>)
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <find_volume+0x3a>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	e223      	b.n	80073fa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01a      	beq.n	8006ffe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fd1b 	bl	8005a08 <disk_status>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10c      	bne.n	8006ffe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <find_volume+0x82>
 8006fea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006ff6:	230a      	movs	r3, #10
 8006ff8:	e1ff      	b.n	80073fa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	e1fd      	b.n	80073fa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007006:	b2da      	uxtb	r2, r3
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fd13 	bl	8005a3c <disk_initialize>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800701c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007028:	2303      	movs	r3, #3
 800702a:	e1e6      	b.n	80073fa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <find_volume+0xca>
 8007032:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800703e:	230a      	movs	r3, #10
 8007040:	e1db      	b.n	80073fa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007046:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007048:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800704a:	f7ff ff3f 	bl	8006ecc <check_fs>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007054:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007058:	2b02      	cmp	r3, #2
 800705a:	d149      	bne.n	80070f0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800705c:	2300      	movs	r3, #0
 800705e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007060:	e01e      	b.n	80070a0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007070:	4413      	add	r3, r2
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	3304      	adds	r3, #4
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <find_volume+0x114>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	3308      	adds	r3, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fd76 	bl	8005b74 <ld_dword>
 8007088:	4602      	mov	r2, r0
 800708a:	e000      	b.n	800708e <find_volume+0x116>
 800708c:	2200      	movs	r2, #0
 800708e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	3358      	adds	r3, #88	@ 0x58
 8007094:	443b      	add	r3, r7
 8007096:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800709a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800709c:	3301      	adds	r3, #1
 800709e:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d9dd      	bls.n	8007062 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070a6:	2300      	movs	r3, #0
 80070a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80070aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <find_volume+0x13e>
 80070b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b2:	3b01      	subs	r3, #1
 80070b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	3358      	adds	r3, #88	@ 0x58
 80070bc:	443b      	add	r3, r7
 80070be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d005      	beq.n	80070d6 <find_volume+0x15e>
 80070ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070ce:	f7ff fefd 	bl	8006ecc <check_fs>
 80070d2:	4603      	mov	r3, r0
 80070d4:	e000      	b.n	80070d8 <find_volume+0x160>
 80070d6:	2303      	movs	r3, #3
 80070d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d905      	bls.n	80070f0 <find_volume+0x178>
 80070e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070e6:	3301      	adds	r3, #1
 80070e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d9e2      	bls.n	80070b6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d101      	bne.n	80070fc <find_volume+0x184>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e17e      	b.n	80073fa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007100:	2b01      	cmp	r3, #1
 8007102:	d901      	bls.n	8007108 <find_volume+0x190>
 8007104:	230d      	movs	r3, #13
 8007106:	e178      	b.n	80073fa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	3330      	adds	r3, #48	@ 0x30
 800710c:	330b      	adds	r3, #11
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fd18 	bl	8005b44 <ld_word>
 8007114:	4603      	mov	r3, r0
 8007116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800711a:	d001      	beq.n	8007120 <find_volume+0x1a8>
 800711c:	230d      	movs	r3, #13
 800711e:	e16c      	b.n	80073fa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	3330      	adds	r3, #48	@ 0x30
 8007124:	3316      	adds	r3, #22
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fd0c 	bl	8005b44 <ld_word>
 800712c:	4603      	mov	r3, r0
 800712e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <find_volume+0x1cc>
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	3330      	adds	r3, #48	@ 0x30
 800713a:	3324      	adds	r3, #36	@ 0x24
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fd19 	bl	8005b74 <ld_dword>
 8007142:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007148:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	789b      	ldrb	r3, [r3, #2]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d005      	beq.n	8007168 <find_volume+0x1f0>
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	789b      	ldrb	r3, [r3, #2]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d001      	beq.n	8007168 <find_volume+0x1f0>
 8007164:	230d      	movs	r3, #13
 8007166:	e148      	b.n	80073fa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	789b      	ldrb	r3, [r3, #2]
 800716c:	461a      	mov	r2, r3
 800716e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007170:	fb02 f303 	mul.w	r3, r2, r3
 8007174:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717c:	461a      	mov	r2, r3
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	895b      	ldrh	r3, [r3, #10]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <find_volume+0x224>
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	895b      	ldrh	r3, [r3, #10]
 800718e:	461a      	mov	r2, r3
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	895b      	ldrh	r3, [r3, #10]
 8007194:	3b01      	subs	r3, #1
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <find_volume+0x228>
 800719c:	230d      	movs	r3, #13
 800719e:	e12c      	b.n	80073fa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	3330      	adds	r3, #48	@ 0x30
 80071a4:	3311      	adds	r3, #17
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fccc 	bl	8005b44 <ld_word>
 80071ac:	4603      	mov	r3, r0
 80071ae:	461a      	mov	r2, r3
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	891b      	ldrh	r3, [r3, #8]
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <find_volume+0x24e>
 80071c2:	230d      	movs	r3, #13
 80071c4:	e119      	b.n	80073fa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	3330      	adds	r3, #48	@ 0x30
 80071ca:	3313      	adds	r3, #19
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fcb9 	bl	8005b44 <ld_word>
 80071d2:	4603      	mov	r3, r0
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d106      	bne.n	80071ea <find_volume+0x272>
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	3330      	adds	r3, #48	@ 0x30
 80071e0:	3320      	adds	r3, #32
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fcc6 	bl	8005b74 <ld_dword>
 80071e8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	3330      	adds	r3, #48	@ 0x30
 80071ee:	330e      	adds	r3, #14
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe fca7 	bl	8005b44 <ld_word>
 80071f6:	4603      	mov	r3, r0
 80071f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <find_volume+0x28c>
 8007200:	230d      	movs	r3, #13
 8007202:	e0fa      	b.n	80073fa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007204:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007208:	4413      	add	r3, r2
 800720a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800720c:	8912      	ldrh	r2, [r2, #8]
 800720e:	0912      	lsrs	r2, r2, #4
 8007210:	b292      	uxth	r2, r2
 8007212:	4413      	add	r3, r2
 8007214:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	429a      	cmp	r2, r3
 800721c:	d204      	bcs.n	8007228 <find_volume+0x2b0>
 800721e:	230d      	movs	r3, #13
 8007220:	e0eb      	b.n	80073fa <find_volume+0x482>
 8007222:	bf00      	nop
 8007224:	200402a0 	.word	0x200402a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007230:	8952      	ldrh	r2, [r2, #10]
 8007232:	fbb3 f3f2 	udiv	r3, r3, r2
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <find_volume+0x2ca>
 800723e:	230d      	movs	r3, #13
 8007240:	e0db      	b.n	80073fa <find_volume+0x482>
		fmt = FS_FAT32;
 8007242:	2303      	movs	r3, #3
 8007244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800724e:	4293      	cmp	r3, r2
 8007250:	d802      	bhi.n	8007258 <find_volume+0x2e0>
 8007252:	2302      	movs	r3, #2
 8007254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800725e:	4293      	cmp	r3, r2
 8007260:	d802      	bhi.n	8007268 <find_volume+0x2f0>
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	1c9a      	adds	r2, r3, #2
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007272:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007274:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007276:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800727a:	441a      	add	r2, r3
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007280:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	441a      	add	r2, r3
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800728a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800728e:	2b03      	cmp	r3, #3
 8007290:	d11e      	bne.n	80072d0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	3330      	adds	r3, #48	@ 0x30
 8007296:	332a      	adds	r3, #42	@ 0x2a
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fc53 	bl	8005b44 <ld_word>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <find_volume+0x330>
 80072a4:	230d      	movs	r3, #13
 80072a6:	e0a8      	b.n	80073fa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	891b      	ldrh	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <find_volume+0x33c>
 80072b0:	230d      	movs	r3, #13
 80072b2:	e0a2      	b.n	80073fa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	3330      	adds	r3, #48	@ 0x30
 80072b8:	332c      	adds	r3, #44	@ 0x2c
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fc5a 	bl	8005b74 <ld_dword>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ce:	e01f      	b.n	8007310 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	891b      	ldrh	r3, [r3, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <find_volume+0x364>
 80072d8:	230d      	movs	r3, #13
 80072da:	e08e      	b.n	80073fa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e2:	441a      	add	r2, r3
 80072e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d103      	bne.n	80072f8 <find_volume+0x380>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	e00a      	b.n	800730e <find_volume+0x396>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	695a      	ldr	r2, [r3, #20]
 80072fc:	4613      	mov	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	085a      	lsrs	r2, r3, #1
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800730e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007316:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800731a:	0a5b      	lsrs	r3, r3, #9
 800731c:	429a      	cmp	r2, r3
 800731e:	d201      	bcs.n	8007324 <find_volume+0x3ac>
 8007320:	230d      	movs	r3, #13
 8007322:	e06a      	b.n	80073fa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	f04f 32ff 	mov.w	r2, #4294967295
 800732a:	611a      	str	r2, [r3, #16]
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	2280      	movs	r2, #128	@ 0x80
 8007338:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800733a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800733e:	2b03      	cmp	r3, #3
 8007340:	d149      	bne.n	80073d6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	3330      	adds	r3, #48	@ 0x30
 8007346:	3330      	adds	r3, #48	@ 0x30
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fbfb 	bl	8005b44 <ld_word>
 800734e:	4603      	mov	r3, r0
 8007350:	2b01      	cmp	r3, #1
 8007352:	d140      	bne.n	80073d6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007356:	3301      	adds	r3, #1
 8007358:	4619      	mov	r1, r3
 800735a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800735c:	f7fe fea2 	bl	80060a4 <move_window>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d137      	bne.n	80073d6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	2200      	movs	r2, #0
 800736a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	3330      	adds	r3, #48	@ 0x30
 8007370:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe fbe5 	bl	8005b44 <ld_word>
 800737a:	4603      	mov	r3, r0
 800737c:	461a      	mov	r2, r3
 800737e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007382:	429a      	cmp	r2, r3
 8007384:	d127      	bne.n	80073d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007388:	3330      	adds	r3, #48	@ 0x30
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fbf2 	bl	8005b74 <ld_dword>
 8007390:	4603      	mov	r3, r0
 8007392:	4a1c      	ldr	r2, [pc, #112]	@ (8007404 <find_volume+0x48c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d11e      	bne.n	80073d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739a:	3330      	adds	r3, #48	@ 0x30
 800739c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fbe7 	bl	8005b74 <ld_dword>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4a17      	ldr	r2, [pc, #92]	@ (8007408 <find_volume+0x490>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d113      	bne.n	80073d6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	3330      	adds	r3, #48	@ 0x30
 80073b2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fbdc 	bl	8005b74 <ld_dword>
 80073bc:	4602      	mov	r2, r0
 80073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	3330      	adds	r3, #48	@ 0x30
 80073c6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe fbd2 	bl	8005b74 <ld_dword>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80073dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073de:	4b0b      	ldr	r3, [pc, #44]	@ (800740c <find_volume+0x494>)
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	3301      	adds	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	4b09      	ldr	r3, [pc, #36]	@ (800740c <find_volume+0x494>)
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	4b08      	ldr	r3, [pc, #32]	@ (800740c <find_volume+0x494>)
 80073ec:	881a      	ldrh	r2, [r3, #0]
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073f4:	f7fe fdee 	bl	8005fd4 <clear_lock>
#endif
	return FR_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3758      	adds	r7, #88	@ 0x58
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	41615252 	.word	0x41615252
 8007408:	61417272 	.word	0x61417272
 800740c:	200402a4 	.word	0x200402a4

08007410 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800741a:	2309      	movs	r3, #9
 800741c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01c      	beq.n	800745e <validate+0x4e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d018      	beq.n	800745e <validate+0x4e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <validate+0x4e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	889a      	ldrh	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	88db      	ldrh	r3, [r3, #6]
 8007440:	429a      	cmp	r2, r3
 8007442:	d10c      	bne.n	800745e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fadc 	bl	8005a08 <disk_status>
 8007450:	4603      	mov	r3, r0
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <validate+0x4e>
			res = FR_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <validate+0x5a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	e000      	b.n	800746c <validate+0x5c>
 800746a:	2300      	movs	r3, #0
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	6013      	str	r3, [r2, #0]
	return res;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800748e:	f107 0310 	add.w	r3, r7, #16
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fcd5 	bl	8006e42 <get_ldnumber>
 8007498:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da01      	bge.n	80074a4 <f_mount+0x28>
 80074a0:	230b      	movs	r3, #11
 80074a2:	e02b      	b.n	80074fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074a4:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <f_mount+0x88>)
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074b4:	69b8      	ldr	r0, [r7, #24]
 80074b6:	f7fe fd8d 	bl	8005fd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	490d      	ldr	r1, [pc, #52]	@ (8007504 <f_mount+0x88>)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <f_mount+0x66>
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <f_mount+0x6a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	e00a      	b.n	80074fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80074e6:	f107 010c 	add.w	r1, r7, #12
 80074ea:	f107 0308 	add.w	r3, r7, #8
 80074ee:	2200      	movs	r2, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fd41 	bl	8006f78 <find_volume>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200402a0 	.word	0x200402a0

08007508 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b098      	sub	sp, #96	@ 0x60
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <f_open+0x18>
 800751c:	2309      	movs	r3, #9
 800751e:	e1a9      	b.n	8007874 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007526:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007528:	79fa      	ldrb	r2, [r7, #7]
 800752a:	f107 0110 	add.w	r1, r7, #16
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fd20 	bl	8006f78 <find_volume>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800753e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 818d 	bne.w	8007862 <f_open+0x35a>
		dj.obj.fs = fs;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	f107 0314 	add.w	r3, r7, #20
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fc03 	bl	8006d60 <follow_path>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007560:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007564:	2b00      	cmp	r3, #0
 8007566:	d118      	bne.n	800759a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007568:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800756c:	b25b      	sxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	da03      	bge.n	800757a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007572:	2306      	movs	r3, #6
 8007574:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007578:	e00f      	b.n	800759a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b01      	cmp	r3, #1
 800757e:	bf8c      	ite	hi
 8007580:	2301      	movhi	r3, #1
 8007582:	2300      	movls	r3, #0
 8007584:	b2db      	uxtb	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fbd8 	bl	8005d44 <chk_lock>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	f003 031c 	and.w	r3, r3, #28
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d07f      	beq.n	80076a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80075a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80075ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d10e      	bne.n	80075d2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075b4:	f7fe fc22 	bl	8005dfc <enq_lock>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d006      	beq.n	80075cc <f_open+0xc4>
 80075be:	f107 0314 	add.w	r3, r7, #20
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff fb06 	bl	8006bd4 <dir_register>
 80075c8:	4603      	mov	r3, r0
 80075ca:	e000      	b.n	80075ce <f_open+0xc6>
 80075cc:	2312      	movs	r3, #18
 80075ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	f043 0308 	orr.w	r3, r3, #8
 80075d8:	71fb      	strb	r3, [r7, #7]
 80075da:	e010      	b.n	80075fe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075dc:	7ebb      	ldrb	r3, [r7, #26]
 80075de:	f003 0311 	and.w	r3, r3, #17
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <f_open+0xe6>
					res = FR_DENIED;
 80075e6:	2307      	movs	r3, #7
 80075e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80075ec:	e007      	b.n	80075fe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <f_open+0xf6>
 80075f8:	2308      	movs	r3, #8
 80075fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007602:	2b00      	cmp	r3, #0
 8007604:	d168      	bne.n	80076d8 <f_open+0x1d0>
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d063      	beq.n	80076d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007610:	f7fd fcbe 	bl	8004f90 <get_fattime>
 8007614:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007618:	330e      	adds	r3, #14
 800761a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe fae7 	bl	8005bf0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007624:	3316      	adds	r3, #22
 8007626:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fae1 	bl	8005bf0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800762e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007630:	330b      	adds	r3, #11
 8007632:	2220      	movs	r2, #32
 8007634:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fa35 	bl	8006aac <ld_clust>
 8007642:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fa4d 	bl	8006aea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	331c      	adds	r3, #28
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe faca 	bl	8005bf0 <st_dword>
					fs->wflag = 1;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2201      	movs	r2, #1
 8007660:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d037      	beq.n	80076d8 <f_open+0x1d0>
						dw = fs->winsect;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800766e:	f107 0314 	add.w	r3, r7, #20
 8007672:	2200      	movs	r2, #0
 8007674:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe ff60 	bl	800653c <remove_chain>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007682:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d126      	bne.n	80076d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe fd08 	bl	80060a4 <move_window>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800769e:	3a01      	subs	r2, #1
 80076a0:	60da      	str	r2, [r3, #12]
 80076a2:	e019      	b.n	80076d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80076a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d115      	bne.n	80076d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80076ac:	7ebb      	ldrb	r3, [r7, #26]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <f_open+0x1b6>
					res = FR_NO_FILE;
 80076b6:	2304      	movs	r3, #4
 80076b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80076bc:	e00c      	b.n	80076d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <f_open+0x1d0>
 80076c8:	7ebb      	ldrb	r3, [r7, #26]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <f_open+0x1d0>
						res = FR_DENIED;
 80076d2:	2307      	movs	r3, #7
 80076d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80076d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d126      	bne.n	800772e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80076fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	2b01      	cmp	r3, #1
 8007704:	bf8c      	ite	hi
 8007706:	2301      	movhi	r3, #1
 8007708:	2300      	movls	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f107 0314 	add.w	r3, r7, #20
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fb93 	bl	8005e40 <inc_lock>
 800771a:	4602      	mov	r2, r0
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <f_open+0x226>
 8007728:	2302      	movs	r3, #2
 800772a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800772e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 8095 	bne.w	8007862 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff f9b4 	bl	8006aac <ld_clust>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800774a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774c:	331c      	adds	r3, #28
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fa10 	bl	8005b74 <ld_dword>
 8007754:	4602      	mov	r2, r0
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	88da      	ldrh	r2, [r3, #6]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	79fa      	ldrb	r2, [r7, #7]
 8007772:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3330      	adds	r3, #48	@ 0x30
 800778a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800778e:	2100      	movs	r1, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fa7a 	bl	8005c8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d060      	beq.n	8007862 <f_open+0x35a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d05c      	beq.n	8007862 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	895b      	ldrh	r3, [r3, #10]
 80077b4:	025b      	lsls	r3, r3, #9
 80077b6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077c4:	e016      	b.n	80077f4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fd25 	bl	800621a <get_fat>
 80077d0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80077d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d802      	bhi.n	80077de <f_open+0x2d6>
 80077d8:	2302      	movs	r3, #2
 80077da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d102      	bne.n	80077ec <f_open+0x2e4>
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <f_open+0x2fc>
 80077fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007800:	429a      	cmp	r2, r3
 8007802:	d8e0      	bhi.n	80077c6 <f_open+0x2be>
				}
				fp->clust = clst;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800780a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800780e:	2b00      	cmp	r3, #0
 8007810:	d127      	bne.n	8007862 <f_open+0x35a>
 8007812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007818:	2b00      	cmp	r3, #0
 800781a:	d022      	beq.n	8007862 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fcdb 	bl	80061dc <clust2sect>
 8007826:	6478      	str	r0, [r7, #68]	@ 0x44
 8007828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <f_open+0x32e>
						res = FR_INT_ERR;
 800782e:	2302      	movs	r3, #2
 8007830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007834:	e015      	b.n	8007862 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007838:	0a5a      	lsrs	r2, r3, #9
 800783a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	7858      	ldrb	r0, [r3, #1]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a1a      	ldr	r2, [r3, #32]
 8007850:	2301      	movs	r3, #1
 8007852:	f7fe f919 	bl	8005a88 <disk_read>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <f_open+0x35a>
 800785c:	2301      	movs	r3, #1
 800785e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007862:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <f_open+0x368>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007874:	4618      	mov	r0, r3
 8007876:	3760      	adds	r7, #96	@ 0x60
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08c      	sub	sp, #48	@ 0x30
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f107 0210 	add.w	r2, r7, #16
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fdb7 	bl	8007410 <validate>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80078a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d107      	bne.n	80078c0 <f_write+0x44>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	7d5b      	ldrb	r3, [r3, #21]
 80078b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <f_write+0x4a>
 80078c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078c4:	e14b      	b.n	8007b5e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	7d1b      	ldrb	r3, [r3, #20]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <f_write+0x5a>
 80078d2:	2307      	movs	r3, #7
 80078d4:	e143      	b.n	8007b5e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	f080 812d 	bcs.w	8007b42 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	43db      	mvns	r3, r3
 80078ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078f0:	e127      	b.n	8007b42 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 80e3 	bne.w	8007ac6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	0a5b      	lsrs	r3, r3, #9
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	8952      	ldrh	r2, [r2, #10]
 800790a:	3a01      	subs	r2, #1
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d143      	bne.n	800799e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11a      	bne.n	8007960 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fe69 	bl	8006606 <create_chain>
 8007934:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007936:	e013      	b.n	8007960 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4619      	mov	r1, r3
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7fe fef5 	bl	8006736 <clmt_clust>
 800794c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800794e:	e007      	b.n	8007960 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7fe fe54 	bl	8006606 <create_chain>
 800795e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 80f2 	beq.w	8007b4c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	2b01      	cmp	r3, #1
 800796c:	d104      	bne.n	8007978 <f_write+0xfc>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2202      	movs	r2, #2
 8007972:	755a      	strb	r2, [r3, #21]
 8007974:	2302      	movs	r3, #2
 8007976:	e0f2      	b.n	8007b5e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d104      	bne.n	800798a <f_write+0x10e>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	755a      	strb	r2, [r3, #21]
 8007986:	2301      	movs	r3, #1
 8007988:	e0e9      	b.n	8007b5e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800798e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <f_write+0x122>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800799c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	7d1b      	ldrb	r3, [r3, #20]
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da18      	bge.n	80079da <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	7858      	ldrb	r0, [r3, #1]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	2301      	movs	r3, #1
 80079b8:	f7fe f886 	bl	8005ac8 <disk_write>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <f_write+0x150>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	755a      	strb	r2, [r3, #21]
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0c8      	b.n	8007b5e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	7d1b      	ldrb	r3, [r3, #20]
 80079d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fbfa 	bl	80061dc <clust2sect>
 80079e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <f_write+0x17e>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2202      	movs	r2, #2
 80079f4:	755a      	strb	r2, [r3, #21]
 80079f6:	2302      	movs	r3, #2
 80079f8:	e0b1      	b.n	8007b5e <f_write+0x2e2>
			sect += csect;
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	4413      	add	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0a5b      	lsrs	r3, r3, #9
 8007a06:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d03c      	beq.n	8007a88 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	4413      	add	r3, r2
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	8952      	ldrh	r2, [r2, #10]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d905      	bls.n	8007a28 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	895b      	ldrh	r3, [r3, #10]
 8007a20:	461a      	mov	r2, r3
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	7858      	ldrb	r0, [r3, #1]
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	69f9      	ldr	r1, [r7, #28]
 8007a32:	f7fe f849 	bl	8005ac8 <disk_write>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <f_write+0x1ca>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	755a      	strb	r2, [r3, #21]
 8007a42:	2301      	movs	r3, #1
 8007a44:	e08b      	b.n	8007b5e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1a      	ldr	r2, [r3, #32]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d915      	bls.n	8007a80 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	025b      	lsls	r3, r3, #9
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7fe f8eb 	bl	8005c48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	7d1b      	ldrb	r3, [r3, #20]
 8007a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	025b      	lsls	r3, r3, #9
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007a86:	e03f      	b.n	8007b08 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d016      	beq.n	8007ac0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d210      	bcs.n	8007ac0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	7858      	ldrb	r0, [r3, #1]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	f7fd ffec 	bl	8005a88 <disk_read>
 8007ab0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	755a      	strb	r2, [r3, #21]
 8007abc:	2301      	movs	r3, #1
 8007abe:	e04e      	b.n	8007b5e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d901      	bls.n	8007ae0 <f_write+0x264>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	4413      	add	r3, r2
 8007af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af2:	69f9      	ldr	r1, [r7, #28]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe f8a7 	bl	8005c48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	7d1b      	ldrb	r3, [r3, #20]
 8007afe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b16:	441a      	add	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	619a      	str	r2, [r3, #24]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	bf38      	it	cc
 8007b28:	461a      	movcc	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	441a      	add	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f aed4 	bne.w	80078f2 <f_write+0x76>
 8007b4a:	e000      	b.n	8007b4e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7d1b      	ldrb	r3, [r3, #20]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3730      	adds	r7, #48	@ 0x30
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f107 0208 	add.w	r2, r7, #8
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fc4a 	bl	8007410 <validate>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d168      	bne.n	8007c58 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7d1b      	ldrb	r3, [r3, #20]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d062      	beq.n	8007c58 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7d1b      	ldrb	r3, [r3, #20]
 8007b96:	b25b      	sxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da15      	bge.n	8007bc8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	7858      	ldrb	r0, [r3, #1]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	2301      	movs	r3, #1
 8007bac:	f7fd ff8c 	bl	8005ac8 <disk_write>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <f_sync+0x54>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e04f      	b.n	8007c5a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7d1b      	ldrb	r3, [r3, #20]
 8007bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007bc8:	f7fd f9e2 	bl	8004f90 <get_fattime>
 8007bcc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fa64 	bl	80060a4 <move_window>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d138      	bne.n	8007c58 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	330b      	adds	r3, #11
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	330b      	adds	r3, #11
 8007bf6:	f042 0220 	orr.w	r2, r2, #32
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	461a      	mov	r2, r3
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	f7fe ff6e 	bl	8006aea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f103 021c 	add.w	r2, r3, #28
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fd ffe8 	bl	8005bf0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3316      	adds	r3, #22
 8007c24:	6939      	ldr	r1, [r7, #16]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd ffe2 	bl	8005bf0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3312      	adds	r3, #18
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fd ffc1 	bl	8005bba <st_word>
					fs->wflag = 1;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fa5d 	bl	8006100 <sync_fs>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff ff7b 	bl	8007b66 <f_sync>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d118      	bne.n	8007cac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fbc4 	bl	8007410 <validate>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe f960 	bl	8005f5c <dec_lock>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cce:	4b1f      	ldr	r3, [pc, #124]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cd0:	7a5b      	ldrb	r3, [r3, #9]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d131      	bne.n	8007d3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cda:	7a5b      	ldrb	r3, [r3, #9]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ce6:	4b19      	ldr	r3, [pc, #100]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007ce8:	7a5b      	ldrb	r3, [r3, #9]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4a17      	ldr	r2, [pc, #92]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cf6:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cf8:	7a5b      	ldrb	r3, [r3, #9]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4b13      	ldr	r3, [pc, #76]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d00:	4413      	add	r3, r2
 8007d02:	79fa      	ldrb	r2, [r7, #7]
 8007d04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d06:	4b11      	ldr	r3, [pc, #68]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d08:	7a5b      	ldrb	r3, [r3, #9]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	b2d1      	uxtb	r1, r2
 8007d10:	4a0e      	ldr	r2, [pc, #56]	@ (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d12:	7251      	strb	r1, [r2, #9]
 8007d14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d16:	7dbb      	ldrb	r3, [r7, #22]
 8007d18:	3330      	adds	r3, #48	@ 0x30
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3301      	adds	r3, #1
 8007d24:	223a      	movs	r2, #58	@ 0x3a
 8007d26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	222f      	movs	r2, #47	@ 0x2f
 8007d2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3303      	adds	r3, #3
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	200402c8 	.word	0x200402c8

08007d50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ffaa 	bl	8007cb8 <FATFS_LinkDriverEx>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <siprintf>:
 8007d70:	b40e      	push	{r1, r2, r3}
 8007d72:	b500      	push	{lr}
 8007d74:	b09c      	sub	sp, #112	@ 0x70
 8007d76:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d80:	4809      	ldr	r0, [pc, #36]	@ (8007da8 <siprintf+0x38>)
 8007d82:	9107      	str	r1, [sp, #28]
 8007d84:	9104      	str	r1, [sp, #16]
 8007d86:	4909      	ldr	r1, [pc, #36]	@ (8007dac <siprintf+0x3c>)
 8007d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8c:	9105      	str	r1, [sp, #20]
 8007d8e:	6800      	ldr	r0, [r0, #0]
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	a902      	add	r1, sp, #8
 8007d94:	f000 f994 	bl	80080c0 <_svfiprintf_r>
 8007d98:	9b02      	ldr	r3, [sp, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	b01c      	add	sp, #112	@ 0x70
 8007da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da4:	b003      	add	sp, #12
 8007da6:	4770      	bx	lr
 8007da8:	20040024 	.word	0x20040024
 8007dac:	ffff0208 	.word	0xffff0208

08007db0 <memset>:
 8007db0:	4402      	add	r2, r0
 8007db2:	4603      	mov	r3, r0
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d100      	bne.n	8007dba <memset+0xa>
 8007db8:	4770      	bx	lr
 8007dba:	f803 1b01 	strb.w	r1, [r3], #1
 8007dbe:	e7f9      	b.n	8007db4 <memset+0x4>

08007dc0 <__errno>:
 8007dc0:	4b01      	ldr	r3, [pc, #4]	@ (8007dc8 <__errno+0x8>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20040024 	.word	0x20040024

08007dcc <__libc_init_array>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4d0d      	ldr	r5, [pc, #52]	@ (8007e04 <__libc_init_array+0x38>)
 8007dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8007e08 <__libc_init_array+0x3c>)
 8007dd2:	1b64      	subs	r4, r4, r5
 8007dd4:	10a4      	asrs	r4, r4, #2
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	42a6      	cmp	r6, r4
 8007dda:	d109      	bne.n	8007df0 <__libc_init_array+0x24>
 8007ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8007e0c <__libc_init_array+0x40>)
 8007dde:	4c0c      	ldr	r4, [pc, #48]	@ (8007e10 <__libc_init_array+0x44>)
 8007de0:	f000 fc66 	bl	80086b0 <_init>
 8007de4:	1b64      	subs	r4, r4, r5
 8007de6:	10a4      	asrs	r4, r4, #2
 8007de8:	2600      	movs	r6, #0
 8007dea:	42a6      	cmp	r6, r4
 8007dec:	d105      	bne.n	8007dfa <__libc_init_array+0x2e>
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df4:	4798      	blx	r3
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7ee      	b.n	8007dd8 <__libc_init_array+0xc>
 8007dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfe:	4798      	blx	r3
 8007e00:	3601      	adds	r6, #1
 8007e02:	e7f2      	b.n	8007dea <__libc_init_array+0x1e>
 8007e04:	08008854 	.word	0x08008854
 8007e08:	08008854 	.word	0x08008854
 8007e0c:	08008854 	.word	0x08008854
 8007e10:	08008858 	.word	0x08008858

08007e14 <__retarget_lock_acquire_recursive>:
 8007e14:	4770      	bx	lr

08007e16 <__retarget_lock_release_recursive>:
 8007e16:	4770      	bx	lr

08007e18 <_free_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d041      	beq.n	8007ea4 <_free_r+0x8c>
 8007e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e24:	1f0c      	subs	r4, r1, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	18e4      	addlt	r4, r4, r3
 8007e2c:	f000 f8e0 	bl	8007ff0 <__malloc_lock>
 8007e30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea8 <_free_r+0x90>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	b933      	cbnz	r3, 8007e44 <_free_r+0x2c>
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	6014      	str	r4, [r2, #0]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e40:	f000 b8dc 	b.w	8007ffc <__malloc_unlock>
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	bf01      	itttt	eq
 8007e50:	6819      	ldreq	r1, [r3, #0]
 8007e52:	685b      	ldreq	r3, [r3, #4]
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	e7ed      	b.n	8007e36 <_free_r+0x1e>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b10b      	cbz	r3, 8007e64 <_free_r+0x4c>
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d9fa      	bls.n	8007e5a <_free_r+0x42>
 8007e64:	6811      	ldr	r1, [r2, #0]
 8007e66:	1850      	adds	r0, r2, r1
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d10b      	bne.n	8007e84 <_free_r+0x6c>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	4401      	add	r1, r0
 8007e70:	1850      	adds	r0, r2, r1
 8007e72:	4283      	cmp	r3, r0
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	d1e0      	bne.n	8007e3a <_free_r+0x22>
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	6053      	str	r3, [r2, #4]
 8007e7e:	4408      	add	r0, r1
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	e7da      	b.n	8007e3a <_free_r+0x22>
 8007e84:	d902      	bls.n	8007e8c <_free_r+0x74>
 8007e86:	230c      	movs	r3, #12
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	e7d6      	b.n	8007e3a <_free_r+0x22>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	1821      	adds	r1, r4, r0
 8007e90:	428b      	cmp	r3, r1
 8007e92:	bf04      	itt	eq
 8007e94:	6819      	ldreq	r1, [r3, #0]
 8007e96:	685b      	ldreq	r3, [r3, #4]
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	bf04      	itt	eq
 8007e9c:	1809      	addeq	r1, r1, r0
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	6054      	str	r4, [r2, #4]
 8007ea2:	e7ca      	b.n	8007e3a <_free_r+0x22>
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20040418 	.word	0x20040418

08007eac <sbrk_aligned>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4e0f      	ldr	r6, [pc, #60]	@ (8007eec <sbrk_aligned+0x40>)
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	6831      	ldr	r1, [r6, #0]
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	b911      	cbnz	r1, 8007ebe <sbrk_aligned+0x12>
 8007eb8:	f000 fba6 	bl	8008608 <_sbrk_r>
 8007ebc:	6030      	str	r0, [r6, #0]
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 fba1 	bl	8008608 <_sbrk_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d103      	bne.n	8007ed2 <sbrk_aligned+0x26>
 8007eca:	f04f 34ff 	mov.w	r4, #4294967295
 8007ece:	4620      	mov	r0, r4
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	f024 0403 	bic.w	r4, r4, #3
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d0f8      	beq.n	8007ece <sbrk_aligned+0x22>
 8007edc:	1a21      	subs	r1, r4, r0
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 fb92 	bl	8008608 <_sbrk_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d1f2      	bne.n	8007ece <sbrk_aligned+0x22>
 8007ee8:	e7ef      	b.n	8007eca <sbrk_aligned+0x1e>
 8007eea:	bf00      	nop
 8007eec:	20040414 	.word	0x20040414

08007ef0 <_malloc_r>:
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	1ccd      	adds	r5, r1, #3
 8007ef6:	f025 0503 	bic.w	r5, r5, #3
 8007efa:	3508      	adds	r5, #8
 8007efc:	2d0c      	cmp	r5, #12
 8007efe:	bf38      	it	cc
 8007f00:	250c      	movcc	r5, #12
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	4606      	mov	r6, r0
 8007f06:	db01      	blt.n	8007f0c <_malloc_r+0x1c>
 8007f08:	42a9      	cmp	r1, r5
 8007f0a:	d904      	bls.n	8007f16 <_malloc_r+0x26>
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	6033      	str	r3, [r6, #0]
 8007f10:	2000      	movs	r0, #0
 8007f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fec <_malloc_r+0xfc>
 8007f1a:	f000 f869 	bl	8007ff0 <__malloc_lock>
 8007f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f22:	461c      	mov	r4, r3
 8007f24:	bb44      	cbnz	r4, 8007f78 <_malloc_r+0x88>
 8007f26:	4629      	mov	r1, r5
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff ffbf 	bl	8007eac <sbrk_aligned>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	4604      	mov	r4, r0
 8007f32:	d158      	bne.n	8007fe6 <_malloc_r+0xf6>
 8007f34:	f8d8 4000 	ldr.w	r4, [r8]
 8007f38:	4627      	mov	r7, r4
 8007f3a:	2f00      	cmp	r7, #0
 8007f3c:	d143      	bne.n	8007fc6 <_malloc_r+0xd6>
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	d04b      	beq.n	8007fda <_malloc_r+0xea>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	eb04 0903 	add.w	r9, r4, r3
 8007f4c:	f000 fb5c 	bl	8008608 <_sbrk_r>
 8007f50:	4581      	cmp	r9, r0
 8007f52:	d142      	bne.n	8007fda <_malloc_r+0xea>
 8007f54:	6821      	ldr	r1, [r4, #0]
 8007f56:	1a6d      	subs	r5, r5, r1
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ffa6 	bl	8007eac <sbrk_aligned>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d03a      	beq.n	8007fda <_malloc_r+0xea>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	442b      	add	r3, r5
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	bb62      	cbnz	r2, 8007fcc <_malloc_r+0xdc>
 8007f72:	f8c8 7000 	str.w	r7, [r8]
 8007f76:	e00f      	b.n	8007f98 <_malloc_r+0xa8>
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	1b52      	subs	r2, r2, r5
 8007f7c:	d420      	bmi.n	8007fc0 <_malloc_r+0xd0>
 8007f7e:	2a0b      	cmp	r2, #11
 8007f80:	d917      	bls.n	8007fb2 <_malloc_r+0xc2>
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	6025      	str	r5, [r4, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	6059      	strne	r1, [r3, #4]
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	bf08      	it	eq
 8007f90:	f8c8 1000 	streq.w	r1, [r8]
 8007f94:	5162      	str	r2, [r4, r5]
 8007f96:	604b      	str	r3, [r1, #4]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 f82f 	bl	8007ffc <__malloc_unlock>
 8007f9e:	f104 000b 	add.w	r0, r4, #11
 8007fa2:	1d23      	adds	r3, r4, #4
 8007fa4:	f020 0007 	bic.w	r0, r0, #7
 8007fa8:	1ac2      	subs	r2, r0, r3
 8007faa:	bf1c      	itt	ne
 8007fac:	1a1b      	subne	r3, r3, r0
 8007fae:	50a3      	strne	r3, [r4, r2]
 8007fb0:	e7af      	b.n	8007f12 <_malloc_r+0x22>
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	bf0c      	ite	eq
 8007fb8:	f8c8 2000 	streq.w	r2, [r8]
 8007fbc:	605a      	strne	r2, [r3, #4]
 8007fbe:	e7eb      	b.n	8007f98 <_malloc_r+0xa8>
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	6864      	ldr	r4, [r4, #4]
 8007fc4:	e7ae      	b.n	8007f24 <_malloc_r+0x34>
 8007fc6:	463c      	mov	r4, r7
 8007fc8:	687f      	ldr	r7, [r7, #4]
 8007fca:	e7b6      	b.n	8007f3a <_malloc_r+0x4a>
 8007fcc:	461a      	mov	r2, r3
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	d1fb      	bne.n	8007fcc <_malloc_r+0xdc>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6053      	str	r3, [r2, #4]
 8007fd8:	e7de      	b.n	8007f98 <_malloc_r+0xa8>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	6033      	str	r3, [r6, #0]
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f000 f80c 	bl	8007ffc <__malloc_unlock>
 8007fe4:	e794      	b.n	8007f10 <_malloc_r+0x20>
 8007fe6:	6005      	str	r5, [r0, #0]
 8007fe8:	e7d6      	b.n	8007f98 <_malloc_r+0xa8>
 8007fea:	bf00      	nop
 8007fec:	20040418 	.word	0x20040418

08007ff0 <__malloc_lock>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	@ (8007ff8 <__malloc_lock+0x8>)
 8007ff2:	f7ff bf0f 	b.w	8007e14 <__retarget_lock_acquire_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	20040410 	.word	0x20040410

08007ffc <__malloc_unlock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__malloc_unlock+0x8>)
 8007ffe:	f7ff bf0a 	b.w	8007e16 <__retarget_lock_release_recursive>
 8008002:	bf00      	nop
 8008004:	20040410 	.word	0x20040410

08008008 <__ssputs_r>:
 8008008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	688e      	ldr	r6, [r1, #8]
 800800e:	461f      	mov	r7, r3
 8008010:	42be      	cmp	r6, r7
 8008012:	680b      	ldr	r3, [r1, #0]
 8008014:	4682      	mov	sl, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4690      	mov	r8, r2
 800801a:	d82d      	bhi.n	8008078 <__ssputs_r+0x70>
 800801c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008024:	d026      	beq.n	8008074 <__ssputs_r+0x6c>
 8008026:	6965      	ldr	r5, [r4, #20]
 8008028:	6909      	ldr	r1, [r1, #16]
 800802a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800802e:	eba3 0901 	sub.w	r9, r3, r1
 8008032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008036:	1c7b      	adds	r3, r7, #1
 8008038:	444b      	add	r3, r9
 800803a:	106d      	asrs	r5, r5, #1
 800803c:	429d      	cmp	r5, r3
 800803e:	bf38      	it	cc
 8008040:	461d      	movcc	r5, r3
 8008042:	0553      	lsls	r3, r2, #21
 8008044:	d527      	bpl.n	8008096 <__ssputs_r+0x8e>
 8008046:	4629      	mov	r1, r5
 8008048:	f7ff ff52 	bl	8007ef0 <_malloc_r>
 800804c:	4606      	mov	r6, r0
 800804e:	b360      	cbz	r0, 80080aa <__ssputs_r+0xa2>
 8008050:	6921      	ldr	r1, [r4, #16]
 8008052:	464a      	mov	r2, r9
 8008054:	f000 fae8 	bl	8008628 <memcpy>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800805e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	6126      	str	r6, [r4, #16]
 8008066:	6165      	str	r5, [r4, #20]
 8008068:	444e      	add	r6, r9
 800806a:	eba5 0509 	sub.w	r5, r5, r9
 800806e:	6026      	str	r6, [r4, #0]
 8008070:	60a5      	str	r5, [r4, #8]
 8008072:	463e      	mov	r6, r7
 8008074:	42be      	cmp	r6, r7
 8008076:	d900      	bls.n	800807a <__ssputs_r+0x72>
 8008078:	463e      	mov	r6, r7
 800807a:	6820      	ldr	r0, [r4, #0]
 800807c:	4632      	mov	r2, r6
 800807e:	4641      	mov	r1, r8
 8008080:	f000 faa8 	bl	80085d4 <memmove>
 8008084:	68a3      	ldr	r3, [r4, #8]
 8008086:	1b9b      	subs	r3, r3, r6
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	4433      	add	r3, r6
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	2000      	movs	r0, #0
 8008092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008096:	462a      	mov	r2, r5
 8008098:	f000 fad4 	bl	8008644 <_realloc_r>
 800809c:	4606      	mov	r6, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	d1e0      	bne.n	8008064 <__ssputs_r+0x5c>
 80080a2:	6921      	ldr	r1, [r4, #16]
 80080a4:	4650      	mov	r0, sl
 80080a6:	f7ff feb7 	bl	8007e18 <_free_r>
 80080aa:	230c      	movs	r3, #12
 80080ac:	f8ca 3000 	str.w	r3, [sl]
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	e7e9      	b.n	8008092 <__ssputs_r+0x8a>
	...

080080c0 <_svfiprintf_r>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	4698      	mov	r8, r3
 80080c6:	898b      	ldrh	r3, [r1, #12]
 80080c8:	061b      	lsls	r3, r3, #24
 80080ca:	b09d      	sub	sp, #116	@ 0x74
 80080cc:	4607      	mov	r7, r0
 80080ce:	460d      	mov	r5, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	d510      	bpl.n	80080f6 <_svfiprintf_r+0x36>
 80080d4:	690b      	ldr	r3, [r1, #16]
 80080d6:	b973      	cbnz	r3, 80080f6 <_svfiprintf_r+0x36>
 80080d8:	2140      	movs	r1, #64	@ 0x40
 80080da:	f7ff ff09 	bl	8007ef0 <_malloc_r>
 80080de:	6028      	str	r0, [r5, #0]
 80080e0:	6128      	str	r0, [r5, #16]
 80080e2:	b930      	cbnz	r0, 80080f2 <_svfiprintf_r+0x32>
 80080e4:	230c      	movs	r3, #12
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	b01d      	add	sp, #116	@ 0x74
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	2340      	movs	r3, #64	@ 0x40
 80080f4:	616b      	str	r3, [r5, #20]
 80080f6:	2300      	movs	r3, #0
 80080f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080fa:	2320      	movs	r3, #32
 80080fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008100:	f8cd 800c 	str.w	r8, [sp, #12]
 8008104:	2330      	movs	r3, #48	@ 0x30
 8008106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082a4 <_svfiprintf_r+0x1e4>
 800810a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800810e:	f04f 0901 	mov.w	r9, #1
 8008112:	4623      	mov	r3, r4
 8008114:	469a      	mov	sl, r3
 8008116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800811a:	b10a      	cbz	r2, 8008120 <_svfiprintf_r+0x60>
 800811c:	2a25      	cmp	r2, #37	@ 0x25
 800811e:	d1f9      	bne.n	8008114 <_svfiprintf_r+0x54>
 8008120:	ebba 0b04 	subs.w	fp, sl, r4
 8008124:	d00b      	beq.n	800813e <_svfiprintf_r+0x7e>
 8008126:	465b      	mov	r3, fp
 8008128:	4622      	mov	r2, r4
 800812a:	4629      	mov	r1, r5
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff ff6b 	bl	8008008 <__ssputs_r>
 8008132:	3001      	adds	r0, #1
 8008134:	f000 80a7 	beq.w	8008286 <_svfiprintf_r+0x1c6>
 8008138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800813a:	445a      	add	r2, fp
 800813c:	9209      	str	r2, [sp, #36]	@ 0x24
 800813e:	f89a 3000 	ldrb.w	r3, [sl]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 809f 	beq.w	8008286 <_svfiprintf_r+0x1c6>
 8008148:	2300      	movs	r3, #0
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008152:	f10a 0a01 	add.w	sl, sl, #1
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800815e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008160:	4654      	mov	r4, sl
 8008162:	2205      	movs	r2, #5
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	484e      	ldr	r0, [pc, #312]	@ (80082a4 <_svfiprintf_r+0x1e4>)
 800816a:	f7f8 f849 	bl	8000200 <memchr>
 800816e:	9a04      	ldr	r2, [sp, #16]
 8008170:	b9d8      	cbnz	r0, 80081aa <_svfiprintf_r+0xea>
 8008172:	06d0      	lsls	r0, r2, #27
 8008174:	bf44      	itt	mi
 8008176:	2320      	movmi	r3, #32
 8008178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817c:	0711      	lsls	r1, r2, #28
 800817e:	bf44      	itt	mi
 8008180:	232b      	movmi	r3, #43	@ 0x2b
 8008182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008186:	f89a 3000 	ldrb.w	r3, [sl]
 800818a:	2b2a      	cmp	r3, #42	@ 0x2a
 800818c:	d015      	beq.n	80081ba <_svfiprintf_r+0xfa>
 800818e:	9a07      	ldr	r2, [sp, #28]
 8008190:	4654      	mov	r4, sl
 8008192:	2000      	movs	r0, #0
 8008194:	f04f 0c0a 	mov.w	ip, #10
 8008198:	4621      	mov	r1, r4
 800819a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800819e:	3b30      	subs	r3, #48	@ 0x30
 80081a0:	2b09      	cmp	r3, #9
 80081a2:	d94b      	bls.n	800823c <_svfiprintf_r+0x17c>
 80081a4:	b1b0      	cbz	r0, 80081d4 <_svfiprintf_r+0x114>
 80081a6:	9207      	str	r2, [sp, #28]
 80081a8:	e014      	b.n	80081d4 <_svfiprintf_r+0x114>
 80081aa:	eba0 0308 	sub.w	r3, r0, r8
 80081ae:	fa09 f303 	lsl.w	r3, r9, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	46a2      	mov	sl, r4
 80081b8:	e7d2      	b.n	8008160 <_svfiprintf_r+0xa0>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	1d19      	adds	r1, r3, #4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	9103      	str	r1, [sp, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bfbb      	ittet	lt
 80081c6:	425b      	neglt	r3, r3
 80081c8:	f042 0202 	orrlt.w	r2, r2, #2
 80081cc:	9307      	strge	r3, [sp, #28]
 80081ce:	9307      	strlt	r3, [sp, #28]
 80081d0:	bfb8      	it	lt
 80081d2:	9204      	strlt	r2, [sp, #16]
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081d8:	d10a      	bne.n	80081f0 <_svfiprintf_r+0x130>
 80081da:	7863      	ldrb	r3, [r4, #1]
 80081dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081de:	d132      	bne.n	8008246 <_svfiprintf_r+0x186>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	1d1a      	adds	r2, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	9203      	str	r2, [sp, #12]
 80081e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ec:	3402      	adds	r4, #2
 80081ee:	9305      	str	r3, [sp, #20]
 80081f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082b4 <_svfiprintf_r+0x1f4>
 80081f4:	7821      	ldrb	r1, [r4, #0]
 80081f6:	2203      	movs	r2, #3
 80081f8:	4650      	mov	r0, sl
 80081fa:	f7f8 f801 	bl	8000200 <memchr>
 80081fe:	b138      	cbz	r0, 8008210 <_svfiprintf_r+0x150>
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	eba0 000a 	sub.w	r0, r0, sl
 8008206:	2240      	movs	r2, #64	@ 0x40
 8008208:	4082      	lsls	r2, r0
 800820a:	4313      	orrs	r3, r2
 800820c:	3401      	adds	r4, #1
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	4824      	ldr	r0, [pc, #144]	@ (80082a8 <_svfiprintf_r+0x1e8>)
 8008216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800821a:	2206      	movs	r2, #6
 800821c:	f7f7 fff0 	bl	8000200 <memchr>
 8008220:	2800      	cmp	r0, #0
 8008222:	d036      	beq.n	8008292 <_svfiprintf_r+0x1d2>
 8008224:	4b21      	ldr	r3, [pc, #132]	@ (80082ac <_svfiprintf_r+0x1ec>)
 8008226:	bb1b      	cbnz	r3, 8008270 <_svfiprintf_r+0x1b0>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3307      	adds	r3, #7
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	3308      	adds	r3, #8
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008236:	4433      	add	r3, r6
 8008238:	9309      	str	r3, [sp, #36]	@ 0x24
 800823a:	e76a      	b.n	8008112 <_svfiprintf_r+0x52>
 800823c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008240:	460c      	mov	r4, r1
 8008242:	2001      	movs	r0, #1
 8008244:	e7a8      	b.n	8008198 <_svfiprintf_r+0xd8>
 8008246:	2300      	movs	r3, #0
 8008248:	3401      	adds	r4, #1
 800824a:	9305      	str	r3, [sp, #20]
 800824c:	4619      	mov	r1, r3
 800824e:	f04f 0c0a 	mov.w	ip, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008258:	3a30      	subs	r2, #48	@ 0x30
 800825a:	2a09      	cmp	r2, #9
 800825c:	d903      	bls.n	8008266 <_svfiprintf_r+0x1a6>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c6      	beq.n	80081f0 <_svfiprintf_r+0x130>
 8008262:	9105      	str	r1, [sp, #20]
 8008264:	e7c4      	b.n	80081f0 <_svfiprintf_r+0x130>
 8008266:	fb0c 2101 	mla	r1, ip, r1, r2
 800826a:	4604      	mov	r4, r0
 800826c:	2301      	movs	r3, #1
 800826e:	e7f0      	b.n	8008252 <_svfiprintf_r+0x192>
 8008270:	ab03      	add	r3, sp, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	462a      	mov	r2, r5
 8008276:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <_svfiprintf_r+0x1f0>)
 8008278:	a904      	add	r1, sp, #16
 800827a:	4638      	mov	r0, r7
 800827c:	f3af 8000 	nop.w
 8008280:	1c42      	adds	r2, r0, #1
 8008282:	4606      	mov	r6, r0
 8008284:	d1d6      	bne.n	8008234 <_svfiprintf_r+0x174>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	065b      	lsls	r3, r3, #25
 800828a:	f53f af2d 	bmi.w	80080e8 <_svfiprintf_r+0x28>
 800828e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008290:	e72c      	b.n	80080ec <_svfiprintf_r+0x2c>
 8008292:	ab03      	add	r3, sp, #12
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	462a      	mov	r2, r5
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <_svfiprintf_r+0x1f0>)
 800829a:	a904      	add	r1, sp, #16
 800829c:	4638      	mov	r0, r7
 800829e:	f000 f879 	bl	8008394 <_printf_i>
 80082a2:	e7ed      	b.n	8008280 <_svfiprintf_r+0x1c0>
 80082a4:	08008818 	.word	0x08008818
 80082a8:	08008822 	.word	0x08008822
 80082ac:	00000000 	.word	0x00000000
 80082b0:	08008009 	.word	0x08008009
 80082b4:	0800881e 	.word	0x0800881e

080082b8 <_printf_common>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	4616      	mov	r6, r2
 80082be:	4698      	mov	r8, r3
 80082c0:	688a      	ldr	r2, [r1, #8]
 80082c2:	690b      	ldr	r3, [r1, #16]
 80082c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	bfb8      	it	lt
 80082cc:	4613      	movlt	r3, r2
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082d4:	4607      	mov	r7, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	b10a      	cbz	r2, 80082de <_printf_common+0x26>
 80082da:	3301      	adds	r3, #1
 80082dc:	6033      	str	r3, [r6, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	0699      	lsls	r1, r3, #26
 80082e2:	bf42      	ittt	mi
 80082e4:	6833      	ldrmi	r3, [r6, #0]
 80082e6:	3302      	addmi	r3, #2
 80082e8:	6033      	strmi	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	f015 0506 	ands.w	r5, r5, #6
 80082f0:	d106      	bne.n	8008300 <_printf_common+0x48>
 80082f2:	f104 0a19 	add.w	sl, r4, #25
 80082f6:	68e3      	ldr	r3, [r4, #12]
 80082f8:	6832      	ldr	r2, [r6, #0]
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc26      	bgt.n	800834e <_printf_common+0x96>
 8008300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008304:	6822      	ldr	r2, [r4, #0]
 8008306:	3b00      	subs	r3, #0
 8008308:	bf18      	it	ne
 800830a:	2301      	movne	r3, #1
 800830c:	0692      	lsls	r2, r2, #26
 800830e:	d42b      	bmi.n	8008368 <_printf_common+0xb0>
 8008310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008314:	4641      	mov	r1, r8
 8008316:	4638      	mov	r0, r7
 8008318:	47c8      	blx	r9
 800831a:	3001      	adds	r0, #1
 800831c:	d01e      	beq.n	800835c <_printf_common+0xa4>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	f003 0306 	and.w	r3, r3, #6
 8008326:	2b04      	cmp	r3, #4
 8008328:	bf02      	ittt	eq
 800832a:	68e5      	ldreq	r5, [r4, #12]
 800832c:	6833      	ldreq	r3, [r6, #0]
 800832e:	1aed      	subeq	r5, r5, r3
 8008330:	68a3      	ldr	r3, [r4, #8]
 8008332:	bf0c      	ite	eq
 8008334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008338:	2500      	movne	r5, #0
 800833a:	4293      	cmp	r3, r2
 800833c:	bfc4      	itt	gt
 800833e:	1a9b      	subgt	r3, r3, r2
 8008340:	18ed      	addgt	r5, r5, r3
 8008342:	2600      	movs	r6, #0
 8008344:	341a      	adds	r4, #26
 8008346:	42b5      	cmp	r5, r6
 8008348:	d11a      	bne.n	8008380 <_printf_common+0xc8>
 800834a:	2000      	movs	r0, #0
 800834c:	e008      	b.n	8008360 <_printf_common+0xa8>
 800834e:	2301      	movs	r3, #1
 8008350:	4652      	mov	r2, sl
 8008352:	4641      	mov	r1, r8
 8008354:	4638      	mov	r0, r7
 8008356:	47c8      	blx	r9
 8008358:	3001      	adds	r0, #1
 800835a:	d103      	bne.n	8008364 <_printf_common+0xac>
 800835c:	f04f 30ff 	mov.w	r0, #4294967295
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	3501      	adds	r5, #1
 8008366:	e7c6      	b.n	80082f6 <_printf_common+0x3e>
 8008368:	18e1      	adds	r1, r4, r3
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	2030      	movs	r0, #48	@ 0x30
 800836e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008372:	4422      	add	r2, r4
 8008374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800837c:	3302      	adds	r3, #2
 800837e:	e7c7      	b.n	8008310 <_printf_common+0x58>
 8008380:	2301      	movs	r3, #1
 8008382:	4622      	mov	r2, r4
 8008384:	4641      	mov	r1, r8
 8008386:	4638      	mov	r0, r7
 8008388:	47c8      	blx	r9
 800838a:	3001      	adds	r0, #1
 800838c:	d0e6      	beq.n	800835c <_printf_common+0xa4>
 800838e:	3601      	adds	r6, #1
 8008390:	e7d9      	b.n	8008346 <_printf_common+0x8e>
	...

08008394 <_printf_i>:
 8008394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	7e0f      	ldrb	r7, [r1, #24]
 800839a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800839c:	2f78      	cmp	r7, #120	@ 0x78
 800839e:	4691      	mov	r9, r2
 80083a0:	4680      	mov	r8, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	469a      	mov	sl, r3
 80083a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083aa:	d807      	bhi.n	80083bc <_printf_i+0x28>
 80083ac:	2f62      	cmp	r7, #98	@ 0x62
 80083ae:	d80a      	bhi.n	80083c6 <_printf_i+0x32>
 80083b0:	2f00      	cmp	r7, #0
 80083b2:	f000 80d2 	beq.w	800855a <_printf_i+0x1c6>
 80083b6:	2f58      	cmp	r7, #88	@ 0x58
 80083b8:	f000 80b9 	beq.w	800852e <_printf_i+0x19a>
 80083bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083c4:	e03a      	b.n	800843c <_printf_i+0xa8>
 80083c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ca:	2b15      	cmp	r3, #21
 80083cc:	d8f6      	bhi.n	80083bc <_printf_i+0x28>
 80083ce:	a101      	add	r1, pc, #4	@ (adr r1, 80083d4 <_printf_i+0x40>)
 80083d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d4:	0800842d 	.word	0x0800842d
 80083d8:	08008441 	.word	0x08008441
 80083dc:	080083bd 	.word	0x080083bd
 80083e0:	080083bd 	.word	0x080083bd
 80083e4:	080083bd 	.word	0x080083bd
 80083e8:	080083bd 	.word	0x080083bd
 80083ec:	08008441 	.word	0x08008441
 80083f0:	080083bd 	.word	0x080083bd
 80083f4:	080083bd 	.word	0x080083bd
 80083f8:	080083bd 	.word	0x080083bd
 80083fc:	080083bd 	.word	0x080083bd
 8008400:	08008541 	.word	0x08008541
 8008404:	0800846b 	.word	0x0800846b
 8008408:	080084fb 	.word	0x080084fb
 800840c:	080083bd 	.word	0x080083bd
 8008410:	080083bd 	.word	0x080083bd
 8008414:	08008563 	.word	0x08008563
 8008418:	080083bd 	.word	0x080083bd
 800841c:	0800846b 	.word	0x0800846b
 8008420:	080083bd 	.word	0x080083bd
 8008424:	080083bd 	.word	0x080083bd
 8008428:	08008503 	.word	0x08008503
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6032      	str	r2, [r6, #0]
 8008434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800843c:	2301      	movs	r3, #1
 800843e:	e09d      	b.n	800857c <_printf_i+0x1e8>
 8008440:	6833      	ldr	r3, [r6, #0]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1d19      	adds	r1, r3, #4
 8008446:	6031      	str	r1, [r6, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	d501      	bpl.n	8008450 <_printf_i+0xbc>
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	e003      	b.n	8008458 <_printf_i+0xc4>
 8008450:	0645      	lsls	r5, r0, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0xb8>
 8008454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008458:	2d00      	cmp	r5, #0
 800845a:	da03      	bge.n	8008464 <_printf_i+0xd0>
 800845c:	232d      	movs	r3, #45	@ 0x2d
 800845e:	426d      	negs	r5, r5
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008464:	4859      	ldr	r0, [pc, #356]	@ (80085cc <_printf_i+0x238>)
 8008466:	230a      	movs	r3, #10
 8008468:	e011      	b.n	800848e <_printf_i+0xfa>
 800846a:	6821      	ldr	r1, [r4, #0]
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	0608      	lsls	r0, r1, #24
 8008470:	f853 5b04 	ldr.w	r5, [r3], #4
 8008474:	d402      	bmi.n	800847c <_printf_i+0xe8>
 8008476:	0649      	lsls	r1, r1, #25
 8008478:	bf48      	it	mi
 800847a:	b2ad      	uxthmi	r5, r5
 800847c:	2f6f      	cmp	r7, #111	@ 0x6f
 800847e:	4853      	ldr	r0, [pc, #332]	@ (80085cc <_printf_i+0x238>)
 8008480:	6033      	str	r3, [r6, #0]
 8008482:	bf14      	ite	ne
 8008484:	230a      	movne	r3, #10
 8008486:	2308      	moveq	r3, #8
 8008488:	2100      	movs	r1, #0
 800848a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800848e:	6866      	ldr	r6, [r4, #4]
 8008490:	60a6      	str	r6, [r4, #8]
 8008492:	2e00      	cmp	r6, #0
 8008494:	bfa2      	ittt	ge
 8008496:	6821      	ldrge	r1, [r4, #0]
 8008498:	f021 0104 	bicge.w	r1, r1, #4
 800849c:	6021      	strge	r1, [r4, #0]
 800849e:	b90d      	cbnz	r5, 80084a4 <_printf_i+0x110>
 80084a0:	2e00      	cmp	r6, #0
 80084a2:	d04b      	beq.n	800853c <_printf_i+0x1a8>
 80084a4:	4616      	mov	r6, r2
 80084a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084aa:	fb03 5711 	mls	r7, r3, r1, r5
 80084ae:	5dc7      	ldrb	r7, [r0, r7]
 80084b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084b4:	462f      	mov	r7, r5
 80084b6:	42bb      	cmp	r3, r7
 80084b8:	460d      	mov	r5, r1
 80084ba:	d9f4      	bls.n	80084a6 <_printf_i+0x112>
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d10b      	bne.n	80084d8 <_printf_i+0x144>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	07df      	lsls	r7, r3, #31
 80084c4:	d508      	bpl.n	80084d8 <_printf_i+0x144>
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	6861      	ldr	r1, [r4, #4]
 80084ca:	4299      	cmp	r1, r3
 80084cc:	bfde      	ittt	le
 80084ce:	2330      	movle	r3, #48	@ 0x30
 80084d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084d8:	1b92      	subs	r2, r2, r6
 80084da:	6122      	str	r2, [r4, #16]
 80084dc:	f8cd a000 	str.w	sl, [sp]
 80084e0:	464b      	mov	r3, r9
 80084e2:	aa03      	add	r2, sp, #12
 80084e4:	4621      	mov	r1, r4
 80084e6:	4640      	mov	r0, r8
 80084e8:	f7ff fee6 	bl	80082b8 <_printf_common>
 80084ec:	3001      	adds	r0, #1
 80084ee:	d14a      	bne.n	8008586 <_printf_i+0x1f2>
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	b004      	add	sp, #16
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f043 0320 	orr.w	r3, r3, #32
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	4833      	ldr	r0, [pc, #204]	@ (80085d0 <_printf_i+0x23c>)
 8008504:	2778      	movs	r7, #120	@ 0x78
 8008506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	6831      	ldr	r1, [r6, #0]
 800850e:	061f      	lsls	r7, r3, #24
 8008510:	f851 5b04 	ldr.w	r5, [r1], #4
 8008514:	d402      	bmi.n	800851c <_printf_i+0x188>
 8008516:	065f      	lsls	r7, r3, #25
 8008518:	bf48      	it	mi
 800851a:	b2ad      	uxthmi	r5, r5
 800851c:	6031      	str	r1, [r6, #0]
 800851e:	07d9      	lsls	r1, r3, #31
 8008520:	bf44      	itt	mi
 8008522:	f043 0320 	orrmi.w	r3, r3, #32
 8008526:	6023      	strmi	r3, [r4, #0]
 8008528:	b11d      	cbz	r5, 8008532 <_printf_i+0x19e>
 800852a:	2310      	movs	r3, #16
 800852c:	e7ac      	b.n	8008488 <_printf_i+0xf4>
 800852e:	4827      	ldr	r0, [pc, #156]	@ (80085cc <_printf_i+0x238>)
 8008530:	e7e9      	b.n	8008506 <_printf_i+0x172>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f023 0320 	bic.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	e7f6      	b.n	800852a <_printf_i+0x196>
 800853c:	4616      	mov	r6, r2
 800853e:	e7bd      	b.n	80084bc <_printf_i+0x128>
 8008540:	6833      	ldr	r3, [r6, #0]
 8008542:	6825      	ldr	r5, [r4, #0]
 8008544:	6961      	ldr	r1, [r4, #20]
 8008546:	1d18      	adds	r0, r3, #4
 8008548:	6030      	str	r0, [r6, #0]
 800854a:	062e      	lsls	r6, r5, #24
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	d501      	bpl.n	8008554 <_printf_i+0x1c0>
 8008550:	6019      	str	r1, [r3, #0]
 8008552:	e002      	b.n	800855a <_printf_i+0x1c6>
 8008554:	0668      	lsls	r0, r5, #25
 8008556:	d5fb      	bpl.n	8008550 <_printf_i+0x1bc>
 8008558:	8019      	strh	r1, [r3, #0]
 800855a:	2300      	movs	r3, #0
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	4616      	mov	r6, r2
 8008560:	e7bc      	b.n	80084dc <_printf_i+0x148>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	1d1a      	adds	r2, r3, #4
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	681e      	ldr	r6, [r3, #0]
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	2100      	movs	r1, #0
 800856e:	4630      	mov	r0, r6
 8008570:	f7f7 fe46 	bl	8000200 <memchr>
 8008574:	b108      	cbz	r0, 800857a <_printf_i+0x1e6>
 8008576:	1b80      	subs	r0, r0, r6
 8008578:	6060      	str	r0, [r4, #4]
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	2300      	movs	r3, #0
 8008580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008584:	e7aa      	b.n	80084dc <_printf_i+0x148>
 8008586:	6923      	ldr	r3, [r4, #16]
 8008588:	4632      	mov	r2, r6
 800858a:	4649      	mov	r1, r9
 800858c:	4640      	mov	r0, r8
 800858e:	47d0      	blx	sl
 8008590:	3001      	adds	r0, #1
 8008592:	d0ad      	beq.n	80084f0 <_printf_i+0x15c>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	079b      	lsls	r3, r3, #30
 8008598:	d413      	bmi.n	80085c2 <_printf_i+0x22e>
 800859a:	68e0      	ldr	r0, [r4, #12]
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	4298      	cmp	r0, r3
 80085a0:	bfb8      	it	lt
 80085a2:	4618      	movlt	r0, r3
 80085a4:	e7a6      	b.n	80084f4 <_printf_i+0x160>
 80085a6:	2301      	movs	r3, #1
 80085a8:	4632      	mov	r2, r6
 80085aa:	4649      	mov	r1, r9
 80085ac:	4640      	mov	r0, r8
 80085ae:	47d0      	blx	sl
 80085b0:	3001      	adds	r0, #1
 80085b2:	d09d      	beq.n	80084f0 <_printf_i+0x15c>
 80085b4:	3501      	adds	r5, #1
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	9903      	ldr	r1, [sp, #12]
 80085ba:	1a5b      	subs	r3, r3, r1
 80085bc:	42ab      	cmp	r3, r5
 80085be:	dcf2      	bgt.n	80085a6 <_printf_i+0x212>
 80085c0:	e7eb      	b.n	800859a <_printf_i+0x206>
 80085c2:	2500      	movs	r5, #0
 80085c4:	f104 0619 	add.w	r6, r4, #25
 80085c8:	e7f5      	b.n	80085b6 <_printf_i+0x222>
 80085ca:	bf00      	nop
 80085cc:	08008829 	.word	0x08008829
 80085d0:	0800883a 	.word	0x0800883a

080085d4 <memmove>:
 80085d4:	4288      	cmp	r0, r1
 80085d6:	b510      	push	{r4, lr}
 80085d8:	eb01 0402 	add.w	r4, r1, r2
 80085dc:	d902      	bls.n	80085e4 <memmove+0x10>
 80085de:	4284      	cmp	r4, r0
 80085e0:	4623      	mov	r3, r4
 80085e2:	d807      	bhi.n	80085f4 <memmove+0x20>
 80085e4:	1e43      	subs	r3, r0, #1
 80085e6:	42a1      	cmp	r1, r4
 80085e8:	d008      	beq.n	80085fc <memmove+0x28>
 80085ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085f2:	e7f8      	b.n	80085e6 <memmove+0x12>
 80085f4:	4402      	add	r2, r0
 80085f6:	4601      	mov	r1, r0
 80085f8:	428a      	cmp	r2, r1
 80085fa:	d100      	bne.n	80085fe <memmove+0x2a>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008606:	e7f7      	b.n	80085f8 <memmove+0x24>

08008608 <_sbrk_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d06      	ldr	r5, [pc, #24]	@ (8008624 <_sbrk_r+0x1c>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f8 feea 	bl	80013ec <_sbrk>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_sbrk_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_sbrk_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	2004040c 	.word	0x2004040c

08008628 <memcpy>:
 8008628:	440a      	add	r2, r1
 800862a:	4291      	cmp	r1, r2
 800862c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008630:	d100      	bne.n	8008634 <memcpy+0xc>
 8008632:	4770      	bx	lr
 8008634:	b510      	push	{r4, lr}
 8008636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800863e:	4291      	cmp	r1, r2
 8008640:	d1f9      	bne.n	8008636 <memcpy+0xe>
 8008642:	bd10      	pop	{r4, pc}

08008644 <_realloc_r>:
 8008644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008648:	4680      	mov	r8, r0
 800864a:	4615      	mov	r5, r2
 800864c:	460c      	mov	r4, r1
 800864e:	b921      	cbnz	r1, 800865a <_realloc_r+0x16>
 8008650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	4611      	mov	r1, r2
 8008656:	f7ff bc4b 	b.w	8007ef0 <_malloc_r>
 800865a:	b92a      	cbnz	r2, 8008668 <_realloc_r+0x24>
 800865c:	f7ff fbdc 	bl	8007e18 <_free_r>
 8008660:	2400      	movs	r4, #0
 8008662:	4620      	mov	r0, r4
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	f000 f81a 	bl	80086a0 <_malloc_usable_size_r>
 800866c:	4285      	cmp	r5, r0
 800866e:	4606      	mov	r6, r0
 8008670:	d802      	bhi.n	8008678 <_realloc_r+0x34>
 8008672:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008676:	d8f4      	bhi.n	8008662 <_realloc_r+0x1e>
 8008678:	4629      	mov	r1, r5
 800867a:	4640      	mov	r0, r8
 800867c:	f7ff fc38 	bl	8007ef0 <_malloc_r>
 8008680:	4607      	mov	r7, r0
 8008682:	2800      	cmp	r0, #0
 8008684:	d0ec      	beq.n	8008660 <_realloc_r+0x1c>
 8008686:	42b5      	cmp	r5, r6
 8008688:	462a      	mov	r2, r5
 800868a:	4621      	mov	r1, r4
 800868c:	bf28      	it	cs
 800868e:	4632      	movcs	r2, r6
 8008690:	f7ff ffca 	bl	8008628 <memcpy>
 8008694:	4621      	mov	r1, r4
 8008696:	4640      	mov	r0, r8
 8008698:	f7ff fbbe 	bl	8007e18 <_free_r>
 800869c:	463c      	mov	r4, r7
 800869e:	e7e0      	b.n	8008662 <_realloc_r+0x1e>

080086a0 <_malloc_usable_size_r>:
 80086a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a4:	1f18      	subs	r0, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfbc      	itt	lt
 80086aa:	580b      	ldrlt	r3, [r1, r0]
 80086ac:	18c0      	addlt	r0, r0, r3
 80086ae:	4770      	bx	lr

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
