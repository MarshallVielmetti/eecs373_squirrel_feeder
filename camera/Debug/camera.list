
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bacc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800bc8c  0800bc8c  0000cc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb0  0800beb0  0000d10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb0  0800beb0  0000ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb8  0800beb8  0000d10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bebc  0800bebc  0000cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20040000  0800bec0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2004010c  0800bfcc  0000d10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200407e4  0800bfcc  0000d7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd12  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4c  00000000  00000000  0002ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0002eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001378  00000000  00000000  000306c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe25  00000000  00000000  00031a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e00  00000000  00000000  00061865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ed4d  00000000  00000000  00083665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a23b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000754c  00000000  00000000  001a23f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001a9944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004010c 	.word	0x2004010c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bc74 	.word	0x0800bc74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040110 	.word	0x20040110
 80001fc:	0800bc74 	.word	0x0800bc74

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96a 	b.w	8000dc8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	460c      	mov	r4, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14e      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	458c      	cmp	ip, r1
 8000b1c:	4686      	mov	lr, r0
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	d962      	bls.n	8000bea <__udivmoddi4+0xde>
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b34:	4319      	orrs	r1, r3
 8000b36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f f68c 	uxth.w	r6, ip
 8000b42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb04 f106 	mul.w	r1, r4, r6
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b62:	f080 8112 	bcs.w	8000d8a <__udivmoddi4+0x27e>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 810f 	bls.w	8000d8a <__udivmoddi4+0x27e>
 8000b6c:	3c02      	subs	r4, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb00 f606 	mul.w	r6, r0, r6
 8000b86:	429e      	cmp	r6, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x94>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b92:	f080 80fc 	bcs.w	8000d8e <__udivmoddi4+0x282>
 8000b96:	429e      	cmp	r6, r3
 8000b98:	f240 80f9 	bls.w	8000d8e <__udivmoddi4+0x282>
 8000b9c:	4463      	add	r3, ip
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	b11d      	cbz	r5, 8000bb2 <__udivmoddi4+0xa6>
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d905      	bls.n	8000bc6 <__udivmoddi4+0xba>
 8000bba:	b10d      	cbz	r5, 8000bc0 <__udivmoddi4+0xb4>
 8000bbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e7f5      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bc6:	fab3 f183 	clz	r1, r3
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d146      	bne.n	8000c5c <__udivmoddi4+0x150>
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xcc>
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	f0c0 80f0 	bcc.w	8000db8 <__udivmoddi4+0x2ac>
 8000bd8:	1a86      	subs	r6, r0, r2
 8000bda:	eb64 0303 	sbc.w	r3, r4, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0e6      	beq.n	8000bb2 <__udivmoddi4+0xa6>
 8000be4:	e9c5 6300 	strd	r6, r3, [r5]
 8000be8:	e7e3      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	f040 8090 	bne.w	8000d10 <__udivmoddi4+0x204>
 8000bf0:	eba1 040c 	sub.w	r4, r1, ip
 8000bf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0e:	fb07 f006 	mul.w	r0, r7, r6
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x11c>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x11a>
 8000c20:	4298      	cmp	r0, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000c26:	4626      	mov	r6, r4
 8000c28:	1a1c      	subs	r4, r3, r0
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c32:	fb08 4410 	mls	r4, r8, r0, r4
 8000c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3a:	fb00 f707 	mul.w	r7, r0, r7
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x148>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x146>
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	f200 80b0 	bhi.w	8000db2 <__udivmoddi4+0x2a6>
 8000c52:	4620      	mov	r0, r4
 8000c54:	1bdb      	subs	r3, r3, r7
 8000c56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5a:	e7a5      	b.n	8000ba8 <__udivmoddi4+0x9c>
 8000c5c:	f1c1 0620 	rsb	r6, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 f706 	lsr.w	r7, r2, r6
 8000c66:	431f      	orrs	r7, r3
 8000c68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c70:	ea43 030c 	orr.w	r3, r3, ip
 8000c74:	40f4      	lsrs	r4, r6
 8000c76:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7a:	0c38      	lsrs	r0, r7, #16
 8000c7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c80:	fbb4 fef0 	udiv	lr, r4, r0
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fb00 441e 	mls	r4, r0, lr, r4
 8000c8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c90:	fb0e f90c 	mul.w	r9, lr, ip
 8000c94:	45a1      	cmp	r9, r4
 8000c96:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x1a6>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca2:	f080 8084 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000ca6:	45a1      	cmp	r9, r4
 8000ca8:	f240 8081 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000cac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb0:	443c      	add	r4, r7
 8000cb2:	eba4 0409 	sub.w	r4, r4, r9
 8000cb6:	fa1f f983 	uxth.w	r9, r3
 8000cba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x1d2>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd4:	d267      	bcs.n	8000da6 <__udivmoddi4+0x29a>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0x29a>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	443c      	add	r4, r7
 8000cde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	429c      	cmp	r4, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	469c      	mov	ip, r3
 8000cf0:	d351      	bcc.n	8000d96 <__udivmoddi4+0x28a>
 8000cf2:	d04e      	beq.n	8000d92 <__udivmoddi4+0x286>
 8000cf4:	b155      	cbz	r5, 8000d0c <__udivmoddi4+0x200>
 8000cf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000d02:	40cb      	lsrs	r3, r1
 8000d04:	431e      	orrs	r6, r3
 8000d06:	40cc      	lsrs	r4, r1
 8000d08:	e9c5 6400 	strd	r6, r4, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e750      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f103 	lsr.w	r1, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d20:	4094      	lsls	r4, r2
 8000d22:	430c      	orrs	r4, r1
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3110 	mls	r1, r8, r0, r3
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f107 	mul.w	r1, r0, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x24c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d4e:	d22c      	bcs.n	8000daa <__udivmoddi4+0x29e>
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d92a      	bls.n	8000daa <__udivmoddi4+0x29e>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d60:	fb08 3311 	mls	r3, r8, r1, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb01 f307 	mul.w	r3, r1, r7
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x276>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d78:	d213      	bcs.n	8000da2 <__udivmoddi4+0x296>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d911      	bls.n	8000da2 <__udivmoddi4+0x296>
 8000d7e:	3902      	subs	r1, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	1ae4      	subs	r4, r4, r3
 8000d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d88:	e739      	b.n	8000bfe <__udivmoddi4+0xf2>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	e6f0      	b.n	8000b70 <__udivmoddi4+0x64>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e706      	b.n	8000ba0 <__udivmoddi4+0x94>
 8000d92:	45c8      	cmp	r8, r9
 8000d94:	d2ae      	bcs.n	8000cf4 <__udivmoddi4+0x1e8>
 8000d96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d9e:	3801      	subs	r0, #1
 8000da0:	e7a8      	b.n	8000cf4 <__udivmoddi4+0x1e8>
 8000da2:	4631      	mov	r1, r6
 8000da4:	e7ed      	b.n	8000d82 <__udivmoddi4+0x276>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e799      	b.n	8000cde <__udivmoddi4+0x1d2>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e7d4      	b.n	8000d58 <__udivmoddi4+0x24c>
 8000dae:	46d6      	mov	lr, sl
 8000db0:	e77f      	b.n	8000cb2 <__udivmoddi4+0x1a6>
 8000db2:	4463      	add	r3, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	e74d      	b.n	8000c54 <__udivmoddi4+0x148>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e70f      	b.n	8000be0 <__udivmoddi4+0xd4>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	e730      	b.n	8000c28 <__udivmoddi4+0x11c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <camera_init>:

/*
 * PUBLIC CAMERA INTERFACE
 */

void camera_init(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	image_size = 0;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <camera_init+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
	cur_image_idx = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <camera_init+0x44>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

	pic_index = 0;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <camera_init+0x48>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]

	//  has to be mod 100 bcz file names have to be like 8 chars
	rand_seed = rand() % 100;
 8000de2:	f009 fd93 	bl	800a90c <rand>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <camera_init+0x4c>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1151      	asrs	r1, r2, #5
 8000df0:	17da      	asrs	r2, r3, #31
 8000df2:	1a8a      	subs	r2, r1, r2
 8000df4:	2164      	movs	r1, #100	@ 0x64
 8000df6:	fb01 f202 	mul.w	r2, r1, r2
 8000dfa:	1a9a      	subs	r2, r3, r2
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <camera_init+0x50>)
 8000e00:	801a      	strh	r2, [r3, #0]

	camera_ready = true;
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <camera_init+0x54>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2004012c 	.word	0x2004012c
 8000e10:	20040130 	.word	0x20040130
 8000e14:	20040134 	.word	0x20040134
 8000e18:	51eb851f 	.word	0x51eb851f
 8000e1c:	20040136 	.word	0x20040136
 8000e20:	20040128 	.word	0x20040128

08000e24 <camera_take_photo>:

uint8_t camera_take_photo(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
	if (!camera_ready) {
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <camera_take_photo+0x9c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <camera_take_photo+0x18>
		return 0; // camera not ready, return failure
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e03c      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_StopCapture();
 8000e3c:	f001 fa88 	bl	8002350 <VC0706_StopCapture>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

	// Verify success and update state
	if (!success) {
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <camera_take_photo+0x2a>
		return 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e033      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	f001 fbba 	bl	80025c8 <HAL_Delay>


	success = VC0706_TakePhoto();
 8000e54:	f001 fa44 	bl	80022e0 <VC0706_TakePhoto>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]

	if (!success) {
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <camera_take_photo+0x42>
		return 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e027      	b.n	8000eb6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f001 fbae 	bl	80025c8 <HAL_Delay>

	/*
	 * Read in the length of the image
	 */
	image_size = VC0706_ReadImageDataLength();
 8000e6c:	f001 faa6 	bl	80023bc <VC0706_ReadImageDataLength>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <camera_take_photo+0xa0>)
 8000e76:	601a      	str	r2, [r3, #0]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "%d%d.jpg", pic_index, rand_seed);
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <camera_take_photo+0xa8>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	1d38      	adds	r0, r7, #4
 8000e84:	4912      	ldr	r1, [pc, #72]	@ (8000ed0 <camera_take_photo+0xac>)
 8000e86:	f009 fe41 	bl	800ab0c <siprintf>
//	FRESULT fres = f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	221a      	movs	r2, #26
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4810      	ldr	r0, [pc, #64]	@ (8000ed4 <camera_take_photo+0xb0>)
 8000e92:	f009 f907 	bl	800a0a4 <f_open>

	pic_index++;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <camera_take_photo+0xa4>)
 8000ea0:	801a      	strh	r2, [r3, #0]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	cur_image_idx = 0;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <camera_take_photo+0xb4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
	camera_ready = 0; // no longer ready to take a new photo
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <camera_take_photo+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&CAM_TIMER_HANDLE);
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <camera_take_photo+0xb8>)
 8000eb0:	f005 f9dc 	bl	800626c <HAL_TIM_Base_Start_IT>

	return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20040128 	.word	0x20040128
 8000ec4:	2004012c 	.word	0x2004012c
 8000ec8:	20040134 	.word	0x20040134
 8000ecc:	20040136 	.word	0x20040136
 8000ed0:	0800bc8c 	.word	0x0800bc8c
 8000ed4:	20040164 	.word	0x20040164
 8000ed8:	20040130 	.word	0x20040130
 8000edc:	20040510 	.word	0x20040510

08000ee0 <finish_image>:

static void finish_image(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <finish_image+0x68>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4817      	ldr	r0, [pc, #92]	@ (8000f4c <finish_image+0x6c>)
 8000eee:	f001 fa8f 	bl	8002410 <VC0706_ReadImageBlock>

	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e016      	b.n	8000f26 <finish_image+0x46>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3304      	adds	r3, #4
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <finish_image+0x6c>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	2bff      	cmp	r3, #255	@ 0xff
 8000f02:	d10d      	bne.n	8000f20 <finish_image+0x40>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3305      	adds	r3, #5
 8000f08:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <finish_image+0x6c>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	2bd9      	cmp	r3, #217	@ 0xd9
 8000f0e:	d107      	bne.n	8000f20 <finish_image+0x40>
			// found end sequence
			f_write(&file_writer, img_read_buf + 5, i + 1, &bytes_wrote);
 8000f10:	490f      	ldr	r1, [pc, #60]	@ (8000f50 <finish_image+0x70>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	463b      	mov	r3, r7
 8000f18:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <finish_image+0x74>)
 8000f1a:	f009 fa7d 	bl	800a418 <f_write>
			break;
 8000f1e:	e005      	b.n	8000f2c <finish_image+0x4c>
	for (uint32_t i = 1; i < 32; i++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d9e5      	bls.n	8000ef8 <finish_image+0x18>
		}
	}

	f_close(&file_writer);
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <finish_image+0x74>)
 8000f2e:	f009 fc66 	bl	800a7fe <f_close>

	HAL_TIM_Base_Stop_IT(&CAM_TIMER_HANDLE);
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <finish_image+0x78>)
 8000f34:	f005 fa0a 	bl	800634c <HAL_TIM_Base_Stop_IT>

	camera_ready = true; // ready to take a new image
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <finish_image+0x7c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20040130 	.word	0x20040130
 8000f4c:	20040138 	.word	0x20040138
 8000f50:	2004013d 	.word	0x2004013d
 8000f54:	20040164 	.word	0x20040164
 8000f58:	20040510 	.word	0x20040510
 8000f5c:	20040128 	.word	0x20040128

08000f60 <process_chunk>:

static uint8_t process_chunk(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if (cur_image_idx >= image_size - CAMERA_READ_IMG_SIZE) {
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <process_chunk+0x58>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f1a3 0220 	sub.w	r2, r3, #32
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <process_chunk+0x5c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d803      	bhi.n	8000f7e <process_chunk+0x1e>
		finish_image(); // needs to perform the final processing in this->finish_image
 8000f76:	f7ff ffb3 	bl	8000ee0 <finish_image>
		return 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e018      	b.n	8000fb0 <process_chunk+0x50>
	}

	uint8_t status = VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <process_chunk+0x5c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <process_chunk+0x60>)
 8000f86:	f001 fa43 	bl	8002410 <VC0706_ReadImageBlock>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	if (!status) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <process_chunk+0x38>
		return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e00b      	b.n	8000fb0 <process_chunk+0x50>
	}

	UINT bytes_wrote;
	f_write(&file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 8000f98:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <process_chunk+0x64>)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	480a      	ldr	r0, [pc, #40]	@ (8000fc8 <process_chunk+0x68>)
 8000fa0:	f009 fa3a 	bl	800a418 <f_write>

	cur_image_idx += 0x20;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <process_chunk+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3320      	adds	r3, #32
 8000faa:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <process_chunk+0x5c>)
 8000fac:	6013      	str	r3, [r2, #0]

	return 0; //normal case
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2004012c 	.word	0x2004012c
 8000fbc:	20040130 	.word	0x20040130
 8000fc0:	20040138 	.word	0x20040138
 8000fc4:	2004013d 	.word	0x2004013d
 8000fc8:	20040164 	.word	0x20040164

08000fcc <camera_process>:


uint8_t camera_process(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t end_flag = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t num_chunks_processed = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71bb      	strb	r3, [r7, #6]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8000fda:	e003      	b.n	8000fe4 <camera_process+0x18>
		end_flag = process_chunk();
 8000fdc:	f7ff ffc0 	bl	8000f60 <process_chunk>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <camera_process+0x28>
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	71ba      	strb	r2, [r7, #6]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d9f3      	bls.n	8000fdc <camera_process+0x10>
	}

	return end_flag; // 1 means the last chunk was read
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <camera_get_ready>:

uint8_t camera_get_ready() {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	return camera_ready;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <camera_get_ready+0x14>)
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20040128 	.word	0x20040128

08001018 <perform_startup_routine>:
#include "camera_handler.h"
//#include "lcd.h"

#include <stdint.h>

void perform_startup_routine() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
	/*
	 * Spin motor a lil bit
	 */
	stepper_rotate_clockwise_steps(200);
 800101e:	20c8      	movs	r0, #200	@ 0xc8
 8001020:	f000 fda8 	bl	8001b74 <stepper_rotate_clockwise_steps>

	/*
	 * Test force sensor
	 */
	uint32_t ttl_weight = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < 1; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	76fb      	strb	r3, [r7, #27]
 800102c:	e009      	b.n	8001042 <perform_startup_routine+0x2a>
		ttl_weight += weigh();
 800102e:	f000 f8f3 	bl	8001218 <weigh>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4413      	add	r3, r2
 800103a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < 1; i++) {
 800103c:	7efb      	ldrb	r3, [r7, #27]
 800103e:	3301      	adds	r3, #1
 8001040:	76fb      	strb	r3, [r7, #27]
 8001042:	7efb      	ldrb	r3, [r7, #27]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f2      	beq.n	800102e <perform_startup_routine+0x16>
	}

	float avg_weight = ttl_weight / 4.0;
 8001048:	69f8      	ldr	r0, [r7, #28]
 800104a:	f7ff fa6b 	bl	8000524 <__aeabi_ui2d>
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <perform_startup_routine+0x9c>)
 8001054:	f7ff fc0a 	bl	800086c <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fcec 	bl	8000a3c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	60fb      	str	r3, [r7, #12]

	/*
	 * Test the IR sensor
	 */
	float ttl_distance = 0;
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 15; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	74fb      	strb	r3, [r7, #19]
 8001072:	e010      	b.n	8001096 <perform_startup_routine+0x7e>
		float dist = read_distance();
 8001074:	f000 f828 	bl	80010c8 <read_distance>
 8001078:	ed87 0a01 	vstr	s0, [r7, #4]
		ttl_distance += read_distance();
 800107c:	f000 f824 	bl	80010c8 <read_distance>
 8001080:	eeb0 7a40 	vmov.f32	s14, s0
 8001084:	edd7 7a05 	vldr	s15, [r7, #20]
 8001088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800108c:	edc7 7a05 	vstr	s15, [r7, #20]
	for (uint8_t i = 0; i < 15; i++) {
 8001090:	7cfb      	ldrb	r3, [r7, #19]
 8001092:	3301      	adds	r3, #1
 8001094:	74fb      	strb	r3, [r7, #19]
 8001096:	7cfb      	ldrb	r3, [r7, #19]
 8001098:	2b0e      	cmp	r3, #14
 800109a:	d9eb      	bls.n	8001074 <perform_startup_routine+0x5c>
	}

	float avg_distance = ttl_distance / 4.0;
 800109c:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	edc7 7a02 	vstr	s15, [r7, #8]
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40100000 	.word	0x40100000

080010b8 <camera_test>:
			break;
		}
	}
}

void camera_test() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	camera_init();
 80010bc:	f7ff fe86 	bl	8000dcc <camera_init>

	camera_take_photo();
 80010c0:	f7ff feb0 	bl	8000e24 <camera_take_photo>

//	while (camera_process() != 1);
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <read_distance>:
 *  in main.h
 */

extern ADC_HandleTypeDef IR_ADC_HANDLE;

float read_distance() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
	 uint32_t ADC_VAL = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]

	 HAL_ADC_Start(&IR_ADC_HANDLE);//start conversion
 80010d2:	481b      	ldr	r0, [pc, #108]	@ (8001140 <read_distance+0x78>)
 80010d4:	f001 fdbc 	bl	8002c50 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&IR_ADC_HANDLE, 0xFFFFFFFF);//wait for conversion to finish
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	4818      	ldr	r0, [pc, #96]	@ (8001140 <read_distance+0x78>)
 80010de:	f001 fe1a 	bl	8002d16 <HAL_ADC_PollForConversion>
	 ADC_VAL = HAL_ADC_GetValue(&IR_ADC_HANDLE);//retrieve value
 80010e2:	4817      	ldr	r0, [pc, #92]	@ (8001140 <read_distance+0x78>)
 80010e4:	f001 fea6 	bl	8002e34 <HAL_ADC_GetValue>
 80010e8:	60f8      	str	r0, [r7, #12]

	 float voltage = (3.3* ADC_VAL)/4025.0;
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fa1a 	bl	8000524 <__aeabi_ui2d>
 80010f0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001130 <read_distance+0x68>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa8f 	bl	8000618 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	a30d      	add	r3, pc, #52	@ (adr r3, 8001138 <read_distance+0x70>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fbb0 	bl	800086c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fc92 	bl	8000a3c <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	60bb      	str	r3, [r7, #8]

	 // TODO  - special conversion if we need to
	 float distance = voltage;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	607b      	str	r3, [r7, #4]

	 return distance;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	ee07 3a90 	vmov	s15, r3
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	66666666 	.word	0x66666666
 8001134:	400a6666 	.word	0x400a6666
 8001138:	00000000 	.word	0x00000000
 800113c:	40af7200 	.word	0x40af7200
 8001140:	20040394 	.word	0x20040394

08001144 <microDelay>:

/*
 * Really short delay function
 */
static void microDelay(uint16_t delay)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
	return;
 800114e:	bf00      	nop
  __HAL_TIM_SET_COUNTER(&PS_TIMER_HANDLE, 0);
  while (__HAL_TIM_GET_COUNTER(&PS_TIMER_HANDLE) < delay);
}
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <getHX711>:

/*
 * reads in data value from HX711
 */
static int32_t getHX711(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8001166:	f001 fa23 	bl	80025b0 <HAL_GetTick>
 800116a:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 800116c:	e008      	b.n	8001180 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 800116e:	f001 fa1f 	bl	80025b0 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2bc8      	cmp	r3, #200	@ 0xc8
 800117a:	d901      	bls.n	8001180 <getHX711+0x24>
      return 0;
 800117c:	2300      	movs	r3, #0
 800117e:	e045      	b.n	800120c <getHX711+0xb0>
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 8001180:	2108      	movs	r1, #8
 8001182:	4824      	ldr	r0, [pc, #144]	@ (8001214 <getHX711+0xb8>)
 8001184:	f002 fd8a 	bl	8003c9c <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d0ef      	beq.n	800116e <getHX711+0x12>
  }

  for(int8_t len=0; len<24 ; len++)
 800118e:	2300      	movs	r3, #0
 8001190:	72fb      	strb	r3, [r7, #11]
 8001192:	e022      	b.n	80011da <getHX711+0x7e>
  {
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2102      	movs	r1, #2
 8001198:	481e      	ldr	r0, [pc, #120]	@ (8001214 <getHX711+0xb8>)
 800119a:	f002 fd97 	bl	8003ccc <HAL_GPIO_WritePin>
    microDelay(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ffd0 	bl	8001144 <microDelay>
    data = data << 1;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <getHX711+0xb8>)
 80011b0:	f002 fd8c 	bl	8003ccc <HAL_GPIO_WritePin>
    microDelay(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff ffc5 	bl	8001144 <microDelay>
    if(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80011ba:	2108      	movs	r1, #8
 80011bc:	4815      	ldr	r0, [pc, #84]	@ (8001214 <getHX711+0xb8>)
 80011be:	f002 fd6d 	bl	8003c9c <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <getHX711+0x72>
      data ++;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80011ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011de:	2b17      	cmp	r3, #23
 80011e0:	ddd8      	ble.n	8001194 <getHX711+0x38>
  }

  data = data ^ 0x800000;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80011e8:	60fb      	str	r3, [r7, #12]

  /*
   * END BIT
   */
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2102      	movs	r1, #2
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <getHX711+0xb8>)
 80011f0:	f002 fd6c 	bl	8003ccc <HAL_GPIO_WritePin>
  microDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ffa5 	bl	8001144 <microDelay>
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2102      	movs	r1, #2
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <getHX711+0xb8>)
 8001200:	f002 fd64 	bl	8003ccc <HAL_GPIO_WritePin>
  microDelay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff ff9d 	bl	8001144 <microDelay>

  return data;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	48000800 	.word	0x48000800

08001218 <weigh>:


int weigh()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  int32_t  samples = 50;
 8001222:	2332      	movs	r3, #50	@ 0x32
 8001224:	60fb      	str	r3, [r7, #12]
  int milligram;
  float coefficient;

  for(uint16_t i=0 ; i<samples ; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	827b      	strh	r3, [r7, #18]
 800122a:	e008      	b.n	800123e <weigh+0x26>
  {
      total += getHX711();
 800122c:	f7ff ff96 	bl	800115c <getHX711>
 8001230:	4602      	mov	r2, r0
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<samples ; i++)
 8001238:	8a7b      	ldrh	r3, [r7, #18]
 800123a:	3301      	adds	r3, #1
 800123c:	827b      	strh	r3, [r7, #18]
 800123e:	8a7b      	ldrh	r3, [r7, #18]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	dcf2      	bgt.n	800122c <weigh+0x14>
  }
  int32_t average = (int32_t)(total / samples);
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	fb92 f3f3 	sdiv	r3, r2, r3
 800124e:	60bb      	str	r3, [r7, #8]
  coefficient = knownOriginal / knownHX711;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <weigh+0x78>)
 8001252:	edd3 6a00 	vldr	s13, [r3]
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <weigh+0x7c>)
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001260:	edc7 7a01 	vstr	s15, [r7, #4]
  milligram = (int)(average-PS0_TARE)*coefficient;
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <weigh+0x80>)
 8001268:	4413      	add	r3, r2
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001272:	edd7 7a01 	vldr	s15, [r7, #4]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127e:	ee17 3a90 	vmov	r3, s15
 8001282:	603b      	str	r3, [r7, #0]
  return milligram;
 8001284:	683b      	ldr	r3, [r7, #0]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20040000 	.word	0x20040000
 8001294:	20040004 	.word	0x20040004
 8001298:	ff7e8f5e 	.word	0xff7e8f5e

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 f91b 	bl	80024de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f838 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f000 fa92 	bl	80017d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012b0:	f000 fa44 	bl	800173c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80012b4:	f000 f8dc 	bl	8001470 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012b8:	f006 fc26 	bl	8007b08 <MX_FATFS_Init>
  MX_SPI3_Init();
 80012bc:	f000 f916 	bl	80014ec <MX_SPI3_Init>
  MX_ADC1_Init();
 80012c0:	f000 f872 	bl	80013a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80012c4:	f000 f950 	bl	8001568 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f000 f99c 	bl	8001604 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012cc:	f000 f9e8 	bl	80016a0 <MX_TIM4_Init>

//  while (1) {
//	  simple_IR_trigger();
//  }

  perform_startup_routine();
 80012d0:	f7ff fea2 	bl	8001018 <perform_startup_routine>
  //some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  fres = f_mount(&FatFs, "", 1); //1=mount now
 80012d4:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80012d8:	2201      	movs	r2, #1
 80012da:	490f      	ldr	r1, [pc, #60]	@ (8001318 <main+0x7c>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 fe9b 	bl	800a018 <f_mount>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
  while (fres != FR_OK) {
 80012e8:	e009      	b.n	80012fe <main+0x62>
//  	while(1);
	  fres = f_mount(&FatFs, "", 0); //1=mount now
 80012ea:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80012ee:	2200      	movs	r2, #0
 80012f0:	4909      	ldr	r1, [pc, #36]	@ (8001318 <main+0x7c>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f008 fe90 	bl	800a018 <f_mount>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
  while (fres != FR_OK) {
 80012fe:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f1      	bne.n	80012ea <main+0x4e>
  }

  HAL_Delay(2500); // camera startup delay
 8001306:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800130a:	f001 f95d 	bl	80025c8 <HAL_Delay>

  camera_test();
 800130e:	f7ff fed3 	bl	80010b8 <camera_test>

  // start the camera interrupt timer

  while(1);
 8001312:	bf00      	nop
 8001314:	e7fd      	b.n	8001312 <main+0x76>
 8001316:	bf00      	nop
 8001318:	0800bc98 	.word	0x0800bc98

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b096      	sub	sp, #88	@ 0x58
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2244      	movs	r2, #68	@ 0x44
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f009 fc51 	bl	800abd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001342:	f002 fcfb 	bl	8003d3c <HAL_PWREx_ControlVoltageScaling>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800134c:	f000 fba6 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001350:	2310      	movs	r3, #16
 8001352:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800135c:	2360      	movs	r3, #96	@ 0x60
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fd9b 	bl	8003ea4 <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001374:	f000 fb92 	bl	8001a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f003 f9a1 	bl	80046d8 <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800139c:	f000 fb7e 	bl	8001a9c <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3758      	adds	r7, #88	@ 0x58
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013c0:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <MX_ADC1_Init+0xc0>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013c4:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_ADC1_Init+0xbc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_ADC1_Init+0xbc>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_ADC1_Init+0xbc>)
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_ADC1_Init+0xbc>)
 8001412:	2200      	movs	r2, #0
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_ADC1_Init+0xbc>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141e:	4811      	ldr	r0, [pc, #68]	@ (8001464 <MX_ADC1_Init+0xbc>)
 8001420:	f001 fad0 	bl	80029c4 <HAL_ADC_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800142a:	f000 fb37 	bl	8001a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_ADC1_Init+0xc4>)
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001432:	2306      	movs	r3, #6
 8001434:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800143a:	237f      	movs	r3, #127	@ 0x7f
 800143c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800143e:	2304      	movs	r3, #4
 8001440:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	@ (8001464 <MX_ADC1_Init+0xbc>)
 800144c:	f001 fd00 	bl	8002e50 <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001456:	f000 fb21 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20040394 	.word	0x20040394
 8001468:	50040000 	.word	0x50040000
 800146c:	36902000 	.word	0x36902000

08001470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_SPI1_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <MX_SPI1_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_SPI1_Init+0x74>)
 800147c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_SPI1_Init+0x74>)
 800148a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800148e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_SPI1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_SPI1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_SPI1_Init+0x74>)
 800149e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014a6:	2218      	movs	r2, #24
 80014a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014be:	2207      	movs	r2, #7
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014ca:	2208      	movs	r2, #8
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_SPI1_Init+0x74>)
 80014d0:	f004 f8d8 	bl	8005684 <HAL_SPI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f000 fadf 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200403fc 	.word	0x200403fc
 80014e8:	40013000 	.word	0x40013000

080014ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_SPI3_Init+0x74>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <MX_SPI3_Init+0x78>)
 80014f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_SPI3_Init+0x74>)
 80014f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001506:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800150a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_SPI3_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_SPI3_Init+0x74>)
 800151a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800151e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001522:	2228      	movs	r2, #40	@ 0x28
 8001524:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_SPI3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_SPI3_Init+0x74>)
 800153a:	2207      	movs	r2, #7
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_SPI3_Init+0x74>)
 8001546:	2208      	movs	r2, #8
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_SPI3_Init+0x74>)
 800154c:	f004 f89a 	bl	8005684 <HAL_SPI_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001556:	f000 faa1 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20040460 	.word	0x20040460
 8001564:	40003c00 	.word	0x40003c00

08001568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <MX_TIM2_Init+0x98>)
 8001588:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_TIM2_Init+0x98>)
 8001590:	2247      	movs	r2, #71	@ 0x47
 8001592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <MX_TIM2_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <MX_TIM2_Init+0x98>)
 800159c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <MX_TIM2_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_TIM2_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ae:	4814      	ldr	r0, [pc, #80]	@ (8001600 <MX_TIM2_Init+0x98>)
 80015b0:	f004 fe04 	bl	80061bc <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015ba:	f000 fa6f 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	@ (8001600 <MX_TIM2_Init+0x98>)
 80015cc:	f004 fff4 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015d6:	f000 fa61 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	@ (8001600 <MX_TIM2_Init+0x98>)
 80015e8:	f005 fa22 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015f2:	f000 fa53 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200404c4 	.word	0x200404c4

08001604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <MX_TIM3_Init+0x98>)
 8001626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_TIM3_Init+0x94>)
 800162a:	223f      	movs	r2, #63	@ 0x3f
 800162c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_TIM3_Init+0x94>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_TIM3_Init+0x94>)
 800164a:	f004 fdb7 	bl	80061bc <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001654:	f000 fa22 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001666:	f004 ffa7 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001670:	f000 fa14 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_TIM3_Init+0x94>)
 8001682:	f005 f9d5 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800168c:	f000 fa06 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20040510 	.word	0x20040510
 800169c:	40000400 	.word	0x40000400

080016a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <MX_TIM4_Init+0x98>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016c6:	227f      	movs	r2, #127	@ 0x7f
 80016c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016d2:	223e      	movs	r2, #62	@ 0x3e
 80016d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <MX_TIM4_Init+0x94>)
 80016e4:	f004 fd6a 	bl	80061bc <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 f9d5 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <MX_TIM4_Init+0x94>)
 8001700:	f004 ff5a 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 f9c7 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	@ (8001734 <MX_TIM4_Init+0x94>)
 800171c:	f005 f988 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001726:	f000 f9b9 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2004055c 	.word	0x2004055c
 8001738:	40000800 	.word	0x40000800

0800173c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001742:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <MX_USART3_UART_Init+0x94>)
 8001744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001748:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800174c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001784:	4811      	ldr	r0, [pc, #68]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001786:	f005 f9f9 	bl	8006b7c <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001790:	f000 f984 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 8001798:	f006 f8ec 	bl	8007974 <HAL_UARTEx_SetTxFifoThreshold>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017a2:	f000 f97b 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4808      	ldr	r0, [pc, #32]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 80017aa:	f006 f921 	bl	80079f0 <HAL_UARTEx_SetRxFifoThreshold>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017b4:	f000 f972 	bl	8001a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_USART3_UART_Init+0x90>)
 80017ba:	f006 f8a2 	bl	8007902 <HAL_UARTEx_DisableFifoMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017c4:	f000 f96a 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200405a8 	.word	0x200405a8
 80017d0:	40004800 	.word	0x40004800

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	@ 0x30
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ea:	4ba5      	ldr	r3, [pc, #660]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	4aa4      	ldr	r2, [pc, #656]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b9f      	ldr	r3, [pc, #636]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	4a9e      	ldr	r2, [pc, #632]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180e:	4b9c      	ldr	r3, [pc, #624]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b99      	ldr	r3, [pc, #612]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	4a98      	ldr	r2, [pc, #608]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001826:	4b96      	ldr	r3, [pc, #600]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4b93      	ldr	r3, [pc, #588]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a92      	ldr	r2, [pc, #584]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b90      	ldr	r3, [pc, #576]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b8d      	ldr	r3, [pc, #564]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a8c      	ldr	r2, [pc, #560]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b8a      	ldr	r3, [pc, #552]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	4b87      	ldr	r3, [pc, #540]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a86      	ldr	r2, [pc, #536]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b84      	ldr	r3, [pc, #528]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	4b81      	ldr	r3, [pc, #516]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a80      	ldr	r2, [pc, #512]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b7e      	ldr	r3, [pc, #504]	@ (8001a80 <MX_GPIO_Init+0x2ac>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8001892:	f002 faf7 	bl	8003e84 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 8001896:	2200      	movs	r2, #0
 8001898:	f24c 0129 	movw	r1, #49193	@ 0xc029
 800189c:	4879      	ldr	r0, [pc, #484]	@ (8001a84 <MX_GPIO_Init+0x2b0>)
 800189e:	f002 fa15 	bl	8003ccc <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 80018a2:	2200      	movs	r2, #0
 80018a4:	f641 7102 	movw	r1, #7938	@ 0x1f02
 80018a8:	4877      	ldr	r0, [pc, #476]	@ (8001a88 <MX_GPIO_Init+0x2b4>)
 80018aa:	f002 fa0f 	bl	8003ccc <HAL_GPIO_WritePin>
                          |M0_3_Pin|M1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b4:	4875      	ldr	r0, [pc, #468]	@ (8001a8c <MX_GPIO_Init+0x2b8>)
 80018b6:	f002 fa09 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|M1_1_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f244 0104 	movw	r1, #16388	@ 0x4004
 80018c0:	4873      	ldr	r0, [pc, #460]	@ (8001a90 <MX_GPIO_Init+0x2bc>)
 80018c2:	f002 fa03 	bl	8003ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS1_CLK_Pin M1_2_Pin M1_3_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|LCD_CS_Pin
 80018c6:	f24c 0329 	movw	r3, #49193	@ 0xc029
 80018ca:	61fb      	str	r3, [r7, #28]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4869      	ldr	r0, [pc, #420]	@ (8001a84 <MX_GPIO_Init+0x2b0>)
 80018e0:	f002 f84a 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS1_DATA_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4863      	ldr	r0, [pc, #396]	@ (8001a84 <MX_GPIO_Init+0x2b0>)
 80018f8:	f002 f83e 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS0_CLK_Pin M0_0_Pin M0_1_Pin M0_2_Pin
                           M0_3_Pin M1_0_Pin */
  GPIO_InitStruct.Pin = PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 80018fc:	f641 7302 	movw	r3, #7938	@ 0x1f02
 8001900:	61fb      	str	r3, [r7, #28]
                          |M0_3_Pin|M1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	485c      	ldr	r0, [pc, #368]	@ (8001a88 <MX_GPIO_Init+0x2b4>)
 8001916:	f002 f82f 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS0_DATA_Pin;
 800191a:	2308      	movs	r3, #8
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS0_DATA_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4856      	ldr	r0, [pc, #344]	@ (8001a88 <MX_GPIO_Init+0x2b4>)
 800192e:	f002 f823 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001932:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8001936:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	484f      	ldr	r0, [pc, #316]	@ (8001a8c <MX_GPIO_Init+0x2b8>)
 8001950:	f002 f812 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4847      	ldr	r0, [pc, #284]	@ (8001a8c <MX_GPIO_Init+0x2b8>)
 800196e:	f002 f803 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001972:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001984:	2303      	movs	r3, #3
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	483f      	ldr	r0, [pc, #252]	@ (8001a8c <MX_GPIO_Init+0x2b8>)
 8001990:	f001 fff2 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001994:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80019a6:	230d      	movs	r3, #13
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4838      	ldr	r0, [pc, #224]	@ (8001a94 <MX_GPIO_Init+0x2c0>)
 80019b2:	f001 ffe1 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80019c8:	230e      	movs	r3, #14
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4830      	ldr	r0, [pc, #192]	@ (8001a94 <MX_GPIO_Init+0x2c0>)
 80019d4:	f001 ffd0 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin M1_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|M1_1_Pin;
 80019d8:	f244 0304 	movw	r3, #16388	@ 0x4004
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4827      	ldr	r0, [pc, #156]	@ (8001a90 <MX_GPIO_Init+0x2bc>)
 80019f2:	f001 ffc1 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019f6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4821      	ldr	r0, [pc, #132]	@ (8001a98 <MX_GPIO_Init+0x2c4>)
 8001a14:	f001 ffb0 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a18:	2340      	movs	r3, #64	@ 0x40
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001a28:	230d      	movs	r3, #13
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4815      	ldr	r0, [pc, #84]	@ (8001a88 <MX_GPIO_Init+0x2b4>)
 8001a34:	f001 ffa0 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a38:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a58:	f001 ff8e 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a74:	f001 ff80 	bl	8003978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a78:	bf00      	nop
 8001a7a:	3730      	adds	r7, #48	@ 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48001400 	.word	0x48001400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48001000 	.word	0x48001000
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48001800 	.word	0x48001800

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <Error_Handler+0x8>

08001aa8 <stepper_rotate_clockwise_ir>:
		 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[i][3]);
		 HAL_Delay(MOTOR_DELAY); // Adjust delay for speed control
	}
}

void stepper_rotate_clockwise_ir() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(M0_0_GPIO_Port, M0_0_Pin, steps[cur_rotation_idx][0]);
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <stepper_rotate_clockwise_ir+0xb4>)
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ac0:	4827      	ldr	r0, [pc, #156]	@ (8001b60 <stepper_rotate_clockwise_ir+0xb8>)
 8001ac2:	f002 f903 	bl	8003ccc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_1_GPIO_Port, M0_1_Pin, steps[cur_rotation_idx][1]);
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a24      	ldr	r2, [pc, #144]	@ (8001b5c <stepper_rotate_clockwise_ir+0xb4>)
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001adc:	4820      	ldr	r0, [pc, #128]	@ (8001b60 <stepper_rotate_clockwise_ir+0xb8>)
 8001ade:	f002 f8f5 	bl	8003ccc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_2_GPIO_Port, M0_2_Pin, steps[cur_rotation_idx][2]);
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <stepper_rotate_clockwise_ir+0xb4>)
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	3308      	adds	r3, #8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001af8:	4819      	ldr	r0, [pc, #100]	@ (8001b60 <stepper_rotate_clockwise_ir+0xb8>)
 8001afa:	f002 f8e7 	bl	8003ccc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[cur_rotation_idx][3]);
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <stepper_rotate_clockwise_ir+0xb4>)
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	330c      	adds	r3, #12
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <stepper_rotate_clockwise_ir+0xb8>)
 8001b16:	f002 f8d9 	bl	8003ccc <HAL_GPIO_WritePin>

	 cur_rotation_idx++;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001b22:	6013      	str	r3, [r2, #0]
	 if (cur_rotation_idx == 8) {
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d107      	bne.n	8001b3c <stepper_rotate_clockwise_ir+0x94>
		 cur_rotation_idx = 0;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <stepper_rotate_clockwise_ir+0xb0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
		 num_steps_completed++;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <stepper_rotate_clockwise_ir+0xbc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <stepper_rotate_clockwise_ir+0xbc>)
 8001b3a:	6013      	str	r3, [r2, #0]
	 }

	 if (num_steps_completed == num_steps) {
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <stepper_rotate_clockwise_ir+0xbc>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <stepper_rotate_clockwise_ir+0xc0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d105      	bne.n	8001b54 <stepper_rotate_clockwise_ir+0xac>
		 // done
		 HAL_TIM_Base_Stop_IT(&MOTOR_TIMER_HANDLE);
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <stepper_rotate_clockwise_ir+0xc4>)
 8001b4a:	f004 fbff 	bl	800634c <HAL_TIM_Base_Stop_IT>
		 motor_is_ready = true;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <stepper_rotate_clockwise_ir+0xc8>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
	 }
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20040644 	.word	0x20040644
 8001b5c:	20040008 	.word	0x20040008
 8001b60:	48000800 	.word	0x48000800
 8001b64:	20040640 	.word	0x20040640
 8001b68:	2004063c 	.word	0x2004063c
 8001b6c:	2004055c 	.word	0x2004055c
 8001b70:	20040088 	.word	0x20040088

08001b74 <stepper_rotate_clockwise_steps>:



void stepper_rotate_clockwise_steps(uint32_t num_rotations) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	if (!motor_is_ready) {
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <stepper_rotate_clockwise_steps+0x40>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10f      	bne.n	8001baa <stepper_rotate_clockwise_steps+0x36>
		return; //already running
	}

	motor_is_ready = false;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <stepper_rotate_clockwise_steps+0x40>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]

	num_steps = num_rotations;
 8001b90:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <stepper_rotate_clockwise_steps+0x44>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
	num_steps_completed = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <stepper_rotate_clockwise_steps+0x48>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
	cur_rotation_idx = 0;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <stepper_rotate_clockwise_steps+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

	// enable motor timer interrupt
	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
 8001ba2:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <stepper_rotate_clockwise_steps+0x50>)
 8001ba4:	f004 fb62 	bl	800626c <HAL_TIM_Base_Start_IT>
 8001ba8:	e000      	b.n	8001bac <stepper_rotate_clockwise_steps+0x38>
		return; //already running
 8001baa:	bf00      	nop
}
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20040088 	.word	0x20040088
 8001bb8:	2004063c 	.word	0x2004063c
 8001bbc:	20040640 	.word	0x20040640
 8001bc0:	20040644 	.word	0x20040644
 8001bc4:	2004055c 	.word	0x2004055c

08001bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_MspInit+0x44>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c0c <HAL_MspInit+0x44>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_MspInit+0x44>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_MspInit+0x44>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_MspInit+0x44>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_MspInit+0x44>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0b0      	sub	sp, #192	@ 0xc0
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2294      	movs	r2, #148	@ 0x94
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 ffce 	bl	800abd2 <memset>
  if(hadc->Instance==ADC1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a35      	ldr	r2, [pc, #212]	@ (8001d10 <HAL_ADC_MspInit+0x100>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d162      	bne.n	8001d06 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c56:	2310      	movs	r3, #16
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 ffef 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c7c:	f7ff ff0e 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	4a23      	ldr	r2, [pc, #140]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_ADC_MspInit+0x104>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cce:	230b      	movs	r3, #11
 8001cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce4:	f001 fe48 	bl	8003978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR0_ADC_Pin|IR1_ADC_Pin;
 8001ce8:	2330      	movs	r3, #48	@ 0x30
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cee:	230b      	movs	r3, #11
 8001cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <HAL_ADC_MspInit+0x108>)
 8001d02:	f001 fe39 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d06:	bf00      	nop
 8001d08:	37c0      	adds	r7, #192	@ 0xc0
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	50040000 	.word	0x50040000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000800 	.word	0x48000800

08001d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	@ 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d129      	bne.n	8001d92 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	4a2d      	ldr	r2, [pc, #180]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5a:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001d6e:	23e0      	movs	r3, #224	@ 0xe0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8c:	f001 fdf4 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d90:	e02c      	b.n	8001dec <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_SPI_MspInit+0xe0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d127      	bne.n	8001dec <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d9c:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	4a15      	ldr	r2, [pc, #84]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001dcc:	2328      	movs	r3, #40	@ 0x28
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <HAL_SPI_MspInit+0xe4>)
 8001de8:	f001 fdc6 	bl	8003978 <HAL_GPIO_Init>
}
 8001dec:	bf00      	nop
 8001dee:	3730      	adds	r7, #48	@ 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013000 	.word	0x40013000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40003c00 	.word	0x40003c00
 8001e00:	48000400 	.word	0x48000400

08001e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	@ 0x38
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e24:	d129      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e26:	4b4d      	ldr	r3, [pc, #308]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e32:	4b4a      	ldr	r3, [pc, #296]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b47      	ldr	r3, [pc, #284]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	4a46      	ldr	r2, [pc, #280]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4a:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	483b      	ldr	r0, [pc, #236]	@ (8001f60 <HAL_TIM_Base_MspInit+0x15c>)
 8001e74:	f001 fd80 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e78:	e06b      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a39      	ldr	r2, [pc, #228]	@ (8001f64 <HAL_TIM_Base_MspInit+0x160>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d130      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e84:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	4a34      	ldr	r2, [pc, #208]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e90:	4b32      	ldr	r3, [pc, #200]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4826      	ldr	r0, [pc, #152]	@ (8001f68 <HAL_TIM_Base_MspInit+0x164>)
 8001ed0:	f001 fd52 	bl	8003978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	201d      	movs	r0, #29
 8001eda:	f001 fd16 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ede:	201d      	movs	r0, #29
 8001ee0:	f001 fd2f 	bl	8003942 <HAL_NVIC_EnableIRQ>
}
 8001ee4:	e035      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM4)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <HAL_TIM_Base_MspInit+0x168>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d130      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	4a19      	ldr	r2, [pc, #100]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0c:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_TIM_Base_MspInit+0x158>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f32:	2302      	movs	r3, #2
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <HAL_TIM_Base_MspInit+0x16c>)
 8001f3e:	f001 fd1b 	bl	8003978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	201e      	movs	r0, #30
 8001f48:	f001 fcdf 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f4c:	201e      	movs	r0, #30
 8001f4e:	f001 fcf8 	bl	8003942 <HAL_NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3738      	adds	r7, #56	@ 0x38
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000400 	.word	0x48000400
 8001f64:	40000400 	.word	0x40000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	40000800 	.word	0x40000800
 8001f70:	48000c00 	.word	0x48000c00

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0ae      	sub	sp, #184	@ 0xb8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	2294      	movs	r2, #148	@ 0x94
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f008 fe1c 	bl	800abd2 <memset>
  if(huart->Instance==USART3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <HAL_UART_MspInit+0xb0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d13b      	bne.n	800201c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fe4f 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fbc:	f7ff fd6e 	bl	8001a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_UART_MspInit+0xb4>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8001ff0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800200a:	2307      	movs	r3, #7
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002010:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002014:	4619      	mov	r1, r3
 8002016:	4805      	ldr	r0, [pc, #20]	@ (800202c <HAL_UART_MspInit+0xb8>)
 8002018:	f001 fcae 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800201c:	bf00      	nop
 800201e:	37b8      	adds	r7, #184	@ 0xb8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40004800 	.word	0x40004800
 8002028:	40021000 	.word	0x40021000
 800202c:	48000c00 	.word	0x48000c00

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <NMI_Handler+0x4>

08002038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <MemManage_Handler+0x4>

08002048 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 fa7f 	bl	8002588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <TIM3_IRQHandler+0x1c>)
 8002096:	f004 f988 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  // camera not ready means that it has taken a photo and needs to be written
  if (!camera_get_ready()) {
 800209a:	f7fe ffb1 	bl	8001000 <camera_get_ready>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <TIM3_IRQHandler+0x18>
	  camera_process(); //process a "chunk" of data
 80020a4:	f7fe ff92 	bl	8000fcc <camera_process>
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20040510 	.word	0x20040510

080020b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <TIM4_IRQHandler+0x14>)
 80020b6:	f004 f978 	bl	80063aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  stepper_rotate_clockwise_ir();
 80020ba:	f7ff fcf5 	bl	8001aa8 <stepper_rotate_clockwise_ir>

  /* USER CODE END TIM4_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2004055c 	.word	0x2004055c

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e2:	f008 fdc5 	bl	800ac70 <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800210a:	bf00      	nop
 800210c:	e7fd      	b.n	800210a <_exit+0x12>

0800210e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e00a      	b.n	8002136 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002120:	f3af 8000 	nop.w
 8002124:	4601      	mov	r1, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	b2ca      	uxtb	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbf0      	blt.n	8002120 <_read+0x12>
  }

  return len;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e009      	b.n	800216e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	60ba      	str	r2, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbf1      	blt.n	800215a <_write+0x12>
  }
  return len;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_close>:

int _close(int file)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a8:	605a      	str	r2, [r3, #4]
  return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_isatty>:

int _isatty(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	@ (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	@ (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f008 fd2a 	bl	800ac70 <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200a0000 	.word	0x200a0000
 8002248:	00000400 	.word	0x00000400
 800224c:	20040648 	.word	0x20040648
 8002250:	200407e8 	.word	0x200407e8

08002254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <VC0706_SendCommand>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 8002288:	2356      	movs	r3, #86	@ 0x56
 800228a:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 800228c:	2300      	movs	r3, #0
 800228e:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
 8002298:	e00c      	b.n	80022b4 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 800229a:	7ffb      	ldrb	r3, [r7, #31]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	441a      	add	r2, r3
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	3303      	adds	r3, #3
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	3320      	adds	r3, #32
 80022a8:	443b      	add	r3, r7
 80022aa:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 80022ae:	7ffb      	ldrb	r3, [r7, #31]
 80022b0:	3301      	adds	r3, #1
 80022b2:	77fb      	strb	r3, [r7, #31]
 80022b4:	7ffa      	ldrb	r2, [r7, #31]
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3ee      	bcc.n	800229a <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3303      	adds	r3, #3
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f107 010c 	add.w	r1, r7, #12
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	4803      	ldr	r0, [pc, #12]	@ (80022dc <VC0706_SendCommand+0x64>)
 80022ce:	f004 fca5 	bl	8006c1c <HAL_UART_Transmit>
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200405a8 	.word	0x200405a8

080022e0 <VC0706_TakePhoto>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 80022e6:	2301      	movs	r3, #1
 80022e8:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2202      	movs	r2, #2
 80022f0:	4619      	mov	r1, r3
 80022f2:	2036      	movs	r0, #54	@ 0x36
 80022f4:	f7ff ffc0 	bl	8002278 <VC0706_SendCommand>

    // response array
    uint8_t response[5]={0};
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8002300:	1d39      	adds	r1, r7, #4
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	2205      	movs	r2, #5
 8002308:	4810      	ldr	r0, [pc, #64]	@ (800234c <VC0706_TakePhoto+0x6c>)
 800230a:	f004 fd15 	bl	8006d38 <HAL_UART_Receive>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8002318:	2300      	movs	r3, #0
 800231a:	e012      	b.n	8002342 <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 800231c:	793b      	ldrb	r3, [r7, #4]
 800231e:	2b76      	cmp	r3, #118	@ 0x76
 8002320:	d10d      	bne.n	800233e <VC0706_TakePhoto+0x5e>
 8002322:	797b      	ldrb	r3, [r7, #5]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <VC0706_TakePhoto+0x5e>
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	2b36      	cmp	r3, #54	@ 0x36
 800232c:	d107      	bne.n	800233e <VC0706_TakePhoto+0x5e>
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <VC0706_TakePhoto+0x5e>
 8002334:	7a3b      	ldrb	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <VC0706_TakePhoto+0x5e>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <VC0706_TakePhoto+0x60>
 800233e:	2300      	movs	r3, #0
 8002340:	b2db      	uxtb	r3, r3
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200405a8 	.word	0x200405a8

08002350 <VC0706_StopCapture>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8002356:	f240 3301 	movw	r3, #769	@ 0x301
 800235a:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2202      	movs	r2, #2
 800236a:	4619      	mov	r1, r3
 800236c:	2036      	movs	r0, #54	@ 0x36
 800236e:	f7ff ff83 	bl	8002278 <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002372:	1d39      	adds	r1, r7, #4
 8002374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002378:	2205      	movs	r2, #5
 800237a:	480f      	ldr	r0, [pc, #60]	@ (80023b8 <VC0706_StopCapture+0x68>)
 800237c:	f004 fcdc 	bl	8006d38 <HAL_UART_Receive>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d110      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 800238a:	793b      	ldrb	r3, [r7, #4]
 800238c:	2b76      	cmp	r3, #118	@ 0x76
 800238e:	d10d      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 8002390:	797b      	ldrb	r3, [r7, #5]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	2b36      	cmp	r3, #54	@ 0x36
 800239a:	d107      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 80023a2:	7a3b      	ldrb	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <VC0706_StopCapture+0x5c>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <VC0706_StopCapture+0x5e>
 80023ac:	2300      	movs	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200405a8 	.word	0x200405a8

080023bc <VC0706_ReadImageDataLength>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 80023c2:	2301      	movs	r3, #1
 80023c4:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	2202      	movs	r2, #2
 80023cc:	4619      	mov	r1, r3
 80023ce:	2034      	movs	r0, #52	@ 0x34
 80023d0:	f7ff ff52 	bl	8002278 <VC0706_SendCommand>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 80023d4:	1d39      	adds	r1, r7, #4
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	2209      	movs	r2, #9
 80023dc:	480b      	ldr	r0, [pc, #44]	@ (800240c <VC0706_ReadImageDataLength+0x50>)
 80023de:	f004 fcab 	bl	8006d38 <HAL_UART_Receive>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <VC0706_ReadImageDataLength+0x34>
    	return 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e008      	b.n	8002402 <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 80023f0:	7afb      	ldrb	r3, [r7, #11]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	7b3b      	ldrb	r3, [r7, #12]
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8002400:	8abb      	ldrh	r3, [r7, #20]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200405a8 	.word	0x200405a8

08002410 <VC0706_ReadImageBlock>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 800241a:	230c      	movs	r3, #12
 800241c:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8002422:	230a      	movs	r3, #10
 8002424:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b2db      	uxtb	r3, r3
 8002434:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8002440:	2300      	movs	r3, #0
 8002442:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8002444:	2300      	movs	r3, #0
 8002446:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8002448:	2320      	movs	r3, #32
 800244a:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 800244c:	2300      	movs	r3, #0
 800244e:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8002450:	23ff      	movs	r3, #255	@ 0xff
 8002452:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	220d      	movs	r2, #13
 800245a:	4619      	mov	r1, r3
 800245c:	2032      	movs	r0, #50	@ 0x32
 800245e:	f7ff ff0b 	bl	8002278 <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	222a      	movs	r2, #42	@ 0x2a
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4807      	ldr	r0, [pc, #28]	@ (8002488 <VC0706_ReadImageBlock+0x78>)
 800246c:	f004 fc64 	bl	8006d38 <HAL_UART_Receive>
 8002470:	4603      	mov	r3, r0
 8002472:	75fb      	strb	r3, [r7, #23]

    return status == HAL_OK;
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200405a8 	.word	0x200405a8

0800248c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002490:	f7ff fee0 	bl	8002254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002496:	490d      	ldr	r1, [pc, #52]	@ (80024cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <LoopForever+0xe>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ac:	4c0a      	ldr	r4, [pc, #40]	@ (80024d8 <LoopForever+0x16>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ba:	f008 fbdf 	bl	800ac7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024be:	f7fe feed 	bl	800129c <main>

080024c2 <LoopForever>:

LoopForever:
    b LoopForever
 80024c2:	e7fe      	b.n	80024c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80024c8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80024cc:	2004010c 	.word	0x2004010c
  ldr r2, =_sidata
 80024d0:	0800bec0 	.word	0x0800bec0
  ldr r2, =_sbss
 80024d4:	2004010c 	.word	0x2004010c
  ldr r4, =_ebss
 80024d8:	200407e4 	.word	0x200407e4

080024dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC1_IRQHandler>

080024de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f001 fa03 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f80e 	bl	8002510 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	e001      	b.n	8002504 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002500:	f7ff fb62 	bl	8001bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002504:	79fb      	ldrb	r3, [r7, #7]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_InitTick+0x6c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002524:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <HAL_InitTick+0x70>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <HAL_InitTick+0x6c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fa0f 	bl	800395e <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d809      	bhi.n	8002560 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f001 f9d9 	bl	800390a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002558:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <HAL_InitTick+0x74>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e007      	b.n	8002570 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e004      	b.n	8002570 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e001      	b.n	8002570 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20040094 	.word	0x20040094
 8002580:	2004008c 	.word	0x2004008c
 8002584:	20040090 	.word	0x20040090

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20040094 	.word	0x20040094
 80025ac:	2004064c 	.word	0x2004064c

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2004064c 	.word	0x2004064c

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20040094 	.word	0x20040094

08002610 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3360      	adds	r3, #96	@ 0x60
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <LL_ADC_SetOffset+0x44>)
 800269a:	4013      	ands	r3, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	03fff000 	.word	0x03fff000

080026c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3360      	adds	r3, #96	@ 0x60
 80026ce:	461a      	mov	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3360      	adds	r3, #96	@ 0x60
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	615a      	str	r2, [r3, #20]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800276e:	b480      	push	{r7}
 8002770:	b087      	sub	sp, #28
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3330      	adds	r3, #48	@ 0x30
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	211f      	movs	r1, #31
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 011f 	and.w	r1, r3, #31
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	431a      	orrs	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3314      	adds	r3, #20
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0e5b      	lsrs	r3, r3, #25
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	0d1b      	lsrs	r3, r3, #20
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2107      	movs	r1, #7
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0d1b      	lsrs	r3, r3, #20
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0318 	and.w	r3, r3, #24
 800283e:	4908      	ldr	r1, [pc, #32]	@ (8002860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002840:	40d9      	lsrs	r1, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	400b      	ands	r3, r1
 8002846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	0007ffff 	.word	0x0007ffff

08002864 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002874:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6093      	str	r3, [r2, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800289c:	d101      	bne.n	80028a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80028c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <LL_ADC_IsEnabled+0x18>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <LL_ADC_IsEnabled+0x1a>
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800295e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002962:	f043 0204 	orr.w	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d101      	bne.n	800298e <LL_ADC_REG_IsConversionOngoing+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e129      	b.n	8002c32 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff f90f 	bl	8001c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff3f 	bl	8002888 <LL_ADC_IsDeepPowerDownEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff25 	bl	8002864 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff5a 	bl	80028d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff3e 	bl	80028b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a34:	4b81      	ldr	r3, [pc, #516]	@ (8002c3c <HAL_ADC_Init+0x278>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	4a81      	ldr	r2, [pc, #516]	@ (8002c40 <HAL_ADC_Init+0x27c>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff3c 	bl	80028d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff75 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 80c2 	bne.w	8002c20 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80be 	bne.w	8002c20 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002aac:	f043 0202 	orr.w	r2, r3, #2
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff35 	bl	8002928 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac4:	485f      	ldr	r0, [pc, #380]	@ (8002c44 <HAL_ADC_Init+0x280>)
 8002ac6:	f7ff ff2f 	bl	8002928 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	485c      	ldr	r0, [pc, #368]	@ (8002c48 <HAL_ADC_Init+0x284>)
 8002ad8:	f7ff fd9a 	bl	8002610 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7e5b      	ldrb	r3, [r3, #25]
 8002ae0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002aec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002af2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d106      	bne.n	8002b18 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	045b      	lsls	r3, r3, #17
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d009      	beq.n	8002b34 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_ADC_Init+0x288>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff25 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d140      	bne.n	8002bdc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13d      	bne.n	8002bdc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
 8002b68:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b6a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b82:	f023 0306 	bic.w	r3, r3, #6
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d118      	bne.n	8002bcc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10c      	bne.n	8002bfe <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f023 010f 	bic.w	r1, r3, #15
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfc:	e007      	b.n	8002c0e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020f 	bic.w	r2, r2, #15
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c1e:	e007      	b.n	8002c30 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2004008c 	.word	0x2004008c
 8002c40:	053e2d63 	.word	0x053e2d63
 8002c44:	50040000 	.word	0x50040000
 8002c48:	50040300 	.word	0x50040300
 8002c4c:	fff0c007 	.word	0xfff0c007

08002c50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fe8a 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d14f      	bne.n	8002d08 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Start+0x26>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e04b      	b.n	8002d0e <HAL_ADC_Start+0xbe>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fce2 	bl	8003648 <ADC_Enable>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d137      	bne.n	8002cfe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	f023 0206 	bic.w	r2, r3, #6
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	221c      	movs	r2, #28
 8002cca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe29 	bl	800294e <LL_ADC_REG_StartConversion>
 8002cfc:	e006      	b.n	8002d0c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002d06:	e001      	b.n	8002d0c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d102      	bne.n	8002d2e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e010      	b.n	8002d50 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e06f      	b.n	8002e2c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d50:	f7ff fc2e 	bl	80025b0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d56:	e021      	b.n	8002d9c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d01d      	beq.n	8002d9c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d60:	f7ff fc26 	bl	80025b0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <HAL_ADC_PollForConversion+0x60>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e047      	b.n	8002e2c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0d6      	beq.n	8002d58 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fcc4 	bl	8002748 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01c      	beq.n	8002e00 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7e5b      	ldrb	r3, [r3, #25]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d111      	bne.n	8002e00 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d104      	bne.n	8002e18 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2208      	movs	r2, #8
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e008      	b.n	8002e2a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0b6      	sub	sp, #216	@ 0xd8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x22>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e3d5      	b.n	800361e <HAL_ADC_ConfigChannel+0x7ce>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd79 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 83ba 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d824      	bhi.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	3b02      	subs	r3, #2
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d81b      	bhi.n	8002ede <HAL_ADC_ConfigChannel+0x8e>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_ADC_ConfigChannel+0x5c>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ec5 	.word	0x08002ec5
 8002eb4:	08002ecd 	.word	0x08002ecd
 8002eb8:	08002ed5 	.word	0x08002ed5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ec2:	e010      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ec4:	2312      	movs	r3, #18
 8002ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ecc:	2318      	movs	r3, #24
 8002ece:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ed2:	e008      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ede:	2306      	movs	r3, #6
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ee4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ef4:	f7ff fc3b 	bl	800276e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fd3a 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002f02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd46 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002f10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 81bf 	bne.w	800329c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 81ba 	bne.w	800329c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f30:	d10f      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7ff fc42 	bl	80027c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fbe9 	bl	8002722 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f50:	e00e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f7ff fc31 	bl	80027c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fbd9 	bl	8002722 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00a      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa2:	f7ff fb69 	bl	8002678 <LL_ADC_SetOffset>
 8002fa6:	e179      	b.n	800329c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fb86 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x184>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb7b 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	e01e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1c2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fb70 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e004      	b.n	8003010 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_ADC_ConfigChannel+0x1da>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	e018      	b.n	800305c <HAL_ADC_ConfigChannel+0x20c>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800303e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fb3f 	bl	80026ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb23 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x24a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fb18 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	e01e      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x288>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fb0d 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80030b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80030c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80030cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x2a0>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	e018      	b.n	8003122 <HAL_ADC_ConfigChannel+0x2d2>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800310c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fadc 	bl	80026ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fac0 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x310>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fab5 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	e01e      	b.n	800319e <HAL_ADC_ConfigChannel+0x34e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff faaa 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800317e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x366>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	e014      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x390>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80031c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80031ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e004      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80031d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fa7d 	bl	80026ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2103      	movs	r1, #3
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fa61 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_ADC_ConfigChannel+0x3ce>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fa56 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	e017      	b.n	800324e <HAL_ADC_ConfigChannel+0x3fe>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa4b 	bl	80026c0 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003238:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800323a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e003      	b.n	800324c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x416>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	e011      	b.n	800328a <HAL_ADC_ConfigChannel+0x43a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003276:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	2103      	movs	r1, #3
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fa28 	bl	80026ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb41 	bl	8002928 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 813f 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7ff faae 	bl	800281c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003500 <HAL_ADC_ConfigChannel+0x6b0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 8130 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x4a4>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	bf94      	ite	ls
 80032ec:	2301      	movls	r3, #1
 80032ee:	2300      	movhi	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e019      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4d8>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2b09      	cmp	r3, #9
 8003320:	bf94      	ite	ls
 8003322:	2301      	movls	r3, #1
 8003324:	2300      	movhi	r3, #0
 8003326:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	2b00      	cmp	r3, #0
 800332a:	d079      	beq.n	8003420 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x4f8>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003346:	e015      	b.n	8003374 <HAL_ADC_ConfigChannel+0x524>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003358:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800335a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x544>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	e017      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x574>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80033b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x59a>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	e018      	b.n	800341c <HAL_ADC_ConfigChannel+0x5cc>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800341c:	430b      	orrs	r3, r1
 800341e:	e080      	b.n	8003522 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_ADC_ConfigChannel+0x5ec>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	3301      	adds	r3, #1
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800343a:	e015      	b.n	8003468 <HAL_ADC_ConfigChannel+0x618>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	069b      	lsls	r3, r3, #26
 8003464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x638>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	e017      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x668>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	61bb      	str	r3, [r7, #24]
  return result;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80034a0:	2320      	movs	r3, #32
 80034a2:	e003      	b.n	80034ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	ea42 0103 	orr.w	r1, r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x694>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	3301      	adds	r3, #1
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	3b1e      	subs	r3, #30
 80034dc:	051b      	lsls	r3, r3, #20
 80034de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	e01d      	b.n	8003520 <HAL_ADC_ConfigChannel+0x6d0>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
  return result;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d103      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e005      	b.n	800350c <HAL_ADC_ConfigChannel+0x6bc>
 8003500:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 021f 	and.w	r2, r3, #31
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	051b      	lsls	r3, r3, #20
 800351c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003526:	4619      	mov	r1, r3
 8003528:	f7ff f94d 	bl	80027c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_ADC_ConfigChannel+0x7d8>)
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d06c      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003538:	483c      	ldr	r0, [pc, #240]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 800353a:	f7ff f88f 	bl	800265c <LL_ADC_GetCommonPathInternalCh>
 800353e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <HAL_ADC_ConfigChannel+0x7e0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d127      	bne.n	800359c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800354c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d121      	bne.n	800359c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a35      	ldr	r2, [pc, #212]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d157      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003566:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800356a:	4619      	mov	r1, r3
 800356c:	482f      	ldr	r0, [pc, #188]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 800356e:	f7ff f862 	bl	8002636 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <HAL_ADC_ConfigChannel+0x7e8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	4a30      	ldr	r2, [pc, #192]	@ (800363c <HAL_ADC_ConfigChannel+0x7ec>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800358c:	e002      	b.n	8003594 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3b01      	subs	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f9      	bne.n	800358e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359a:	e03a      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <HAL_ADC_ConfigChannel+0x7f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d12a      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c4:	4619      	mov	r1, r3
 80035c6:	4819      	ldr	r0, [pc, #100]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 80035c8:	f7ff f835 	bl	8002636 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035cc:	e021      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_ADC_ConfigChannel+0x7f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11c      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	480c      	ldr	r0, [pc, #48]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 80035fa:	f7ff f81c 	bl	8002636 <LL_ADC_SetCommonPathInternalCh>
 80035fe:	e008      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800361e:	4618      	mov	r0, r3
 8003620:	37d8      	adds	r7, #216	@ 0xd8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	80080000 	.word	0x80080000
 800362c:	50040300 	.word	0x50040300
 8003630:	c7520000 	.word	0xc7520000
 8003634:	50040000 	.word	0x50040000
 8003638:	2004008c 	.word	0x2004008c
 800363c:	053e2d63 	.word	0x053e2d63
 8003640:	cb840000 	.word	0xcb840000
 8003644:	80000001 	.word	0x80000001

08003648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f965 	bl	8002928 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d169      	bne.n	8003738 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <ADC_Enable+0xfc>)
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e055      	b.n	800373a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f934 	bl	8002900 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003698:	482b      	ldr	r0, [pc, #172]	@ (8003748 <ADC_Enable+0x100>)
 800369a:	f7fe ffdf 	bl	800265c <LL_ADC_GetCommonPathInternalCh>
 800369e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a8:	4b28      	ldr	r3, [pc, #160]	@ (800374c <ADC_Enable+0x104>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <ADC_Enable+0x108>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036d0:	f7fe ff6e 	bl	80025b0 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d6:	e028      	b.n	800372a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f923 	bl	8002928 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f907 	bl	8002900 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036f2:	f7fe ff5d 	bl	80025b0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d914      	bls.n	800372a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d00d      	beq.n	800372a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d1cf      	bne.n	80036d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	8000003f 	.word	0x8000003f
 8003748:	50040300 	.word	0x50040300
 800374c:	2004008c 	.word	0x2004008c
 8003750:	053e2d63 	.word	0x053e2d63

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	@ (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	@ (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	@ (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	@ 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	@ 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	@ (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800391c:	f7ff ff3e 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff8e 	bl	8003848 <NVIC_EncodePriority>
 800392c:	4602      	mov	r2, r0
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff5d 	bl	80037f4 <__NVIC_SetPriority>
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff31 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffa2 	bl	80038b0 <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e166      	b.n	8003c56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8158 	beq.w	8003c50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d005      	beq.n	80039b8 <HAL_GPIO_Init+0x40>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d130      	bne.n	8003a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ee:	2201      	movs	r2, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0201 	and.w	r2, r3, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d017      	beq.n	8003a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80b2 	beq.w	8003c50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aec:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	4a60      	ldr	r2, [pc, #384]	@ (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003af8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c74 <HAL_GPIO_Init+0x2fc>)
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b04:	4a5c      	ldr	r2, [pc, #368]	@ (8003c78 <HAL_GPIO_Init+0x300>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b2e:	d02b      	beq.n	8003b88 <HAL_GPIO_Init+0x210>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a52      	ldr	r2, [pc, #328]	@ (8003c7c <HAL_GPIO_Init+0x304>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d025      	beq.n	8003b84 <HAL_GPIO_Init+0x20c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a51      	ldr	r2, [pc, #324]	@ (8003c80 <HAL_GPIO_Init+0x308>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d01f      	beq.n	8003b80 <HAL_GPIO_Init+0x208>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a50      	ldr	r2, [pc, #320]	@ (8003c84 <HAL_GPIO_Init+0x30c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d019      	beq.n	8003b7c <HAL_GPIO_Init+0x204>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003c88 <HAL_GPIO_Init+0x310>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_GPIO_Init+0x200>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a4e      	ldr	r2, [pc, #312]	@ (8003c8c <HAL_GPIO_Init+0x314>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00d      	beq.n	8003b74 <HAL_GPIO_Init+0x1fc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c90 <HAL_GPIO_Init+0x318>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <HAL_GPIO_Init+0x1f8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a4c      	ldr	r2, [pc, #304]	@ (8003c94 <HAL_GPIO_Init+0x31c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_GPIO_Init+0x1f4>
 8003b68:	2307      	movs	r3, #7
 8003b6a:	e00e      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	e00c      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b70:	2306      	movs	r3, #6
 8003b72:	e00a      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b74:	2305      	movs	r3, #5
 8003b76:	e008      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e006      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e004      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e002      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_GPIO_Init+0x212>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	f002 0203 	and.w	r2, r2, #3
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	4093      	lsls	r3, r2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b9a:	4937      	ldr	r1, [pc, #220]	@ (8003c78 <HAL_GPIO_Init+0x300>)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bcc:	4a32      	ldr	r2, [pc, #200]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bd2:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf6:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bfc:	4b26      	ldr	r3, [pc, #152]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c20:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c26:	4b1c      	ldr	r3, [pc, #112]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c4a:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <HAL_GPIO_Init+0x320>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3301      	adds	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f47f ae91 	bne.w	8003988 <HAL_GPIO_Init+0x10>
  }
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	48000400 	.word	0x48000400
 8003c80:	48000800 	.word	0x48000800
 8003c84:	48000c00 	.word	0x48000c00
 8003c88:	48001000 	.word	0x48001000
 8003c8c:	48001400 	.word	0x48001400
 8003c90:	48001800 	.word	0x48001800
 8003c94:	48001c00 	.word	0x48001c00
 8003c98:	40010400 	.word	0x40010400

08003c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e001      	b.n	8003cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cdc:	787b      	ldrb	r3, [r7, #1]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d00:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d12:	e00b      	b.n	8003d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003d14:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d22:	d102      	bne.n	8003d2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d28:	e000      	b.n	8003d2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003d2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40007000 	.word	0x40007000

08003d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d141      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d56:	d131      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d58:	4b47      	ldr	r3, [pc, #284]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5e:	4a46      	ldr	r2, [pc, #280]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d68:	4b43      	ldr	r3, [pc, #268]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d70:	4a41      	ldr	r2, [pc, #260]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d78:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2232      	movs	r2, #50	@ 0x32
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a3f      	ldr	r2, [pc, #252]	@ (8003e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	0c9b      	lsrs	r3, r3, #18
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8e:	e002      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d96:	4b38      	ldr	r3, [pc, #224]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d102      	bne.n	8003daa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f2      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003daa:	4b33      	ldr	r3, [pc, #204]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db6:	d158      	bne.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e057      	b.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003dcc:	e04d      	b.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd4:	d141      	bne.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd6:	4b28      	ldr	r3, [pc, #160]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d131      	bne.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de4:	4b24      	ldr	r3, [pc, #144]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	4a23      	ldr	r2, [pc, #140]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df4:	4b20      	ldr	r3, [pc, #128]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2232      	movs	r2, #50	@ 0x32
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	0c9b      	lsrs	r3, r3, #18
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1a:	e002      	b.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2e:	d102      	bne.n	8003e36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f2      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e36:	4b10      	ldr	r3, [pc, #64]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e42:	d112      	bne.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e011      	b.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e58:	e007      	b.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e5a:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e62:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	2004008c 	.word	0x2004008c
 8003e80:	431bde83 	.word	0x431bde83

08003e84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e92:	6053      	str	r3, [r2, #4]
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40007000 	.word	0x40007000

08003ea4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f000 bc08 	b.w	80046c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb8:	4b96      	ldr	r3, [pc, #600]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec2:	4b94      	ldr	r3, [pc, #592]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80e4 	beq.w	80040a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4c>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	f040 808b 	bne.w	8003ffe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	f040 8087 	bne.w	8003ffe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef0:	4b88      	ldr	r3, [pc, #544]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x64>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e3df      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	4b81      	ldr	r3, [pc, #516]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_RCC_OscConfig+0x7e>
 8003f18:	4b7e      	ldr	r3, [pc, #504]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f20:	e005      	b.n	8003f2e <HAL_RCC_OscConfig+0x8a>
 8003f22:	4b7c      	ldr	r3, [pc, #496]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d223      	bcs.n	8003f7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fdcc 	bl	8004ad4 <RCC_SetFlashLatencyFromMSIRange>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e3c0      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f46:	4b73      	ldr	r3, [pc, #460]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a72      	ldr	r2, [pc, #456]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b70      	ldr	r3, [pc, #448]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	496d      	ldr	r1, [pc, #436]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f64:	4b6b      	ldr	r3, [pc, #428]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	4968      	ldr	r1, [pc, #416]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
 8003f78:	e025      	b.n	8003fc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7a:	4b66      	ldr	r3, [pc, #408]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a65      	ldr	r2, [pc, #404]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f80:	f043 0308 	orr.w	r3, r3, #8
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	4960      	ldr	r1, [pc, #384]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f98:	4b5e      	ldr	r3, [pc, #376]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	495b      	ldr	r1, [pc, #364]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fd8c 	bl	8004ad4 <RCC_SetFlashLatencyFromMSIRange>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e380      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fc6:	f000 fcc1 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b51      	ldr	r3, [pc, #324]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4950      	ldr	r1, [pc, #320]	@ (8004118 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800411c <HAL_RCC_OscConfig+0x278>)
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8004120 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fa90 	bl	8002510 <HAL_InitTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d052      	beq.n	80040a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	e364      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d032      	beq.n	800406c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004006:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a42      	ldr	r2, [pc, #264]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004012:	f7fe facd 	bl	80025b0 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800401a:	f7fe fac9 	bl	80025b0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e34d      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800402c:	4b39      	ldr	r3, [pc, #228]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004038:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a35      	ldr	r2, [pc, #212]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800403e:	f043 0308 	orr.w	r3, r3, #8
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b33      	ldr	r3, [pc, #204]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4930      	ldr	r1, [pc, #192]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004056:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	492b      	ldr	r1, [pc, #172]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]
 800406a:	e01a      	b.n	80040a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800406c:	4b29      	ldr	r3, [pc, #164]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a28      	ldr	r2, [pc, #160]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004078:	f7fe fa9a 	bl	80025b0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004080:	f7fe fa96 	bl	80025b0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e31a      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x1dc>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d073      	beq.n	8004196 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x21c>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d10e      	bne.n	80040d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d063      	beq.n	8004194 <HAL_RCC_OscConfig+0x2f0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d15f      	bne.n	8004194 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e2f7      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x24c>
 80040e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e025      	b.n	800413c <HAL_RCC_OscConfig+0x298>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d114      	bne.n	8004124 <HAL_RCC_OscConfig+0x280>
 80040fa:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a05      	ldr	r2, [pc, #20]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a02      	ldr	r2, [pc, #8]	@ (8004114 <HAL_RCC_OscConfig+0x270>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e013      	b.n	800413c <HAL_RCC_OscConfig+0x298>
 8004114:	40021000 	.word	0x40021000
 8004118:	0800bce0 	.word	0x0800bce0
 800411c:	2004008c 	.word	0x2004008c
 8004120:	20040090 	.word	0x20040090
 8004124:	4ba0      	ldr	r3, [pc, #640]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a9f      	ldr	r2, [pc, #636]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b9d      	ldr	r3, [pc, #628]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a9c      	ldr	r2, [pc, #624]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d013      	beq.n	800416c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe fa34 	bl	80025b0 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe fa30 	bl	80025b0 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	@ 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e2b4      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415e:	4b92      	ldr	r3, [pc, #584]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x2a8>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fa20 	bl	80025b0 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe fa1c 	bl	80025b0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e2a0      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004186:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x2d0>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d060      	beq.n	8004264 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x310>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d119      	bne.n	80041e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d116      	bne.n	80041e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b4:	4b7c      	ldr	r3, [pc, #496]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_OscConfig+0x328>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e27d      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	4973      	ldr	r1, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e0:	e040      	b.n	8004264 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d023      	beq.n	8004232 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ea:	4b6f      	ldr	r3, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6e      	ldr	r2, [pc, #440]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe f9db 	bl	80025b0 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe f9d7 	bl	80025b0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e25b      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004210:	4b65      	ldr	r3, [pc, #404]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b62      	ldr	r3, [pc, #392]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	495f      	ldr	r1, [pc, #380]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
 8004230:	e018      	b.n	8004264 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b5d      	ldr	r3, [pc, #372]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5c      	ldr	r2, [pc, #368]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fe f9b7 	bl	80025b0 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fe f9b3 	bl	80025b0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e237      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004258:	4b53      	ldr	r3, [pc, #332]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d03c      	beq.n	80042ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004278:	4b4b      	ldr	r3, [pc, #300]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	4a4a      	ldr	r2, [pc, #296]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fe f992 	bl	80025b0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fe f98e 	bl	80025b0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e212      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCC_OscConfig+0x3ec>
 80042b0:	e01b      	b.n	80042ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b2:	4b3d      	ldr	r3, [pc, #244]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042b8:	4a3b      	ldr	r2, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fe f975 	bl	80025b0 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fe f971 	bl	80025b0 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e1f5      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042dc:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ef      	bne.n	80042ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a6 	beq.w	8004444 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f8:	2300      	movs	r3, #0
 80042fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042fc:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	4a26      	ldr	r2, [pc, #152]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	@ 0x58
 8004314:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004320:	2301      	movs	r3, #1
 8004322:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004324:	4b21      	ldr	r3, [pc, #132]	@ (80043ac <HAL_RCC_OscConfig+0x508>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d118      	bne.n	8004362 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004330:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <HAL_RCC_OscConfig+0x508>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_RCC_OscConfig+0x508>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433c:	f7fe f938 	bl	80025b0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fe f934 	bl	80025b0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1b8      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_RCC_OscConfig+0x508>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d108      	bne.n	800437c <HAL_RCC_OscConfig+0x4d8>
 800436a:	4b0f      	ldr	r3, [pc, #60]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004370:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800437a:	e029      	b.n	80043d0 <HAL_RCC_OscConfig+0x52c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b05      	cmp	r3, #5
 8004382:	d115      	bne.n	80043b0 <HAL_RCC_OscConfig+0x50c>
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004394:	4b04      	ldr	r3, [pc, #16]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439a:	4a03      	ldr	r2, [pc, #12]	@ (80043a8 <HAL_RCC_OscConfig+0x504>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a4:	e014      	b.n	80043d0 <HAL_RCC_OscConfig+0x52c>
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40007000 	.word	0x40007000
 80043b0:	4b9d      	ldr	r3, [pc, #628]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	4a9c      	ldr	r2, [pc, #624]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043c0:	4b99      	ldr	r3, [pc, #612]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	4a98      	ldr	r2, [pc, #608]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d016      	beq.n	8004406 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fe f8ea 	bl	80025b0 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe f8e6 	bl	80025b0 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e168      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f6:	4b8c      	ldr	r3, [pc, #560]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ed      	beq.n	80043e0 <HAL_RCC_OscConfig+0x53c>
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe f8d3 	bl	80025b0 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fe f8cf 	bl	80025b0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e151      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004424:	4b80      	ldr	r3, [pc, #512]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ed      	bne.n	800440e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b7b      	ldr	r3, [pc, #492]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443c:	4a7a      	ldr	r2, [pc, #488]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03c      	beq.n	80044ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01c      	beq.n	8004492 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004458:	4b73      	ldr	r3, [pc, #460]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 800445a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800445e:	4a72      	ldr	r2, [pc, #456]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe f8a2 	bl	80025b0 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004470:	f7fe f89e 	bl	80025b0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e122      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004482:	4b69      	ldr	r3, [pc, #420]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <HAL_RCC_OscConfig+0x5cc>
 8004490:	e01b      	b.n	80044ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004492:	4b65      	ldr	r3, [pc, #404]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004498:	4a63      	ldr	r2, [pc, #396]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fe f885 	bl	80025b0 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044aa:	f7fe f881 	bl	80025b0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e105      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ef      	bne.n	80044aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80f9 	beq.w	80046c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f040 80cf 	bne.w	800467c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044de:	4b52      	ldr	r3, [pc, #328]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0203 	and.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d12c      	bne.n	800454c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	3b01      	subs	r3, #1
 80044fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d123      	bne.n	800454c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d11b      	bne.n	800454c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d113      	bne.n	800454c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	3b01      	subs	r3, #1
 8004532:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d109      	bne.n	800454c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d071      	beq.n	8004630 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b0c      	cmp	r3, #12
 8004550:	d068      	beq.n	8004624 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004552:	4b35      	ldr	r3, [pc, #212]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800455e:	4b32      	ldr	r3, [pc, #200]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0ac      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800456e:	4b2e      	ldr	r3, [pc, #184]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2d      	ldr	r2, [pc, #180]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004574:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004578:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800457a:	f7fe f819 	bl	80025b0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7fe f815 	bl	80025b0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e099      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004594:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	4b21      	ldr	r3, [pc, #132]	@ (800462c <HAL_RCC_OscConfig+0x788>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80045b0:	3a01      	subs	r2, #1
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	4311      	orrs	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ba:	0212      	lsls	r2, r2, #8
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045c2:	0852      	lsrs	r2, r2, #1
 80045c4:	3a01      	subs	r2, #1
 80045c6:	0552      	lsls	r2, r2, #21
 80045c8:	4311      	orrs	r1, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045ce:	0852      	lsrs	r2, r2, #1
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0652      	lsls	r2, r2, #25
 80045d4:	4311      	orrs	r1, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045da:	06d2      	lsls	r2, r2, #27
 80045dc:	430a      	orrs	r2, r1
 80045de:	4912      	ldr	r1, [pc, #72]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045e4:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 80045f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045fc:	f7fd ffd8 	bl	80025b0 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd ffd4 	bl	80025b0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e058      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <HAL_RCC_OscConfig+0x784>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004622:	e050      	b.n	80046c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e04f      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
 8004628:	40021000 	.word	0x40021000
 800462c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004630:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d144      	bne.n	80046c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800463c:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a23      	ldr	r2, [pc, #140]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 8004642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004646:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a20      	ldr	r2, [pc, #128]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 800464e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004652:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004654:	f7fd ffac 	bl	80025b0 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7fd ffa8 	bl	80025b0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e02c      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466e:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x7b8>
 800467a:	e024      	b.n	80046c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d01f      	beq.n	80046c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004682:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a12      	ldr	r2, [pc, #72]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 8004688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800468c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd ff8f 	bl	80025b0 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fd ff8b 	bl	80025b0 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e00f      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	4905      	ldr	r1, [pc, #20]	@ (80046d0 <HAL_RCC_OscConfig+0x82c>)
 80046ba:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_RCC_OscConfig+0x830>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60cb      	str	r3, [r1, #12]
 80046c0:	e001      	b.n	80046c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	feeefffc 	.word	0xfeeefffc

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e11d      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b90      	ldr	r3, [pc, #576]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d910      	bls.n	8004720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 020f 	bic.w	r2, r3, #15
 8004706:	498b      	ldr	r1, [pc, #556]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b89      	ldr	r3, [pc, #548]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e105      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b81      	ldr	r3, [pc, #516]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004738:	429a      	cmp	r2, r3
 800473a:	d908      	bls.n	800474e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b7e      	ldr	r3, [pc, #504]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	497b      	ldr	r1, [pc, #492]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d079      	beq.n	800484e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d11e      	bne.n	80047a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	4b75      	ldr	r3, [pc, #468]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0dc      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004772:	f000 fa09 	bl	8004b88 <RCC_GetSysClockFreqFromPLLSource>
 8004776:	4603      	mov	r3, r0
 8004778:	4a70      	ldr	r2, [pc, #448]	@ (800493c <HAL_RCC_ClockConfig+0x264>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d946      	bls.n	800480c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800477e:	4b6e      	ldr	r3, [pc, #440]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d140      	bne.n	800480c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478a:	4b6b      	ldr	r3, [pc, #428]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004792:	4a69      	ldr	r2, [pc, #420]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800479a:	2380      	movs	r3, #128	@ 0x80
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e035      	b.n	800480c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a8:	4b63      	ldr	r3, [pc, #396]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d115      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b9      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047c0:	4b5d      	ldr	r3, [pc, #372]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0ad      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d0:	4b59      	ldr	r3, [pc, #356]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a5      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80047e0:	f000 f8b4 	bl	800494c <HAL_RCC_GetSysClockFreq>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4a55      	ldr	r2, [pc, #340]	@ (800493c <HAL_RCC_ClockConfig+0x264>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d90f      	bls.n	800480c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047ec:	4b52      	ldr	r3, [pc, #328]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004800:	4a4d      	ldr	r2, [pc, #308]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004806:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004808:	2380      	movs	r3, #128	@ 0x80
 800480a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800480c:	4b4a      	ldr	r3, [pc, #296]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 0203 	bic.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4947      	ldr	r1, [pc, #284]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481e:	f7fd fec7 	bl	80025b0 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004824:	e00a      	b.n	800483c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004826:	f7fd fec3 	bl	80025b0 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e077      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483c:	4b3e      	ldr	r3, [pc, #248]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 020c 	and.w	r2, r3, #12
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	429a      	cmp	r2, r3
 800484c:	d1eb      	bne.n	8004826 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b80      	cmp	r3, #128	@ 0x80
 8004852:	d105      	bne.n	8004860 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004854:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a37      	ldr	r2, [pc, #220]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800485a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004878:	429a      	cmp	r2, r3
 800487a:	d208      	bcs.n	800488e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	492b      	ldr	r1, [pc, #172]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800488e:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d210      	bcs.n	80048be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 020f 	bic.w	r2, r3, #15
 80048a4:	4923      	ldr	r1, [pc, #140]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ac:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <HAL_RCC_ClockConfig+0x25c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d001      	beq.n	80048be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e036      	b.n	800492c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4918      	ldr	r1, [pc, #96]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4910      	ldr	r1, [pc, #64]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048fc:	f000 f826 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <HAL_RCC_ClockConfig+0x260>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	490c      	ldr	r1, [pc, #48]	@ (8004940 <HAL_RCC_ClockConfig+0x268>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <HAL_RCC_ClockConfig+0x26c>)
 800491a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <HAL_RCC_ClockConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd fdf5 	bl	8002510 <HAL_InitTick>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]

  return status;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40022000 	.word	0x40022000
 8004938:	40021000 	.word	0x40021000
 800493c:	04c4b400 	.word	0x04c4b400
 8004940:	0800bce0 	.word	0x0800bce0
 8004944:	2004008c 	.word	0x2004008c
 8004948:	20040090 	.word	0x20040090

0800494c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	@ 0x24
 8004950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004964:	4b3b      	ldr	r3, [pc, #236]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x34>
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d121      	bne.n	80049be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d11e      	bne.n	80049be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004980:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800498c:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e005      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10d      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d102      	bne.n	80049ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049c4:	4b25      	ldr	r3, [pc, #148]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	e004      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d0:	4b23      	ldr	r3, [pc, #140]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80049d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d134      	bne.n	8004a44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049da:	4b1e      	ldr	r3, [pc, #120]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d003      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0xac>
 80049f0:	e005      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049f2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80049f4:	617b      	str	r3, [r7, #20]
      break;
 80049f6:	e005      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80049fa:	617b      	str	r3, [r7, #20]
      break;
 80049fc:	e002      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	617b      	str	r3, [r7, #20]
      break;
 8004a02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	3301      	adds	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	fb03 f202 	mul.w	r2, r3, r2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	0e5b      	lsrs	r3, r3, #25
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	3301      	adds	r3, #1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a44:	69bb      	ldr	r3, [r7, #24]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3724      	adds	r7, #36	@ 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800bcf8 	.word	0x0800bcf8
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	007a1200 	.word	0x007a1200

08004a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a68:	4b03      	ldr	r3, [pc, #12]	@ (8004a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	2004008c 	.word	0x2004008c

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a80:	f7ff fff0 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b06      	ldr	r3, [pc, #24]	@ (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4904      	ldr	r1, [pc, #16]	@ (8004aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	0800bcf0 	.word	0x0800bcf0

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004aac:	f7ff ffda 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0adb      	lsrs	r3, r3, #11
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	0800bcf0 	.word	0x0800bcf0

08004ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ae0:	4b27      	ldr	r3, [pc, #156]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004aec:	f7ff f906 	bl	8003cfc <HAL_PWREx_GetVoltageRange>
 8004af0:	6178      	str	r0, [r7, #20]
 8004af2:	e014      	b.n	8004b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af8:	4a21      	ldr	r2, [pc, #132]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b00:	4b1f      	ldr	r3, [pc, #124]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b0c:	f7ff f8f6 	bl	8003cfc <HAL_PWREx_GetVoltageRange>
 8004b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b12:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	4a1a      	ldr	r2, [pc, #104]	@ (8004b80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b24:	d10b      	bne.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b80      	cmp	r3, #128	@ 0x80
 8004b2a:	d913      	bls.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b30:	d902      	bls.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b32:	2302      	movs	r3, #2
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e00d      	b.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b38:	2301      	movs	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	e00a      	b.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b42:	d902      	bls.n	8004b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b44:	2302      	movs	r3, #2
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	e004      	b.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b70      	cmp	r3, #112	@ 0x70
 8004b4e:	d101      	bne.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b50:	2301      	movs	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 020f 	bic.w	r2, r3, #15
 8004b5c:	4909      	ldr	r1, [pc, #36]	@ (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40022000 	.word	0x40022000

08004b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d00b      	beq.n	8004bb6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d825      	bhi.n	8004bf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d008      	beq.n	8004bbc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11f      	bne.n	8004bf0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004bb0:	4b25      	ldr	r3, [pc, #148]	@ (8004c48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004bb2:	613b      	str	r3, [r7, #16]
    break;
 8004bb4:	e01f      	b.n	8004bf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004bb6:	4b25      	ldr	r3, [pc, #148]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004bb8:	613b      	str	r3, [r7, #16]
    break;
 8004bba:	e01c      	b.n	8004bf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bbc:	4b21      	ldr	r3, [pc, #132]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e005      	b.n	8004be4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004be4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	613b      	str	r3, [r7, #16]
    break;
 8004bee:	e002      	b.n	8004bf6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
    break;
 8004bf4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bf6:	4b13      	ldr	r3, [pc, #76]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	3301      	adds	r3, #1
 8004c02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c04:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	fb03 f202 	mul.w	r2, r3, r2
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c1c:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0e5b      	lsrs	r3, r3, #25
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	3301      	adds	r3, #1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c36:	683b      	ldr	r3, [r7, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40021000 	.word	0x40021000
 8004c48:	00f42400 	.word	0x00f42400
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	0800bcf8 	.word	0x0800bcf8

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c60:	2300      	movs	r3, #0
 8004c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d040      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c74:	2b80      	cmp	r3, #128	@ 0x80
 8004c76:	d02a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c78:	2b80      	cmp	r3, #128	@ 0x80
 8004c7a:	d825      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c7c:	2b60      	cmp	r3, #96	@ 0x60
 8004c7e:	d026      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c80:	2b60      	cmp	r3, #96	@ 0x60
 8004c82:	d821      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c84:	2b40      	cmp	r3, #64	@ 0x40
 8004c86:	d006      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c88:	2b40      	cmp	r3, #64	@ 0x40
 8004c8a:	d81d      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d010      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c94:	e018      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c96:	4b89      	ldr	r3, [pc, #548]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a88      	ldr	r2, [pc, #544]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ca2:	e015      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fb02 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cb4:	e00c      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3320      	adds	r3, #32
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fbed 	bl	800549c <RCCEx_PLLSAI2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	74fb      	strb	r3, [r7, #19]
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd6:	4b79      	ldr	r3, [pc, #484]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cdc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce4:	4975      	ldr	r1, [pc, #468]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004cec:	e001      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d047      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d030      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d0c:	d82a      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d12:	d02a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d18:	d824      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d24:	d81e      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2e:	d010      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d30:	e018      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d32:	4b62      	ldr	r3, [pc, #392]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4a61      	ldr	r2, [pc, #388]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d3e:	e015      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fab4 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3320      	adds	r3, #32
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fb9f 	bl	800549c <RCCEx_PLLSAI2_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d62:	e003      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	74fb      	strb	r3, [r7, #19]
      break;
 8004d68:	e000      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d72:	4b52      	ldr	r3, [pc, #328]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d80:	494e      	ldr	r1, [pc, #312]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004d88:	e001      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 809f 	beq.w	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004da0:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	4a40      	ldr	r2, [pc, #256]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dde:	f7fd fbe7 	bl	80025b0 <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de4:	e009      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fd fbe3 	bl	80025b0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d902      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	74fb      	strb	r3, [r7, #19]
        break;
 8004df8:	e005      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dfa:	4b31      	ldr	r3, [pc, #196]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ef      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e06:	7cfb      	ldrb	r3, [r7, #19]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d15b      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01f      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d019      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e36:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e46:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e56:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d016      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fba2 	bl	80025b0 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6e:	e00b      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fd fb9e 	bl	80025b0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d902      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	74fb      	strb	r3, [r7, #19]
            break;
 8004e86:	e006      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e88:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0ec      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eac:	4903      	ldr	r1, [pc, #12]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb6:	7cfb      	ldrb	r3, [r7, #19]
 8004eb8:	74bb      	strb	r3, [r7, #18]
 8004eba:	e005      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec8:	7c7b      	ldrb	r3, [r7, #17]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d105      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ece:	4ba0      	ldr	r3, [pc, #640]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed2:	4a9f      	ldr	r2, [pc, #636]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	f023 0203 	bic.w	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	4996      	ldr	r1, [pc, #600]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f08:	4b91      	ldr	r3, [pc, #580]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	f023 020c 	bic.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	498e      	ldr	r1, [pc, #568]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f2a:	4b89      	ldr	r3, [pc, #548]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f38:	4985      	ldr	r1, [pc, #532]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f4c:	4b80      	ldr	r3, [pc, #512]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f5a:	497d      	ldr	r1, [pc, #500]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f6e:	4b78      	ldr	r3, [pc, #480]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7c:	4974      	ldr	r1, [pc, #464]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f90:	4b6f      	ldr	r3, [pc, #444]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9e:	496c      	ldr	r1, [pc, #432]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb2:	4b67      	ldr	r3, [pc, #412]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc0:	4963      	ldr	r1, [pc, #396]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fe2:	495b      	ldr	r1, [pc, #364]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ff6:	4b56      	ldr	r3, [pc, #344]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	4952      	ldr	r1, [pc, #328]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005018:	4b4d      	ldr	r3, [pc, #308]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	494a      	ldr	r1, [pc, #296]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800503a:	4b45      	ldr	r3, [pc, #276]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005040:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005048:	4941      	ldr	r1, [pc, #260]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800505c:	4b3c      	ldr	r3, [pc, #240]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800506a:	4939      	ldr	r1, [pc, #228]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d028      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800507e:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005084:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508c:	4930      	ldr	r1, [pc, #192]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800509c:	d106      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a8:	60d3      	str	r3, [r2, #12]
 80050aa:	e011      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2101      	movs	r1, #1
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f8f9 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050c6:	7cfb      	ldrb	r3, [r7, #19]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050e4:	d108      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80050e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ec:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80050f6:	e012      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050fe:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005100:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005104:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005116:	490e      	ldr	r1, [pc, #56]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005126:	d106      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005128:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a08      	ldr	r2, [pc, #32]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005132:	60d3      	str	r3, [r2, #12]
 8005134:	e020      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800513a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005140:	4b03      	ldr	r3, [pc, #12]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a02      	ldr	r2, [pc, #8]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514a:	60d3      	str	r3, [r2, #12]
 800514c:	e014      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800515c:	d10c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f8a5 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d028      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005184:	4b4a      	ldr	r3, [pc, #296]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005192:	4947      	ldr	r1, [pc, #284]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800519e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051a2:	d106      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a4:	4b42      	ldr	r3, [pc, #264]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a41      	ldr	r2, [pc, #260]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ae:	60d3      	str	r3, [r2, #12]
 80051b0:	e011      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	2101      	movs	r1, #1
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f876 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01e      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051e2:	4b33      	ldr	r3, [pc, #204]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f2:	492f      	ldr	r1, [pc, #188]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005204:	d10c      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	2102      	movs	r1, #2
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f851 	bl	80052b4 <RCCEx_PLLSAI1_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800522c:	4b20      	ldr	r3, [pc, #128]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005232:	f023 0204 	bic.w	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523c:	491c      	ldr	r1, [pc, #112]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005250:	4b17      	ldr	r3, [pc, #92]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005256:	f023 0218 	bic.w	r2, r3, #24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	4913      	ldr	r1, [pc, #76]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005274:	4b0e      	ldr	r3, [pc, #56]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800527a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005284:	490a      	ldr	r1, [pc, #40]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005296:	d105      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4a04      	ldr	r2, [pc, #16]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000

080052b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052c2:	4b72      	ldr	r3, [pc, #456]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ce:	4b6f      	ldr	r3, [pc, #444]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0203 	and.w	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d103      	bne.n	80052e6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
       ||
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d142      	bne.n	800536c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
 80052ea:	e03f      	b.n	800536c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d018      	beq.n	8005326 <RCCEx_PLLSAI1_Config+0x72>
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d825      	bhi.n	8005344 <RCCEx_PLLSAI1_Config+0x90>
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d002      	beq.n	8005302 <RCCEx_PLLSAI1_Config+0x4e>
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d009      	beq.n	8005314 <RCCEx_PLLSAI1_Config+0x60>
 8005300:	e020      	b.n	8005344 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005302:	4b62      	ldr	r3, [pc, #392]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11d      	bne.n	800534a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005312:	e01a      	b.n	800534a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005314:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d116      	bne.n	800534e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005324:	e013      	b.n	800534e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005326:	4b59      	ldr	r3, [pc, #356]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10f      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005332:	4b56      	ldr	r3, [pc, #344]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005342:	e006      	b.n	8005352 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]
      break;
 8005348:	e004      	b.n	8005354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800534a:	bf00      	nop
 800534c:	e002      	b.n	8005354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800534e:	bf00      	nop
 8005350:	e000      	b.n	8005354 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005352:	bf00      	nop
    }

    if(status == HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800535a:	4b4c      	ldr	r3, [pc, #304]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4949      	ldr	r1, [pc, #292]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005368:	4313      	orrs	r3, r2
 800536a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 8086 	bne.w	8005480 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005374:	4b45      	ldr	r3, [pc, #276]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a44      	ldr	r2, [pc, #272]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800537a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800537e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005380:	f7fd f916 	bl	80025b0 <HAL_GetTick>
 8005384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005386:	e009      	b.n	800539c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005388:	f7fd f912 	bl	80025b0 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d902      	bls.n	800539c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	73fb      	strb	r3, [r7, #15]
        break;
 800539a:	e005      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800539c:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ef      	bne.n	8005388 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d168      	bne.n	8005480 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d113      	bne.n	80053dc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053b4:	4b35      	ldr	r3, [pc, #212]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	4b35      	ldr	r3, [pc, #212]	@ (8005490 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6892      	ldr	r2, [r2, #8]
 80053c0:	0211      	lsls	r1, r2, #8
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	06d2      	lsls	r2, r2, #27
 80053c8:	4311      	orrs	r1, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6852      	ldr	r2, [r2, #4]
 80053ce:	3a01      	subs	r2, #1
 80053d0:	0112      	lsls	r2, r2, #4
 80053d2:	430a      	orrs	r2, r1
 80053d4:	492d      	ldr	r1, [pc, #180]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	610b      	str	r3, [r1, #16]
 80053da:	e02d      	b.n	8005438 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d115      	bne.n	800540e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053e2:	4b2a      	ldr	r3, [pc, #168]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005494 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e8:	4013      	ands	r3, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6892      	ldr	r2, [r2, #8]
 80053ee:	0211      	lsls	r1, r2, #8
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6912      	ldr	r2, [r2, #16]
 80053f4:	0852      	lsrs	r2, r2, #1
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0552      	lsls	r2, r2, #21
 80053fa:	4311      	orrs	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6852      	ldr	r2, [r2, #4]
 8005400:	3a01      	subs	r2, #1
 8005402:	0112      	lsls	r2, r2, #4
 8005404:	430a      	orrs	r2, r1
 8005406:	4921      	ldr	r1, [pc, #132]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005408:	4313      	orrs	r3, r2
 800540a:	610b      	str	r3, [r1, #16]
 800540c:	e014      	b.n	8005438 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540e:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	4b21      	ldr	r3, [pc, #132]	@ (8005498 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6892      	ldr	r2, [r2, #8]
 800541a:	0211      	lsls	r1, r2, #8
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6952      	ldr	r2, [r2, #20]
 8005420:	0852      	lsrs	r2, r2, #1
 8005422:	3a01      	subs	r2, #1
 8005424:	0652      	lsls	r2, r2, #25
 8005426:	4311      	orrs	r1, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6852      	ldr	r2, [r2, #4]
 800542c:	3a01      	subs	r2, #1
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	430a      	orrs	r2, r1
 8005432:	4916      	ldr	r1, [pc, #88]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005438:	4b14      	ldr	r3, [pc, #80]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a13      	ldr	r2, [pc, #76]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800543e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fd f8b4 	bl	80025b0 <HAL_GetTick>
 8005448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800544a:	e009      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800544c:	f7fd f8b0 	bl	80025b0 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d902      	bls.n	8005460 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	73fb      	strb	r3, [r7, #15]
          break;
 800545e:	e005      	b.n	800546c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005460:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ef      	beq.n	800544c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	4904      	ldr	r1, [pc, #16]	@ (800548c <RCCEx_PLLSAI1_Config+0x1d8>)
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	07ff800f 	.word	0x07ff800f
 8005494:	ff9f800f 	.word	0xff9f800f
 8005498:	f9ff800f 	.word	0xf9ff800f

0800549c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054aa:	4b72      	ldr	r3, [pc, #456]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00e      	beq.n	80054d4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0203 	and.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d103      	bne.n	80054ce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d142      	bne.n	8005554 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
 80054d2:	e03f      	b.n	8005554 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d018      	beq.n	800550e <RCCEx_PLLSAI2_Config+0x72>
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d825      	bhi.n	800552c <RCCEx_PLLSAI2_Config+0x90>
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <RCCEx_PLLSAI2_Config+0x4e>
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d009      	beq.n	80054fc <RCCEx_PLLSAI2_Config+0x60>
 80054e8:	e020      	b.n	800552c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ea:	4b62      	ldr	r3, [pc, #392]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11d      	bne.n	8005532 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fa:	e01a      	b.n	8005532 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550c:	e013      	b.n	8005536 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800550e:	4b59      	ldr	r3, [pc, #356]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800551a:	4b56      	ldr	r3, [pc, #344]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800552a:	e006      	b.n	800553a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e004      	b.n	800553c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800553a:	bf00      	nop
    }

    if(status == HAL_OK)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005542:	4b4c      	ldr	r3, [pc, #304]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f023 0203 	bic.w	r2, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4949      	ldr	r1, [pc, #292]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005550:	4313      	orrs	r3, r2
 8005552:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8086 	bne.w	8005668 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800555c:	4b45      	ldr	r3, [pc, #276]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a44      	ldr	r2, [pc, #272]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fd f822 	bl	80025b0 <HAL_GetTick>
 800556c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800556e:	e009      	b.n	8005584 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005570:	f7fd f81e 	bl	80025b0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d902      	bls.n	8005584 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
        break;
 8005582:	e005      	b.n	8005590 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005584:	4b3b      	ldr	r3, [pc, #236]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ef      	bne.n	8005570 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d168      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d113      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800559c:	4b35      	ldr	r3, [pc, #212]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
 80055a8:	0211      	lsls	r1, r2, #8
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68d2      	ldr	r2, [r2, #12]
 80055ae:	06d2      	lsls	r2, r2, #27
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6852      	ldr	r2, [r2, #4]
 80055b6:	3a01      	subs	r2, #1
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	430a      	orrs	r2, r1
 80055bc:	492d      	ldr	r1, [pc, #180]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	614b      	str	r3, [r1, #20]
 80055c2:	e02d      	b.n	8005620 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d115      	bne.n	80055f6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <RCCEx_PLLSAI2_Config+0x1e0>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6892      	ldr	r2, [r2, #8]
 80055d6:	0211      	lsls	r1, r2, #8
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6912      	ldr	r2, [r2, #16]
 80055dc:	0852      	lsrs	r2, r2, #1
 80055de:	3a01      	subs	r2, #1
 80055e0:	0552      	lsls	r2, r2, #21
 80055e2:	4311      	orrs	r1, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6852      	ldr	r2, [r2, #4]
 80055e8:	3a01      	subs	r2, #1
 80055ea:	0112      	lsls	r2, r2, #4
 80055ec:	430a      	orrs	r2, r1
 80055ee:	4921      	ldr	r1, [pc, #132]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	614b      	str	r3, [r1, #20]
 80055f4:	e014      	b.n	8005620 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	4b21      	ldr	r3, [pc, #132]	@ (8005680 <RCCEx_PLLSAI2_Config+0x1e4>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6892      	ldr	r2, [r2, #8]
 8005602:	0211      	lsls	r1, r2, #8
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6952      	ldr	r2, [r2, #20]
 8005608:	0852      	lsrs	r2, r2, #1
 800560a:	3a01      	subs	r2, #1
 800560c:	0652      	lsls	r2, r2, #25
 800560e:	4311      	orrs	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6852      	ldr	r2, [r2, #4]
 8005614:	3a01      	subs	r2, #1
 8005616:	0112      	lsls	r2, r2, #4
 8005618:	430a      	orrs	r2, r1
 800561a:	4916      	ldr	r1, [pc, #88]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800561c:	4313      	orrs	r3, r2
 800561e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005620:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fc ffc0 	bl	80025b0 <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005632:	e009      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005634:	f7fc ffbc 	bl	80025b0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
          break;
 8005646:	e005      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005648:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	4904      	ldr	r1, [pc, #16]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005664:	4313      	orrs	r3, r2
 8005666:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000
 8005678:	07ff800f 	.word	0x07ff800f
 800567c:	ff9f800f 	.word	0xff9f800f
 8005680:	f9ff800f 	.word	0xf9ff800f

08005684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e095      	b.n	80057c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a6:	d009      	beq.n	80056bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
 80056ae:	e005      	b.n	80056bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fc fb20 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056fc:	d902      	bls.n	8005704 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e002      	b.n	800570a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005708:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005712:	d007      	beq.n	8005724 <HAL_SPI_Init+0xa0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800571c:	d002      	beq.n	8005724 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	ea42 0103 	orr.w	r1, r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 0204 	and.w	r2, r3, #4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b088      	sub	sp, #32
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057da:	f7fc fee9 	bl	80025b0 <HAL_GetTick>
 80057de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
 80057f2:	e15c      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_Transmit+0x36>
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e154      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Transmit+0x48>
 800580e:	2302      	movs	r3, #2
 8005810:	e14d      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2203      	movs	r2, #3
 800581e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005864:	d10f      	bne.n	8005886 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005874:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005884:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	d007      	beq.n	80058a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ac:	d952      	bls.n	8005954 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_SPI_Transmit+0xf2>
 80058b6:	8b7b      	ldrh	r3, [r7, #26]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d145      	bne.n	8005948 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	881a      	ldrh	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058cc:	1c9a      	adds	r2, r3, #2
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058e0:	e032      	b.n	8005948 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d112      	bne.n	8005916 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005914:	e018      	b.n	8005948 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005916:	f7fc fe4b 	bl	80025b0 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d803      	bhi.n	800592e <HAL_SPI_Transmit+0x164>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592c:	d102      	bne.n	8005934 <HAL_SPI_Transmit+0x16a>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0b2      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1c7      	bne.n	80058e2 <HAL_SPI_Transmit+0x118>
 8005952:	e083      	b.n	8005a5c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Transmit+0x198>
 800595c:	8b7b      	ldrh	r3, [r7, #26]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d177      	bne.n	8005a52 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d912      	bls.n	8005992 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	881a      	ldrh	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b02      	subs	r3, #2
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005990:	e05f      	b.n	8005a52 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	7812      	ldrb	r2, [r2, #0]
 800599e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059b8:	e04b      	b.n	8005a52 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d12b      	bne.n	8005a20 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d912      	bls.n	80059f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	1c9a      	adds	r2, r3, #2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b02      	subs	r3, #2
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059f6:	e02c      	b.n	8005a52 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a1e:	e018      	b.n	8005a52 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a20:	f7fc fdc6 	bl	80025b0 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d803      	bhi.n	8005a38 <HAL_SPI_Transmit+0x26e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Transmit+0x274>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e02d      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ae      	bne.n	80059ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fb65 	bl	8006130 <SPI_EndRxTxTransaction>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
  }
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	@ 0x28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac8:	f7fc fd72 	bl	80025b0 <HAL_GetTick>
 8005acc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ad4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005ae0:	887b      	ldrh	r3, [r7, #2]
 8005ae2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ae4:	7ffb      	ldrb	r3, [r7, #31]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d00c      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x4e>
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af0:	d106      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x4a>
 8005afa:	7ffb      	ldrb	r3, [r7, #31]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d001      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
 8005b02:	e1f3      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x60>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x60>
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1e8      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_SPI_TransmitReceive+0x72>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e1e1      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d003      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2205      	movs	r2, #5
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	887a      	ldrh	r2, [r7, #2]
 8005b54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	887a      	ldrh	r2, [r7, #2]
 8005b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b86:	d802      	bhi.n	8005b8e <HAL_SPI_TransmitReceive+0xd8>
 8005b88:	8abb      	ldrh	r3, [r7, #20]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d908      	bls.n	8005ba0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	e007      	b.n	8005bb0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bba:	2b40      	cmp	r3, #64	@ 0x40
 8005bbc:	d007      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bd6:	f240 8083 	bls.w	8005ce0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x132>
 8005be2:	8afb      	ldrh	r3, [r7, #22]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d16f      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0c:	e05c      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d11b      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x19e>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x19e>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d113      	bne.n	8005c54 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d11c      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0x1e6>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c9c:	f7fc fc88 	bl	80025b0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d80d      	bhi.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d009      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e111      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d19d      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x158>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d197      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x158>
 8005cde:	e0e5      	b.n	8005eac <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x23a>
 8005ce8:	8afb      	ldrh	r3, [r7, #22]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f040 80d1 	bne.w	8005e92 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d912      	bls.n	8005d20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	881a      	ldrh	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b02      	subs	r3, #2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d1e:	e0b8      	b.n	8005e92 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d46:	e0a4      	b.n	8005e92 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d134      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02f      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d12c      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d912      	bls.n	8005d96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b02      	subs	r3, #2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d94:	e012      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d148      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x3aa>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d042      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d923      	bls.n	8005e2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	b292      	uxth	r2, r2
 8005df2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	1c9a      	adds	r2, r3, #2
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b02      	subs	r3, #2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d81f      	bhi.n	8005e5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e016      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f103 020c 	add.w	r2, r3, #12
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e60:	f7fc fba6 	bl	80025b0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d803      	bhi.n	8005e78 <HAL_SPI_TransmitReceive+0x3c2>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_TransmitReceive+0x3c8>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d109      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e02c      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f af55 	bne.w	8005d48 <HAL_SPI_TransmitReceive+0x292>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f47f af4e 	bne.w	8005d48 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f93d 	bl	8006130 <SPI_EndRxTxTransaction>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e00e      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3728      	adds	r7, #40	@ 0x28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f04:	f7fc fb54 	bl	80025b0 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4413      	add	r3, r2
 8005f12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f14:	f7fc fb4c 	bl	80025b0 <HAL_GetTick>
 8005f18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f1a:	4b39      	ldr	r3, [pc, #228]	@ (8006000 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	015b      	lsls	r3, r3, #5
 8005f20:	0d1b      	lsrs	r3, r3, #20
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f2a:	e054      	b.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f32:	d050      	beq.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f34:	f7fc fb3c 	bl	80025b0 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d902      	bls.n	8005f4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d13d      	bne.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f62:	d111      	bne.n	8005f88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6c:	d004      	beq.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f76:	d107      	bne.n	8005f88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f90:	d10f      	bne.n	8005fb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e017      	b.n	8005ff6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d19b      	bne.n	8005f2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2004008c 	.word	0x2004008c

08006004 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006016:	f7fc facb 	bl	80025b0 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006026:	f7fc fac3 	bl	80025b0 <HAL_GetTick>
 800602a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006034:	4b3d      	ldr	r3, [pc, #244]	@ (800612c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	00da      	lsls	r2, r3, #3
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	0d1b      	lsrs	r3, r3, #20
 8006044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800604c:	e060      	b.n	8006110 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006054:	d107      	bne.n	8006066 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006064:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d050      	beq.n	8006110 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606e:	f7fc fa9f 	bl	80025b0 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607a:	429a      	cmp	r2, r3
 800607c:	d902      	bls.n	8006084 <SPI_WaitFifoStateUntilTimeout+0x80>
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	2b00      	cmp	r3, #0
 8006082:	d13d      	bne.n	8006100 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800609c:	d111      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a6:	d004      	beq.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b0:	d107      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ca:	d10f      	bne.n	80060ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e010      	b.n	8006122 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3b01      	subs	r3, #1
 800610e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d196      	bne.n	800604e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	@ 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	2004008c 	.word	0x2004008c

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff ff5b 	bl	8006004 <SPI_WaitFifoStateUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e027      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fec0 	bl	8005ef4 <SPI_WaitFlagStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e014      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff ff34 	bl	8006004 <SPI_WaitFifoStateUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e000      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e049      	b.n	8006262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fb fe0e 	bl	8001e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 fad8 	bl	80067b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e04f      	b.n	8006324 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <HAL_TIM_Base_Start_IT+0xc4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ae:	d018      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006334 <HAL_TIM_Base_Start_IT+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1e      	ldr	r2, [pc, #120]	@ (8006338 <HAL_TIM_Base_Start_IT+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <HAL_TIM_Base_Start_IT+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006340 <HAL_TIM_Base_Start_IT+0xd4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIM_Base_Start_IT+0x76>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a19      	ldr	r2, [pc, #100]	@ (8006344 <HAL_TIM_Base_Start_IT+0xd8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d115      	bne.n	800630e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	4b17      	ldr	r3, [pc, #92]	@ (8006348 <HAL_TIM_Base_Start_IT+0xdc>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b06      	cmp	r3, #6
 80062f2:	d015      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062fa:	d011      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	e008      	b.n	8006320 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e000      	b.n	8006322 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40000400 	.word	0x40000400
 8006338:	40000800 	.word	0x40000800
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40014000 	.word	0x40014000
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0201 	bic.w	r2, r2, #1
 8006362:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <HAL_TIM_Base_Stop_IT+0x48>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	f240 4344 	movw	r3, #1092	@ 0x444
 800637e:	4013      	ands	r3, r2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d107      	bne.n	8006394 <HAL_TIM_Base_Stop_IT+0x48>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0202 	mvn.w	r2, #2
 80063de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f9bc 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 80063fa:	e005      	b.n	8006408 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f9ae 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9bf 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d020      	beq.n	800645a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01b      	beq.n	800645a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0204 	mvn.w	r2, #4
 800642a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f996 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 8006446:	e005      	b.n	8006454 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f988 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f999 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01b      	beq.n	80064a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f06f 0208 	mvn.w	r2, #8
 8006476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2204      	movs	r2, #4
 800647c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f970 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 8006492:	e005      	b.n	80064a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f962 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f973 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01b      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f06f 0210 	mvn.w	r2, #16
 80064c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2208      	movs	r2, #8
 80064c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f94a 	bl	8006772 <HAL_TIM_IC_CaptureCallback>
 80064de:	e005      	b.n	80064ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f93c 	bl	800675e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f94d 	bl	8006786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f06f 0201 	mvn.w	r2, #1
 800650e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f91a 	bl	800674a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fb08 	bl	8006b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb00 	bl	8006b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f907 	bl	800679a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0220 	mvn.w	r2, #32
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fac8 	bl	8006b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_ConfigClockSource+0x1c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e0b6      	b.n	8006742 <HAL_TIM_ConfigClockSource+0x18a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006610:	d03e      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0xd8>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006616:	f200 8087 	bhi.w	8006728 <HAL_TIM_ConfigClockSource+0x170>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661e:	f000 8086 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x176>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006626:	d87f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006628:	2b70      	cmp	r3, #112	@ 0x70
 800662a:	d01a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0xaa>
 800662c:	2b70      	cmp	r3, #112	@ 0x70
 800662e:	d87b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006630:	2b60      	cmp	r3, #96	@ 0x60
 8006632:	d050      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006634:	2b60      	cmp	r3, #96	@ 0x60
 8006636:	d877      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006638:	2b50      	cmp	r3, #80	@ 0x50
 800663a:	d03c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0xfe>
 800663c:	2b50      	cmp	r3, #80	@ 0x50
 800663e:	d873      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d058      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d86f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b30      	cmp	r3, #48	@ 0x30
 800664a:	d064      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800664c:	2b30      	cmp	r3, #48	@ 0x30
 800664e:	d86b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d060      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d867      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05c      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d05a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006660:	e062      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006672:	f000 f9bd 	bl	80069f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	609a      	str	r2, [r3, #8]
      break;
 800668e:	e04f      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a0:	f000 f9a6 	bl	80069f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b2:	609a      	str	r2, [r3, #8]
      break;
 80066b4:	e03c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 f91a 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2150      	movs	r1, #80	@ 0x50
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f973 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80066d4:	e02c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 f939 	bl	800695a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2160      	movs	r1, #96	@ 0x60
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f963 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 80066f4:	e01c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 f8fa 	bl	80068fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2140      	movs	r1, #64	@ 0x40
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f953 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 8006714:	e00c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f000 f94a 	bl	80069ba <TIM_ITRx_SetConfig>
      break;
 8006726:	e003      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
      break;
 800672c:	e000      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800672e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a46      	ldr	r2, [pc, #280]	@ (80068dc <TIM_Base_SetConfig+0x12c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a43      	ldr	r2, [pc, #268]	@ (80068e0 <TIM_Base_SetConfig+0x130>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a42      	ldr	r2, [pc, #264]	@ (80068e4 <TIM_Base_SetConfig+0x134>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a41      	ldr	r2, [pc, #260]	@ (80068e8 <TIM_Base_SetConfig+0x138>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a40      	ldr	r2, [pc, #256]	@ (80068ec <TIM_Base_SetConfig+0x13c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d108      	bne.n	8006802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a35      	ldr	r2, [pc, #212]	@ (80068dc <TIM_Base_SetConfig+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01f      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006810:	d01b      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a32      	ldr	r2, [pc, #200]	@ (80068e0 <TIM_Base_SetConfig+0x130>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d017      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a31      	ldr	r2, [pc, #196]	@ (80068e4 <TIM_Base_SetConfig+0x134>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a30      	ldr	r2, [pc, #192]	@ (80068e8 <TIM_Base_SetConfig+0x138>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00f      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2f      	ldr	r2, [pc, #188]	@ (80068ec <TIM_Base_SetConfig+0x13c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00b      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2e      	ldr	r2, [pc, #184]	@ (80068f0 <TIM_Base_SetConfig+0x140>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2d      	ldr	r2, [pc, #180]	@ (80068f4 <TIM_Base_SetConfig+0x144>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_Base_SetConfig+0x9a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <TIM_Base_SetConfig+0x148>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d108      	bne.n	800685c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <TIM_Base_SetConfig+0x12c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <TIM_Base_SetConfig+0x13c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <TIM_Base_SetConfig+0x140>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <TIM_Base_SetConfig+0x144>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <TIM_Base_SetConfig+0x148>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d103      	bne.n	80068b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d105      	bne.n	80068ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]
  }
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40013400 	.word	0x40013400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800

080068fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f023 030a 	bic.w	r3, r3, #10
 8006938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b087      	sub	sp, #28
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0210 	bic.w	r2, r3, #16
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	031b      	lsls	r3, r3, #12
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006996:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f043 0307 	orr.w	r3, r3, #7
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	609a      	str	r2, [r3, #8]
}
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	021a      	lsls	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	371c      	adds	r7, #28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e068      	b.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2d      	ldr	r2, [pc, #180]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d108      	bne.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01d      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aba:	d018      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1a      	ldr	r2, [pc, #104]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a18      	ldr	r2, [pc, #96]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a13      	ldr	r2, [pc, #76]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a14      	ldr	r2, [pc, #80]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10c      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	40000400 	.word	0x40000400
 8006b34:	40000800 	.word	0x40000800
 8006b38:	40000c00 	.word	0x40000c00
 8006b3c:	40014000 	.word	0x40014000

08006b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e042      	b.n	8006c14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fb f9e7 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	@ 0x24
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fc7c 	bl	80074c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f97d 	bl	8006ecc <UART_SetConfig>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e01b      	b.n	8006c14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fcfb 	bl	8007608 <UART_CheckIdleState>
 8006c12:	4603      	mov	r3, r0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	@ 0x28
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d17b      	bne.n	8006d2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_UART_Transmit+0x26>
 8006c3c:	88fb      	ldrh	r3, [r7, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e074      	b.n	8006d30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2221      	movs	r2, #33	@ 0x21
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c56:	f7fb fcab 	bl	80025b0 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c74:	d108      	bne.n	8006c88 <HAL_UART_Transmit+0x6c>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e003      	b.n	8006c90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c90:	e030      	b.n	8006cf4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2180      	movs	r1, #128	@ 0x80
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fd5d 	bl	800775c <UART_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e03d      	b.n	8006d30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc6:	b292      	uxth	r2, r2
 8006cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c8      	bne.n	8006c92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2140      	movs	r1, #64	@ 0x40
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fd26 	bl	800775c <UART_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e006      	b.n	8006d30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
  }
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	@ 0x28
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	f040 80b6 	bne.w	8006ec0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_UART_Receive+0x28>
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0ae      	b.n	8006ec2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2222      	movs	r2, #34	@ 0x22
 8006d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d7a:	f7fb fc19 	bl	80025b0 <HAL_GetTick>
 8006d7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d98:	d10e      	bne.n	8006db8 <HAL_UART_Receive+0x80>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <HAL_UART_Receive+0x76>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006da8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dac:	e02d      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	22ff      	movs	r2, #255	@ 0xff
 8006db2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006db6:	e028      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10d      	bne.n	8006ddc <HAL_UART_Receive+0xa4>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <HAL_UART_Receive+0x9a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	22ff      	movs	r2, #255	@ 0xff
 8006dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dd0:	e01b      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	227f      	movs	r2, #127	@ 0x7f
 8006dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dda:	e016      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de4:	d10d      	bne.n	8006e02 <HAL_UART_Receive+0xca>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <HAL_UART_Receive+0xc0>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	227f      	movs	r2, #127	@ 0x7f
 8006df2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006df6:	e008      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	223f      	movs	r2, #63	@ 0x3f
 8006dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e00:	e003      	b.n	8006e0a <HAL_UART_Receive+0xd2>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1a:	d108      	bne.n	8006e2e <HAL_UART_Receive+0xf6>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	e003      	b.n	8006e36 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e36:	e037      	b.n	8006ea8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2120      	movs	r1, #32
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fc8a 	bl	800775c <UART_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e033      	b.n	8006ec2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	8a7b      	ldrh	r3, [r7, #18]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3302      	adds	r3, #2
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	e00d      	b.n	8006e96 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	8a7b      	ldrh	r3, [r7, #18]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4013      	ands	r3, r2
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1c1      	bne.n	8006e38 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e000      	b.n	8006ec2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006ec0:	2302      	movs	r3, #2
  }
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed0:	b08c      	sub	sp, #48	@ 0x30
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4baa      	ldr	r3, [pc, #680]	@ (80071a4 <UART_SetConfig+0x2d8>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a9f      	ldr	r2, [pc, #636]	@ (80071a8 <UART_SetConfig+0x2dc>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f34:	4313      	orrs	r3, r2
 8006f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	f023 010f 	bic.w	r1, r3, #15
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a90      	ldr	r2, [pc, #576]	@ (80071ac <UART_SetConfig+0x2e0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d125      	bne.n	8006fbc <UART_SetConfig+0xf0>
 8006f70:	4b8f      	ldr	r3, [pc, #572]	@ (80071b0 <UART_SetConfig+0x2e4>)
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d81a      	bhi.n	8006fb4 <UART_SetConfig+0xe8>
 8006f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0xb8>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fa5 	.word	0x08006fa5
 8006f8c:	08006f9d 	.word	0x08006f9d
 8006f90:	08006fad 	.word	0x08006fad
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9a:	e116      	b.n	80071ca <UART_SetConfig+0x2fe>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa2:	e112      	b.n	80071ca <UART_SetConfig+0x2fe>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006faa:	e10e      	b.n	80071ca <UART_SetConfig+0x2fe>
 8006fac:	2308      	movs	r3, #8
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb2:	e10a      	b.n	80071ca <UART_SetConfig+0x2fe>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e106      	b.n	80071ca <UART_SetConfig+0x2fe>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7c      	ldr	r2, [pc, #496]	@ (80071b4 <UART_SetConfig+0x2e8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d138      	bne.n	8007038 <UART_SetConfig+0x16c>
 8006fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80071b0 <UART_SetConfig+0x2e4>)
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fcc:	f003 030c 	and.w	r3, r3, #12
 8006fd0:	2b0c      	cmp	r3, #12
 8006fd2:	d82d      	bhi.n	8007030 <UART_SetConfig+0x164>
 8006fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fdc <UART_SetConfig+0x110>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08007011 	.word	0x08007011
 8006fe0:	08007031 	.word	0x08007031
 8006fe4:	08007031 	.word	0x08007031
 8006fe8:	08007031 	.word	0x08007031
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007031 	.word	0x08007031
 8006ff4:	08007031 	.word	0x08007031
 8006ff8:	08007031 	.word	0x08007031
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007031 	.word	0x08007031
 8007004:	08007031 	.word	0x08007031
 8007008:	08007031 	.word	0x08007031
 800700c:	08007029 	.word	0x08007029
 8007010:	2300      	movs	r3, #0
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e0d8      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007018:	2302      	movs	r3, #2
 800701a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800701e:	e0d4      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007020:	2304      	movs	r3, #4
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007026:	e0d0      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007028:	2308      	movs	r3, #8
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702e:	e0cc      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007030:	2310      	movs	r3, #16
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007036:	e0c8      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a5e      	ldr	r2, [pc, #376]	@ (80071b8 <UART_SetConfig+0x2ec>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d125      	bne.n	800708e <UART_SetConfig+0x1c2>
 8007042:	4b5b      	ldr	r3, [pc, #364]	@ (80071b0 <UART_SetConfig+0x2e4>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800704c:	2b30      	cmp	r3, #48	@ 0x30
 800704e:	d016      	beq.n	800707e <UART_SetConfig+0x1b2>
 8007050:	2b30      	cmp	r3, #48	@ 0x30
 8007052:	d818      	bhi.n	8007086 <UART_SetConfig+0x1ba>
 8007054:	2b20      	cmp	r3, #32
 8007056:	d00a      	beq.n	800706e <UART_SetConfig+0x1a2>
 8007058:	2b20      	cmp	r3, #32
 800705a:	d814      	bhi.n	8007086 <UART_SetConfig+0x1ba>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <UART_SetConfig+0x19a>
 8007060:	2b10      	cmp	r3, #16
 8007062:	d008      	beq.n	8007076 <UART_SetConfig+0x1aa>
 8007064:	e00f      	b.n	8007086 <UART_SetConfig+0x1ba>
 8007066:	2300      	movs	r3, #0
 8007068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800706c:	e0ad      	b.n	80071ca <UART_SetConfig+0x2fe>
 800706e:	2302      	movs	r3, #2
 8007070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007074:	e0a9      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007076:	2304      	movs	r3, #4
 8007078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800707c:	e0a5      	b.n	80071ca <UART_SetConfig+0x2fe>
 800707e:	2308      	movs	r3, #8
 8007080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007084:	e0a1      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007086:	2310      	movs	r3, #16
 8007088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708c:	e09d      	b.n	80071ca <UART_SetConfig+0x2fe>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a4a      	ldr	r2, [pc, #296]	@ (80071bc <UART_SetConfig+0x2f0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d125      	bne.n	80070e4 <UART_SetConfig+0x218>
 8007098:	4b45      	ldr	r3, [pc, #276]	@ (80071b0 <UART_SetConfig+0x2e4>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a4:	d016      	beq.n	80070d4 <UART_SetConfig+0x208>
 80070a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070a8:	d818      	bhi.n	80070dc <UART_SetConfig+0x210>
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d00a      	beq.n	80070c4 <UART_SetConfig+0x1f8>
 80070ae:	2b80      	cmp	r3, #128	@ 0x80
 80070b0:	d814      	bhi.n	80070dc <UART_SetConfig+0x210>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <UART_SetConfig+0x1f0>
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	d008      	beq.n	80070cc <UART_SetConfig+0x200>
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x210>
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e082      	b.n	80071ca <UART_SetConfig+0x2fe>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ca:	e07e      	b.n	80071ca <UART_SetConfig+0x2fe>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d2:	e07a      	b.n	80071ca <UART_SetConfig+0x2fe>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070da:	e076      	b.n	80071ca <UART_SetConfig+0x2fe>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e2:	e072      	b.n	80071ca <UART_SetConfig+0x2fe>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a35      	ldr	r2, [pc, #212]	@ (80071c0 <UART_SetConfig+0x2f4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d12a      	bne.n	8007144 <UART_SetConfig+0x278>
 80070ee:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <UART_SetConfig+0x2e4>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070fc:	d01a      	beq.n	8007134 <UART_SetConfig+0x268>
 80070fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007102:	d81b      	bhi.n	800713c <UART_SetConfig+0x270>
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	d00c      	beq.n	8007124 <UART_SetConfig+0x258>
 800710a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800710e:	d815      	bhi.n	800713c <UART_SetConfig+0x270>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <UART_SetConfig+0x250>
 8007114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007118:	d008      	beq.n	800712c <UART_SetConfig+0x260>
 800711a:	e00f      	b.n	800713c <UART_SetConfig+0x270>
 800711c:	2300      	movs	r3, #0
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007122:	e052      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007124:	2302      	movs	r3, #2
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e04e      	b.n	80071ca <UART_SetConfig+0x2fe>
 800712c:	2304      	movs	r3, #4
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e04a      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007134:	2308      	movs	r3, #8
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e046      	b.n	80071ca <UART_SetConfig+0x2fe>
 800713c:	2310      	movs	r3, #16
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e042      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a17      	ldr	r2, [pc, #92]	@ (80071a8 <UART_SetConfig+0x2dc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d13a      	bne.n	80071c4 <UART_SetConfig+0x2f8>
 800714e:	4b18      	ldr	r3, [pc, #96]	@ (80071b0 <UART_SetConfig+0x2e4>)
 8007150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800715c:	d01a      	beq.n	8007194 <UART_SetConfig+0x2c8>
 800715e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007162:	d81b      	bhi.n	800719c <UART_SetConfig+0x2d0>
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007168:	d00c      	beq.n	8007184 <UART_SetConfig+0x2b8>
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716e:	d815      	bhi.n	800719c <UART_SetConfig+0x2d0>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <UART_SetConfig+0x2b0>
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007178:	d008      	beq.n	800718c <UART_SetConfig+0x2c0>
 800717a:	e00f      	b.n	800719c <UART_SetConfig+0x2d0>
 800717c:	2300      	movs	r3, #0
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e022      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e01e      	b.n	80071ca <UART_SetConfig+0x2fe>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e01a      	b.n	80071ca <UART_SetConfig+0x2fe>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e016      	b.n	80071ca <UART_SetConfig+0x2fe>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e012      	b.n	80071ca <UART_SetConfig+0x2fe>
 80071a4:	cfff69f3 	.word	0xcfff69f3
 80071a8:	40008000 	.word	0x40008000
 80071ac:	40013800 	.word	0x40013800
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40004400 	.word	0x40004400
 80071b8:	40004800 	.word	0x40004800
 80071bc:	40004c00 	.word	0x40004c00
 80071c0:	40005000 	.word	0x40005000
 80071c4:	2310      	movs	r3, #16
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4aae      	ldr	r2, [pc, #696]	@ (8007488 <UART_SetConfig+0x5bc>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	f040 8097 	bne.w	8007304 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071da:	2b08      	cmp	r3, #8
 80071dc:	d823      	bhi.n	8007226 <UART_SetConfig+0x35a>
 80071de:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <UART_SetConfig+0x318>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007209 	.word	0x08007209
 80071e8:	08007227 	.word	0x08007227
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007227 	.word	0x08007227
 80071f4:	08007217 	.word	0x08007217
 80071f8:	08007227 	.word	0x08007227
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007227 	.word	0x08007227
 8007204:	0800721f 	.word	0x0800721f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007208:	f7fd fc38 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 800720c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800720e:	e010      	b.n	8007232 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007210:	4b9e      	ldr	r3, [pc, #632]	@ (800748c <UART_SetConfig+0x5c0>)
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007214:	e00d      	b.n	8007232 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007216:	f7fd fb99 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800721a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800721c:	e009      	b.n	8007232 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007224:	e005      	b.n	8007232 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8130 	beq.w	800749a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723e:	4a94      	ldr	r2, [pc, #592]	@ (8007490 <UART_SetConfig+0x5c4>)
 8007240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007244:	461a      	mov	r2, r3
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	fbb3 f3f2 	udiv	r3, r3, r2
 800724c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4413      	add	r3, r2
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	429a      	cmp	r2, r3
 800725c:	d305      	bcc.n	800726a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d903      	bls.n	8007272 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007270:	e113      	b.n	800749a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	2200      	movs	r2, #0
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	60fa      	str	r2, [r7, #12]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	4a84      	ldr	r2, [pc, #528]	@ (8007490 <UART_SetConfig+0x5c4>)
 8007280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007284:	b29b      	uxth	r3, r3
 8007286:	2200      	movs	r2, #0
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007290:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007294:	f7f9 fc22 	bl	8000adc <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4610      	mov	r0, r2
 800729e:	4619      	mov	r1, r3
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	020b      	lsls	r3, r1, #8
 80072aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072ae:	0202      	lsls	r2, r0, #8
 80072b0:	6979      	ldr	r1, [r7, #20]
 80072b2:	6849      	ldr	r1, [r1, #4]
 80072b4:	0849      	lsrs	r1, r1, #1
 80072b6:	2000      	movs	r0, #0
 80072b8:	460c      	mov	r4, r1
 80072ba:	4605      	mov	r5, r0
 80072bc:	eb12 0804 	adds.w	r8, r2, r4
 80072c0:	eb43 0905 	adc.w	r9, r3, r5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	469a      	mov	sl, r3
 80072cc:	4693      	mov	fp, r2
 80072ce:	4652      	mov	r2, sl
 80072d0:	465b      	mov	r3, fp
 80072d2:	4640      	mov	r0, r8
 80072d4:	4649      	mov	r1, r9
 80072d6:	f7f9 fc01 	bl	8000adc <__aeabi_uldivmod>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4613      	mov	r3, r2
 80072e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e8:	d308      	bcc.n	80072fc <UART_SetConfig+0x430>
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072f0:	d204      	bcs.n	80072fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a3a      	ldr	r2, [r7, #32]
 80072f8:	60da      	str	r2, [r3, #12]
 80072fa:	e0ce      	b.n	800749a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007302:	e0ca      	b.n	800749a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800730c:	d166      	bne.n	80073dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800730e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007312:	2b08      	cmp	r3, #8
 8007314:	d827      	bhi.n	8007366 <UART_SetConfig+0x49a>
 8007316:	a201      	add	r2, pc, #4	@ (adr r2, 800731c <UART_SetConfig+0x450>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007341 	.word	0x08007341
 8007320:	08007349 	.word	0x08007349
 8007324:	08007351 	.word	0x08007351
 8007328:	08007367 	.word	0x08007367
 800732c:	08007357 	.word	0x08007357
 8007330:	08007367 	.word	0x08007367
 8007334:	08007367 	.word	0x08007367
 8007338:	08007367 	.word	0x08007367
 800733c:	0800735f 	.word	0x0800735f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fd fb9c 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8007344:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007346:	e014      	b.n	8007372 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007348:	f7fd fbae 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 800734c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800734e:	e010      	b.n	8007372 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007350:	4b4e      	ldr	r3, [pc, #312]	@ (800748c <UART_SetConfig+0x5c0>)
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007354:	e00d      	b.n	8007372 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007356:	f7fd faf9 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800735a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800735c:	e009      	b.n	8007372 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007364:	e005      	b.n	8007372 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8090 	beq.w	800749a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	4a44      	ldr	r2, [pc, #272]	@ (8007490 <UART_SetConfig+0x5c4>)
 8007380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007384:	461a      	mov	r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	fbb3 f3f2 	udiv	r3, r3, r2
 800738c:	005a      	lsls	r2, r3, #1
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	441a      	add	r2, r3
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d916      	bls.n	80073d4 <UART_SetConfig+0x508>
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ac:	d212      	bcs.n	80073d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f023 030f 	bic.w	r3, r3, #15
 80073b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	8bfb      	ldrh	r3, [r7, #30]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	8bfa      	ldrh	r2, [r7, #30]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	e062      	b.n	800749a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073da:	e05e      	b.n	800749a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d828      	bhi.n	8007436 <UART_SetConfig+0x56a>
 80073e4:	a201      	add	r2, pc, #4	@ (adr r2, 80073ec <UART_SetConfig+0x520>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007411 	.word	0x08007411
 80073f0:	08007419 	.word	0x08007419
 80073f4:	08007421 	.word	0x08007421
 80073f8:	08007437 	.word	0x08007437
 80073fc:	08007427 	.word	0x08007427
 8007400:	08007437 	.word	0x08007437
 8007404:	08007437 	.word	0x08007437
 8007408:	08007437 	.word	0x08007437
 800740c:	0800742f 	.word	0x0800742f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007410:	f7fd fb34 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8007414:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007416:	e014      	b.n	8007442 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007418:	f7fd fb46 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800741e:	e010      	b.n	8007442 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007420:	4b1a      	ldr	r3, [pc, #104]	@ (800748c <UART_SetConfig+0x5c0>)
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007424:	e00d      	b.n	8007442 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007426:	f7fd fa91 	bl	800494c <HAL_RCC_GetSysClockFreq>
 800742a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800742c:	e009      	b.n	8007442 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007434:	e005      	b.n	8007442 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007440:	bf00      	nop
    }

    if (pclk != 0U)
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	2b00      	cmp	r3, #0
 8007446:	d028      	beq.n	800749a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	4a10      	ldr	r2, [pc, #64]	@ (8007490 <UART_SetConfig+0x5c4>)
 800744e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007452:	461a      	mov	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	fbb3 f2f2 	udiv	r2, r3, r2
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	441a      	add	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	fbb2 f3f3 	udiv	r3, r2, r3
 800746a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d910      	bls.n	8007494 <UART_SetConfig+0x5c8>
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007478:	d20c      	bcs.n	8007494 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	b29a      	uxth	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60da      	str	r2, [r3, #12]
 8007484:	e009      	b.n	800749a <UART_SetConfig+0x5ce>
 8007486:	bf00      	nop
 8007488:	40008000 	.word	0x40008000
 800748c:	00f42400 	.word	0x00f42400
 8007490:	0800bd28 	.word	0x0800bd28
      }
      else
      {
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2201      	movs	r2, #1
 800749e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2200      	movs	r2, #0
 80074ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2200      	movs	r2, #0
 80074b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3730      	adds	r7, #48	@ 0x30
 80074be:	46bd      	mov	sp, r7
 80074c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01a      	beq.n	80075da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075c2:	d10a      	bne.n	80075da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b098      	sub	sp, #96	@ 0x60
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007618:	f7fa ffca 	bl	80025b0 <HAL_GetTick>
 800761c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d12f      	bne.n	800768c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800762c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007634:	2200      	movs	r2, #0
 8007636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f88e 	bl	800775c <UART_WaitOnFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d022      	beq.n	800768c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800765a:	653b      	str	r3, [r7, #80]	@ 0x50
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007664:	647b      	str	r3, [r7, #68]	@ 0x44
 8007666:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800766a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e063      	b.n	8007754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b04      	cmp	r3, #4
 8007698:	d149      	bne.n	800772e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a2:	2200      	movs	r2, #0
 80076a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f857 	bl	800775c <UART_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d03c      	beq.n	800772e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e6      	bne.n	80076b4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007706:	61fa      	str	r2, [r7, #28]
 8007708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	617b      	str	r3, [r7, #20]
   return(result);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e012      	b.n	8007754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3758      	adds	r7, #88	@ 0x58
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	4613      	mov	r3, r2
 800776a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800776c:	e04f      	b.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d04b      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007776:	f7fa ff1b 	bl	80025b0 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	429a      	cmp	r2, r3
 8007784:	d302      	bcc.n	800778c <UART_WaitOnFlagUntilTimeout+0x30>
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e04e      	b.n	800782e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d037      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b80      	cmp	r3, #128	@ 0x80
 80077a2:	d034      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d031      	beq.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d110      	bne.n	80077da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2208      	movs	r2, #8
 80077be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f838 	bl	8007836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2208      	movs	r2, #8
 80077ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e029      	b.n	800782e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e8:	d111      	bne.n	800780e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f81e 	bl	8007836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e00f      	b.n	800782e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4013      	ands	r3, r2
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	bf0c      	ite	eq
 800781e:	2301      	moveq	r3, #1
 8007820:	2300      	movne	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	429a      	cmp	r2, r3
 800782a:	d0a0      	beq.n	800776e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007836:	b480      	push	{r7}
 8007838:	b095      	sub	sp, #84	@ 0x54
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800785c:	643b      	str	r3, [r7, #64]	@ 0x40
 800785e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007886:	f023 0301 	bic.w	r3, r3, #1
 800788a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007896:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800789a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e3      	bne.n	8007870 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d118      	bne.n	80078e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	613b      	str	r3, [r7, #16]
   return(result);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078f6:	bf00      	nop
 80078f8:	3754      	adds	r7, #84	@ 0x54
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_UARTEx_DisableFifoMode+0x16>
 8007914:	2302      	movs	r3, #2
 8007916:	e027      	b.n	8007968 <HAL_UARTEx_DisableFifoMode+0x66>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2224      	movs	r2, #36	@ 0x24
 8007924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007946:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007988:	2302      	movs	r3, #2
 800798a:	e02d      	b.n	80079e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	@ 0x24
 8007998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0201 	bic.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f84f 	bl	8007a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e02d      	b.n	8007a64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2224      	movs	r2, #36	@ 0x24
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f811 	bl	8007a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a8c:	e031      	b.n	8007af2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a8e:	2308      	movs	r3, #8
 8007a90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a92:	2308      	movs	r3, #8
 8007a94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	0e5b      	lsrs	r3, r3, #25
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	0f5b      	lsrs	r3, r3, #29
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	7b3a      	ldrb	r2, [r7, #12]
 8007aba:	4911      	ldr	r1, [pc, #68]	@ (8007b00 <UARTEx_SetNbDataToProcess+0x94>)
 8007abc:	5c8a      	ldrb	r2, [r1, r2]
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ac2:	7b3a      	ldrb	r2, [r7, #12]
 8007ac4:	490f      	ldr	r1, [pc, #60]	@ (8007b04 <UARTEx_SetNbDataToProcess+0x98>)
 8007ac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ac8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	7b7a      	ldrb	r2, [r7, #13]
 8007ad8:	4909      	ldr	r1, [pc, #36]	@ (8007b00 <UARTEx_SetNbDataToProcess+0x94>)
 8007ada:	5c8a      	ldrb	r2, [r1, r2]
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	4908      	ldr	r1, [pc, #32]	@ (8007b04 <UARTEx_SetNbDataToProcess+0x98>)
 8007ae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ae6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	0800bd40 	.word	0x0800bd40
 8007b04:	0800bd48 	.word	0x0800bd48

08007b08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b0c:	4904      	ldr	r1, [pc, #16]	@ (8007b20 <MX_FATFS_Init+0x18>)
 8007b0e:	4805      	ldr	r0, [pc, #20]	@ (8007b24 <MX_FATFS_Init+0x1c>)
 8007b10:	f002 feec 	bl	800a8ec <FATFS_LinkDriver>
 8007b14:	4603      	mov	r3, r0
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b03      	ldr	r3, [pc, #12]	@ (8007b28 <MX_FATFS_Init+0x20>)
 8007b1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b1c:	bf00      	nop
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20040654 	.word	0x20040654
 8007b24:	20040098 	.word	0x20040098
 8007b28:	20040650 	.word	0x20040650

08007b2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 f9d7 	bl	8007efc <USER_SPI_initialize>
 8007b4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fab5 	bl	80080d4 <USER_SPI_status>
 8007b6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007b84:	7bf8      	ldrb	r0, [r7, #15]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	68b9      	ldr	r1, [r7, #8]
 8007b8c:	f000 fab8 	bl	8008100 <USER_SPI_read>
 8007b90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8007baa:	7bf8      	ldrb	r0, [r7, #15]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	f000 fb0b 	bl	80081cc <USER_SPI_write>
 8007bb6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	603a      	str	r2, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007bd0:	79b9      	ldrb	r1, [r7, #6]
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fb74 	bl	80082c4 <USER_SPI_ioctl>
 8007bdc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007bf0:	f7fa fcde 	bl	80025b0 <HAL_GetTick>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	4a04      	ldr	r2, [pc, #16]	@ (8007c08 <SPI_Timer_On+0x20>)
 8007bf8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007bfa:	4a04      	ldr	r2, [pc, #16]	@ (8007c0c <SPI_Timer_On+0x24>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6013      	str	r3, [r2, #0]
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	2004065c 	.word	0x2004065c
 8007c0c:	20040660 	.word	0x20040660

08007c10 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007c14:	f7fa fccc 	bl	80025b0 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <SPI_Timer_Status+0x24>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <SPI_Timer_Status+0x28>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	bf34      	ite	cc
 8007c28:	2301      	movcc	r3, #1
 8007c2a:	2300      	movcs	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	2004065c 	.word	0x2004065c
 8007c38:	20040660 	.word	0x20040660

08007c3c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007c46:	f107 020f 	add.w	r2, r7, #15
 8007c4a:	1df9      	adds	r1, r7, #7
 8007c4c:	2332      	movs	r3, #50	@ 0x32
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	2301      	movs	r3, #1
 8007c52:	4804      	ldr	r0, [pc, #16]	@ (8007c64 <xchg_spi+0x28>)
 8007c54:	f7fd ff2f 	bl	8005ab6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	200403fc 	.word	0x200403fc

08007c68 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e00a      	b.n	8007c8e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	18d4      	adds	r4, r2, r3
 8007c7e:	20ff      	movs	r0, #255	@ 0xff
 8007c80:	f7ff ffdc 	bl	8007c3c <xchg_spi>
 8007c84:	4603      	mov	r3, r0
 8007c86:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3f0      	bcc.n	8007c78 <rcvr_spi_multi+0x10>
	}
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4803      	ldr	r0, [pc, #12]	@ (8007cc4 <xmit_spi_multi+0x24>)
 8007cb6:	f7fd fd88 	bl	80057ca <HAL_SPI_Transmit>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	200403fc 	.word	0x200403fc

08007cc8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007cd0:	f7fa fc6e 	bl	80025b0 <HAL_GetTick>
 8007cd4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007cda:	20ff      	movs	r0, #255	@ 0xff
 8007cdc:	f7ff ffae 	bl	8007c3c <xchg_spi>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2bff      	cmp	r3, #255	@ 0xff
 8007ce8:	d007      	beq.n	8007cfa <wait_ready+0x32>
 8007cea:	f7fa fc61 	bl	80025b0 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d8ef      	bhi.n	8007cda <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2bff      	cmp	r3, #255	@ 0xff
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007d14:	2201      	movs	r2, #1
 8007d16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007d1a:	4804      	ldr	r0, [pc, #16]	@ (8007d2c <despiselect+0x1c>)
 8007d1c:	f7fb ffd6 	bl	8003ccc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007d20:	20ff      	movs	r0, #255	@ 0xff
 8007d22:	f7ff ff8b 	bl	8007c3c <xchg_spi>

}
 8007d26:	bf00      	nop
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	48000c00 	.word	0x48000c00

08007d30 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007d3a:	480a      	ldr	r0, [pc, #40]	@ (8007d64 <spiselect+0x34>)
 8007d3c:	f7fb ffc6 	bl	8003ccc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007d40:	20ff      	movs	r0, #255	@ 0xff
 8007d42:	f7ff ff7b 	bl	8007c3c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007d46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007d4a:	f7ff ffbd 	bl	8007cc8 <wait_ready>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <spiselect+0x28>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e002      	b.n	8007d5e <spiselect+0x2e>

	despiselect();
 8007d58:	f7ff ffda 	bl	8007d10 <despiselect>
	return 0;	/* Timeout */
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	48000c00 	.word	0x48000c00

08007d68 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007d72:	20c8      	movs	r0, #200	@ 0xc8
 8007d74:	f7ff ff38 	bl	8007be8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007d78:	20ff      	movs	r0, #255	@ 0xff
 8007d7a:	f7ff ff5f 	bl	8007c3c <xchg_spi>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2bff      	cmp	r3, #255	@ 0xff
 8007d86:	d104      	bne.n	8007d92 <rcvr_datablock+0x2a>
 8007d88:	f7ff ff42 	bl	8007c10 <SPI_Timer_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f2      	bne.n	8007d78 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d96:	d001      	beq.n	8007d9c <rcvr_datablock+0x34>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e00a      	b.n	8007db2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ff62 	bl	8007c68 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007da4:	20ff      	movs	r0, #255	@ 0xff
 8007da6:	f7ff ff49 	bl	8007c3c <xchg_spi>
 8007daa:	20ff      	movs	r0, #255	@ 0xff
 8007dac:	f7ff ff46 	bl	8007c3c <xchg_spi>

	return 1;						/* Function succeeded */
 8007db0:	2301      	movs	r3, #1
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007dc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007dca:	f7ff ff7d 	bl	8007cc8 <wait_ready>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <xmit_datablock+0x1e>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e01e      	b.n	8007e16 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff2e 	bl	8007c3c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	2bfd      	cmp	r3, #253	@ 0xfd
 8007de4:	d016      	beq.n	8007e14 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007de6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff ff58 	bl	8007ca0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007df0:	20ff      	movs	r0, #255	@ 0xff
 8007df2:	f7ff ff23 	bl	8007c3c <xchg_spi>
 8007df6:	20ff      	movs	r0, #255	@ 0xff
 8007df8:	f7ff ff20 	bl	8007c3c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007dfc:	20ff      	movs	r0, #255	@ 0xff
 8007dfe:	f7ff ff1d 	bl	8007c3c <xchg_spi>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	d001      	beq.n	8007e14 <xmit_datablock+0x5a>
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <xmit_datablock+0x5c>
	}
	return 1;
 8007e14:	2301      	movs	r3, #1
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	4603      	mov	r3, r0
 8007e26:	6039      	str	r1, [r7, #0]
 8007e28:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da0e      	bge.n	8007e50 <send_cmd+0x32>
		cmd &= 0x7F;
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e38:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	2037      	movs	r0, #55	@ 0x37
 8007e3e:	f7ff ffee 	bl	8007e1e <send_cmd>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d901      	bls.n	8007e50 <send_cmd+0x32>
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	e051      	b.n	8007ef4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d008      	beq.n	8007e68 <send_cmd+0x4a>
		despiselect();
 8007e56:	f7ff ff5b 	bl	8007d10 <despiselect>
		if (!spiselect()) return 0xFF;
 8007e5a:	f7ff ff69 	bl	8007d30 <spiselect>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <send_cmd+0x4a>
 8007e64:	23ff      	movs	r3, #255	@ 0xff
 8007e66:	e045      	b.n	8007ef4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fee3 	bl	8007c3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	0e1b      	lsrs	r3, r3, #24
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fedd 	bl	8007c3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fed7 	bl	8007c3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fed1 	bl	8007c3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff fecc 	bl	8007c3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <send_cmd+0x94>
 8007eae:	2395      	movs	r3, #149	@ 0x95
 8007eb0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d101      	bne.n	8007ebc <send_cmd+0x9e>
 8007eb8:	2387      	movs	r3, #135	@ 0x87
 8007eba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff febc 	bl	8007c3c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	2b0c      	cmp	r3, #12
 8007ec8:	d102      	bne.n	8007ed0 <send_cmd+0xb2>
 8007eca:	20ff      	movs	r0, #255	@ 0xff
 8007ecc:	f7ff feb6 	bl	8007c3c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007ed0:	230a      	movs	r3, #10
 8007ed2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007ed4:	20ff      	movs	r0, #255	@ 0xff
 8007ed6:	f7ff feb1 	bl	8007c3c <xchg_spi>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007ede:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da05      	bge.n	8007ef2 <send_cmd+0xd4>
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1f0      	bne.n	8007ed4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <USER_SPI_initialize+0x14>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0d6      	b.n	80080be <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007f10:	4b6d      	ldr	r3, [pc, #436]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <USER_SPI_initialize+0x2a>
 8007f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	e0cb      	b.n	80080be <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007f26:	4b69      	ldr	r3, [pc, #420]	@ (80080cc <USER_SPI_initialize+0x1d0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007f30:	4b66      	ldr	r3, [pc, #408]	@ (80080cc <USER_SPI_initialize+0x1d0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0218 	orr.w	r2, r2, #24
 8007f38:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007f3a:	230a      	movs	r3, #10
 8007f3c:	73fb      	strb	r3, [r7, #15]
 8007f3e:	e005      	b.n	8007f4c <USER_SPI_initialize+0x50>
 8007f40:	20ff      	movs	r0, #255	@ 0xff
 8007f42:	f7ff fe7b 	bl	8007c3c <xchg_spi>
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f6      	bne.n	8007f40 <USER_SPI_initialize+0x44>

	ty = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007f56:	2100      	movs	r1, #0
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f7ff ff60 	bl	8007e1e <send_cmd>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f040 808b 	bne.w	800807c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007f66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007f6a:	f7ff fe3d 	bl	8007be8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007f6e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007f72:	2008      	movs	r0, #8
 8007f74:	f7ff ff53 	bl	8007e1e <send_cmd>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d151      	bne.n	8008022 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
 8007f82:	e00d      	b.n	8007fa0 <USER_SPI_initialize+0xa4>
 8007f84:	7bfc      	ldrb	r4, [r7, #15]
 8007f86:	20ff      	movs	r0, #255	@ 0xff
 8007f88:	f7ff fe58 	bl	8007c3c <xchg_spi>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f104 0310 	add.w	r3, r4, #16
 8007f94:	443b      	add	r3, r7
 8007f96:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d9ee      	bls.n	8007f84 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007fa6:	7abb      	ldrb	r3, [r7, #10]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d167      	bne.n	800807c <USER_SPI_initialize+0x180>
 8007fac:	7afb      	ldrb	r3, [r7, #11]
 8007fae:	2baa      	cmp	r3, #170	@ 0xaa
 8007fb0:	d164      	bne.n	800807c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007fb2:	bf00      	nop
 8007fb4:	f7ff fe2c 	bl	8007c10 <SPI_Timer_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <USER_SPI_initialize+0xd2>
 8007fbe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007fc2:	20a9      	movs	r0, #169	@ 0xa9
 8007fc4:	f7ff ff2b 	bl	8007e1e <send_cmd>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1f2      	bne.n	8007fb4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007fce:	f7ff fe1f 	bl	8007c10 <SPI_Timer_Status>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d051      	beq.n	800807c <USER_SPI_initialize+0x180>
 8007fd8:	2100      	movs	r1, #0
 8007fda:	203a      	movs	r0, #58	@ 0x3a
 8007fdc:	f7ff ff1f 	bl	8007e1e <send_cmd>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d14a      	bne.n	800807c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
 8007fea:	e00d      	b.n	8008008 <USER_SPI_initialize+0x10c>
 8007fec:	7bfc      	ldrb	r4, [r7, #15]
 8007fee:	20ff      	movs	r0, #255	@ 0xff
 8007ff0:	f7ff fe24 	bl	8007c3c <xchg_spi>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f104 0310 	add.w	r3, r4, #16
 8007ffc:	443b      	add	r3, r7
 8007ffe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	3301      	adds	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d9ee      	bls.n	8007fec <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800800e:	7a3b      	ldrb	r3, [r7, #8]
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USER_SPI_initialize+0x120>
 8008018:	230c      	movs	r3, #12
 800801a:	e000      	b.n	800801e <USER_SPI_initialize+0x122>
 800801c:	2304      	movs	r3, #4
 800801e:	737b      	strb	r3, [r7, #13]
 8008020:	e02c      	b.n	800807c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008022:	2100      	movs	r1, #0
 8008024:	20a9      	movs	r0, #169	@ 0xa9
 8008026:	f7ff fefa 	bl	8007e1e <send_cmd>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d804      	bhi.n	800803a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008030:	2302      	movs	r3, #2
 8008032:	737b      	strb	r3, [r7, #13]
 8008034:	23a9      	movs	r3, #169	@ 0xa9
 8008036:	73bb      	strb	r3, [r7, #14]
 8008038:	e003      	b.n	8008042 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800803a:	2301      	movs	r3, #1
 800803c:	737b      	strb	r3, [r7, #13]
 800803e:	2301      	movs	r3, #1
 8008040:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008042:	bf00      	nop
 8008044:	f7ff fde4 	bl	8007c10 <SPI_Timer_Status>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d007      	beq.n	800805e <USER_SPI_initialize+0x162>
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2100      	movs	r1, #0
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff fee3 	bl	8007e1e <send_cmd>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1f2      	bne.n	8008044 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800805e:	f7ff fdd7 	bl	8007c10 <SPI_Timer_Status>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <USER_SPI_initialize+0x17c>
 8008068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800806c:	2010      	movs	r0, #16
 800806e:	f7ff fed6 	bl	8007e1e <send_cmd>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USER_SPI_initialize+0x180>
				ty = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800807c:	4a14      	ldr	r2, [pc, #80]	@ (80080d0 <USER_SPI_initialize+0x1d4>)
 800807e:	7b7b      	ldrb	r3, [r7, #13]
 8008080:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008082:	f7ff fe45 	bl	8007d10 <despiselect>

	if (ty) {			/* OK */
 8008086:	7b7b      	ldrb	r3, [r7, #13]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d012      	beq.n	80080b2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800808c:	4b0f      	ldr	r3, [pc, #60]	@ (80080cc <USER_SPI_initialize+0x1d0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008096:	4b0d      	ldr	r3, [pc, #52]	@ (80080cc <USER_SPI_initialize+0x1d0>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f042 0210 	orr.w	r2, r2, #16
 800809e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80080a0:	4b09      	ldr	r3, [pc, #36]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f023 0301 	bic.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	4b06      	ldr	r3, [pc, #24]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e002      	b.n	80080b8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80080b2:	4b05      	ldr	r3, [pc, #20]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80080b8:	4b03      	ldr	r3, [pc, #12]	@ (80080c8 <USER_SPI_initialize+0x1cc>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b2db      	uxtb	r3, r3
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd90      	pop	{r4, r7, pc}
 80080c6:	bf00      	nop
 80080c8:	200400ac 	.word	0x200400ac
 80080cc:	200403fc 	.word	0x200403fc
 80080d0:	20040658 	.word	0x20040658

080080d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <USER_SPI_status+0x14>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e002      	b.n	80080ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <USER_SPI_status+0x28>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b2db      	uxtb	r3, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	200400ac 	.word	0x200400ac

08008100 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <USER_SPI_read+0x1c>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USER_SPI_read+0x20>
 800811c:	2304      	movs	r3, #4
 800811e:	e04d      	b.n	80081bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008120:	4b28      	ldr	r3, [pc, #160]	@ (80081c4 <USER_SPI_read+0xc4>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <USER_SPI_read+0x32>
 800812e:	2303      	movs	r3, #3
 8008130:	e044      	b.n	80081bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008132:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <USER_SPI_read+0xc8>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USER_SPI_read+0x44>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	025b      	lsls	r3, r3, #9
 8008142:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d111      	bne.n	800816e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	2011      	movs	r0, #17
 800814e:	f7ff fe66 	bl	8007e1e <send_cmd>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d129      	bne.n	80081ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800815c:	68b8      	ldr	r0, [r7, #8]
 800815e:	f7ff fe03 	bl	8007d68 <rcvr_datablock>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d021      	beq.n	80081ac <USER_SPI_read+0xac>
			count = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	e01e      	b.n	80081ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	2012      	movs	r0, #18
 8008172:	f7ff fe54 	bl	8007e1e <send_cmd>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d117      	bne.n	80081ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800817c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f7ff fdf1 	bl	8007d68 <rcvr_datablock>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <USER_SPI_read+0xa2>
				buff += 512;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008192:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	603b      	str	r3, [r7, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1ed      	bne.n	800817c <USER_SPI_read+0x7c>
 80081a0:	e000      	b.n	80081a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80081a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80081a4:	2100      	movs	r1, #0
 80081a6:	200c      	movs	r0, #12
 80081a8:	f7ff fe39 	bl	8007e1e <send_cmd>
		}
	}
	despiselect();
 80081ac:	f7ff fdb0 	bl	8007d10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	200400ac 	.word	0x200400ac
 80081c8:	20040658 	.word	0x20040658

080081cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <USER_SPI_write+0x1c>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USER_SPI_write+0x20>
 80081e8:	2304      	movs	r3, #4
 80081ea:	e063      	b.n	80082b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80081ec:	4b33      	ldr	r3, [pc, #204]	@ (80082bc <USER_SPI_write+0xf0>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USER_SPI_write+0x32>
 80081fa:	2303      	movs	r3, #3
 80081fc:	e05a      	b.n	80082b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80081fe:	4b2f      	ldr	r3, [pc, #188]	@ (80082bc <USER_SPI_write+0xf0>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <USER_SPI_write+0x44>
 800820c:	2302      	movs	r3, #2
 800820e:	e051      	b.n	80082b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008210:	4b2b      	ldr	r3, [pc, #172]	@ (80082c0 <USER_SPI_write+0xf4>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <USER_SPI_write+0x56>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	025b      	lsls	r3, r3, #9
 8008220:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d110      	bne.n	800824a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	2018      	movs	r0, #24
 800822c:	f7ff fdf7 	bl	8007e1e <send_cmd>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d136      	bne.n	80082a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008236:	21fe      	movs	r1, #254	@ 0xfe
 8008238:	68b8      	ldr	r0, [r7, #8]
 800823a:	f7ff fdbe 	bl	8007dba <xmit_datablock>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02f      	beq.n	80082a4 <USER_SPI_write+0xd8>
			count = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	e02c      	b.n	80082a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800824a:	4b1d      	ldr	r3, [pc, #116]	@ (80082c0 <USER_SPI_write+0xf4>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0306 	and.w	r3, r3, #6
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <USER_SPI_write+0x92>
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	2097      	movs	r0, #151	@ 0x97
 800825a:	f7ff fde0 	bl	8007e1e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	2019      	movs	r0, #25
 8008262:	f7ff fddc 	bl	8007e1e <send_cmd>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11b      	bne.n	80082a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800826c:	21fc      	movs	r1, #252	@ 0xfc
 800826e:	68b8      	ldr	r0, [r7, #8]
 8008270:	f7ff fda3 	bl	8007dba <xmit_datablock>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <USER_SPI_write+0xc4>
				buff += 512;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008280:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	3b01      	subs	r3, #1
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ee      	bne.n	800826c <USER_SPI_write+0xa0>
 800828e:	e000      	b.n	8008292 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008290:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008292:	21fd      	movs	r1, #253	@ 0xfd
 8008294:	2000      	movs	r0, #0
 8008296:	f7ff fd90 	bl	8007dba <xmit_datablock>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USER_SPI_write+0xd8>
 80082a0:	2301      	movs	r3, #1
 80082a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80082a4:	f7ff fd34 	bl	8007d10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bf14      	ite	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	2300      	moveq	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200400ac 	.word	0x200400ac
 80082c0:	20040658 	.word	0x20040658

080082c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08c      	sub	sp, #48	@ 0x30
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	603a      	str	r2, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
 80082d0:	460b      	mov	r3, r1
 80082d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <USER_SPI_ioctl+0x1a>
 80082da:	2304      	movs	r3, #4
 80082dc:	e15a      	b.n	8008594 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80082de:	4baf      	ldr	r3, [pc, #700]	@ (800859c <USER_SPI_ioctl+0x2d8>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <USER_SPI_ioctl+0x2c>
 80082ec:	2303      	movs	r3, #3
 80082ee:	e151      	b.n	8008594 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80082f6:	79bb      	ldrb	r3, [r7, #6]
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	f200 8136 	bhi.w	800856a <USER_SPI_ioctl+0x2a6>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <USER_SPI_ioctl+0x40>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008319 	.word	0x08008319
 8008308:	0800832d 	.word	0x0800832d
 800830c:	0800856b 	.word	0x0800856b
 8008310:	080083d9 	.word	0x080083d9
 8008314:	080084cf 	.word	0x080084cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008318:	f7ff fd0a 	bl	8007d30 <spiselect>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8127 	beq.w	8008572 <USER_SPI_ioctl+0x2ae>
 8008324:	2300      	movs	r3, #0
 8008326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800832a:	e122      	b.n	8008572 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800832c:	2100      	movs	r1, #0
 800832e:	2009      	movs	r0, #9
 8008330:	f7ff fd75 	bl	8007e1e <send_cmd>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	f040 811d 	bne.w	8008576 <USER_SPI_ioctl+0x2b2>
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	2110      	movs	r1, #16
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff fd10 	bl	8007d68 <rcvr_datablock>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8113 	beq.w	8008576 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008350:	7b3b      	ldrb	r3, [r7, #12]
 8008352:	099b      	lsrs	r3, r3, #6
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d111      	bne.n	800837e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800835a:	7d7b      	ldrb	r3, [r7, #21]
 800835c:	461a      	mov	r2, r3
 800835e:	7d3b      	ldrb	r3, [r7, #20]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	4413      	add	r3, r2
 8008364:	461a      	mov	r2, r3
 8008366:	7cfb      	ldrb	r3, [r7, #19]
 8008368:	041b      	lsls	r3, r3, #16
 800836a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800836e:	4413      	add	r3, r2
 8008370:	3301      	adds	r3, #1
 8008372:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	029a      	lsls	r2, r3, #10
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e028      	b.n	80083d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800837e:	7c7b      	ldrb	r3, [r7, #17]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	b2da      	uxtb	r2, r3
 8008386:	7dbb      	ldrb	r3, [r7, #22]
 8008388:	09db      	lsrs	r3, r3, #7
 800838a:	b2db      	uxtb	r3, r3
 800838c:	4413      	add	r3, r2
 800838e:	b2da      	uxtb	r2, r3
 8008390:	7d7b      	ldrb	r3, [r7, #21]
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 0306 	and.w	r3, r3, #6
 800839a:	b2db      	uxtb	r3, r3
 800839c:	4413      	add	r3, r2
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	3302      	adds	r3, #2
 80083a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80083a6:	7d3b      	ldrb	r3, [r7, #20]
 80083a8:	099b      	lsrs	r3, r3, #6
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	7cfb      	ldrb	r3, [r7, #19]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	7cbb      	ldrb	r3, [r7, #18]
 80083b6:	029b      	lsls	r3, r3, #10
 80083b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083bc:	4413      	add	r3, r2
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80083c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083c6:	3b09      	subs	r3, #9
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	409a      	lsls	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80083d6:	e0ce      	b.n	8008576 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80083d8:	4b71      	ldr	r3, [pc, #452]	@ (80085a0 <USER_SPI_ioctl+0x2dc>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d031      	beq.n	8008448 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80083e4:	2100      	movs	r1, #0
 80083e6:	208d      	movs	r0, #141	@ 0x8d
 80083e8:	f7ff fd19 	bl	8007e1e <send_cmd>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 80c3 	bne.w	800857a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80083f4:	20ff      	movs	r0, #255	@ 0xff
 80083f6:	f7ff fc21 	bl	8007c3c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	2110      	movs	r1, #16
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fcb1 	bl	8007d68 <rcvr_datablock>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80b6 	beq.w	800857a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800840e:	2330      	movs	r3, #48	@ 0x30
 8008410:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008414:	e007      	b.n	8008426 <USER_SPI_ioctl+0x162>
 8008416:	20ff      	movs	r0, #255	@ 0xff
 8008418:	f7ff fc10 	bl	8007c3c <xchg_spi>
 800841c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008420:	3b01      	subs	r3, #1
 8008422:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f3      	bne.n	8008416 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800842e:	7dbb      	ldrb	r3, [r7, #22]
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	b2db      	uxtb	r3, r3
 8008434:	461a      	mov	r2, r3
 8008436:	2310      	movs	r3, #16
 8008438:	fa03 f202 	lsl.w	r2, r3, r2
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008446:	e098      	b.n	800857a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008448:	2100      	movs	r1, #0
 800844a:	2009      	movs	r0, #9
 800844c:	f7ff fce7 	bl	8007e1e <send_cmd>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 8091 	bne.w	800857a <USER_SPI_ioctl+0x2b6>
 8008458:	f107 030c 	add.w	r3, r7, #12
 800845c:	2110      	movs	r1, #16
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fc82 	bl	8007d68 <rcvr_datablock>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 8087 	beq.w	800857a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800846c:	4b4c      	ldr	r3, [pc, #304]	@ (80085a0 <USER_SPI_ioctl+0x2dc>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008478:	7dbb      	ldrb	r3, [r7, #22]
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008480:	7dfa      	ldrb	r2, [r7, #23]
 8008482:	09d2      	lsrs	r2, r2, #7
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	4413      	add	r3, r2
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	7e7b      	ldrb	r3, [r7, #25]
 800848c:	099b      	lsrs	r3, r3, #6
 800848e:	b2db      	uxtb	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	fa02 f303 	lsl.w	r3, r2, r3
 8008496:	461a      	mov	r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e013      	b.n	80084c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800849e:	7dbb      	ldrb	r3, [r7, #22]
 80084a0:	109b      	asrs	r3, r3, #2
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	3301      	adds	r3, #1
 80084aa:	7dfa      	ldrb	r2, [r7, #23]
 80084ac:	00d2      	lsls	r2, r2, #3
 80084ae:	f002 0218 	and.w	r2, r2, #24
 80084b2:	7df9      	ldrb	r1, [r7, #23]
 80084b4:	0949      	lsrs	r1, r1, #5
 80084b6:	b2c9      	uxtb	r1, r1
 80084b8:	440a      	add	r2, r1
 80084ba:	3201      	adds	r2, #1
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80084cc:	e055      	b.n	800857a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80084ce:	4b34      	ldr	r3, [pc, #208]	@ (80085a0 <USER_SPI_ioctl+0x2dc>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0306 	and.w	r3, r3, #6
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d051      	beq.n	800857e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80084da:	f107 020c 	add.w	r2, r7, #12
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	210b      	movs	r1, #11
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff feee 	bl	80082c4 <USER_SPI_ioctl>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d149      	bne.n	8008582 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80084ee:	7b3b      	ldrb	r3, [r7, #12]
 80084f0:	099b      	lsrs	r3, r3, #6
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d104      	bne.n	8008502 <USER_SPI_ioctl+0x23e>
 80084f8:	7dbb      	ldrb	r3, [r7, #22]
 80084fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d041      	beq.n	8008586 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	623b      	str	r3, [r7, #32]
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008512:	4b23      	ldr	r3, [pc, #140]	@ (80085a0 <USER_SPI_ioctl+0x2dc>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d105      	bne.n	800852a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	025b      	lsls	r3, r3, #9
 8008522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008526:	025b      	lsls	r3, r3, #9
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800852a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800852c:	2020      	movs	r0, #32
 800852e:	f7ff fc76 	bl	8007e1e <send_cmd>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d128      	bne.n	800858a <USER_SPI_ioctl+0x2c6>
 8008538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800853a:	2021      	movs	r0, #33	@ 0x21
 800853c:	f7ff fc6f 	bl	8007e1e <send_cmd>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d121      	bne.n	800858a <USER_SPI_ioctl+0x2c6>
 8008546:	2100      	movs	r1, #0
 8008548:	2026      	movs	r0, #38	@ 0x26
 800854a:	f7ff fc68 	bl	8007e1e <send_cmd>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11a      	bne.n	800858a <USER_SPI_ioctl+0x2c6>
 8008554:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008558:	f7ff fbb6 	bl	8007cc8 <wait_ready>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d013      	beq.n	800858a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008562:	2300      	movs	r3, #0
 8008564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008568:	e00f      	b.n	800858a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800856a:	2304      	movs	r3, #4
 800856c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008570:	e00c      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		break;
 8008572:	bf00      	nop
 8008574:	e00a      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		break;
 8008576:	bf00      	nop
 8008578:	e008      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		break;
 800857a:	bf00      	nop
 800857c:	e006      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800857e:	bf00      	nop
 8008580:	e004      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008582:	bf00      	nop
 8008584:	e002      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008586:	bf00      	nop
 8008588:	e000      	b.n	800858c <USER_SPI_ioctl+0x2c8>
		break;
 800858a:	bf00      	nop
	}

	despiselect();
 800858c:	f7ff fbc0 	bl	8007d10 <despiselect>

	return res;
 8008590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008594:	4618      	mov	r0, r3
 8008596:	3730      	adds	r7, #48	@ 0x30
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	200400ac 	.word	0x200400ac
 80085a0:	20040658 	.word	0x20040658

080085a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	4a08      	ldr	r2, [pc, #32]	@ (80085d4 <disk_status+0x30>)
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	79fa      	ldrb	r2, [r7, #7]
 80085bc:	4905      	ldr	r1, [pc, #20]	@ (80085d4 <disk_status+0x30>)
 80085be:	440a      	add	r2, r1
 80085c0:	7a12      	ldrb	r2, [r2, #8]
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	2004068c 	.word	0x2004068c

080085d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008620 <disk_initialize+0x48>)
 80085ea:	5cd3      	ldrb	r3, [r2, r3]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d111      	bne.n	8008614 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	4a0b      	ldr	r2, [pc, #44]	@ (8008620 <disk_initialize+0x48>)
 80085f4:	2101      	movs	r1, #1
 80085f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	4a09      	ldr	r2, [pc, #36]	@ (8008620 <disk_initialize+0x48>)
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	4906      	ldr	r1, [pc, #24]	@ (8008620 <disk_initialize+0x48>)
 8008608:	440a      	add	r2, r1
 800860a:	7a12      	ldrb	r2, [r2, #8]
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	2004068c 	.word	0x2004068c

08008624 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4a0a      	ldr	r2, [pc, #40]	@ (8008660 <disk_read+0x3c>)
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	689c      	ldr	r4, [r3, #8]
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	4a07      	ldr	r2, [pc, #28]	@ (8008660 <disk_read+0x3c>)
 8008644:	4413      	add	r3, r2
 8008646:	7a18      	ldrb	r0, [r3, #8]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	47a0      	blx	r4
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]
  return res;
 8008654:	7dfb      	ldrb	r3, [r7, #23]
}
 8008656:	4618      	mov	r0, r3
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	bd90      	pop	{r4, r7, pc}
 800865e:	bf00      	nop
 8008660:	2004068c 	.word	0x2004068c

08008664 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
 800866e:	603b      	str	r3, [r7, #0]
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	4a0a      	ldr	r2, [pc, #40]	@ (80086a0 <disk_write+0x3c>)
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	68dc      	ldr	r4, [r3, #12]
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4a07      	ldr	r2, [pc, #28]	@ (80086a0 <disk_write+0x3c>)
 8008684:	4413      	add	r3, r2
 8008686:	7a18      	ldrb	r0, [r3, #8]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	47a0      	blx	r4
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]
  return res;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
}
 8008696:	4618      	mov	r0, r3
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	bd90      	pop	{r4, r7, pc}
 800869e:	bf00      	nop
 80086a0:	2004068c 	.word	0x2004068c

080086a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	603a      	str	r2, [r7, #0]
 80086ae:	71fb      	strb	r3, [r7, #7]
 80086b0:	460b      	mov	r3, r1
 80086b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	4a09      	ldr	r2, [pc, #36]	@ (80086dc <disk_ioctl+0x38>)
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	4906      	ldr	r1, [pc, #24]	@ (80086dc <disk_ioctl+0x38>)
 80086c4:	440a      	add	r2, r1
 80086c6:	7a10      	ldrb	r0, [r2, #8]
 80086c8:	79b9      	ldrb	r1, [r7, #6]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	2004068c 	.word	0x2004068c

080086e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3301      	adds	r3, #1
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80086f0:	89fb      	ldrh	r3, [r7, #14]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	b21a      	sxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b21b      	sxth	r3, r3
 80086fc:	4313      	orrs	r3, r2
 80086fe:	b21b      	sxth	r3, r3
 8008700:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008702:	89fb      	ldrh	r3, [r7, #14]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3303      	adds	r3, #3
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	3202      	adds	r2, #2
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	3201      	adds	r2, #1
 8008736:	7812      	ldrb	r2, [r2, #0]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7812      	ldrb	r2, [r2, #0]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
	return rv;
 8008748:	68fb      	ldr	r3, [r7, #12]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	887a      	ldrh	r2, [r7, #2]
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	887b      	ldrh	r3, [r7, #2]
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	607a      	str	r2, [r7, #4]
 800877a:	887a      	ldrh	r2, [r7, #2]
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	701a      	strb	r2, [r3, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	0a1b      	lsrs	r3, r3, #8
 80087b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	0a1b      	lsrs	r3, r3, #8
 80087ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	701a      	strb	r2, [r3, #0]
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00d      	beq.n	800881a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	1c53      	adds	r3, r2, #1
 8008802:	613b      	str	r3, [r7, #16]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	1c59      	adds	r1, r3, #1
 8008808:	6179      	str	r1, [r7, #20]
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3b01      	subs	r3, #1
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f1      	bne.n	80087fe <mem_cpy+0x1a>
	}
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008826:	b480      	push	{r7}
 8008828:	b087      	sub	sp, #28
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	617a      	str	r2, [r7, #20]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3b01      	subs	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f3      	bne.n	8008836 <mem_set+0x10>
}
 800884e:	bf00      	nop
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	@ 0x24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	61fa      	str	r2, [r7, #28]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	4619      	mov	r1, r3
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	61ba      	str	r2, [r7, #24]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	1acb      	subs	r3, r1, r3
 8008888:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3b01      	subs	r3, #1
 800888e:	607b      	str	r3, [r7, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <mem_cmp+0x40>
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0eb      	beq.n	8008874 <mem_cmp+0x18>

	return r;
 800889c:	697b      	ldr	r3, [r7, #20]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3724      	adds	r7, #36	@ 0x24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80088b4:	e002      	b.n	80088bc <chk_chr+0x12>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	3301      	adds	r3, #1
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <chk_chr+0x26>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d1f2      	bne.n	80088b6 <chk_chr+0xc>
	return *str;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	781b      	ldrb	r3, [r3, #0]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	e029      	b.n	8008948 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088f4:	4a27      	ldr	r2, [pc, #156]	@ (8008994 <chk_lock+0xb4>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	4413      	add	r3, r2
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01d      	beq.n	800893e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008902:	4a24      	ldr	r2, [pc, #144]	@ (8008994 <chk_lock+0xb4>)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	4413      	add	r3, r2
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d116      	bne.n	8008942 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008914:	4a1f      	ldr	r2, [pc, #124]	@ (8008994 <chk_lock+0xb4>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	4413      	add	r3, r2
 800891c:	3304      	adds	r3, #4
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008924:	429a      	cmp	r2, r3
 8008926:	d10c      	bne.n	8008942 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008928:	4a1a      	ldr	r2, [pc, #104]	@ (8008994 <chk_lock+0xb4>)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	4413      	add	r3, r2
 8008930:	3308      	adds	r3, #8
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008938:	429a      	cmp	r2, r3
 800893a:	d102      	bne.n	8008942 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800893c:	e007      	b.n	800894e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800893e:	2301      	movs	r3, #1
 8008940:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d9d2      	bls.n	80088f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d109      	bne.n	8008968 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <chk_lock+0x80>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d101      	bne.n	8008964 <chk_lock+0x84>
 8008960:	2300      	movs	r3, #0
 8008962:	e010      	b.n	8008986 <chk_lock+0xa6>
 8008964:	2312      	movs	r3, #18
 8008966:	e00e      	b.n	8008986 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d108      	bne.n	8008980 <chk_lock+0xa0>
 800896e:	4a09      	ldr	r2, [pc, #36]	@ (8008994 <chk_lock+0xb4>)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	4413      	add	r3, r2
 8008976:	330c      	adds	r3, #12
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897e:	d101      	bne.n	8008984 <chk_lock+0xa4>
 8008980:	2310      	movs	r3, #16
 8008982:	e000      	b.n	8008986 <chk_lock+0xa6>
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	2004066c 	.word	0x2004066c

08008998 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e002      	b.n	80089aa <enq_lock+0x12>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3301      	adds	r3, #1
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d806      	bhi.n	80089be <enq_lock+0x26>
 80089b0:	4a09      	ldr	r2, [pc, #36]	@ (80089d8 <enq_lock+0x40>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	4413      	add	r3, r2
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f2      	bne.n	80089a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	2004066c 	.word	0x2004066c

080089dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e01f      	b.n	8008a2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089ec:	4a41      	ldr	r2, [pc, #260]	@ (8008af4 <inc_lock+0x118>)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	011b      	lsls	r3, r3, #4
 80089f2:	4413      	add	r3, r2
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d113      	bne.n	8008a26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089fe:	4a3d      	ldr	r2, [pc, #244]	@ (8008af4 <inc_lock+0x118>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	4413      	add	r3, r2
 8008a06:	3304      	adds	r3, #4
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d109      	bne.n	8008a26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008a12:	4a38      	ldr	r2, [pc, #224]	@ (8008af4 <inc_lock+0x118>)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4413      	add	r3, r2
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d006      	beq.n	8008a34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d9dc      	bls.n	80089ec <inc_lock+0x10>
 8008a32:	e000      	b.n	8008a36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d132      	bne.n	8008aa2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e002      	b.n	8008a48 <inc_lock+0x6c>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d806      	bhi.n	8008a5c <inc_lock+0x80>
 8008a4e:	4a29      	ldr	r2, [pc, #164]	@ (8008af4 <inc_lock+0x118>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	4413      	add	r3, r2
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1f2      	bne.n	8008a42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d101      	bne.n	8008a66 <inc_lock+0x8a>
 8008a62:	2300      	movs	r3, #0
 8008a64:	e040      	b.n	8008ae8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4922      	ldr	r1, [pc, #136]	@ (8008af4 <inc_lock+0x118>)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	440b      	add	r3, r1
 8008a72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689a      	ldr	r2, [r3, #8]
 8008a78:	491e      	ldr	r1, [pc, #120]	@ (8008af4 <inc_lock+0x118>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	440b      	add	r3, r1
 8008a80:	3304      	adds	r3, #4
 8008a82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	695a      	ldr	r2, [r3, #20]
 8008a88:	491a      	ldr	r1, [pc, #104]	@ (8008af4 <inc_lock+0x118>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	440b      	add	r3, r1
 8008a90:	3308      	adds	r3, #8
 8008a92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a94:	4a17      	ldr	r2, [pc, #92]	@ (8008af4 <inc_lock+0x118>)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	4413      	add	r3, r2
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <inc_lock+0xe0>
 8008aa8:	4a12      	ldr	r2, [pc, #72]	@ (8008af4 <inc_lock+0x118>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	4413      	add	r3, r2
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <inc_lock+0xe0>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e015      	b.n	8008ae8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d108      	bne.n	8008ad4 <inc_lock+0xf8>
 8008ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8008af4 <inc_lock+0x118>)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	4413      	add	r3, r2
 8008aca:	330c      	adds	r3, #12
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	e001      	b.n	8008ad8 <inc_lock+0xfc>
 8008ad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ad8:	4906      	ldr	r1, [pc, #24]	@ (8008af4 <inc_lock+0x118>)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	440b      	add	r3, r1
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	2004066c 	.word	0x2004066c

08008af8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d825      	bhi.n	8008b58 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b0c:	4a17      	ldr	r2, [pc, #92]	@ (8008b6c <dec_lock+0x74>)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	4413      	add	r3, r2
 8008b14:	330c      	adds	r3, #12
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b1a:	89fb      	ldrh	r3, [r7, #14]
 8008b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b20:	d101      	bne.n	8008b26 <dec_lock+0x2e>
 8008b22:	2300      	movs	r3, #0
 8008b24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b26:	89fb      	ldrh	r3, [r7, #14]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <dec_lock+0x3a>
 8008b2c:	89fb      	ldrh	r3, [r7, #14]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b32:	4a0e      	ldr	r2, [pc, #56]	@ (8008b6c <dec_lock+0x74>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	4413      	add	r3, r2
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	89fa      	ldrh	r2, [r7, #14]
 8008b3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d105      	bne.n	8008b52 <dec_lock+0x5a>
 8008b46:	4a09      	ldr	r2, [pc, #36]	@ (8008b6c <dec_lock+0x74>)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	4413      	add	r3, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	737b      	strb	r3, [r7, #13]
 8008b56:	e001      	b.n	8008b5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b58:	2302      	movs	r3, #2
 8008b5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	2004066c 	.word	0x2004066c

08008b70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	e010      	b.n	8008ba0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8008bb4 <clear_lock+0x44>)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	4413      	add	r3, r2
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d105      	bne.n	8008b9a <clear_lock+0x2a>
 8008b8e:	4a09      	ldr	r2, [pc, #36]	@ (8008bb4 <clear_lock+0x44>)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	4413      	add	r3, r2
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d9eb      	bls.n	8008b7e <clear_lock+0xe>
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	2004066c 	.word	0x2004066c

08008bb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	78db      	ldrb	r3, [r3, #3]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d034      	beq.n	8008c36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7858      	ldrb	r0, [r3, #1]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bdc:	2301      	movs	r3, #1
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	f7ff fd40 	bl	8008664 <disk_write>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
 8008bee:	e022      	b.n	8008c36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	1ad2      	subs	r2, r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d217      	bcs.n	8008c36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	789b      	ldrb	r3, [r3, #2]
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	e010      	b.n	8008c30 <sync_window+0x78>
					wsect += fs->fsize;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4413      	add	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	7858      	ldrb	r0, [r3, #1]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c22:	2301      	movs	r3, #1
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	f7ff fd1d 	bl	8008664 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d8eb      	bhi.n	8008c0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d01b      	beq.n	8008c90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ffad 	bl	8008bb8 <sync_window>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d113      	bne.n	8008c90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7858      	ldrb	r0, [r3, #1]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c72:	2301      	movs	r3, #1
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	f7ff fcd5 	bl	8008624 <disk_read>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff ff87 	bl	8008bb8 <sync_window>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d158      	bne.n	8008d66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d148      	bne.n	8008d4e <sync_fs+0xb2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	791b      	ldrb	r3, [r3, #4]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d144      	bne.n	8008d4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3330      	adds	r3, #48	@ 0x30
 8008cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff fda9 	bl	8008826 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3330      	adds	r3, #48	@ 0x30
 8008cd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008cdc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fd38 	bl	8008756 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3330      	adds	r3, #48	@ 0x30
 8008cea:	4921      	ldr	r1, [pc, #132]	@ (8008d70 <sync_fs+0xd4>)
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fd4d 	bl	800878c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3330      	adds	r3, #48	@ 0x30
 8008cf6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008cfa:	491e      	ldr	r1, [pc, #120]	@ (8008d74 <sync_fs+0xd8>)
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fd45 	bl	800878c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3330      	adds	r3, #48	@ 0x30
 8008d06:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7ff fd3b 	bl	800878c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3330      	adds	r3, #48	@ 0x30
 8008d1a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7ff fd31 	bl	800878c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7858      	ldrb	r0, [r3, #1]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d42:	2301      	movs	r3, #1
 8008d44:	f7ff fc8e 	bl	8008664 <disk_write>
			fs->fsi_flag = 0;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff fca4 	bl	80086a4 <disk_ioctl>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <sync_fs+0xca>
 8008d62:	2301      	movs	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	41615252 	.word	0x41615252
 8008d74:	61417272 	.word	0x61417272

08008d78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	3b02      	subs	r3, #2
 8008d86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	3b02      	subs	r3, #2
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d301      	bcc.n	8008d98 <clust2sect+0x20>
 8008d94:	2300      	movs	r3, #0
 8008d96:	e008      	b.n	8008daa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	895b      	ldrh	r3, [r3, #10]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	fb03 f202 	mul.w	r2, r3, r2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	4413      	add	r3, r2
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d904      	bls.n	8008dd6 <get_fat+0x20>
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <get_fat+0x26>
		val = 1;	/* Internal error */
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	e08e      	b.n	8008efa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8008de0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d061      	beq.n	8008eae <get_fat+0xf8>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	dc7b      	bgt.n	8008ee6 <get_fat+0x130>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d002      	beq.n	8008df8 <get_fat+0x42>
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d041      	beq.n	8008e7a <get_fat+0xc4>
 8008df6:	e076      	b.n	8008ee6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4413      	add	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6a1a      	ldr	r2, [r3, #32]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	0a5b      	lsrs	r3, r3, #9
 8008e0e:	4413      	add	r3, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f7ff ff14 	bl	8008c40 <move_window>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d166      	bne.n	8008eec <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	60fa      	str	r2, [r7, #12]
 8008e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	6a1a      	ldr	r2, [r3, #32]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	0a5b      	lsrs	r3, r3, #9
 8008e3a:	4413      	add	r3, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6938      	ldr	r0, [r7, #16]
 8008e40:	f7ff fefe 	bl	8008c40 <move_window>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d152      	bne.n	8008ef0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4413      	add	r3, r2
 8008e54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <get_fat+0xba>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	091b      	lsrs	r3, r3, #4
 8008e6e:	e002      	b.n	8008e76 <get_fat+0xc0>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e76:	617b      	str	r3, [r7, #20]
			break;
 8008e78:	e03f      	b.n	8008efa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6a1a      	ldr	r2, [r3, #32]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	0a1b      	lsrs	r3, r3, #8
 8008e82:	4413      	add	r3, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	6938      	ldr	r0, [r7, #16]
 8008e88:	f7ff feda 	bl	8008c40 <move_window>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d130      	bne.n	8008ef4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fc1c 	bl	80086e0 <ld_word>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	617b      	str	r3, [r7, #20]
			break;
 8008eac:	e025      	b.n	8008efa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	09db      	lsrs	r3, r3, #7
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6938      	ldr	r0, [r7, #16]
 8008ebc:	f7ff fec0 	bl	8008c40 <move_window>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d118      	bne.n	8008ef8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fc1a 	bl	8008710 <ld_dword>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008ee2:	617b      	str	r3, [r7, #20]
			break;
 8008ee4:	e009      	b.n	8008efa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e006      	b.n	8008efa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008eec:	bf00      	nop
 8008eee:	e004      	b.n	8008efa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ef0:	bf00      	nop
 8008ef2:	e002      	b.n	8008efa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ef4:	bf00      	nop
 8008ef6:	e000      	b.n	8008efa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ef8:	bf00      	nop
		}
	}

	return val;
 8008efa:	697b      	ldr	r3, [r7, #20]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b089      	sub	sp, #36	@ 0x24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f10:	2302      	movs	r3, #2
 8008f12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	f240 80d9 	bls.w	80090ce <put_fat+0x1ca>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	f080 80d3 	bcs.w	80090ce <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	f000 8096 	beq.w	800905e <put_fat+0x15a>
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	f300 80cb 	bgt.w	80090ce <put_fat+0x1ca>
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d002      	beq.n	8008f42 <put_fat+0x3e>
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d06e      	beq.n	800901e <put_fat+0x11a>
 8008f40:	e0c5      	b.n	80090ce <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a1a      	ldr	r2, [r3, #32]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	0a5b      	lsrs	r3, r3, #9
 8008f58:	4413      	add	r3, r2
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f7ff fe6f 	bl	8008c40 <move_window>
 8008f62:	4603      	mov	r3, r0
 8008f64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f66:	7ffb      	ldrb	r3, [r7, #31]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f040 80a9 	bne.w	80090c0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	1c59      	adds	r1, r3, #1
 8008f78:	61b9      	str	r1, [r7, #24]
 8008f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7e:	4413      	add	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00d      	beq.n	8008fa8 <put_fat+0xa4>
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b25a      	sxtb	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	b25b      	sxtb	r3, r3
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	e001      	b.n	8008fac <put_fat+0xa8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a1a      	ldr	r2, [r3, #32]
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	0a5b      	lsrs	r3, r3, #9
 8008fbe:	4413      	add	r3, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fe3c 	bl	8008c40 <move_window>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fcc:	7ffb      	ldrb	r3, [r7, #31]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d178      	bne.n	80090c4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	4413      	add	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <put_fat+0xf0>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	091b      	lsrs	r3, r3, #4
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	e00e      	b.n	8009012 <put_fat+0x10e>
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	f023 030f 	bic.w	r3, r3, #15
 8008ffe:	b25a      	sxtb	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	b25b      	sxtb	r3, r3
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	b25b      	sxtb	r3, r3
 800900c:	4313      	orrs	r3, r2
 800900e:	b25b      	sxtb	r3, r3
 8009010:	b2db      	uxtb	r3, r3
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	70da      	strb	r2, [r3, #3]
			break;
 800901c:	e057      	b.n	80090ce <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	0a1b      	lsrs	r3, r3, #8
 8009026:	4413      	add	r3, r2
 8009028:	4619      	mov	r1, r3
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff fe08 	bl	8008c40 <move_window>
 8009030:	4603      	mov	r3, r0
 8009032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009034:	7ffb      	ldrb	r3, [r7, #31]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d146      	bne.n	80090c8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009048:	4413      	add	r3, r2
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	b292      	uxth	r2, r2
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fb80 	bl	8008756 <st_word>
			fs->wflag = 1;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	70da      	strb	r2, [r3, #3]
			break;
 800905c:	e037      	b.n	80090ce <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	09db      	lsrs	r3, r3, #7
 8009066:	4413      	add	r3, r2
 8009068:	4619      	mov	r1, r3
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff fde8 	bl	8008c40 <move_window>
 8009070:	4603      	mov	r3, r0
 8009072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009074:	7ffb      	ldrb	r3, [r7, #31]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d128      	bne.n	80090cc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800908e:	4413      	add	r3, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fb3d 	bl	8008710 <ld_dword>
 8009096:	4603      	mov	r3, r0
 8009098:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800909c:	4323      	orrs	r3, r4
 800909e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80090ae:	4413      	add	r3, r2
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fb6a 	bl	800878c <st_dword>
			fs->wflag = 1;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	70da      	strb	r2, [r3, #3]
			break;
 80090be:	e006      	b.n	80090ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80090c0:	bf00      	nop
 80090c2:	e004      	b.n	80090ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80090c4:	bf00      	nop
 80090c6:	e002      	b.n	80090ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80090c8:	bf00      	nop
 80090ca:	e000      	b.n	80090ce <put_fat+0x1ca>
			if (res != FR_OK) break;
 80090cc:	bf00      	nop
		}
	}
	return res;
 80090ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3724      	adds	r7, #36	@ 0x24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd90      	pop	{r4, r7, pc}

080090d8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d904      	bls.n	80090fe <remove_chain+0x26>
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d301      	bcc.n	8009102 <remove_chain+0x2a>
 80090fe:	2302      	movs	r3, #2
 8009100:	e04b      	b.n	800919a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009108:	f04f 32ff 	mov.w	r2, #4294967295
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	69b8      	ldr	r0, [r7, #24]
 8009110:	f7ff fef8 	bl	8008f04 <put_fat>
 8009114:	4603      	mov	r3, r0
 8009116:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009118:	7ffb      	ldrb	r3, [r7, #31]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <remove_chain+0x4a>
 800911e:	7ffb      	ldrb	r3, [r7, #31]
 8009120:	e03b      	b.n	800919a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f7ff fe46 	bl	8008db6 <get_fat>
 800912a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d031      	beq.n	8009196 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <remove_chain+0x64>
 8009138:	2302      	movs	r3, #2
 800913a:	e02e      	b.n	800919a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d101      	bne.n	8009148 <remove_chain+0x70>
 8009144:	2301      	movs	r3, #1
 8009146:	e028      	b.n	800919a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009148:	2200      	movs	r2, #0
 800914a:	68b9      	ldr	r1, [r7, #8]
 800914c:	69b8      	ldr	r0, [r7, #24]
 800914e:	f7ff fed9 	bl	8008f04 <put_fat>
 8009152:	4603      	mov	r3, r0
 8009154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009156:	7ffb      	ldrb	r3, [r7, #31]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <remove_chain+0x88>
 800915c:	7ffb      	ldrb	r3, [r7, #31]
 800915e:	e01c      	b.n	800919a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	3b02      	subs	r3, #2
 800916a:	429a      	cmp	r2, r3
 800916c:	d20b      	bcs.n	8009186 <remove_chain+0xae>
			fs->free_clst++;
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	791b      	ldrb	r3, [r3, #4]
 800917c:	f043 0301 	orr.w	r3, r3, #1
 8009180:	b2da      	uxtb	r2, r3
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	429a      	cmp	r2, r3
 8009192:	d3c6      	bcc.n	8009122 <remove_chain+0x4a>
 8009194:	e000      	b.n	8009198 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009196:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b088      	sub	sp, #32
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10d      	bne.n	80091d4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <create_chain+0x2c>
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d31b      	bcc.n	8009206 <create_chain+0x64>
 80091ce:	2301      	movs	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e018      	b.n	8009206 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fded 	bl	8008db6 <get_fat>
 80091dc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d801      	bhi.n	80091e8 <create_chain+0x46>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e070      	b.n	80092ca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d101      	bne.n	80091f4 <create_chain+0x52>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	e06a      	b.n	80092ca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d201      	bcs.n	8009202 <create_chain+0x60>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	e063      	b.n	80092ca <create_chain+0x128>
		scl = clst;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	3301      	adds	r3, #1
 800920e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	429a      	cmp	r2, r3
 8009218:	d307      	bcc.n	800922a <create_chain+0x88>
				ncl = 2;
 800921a:	2302      	movs	r3, #2
 800921c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	429a      	cmp	r2, r3
 8009224:	d901      	bls.n	800922a <create_chain+0x88>
 8009226:	2300      	movs	r3, #0
 8009228:	e04f      	b.n	80092ca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800922a:	69f9      	ldr	r1, [r7, #28]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff fdc2 	bl	8008db6 <get_fat>
 8009232:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d003      	beq.n	8009248 <create_chain+0xa6>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d101      	bne.n	800924c <create_chain+0xaa>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e03e      	b.n	80092ca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d1da      	bne.n	800920a <create_chain+0x68>
 8009254:	2300      	movs	r3, #0
 8009256:	e038      	b.n	80092ca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009258:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	69f9      	ldr	r1, [r7, #28]
 8009260:	6938      	ldr	r0, [r7, #16]
 8009262:	f7ff fe4f 	bl	8008f04 <put_fat>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <create_chain+0xe2>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d006      	beq.n	8009284 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f7ff fe42 	bl	8008f04 <put_fat>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d116      	bne.n	80092b8 <create_chain+0x116>
		fs->last_clst = ncl;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	691a      	ldr	r2, [r3, #16]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	3b02      	subs	r3, #2
 800929a:	429a      	cmp	r2, r3
 800929c:	d804      	bhi.n	80092a8 <create_chain+0x106>
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	1e5a      	subs	r2, r3, #1
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	711a      	strb	r2, [r3, #4]
 80092b6:	e007      	b.n	80092c8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80092b8:	7dfb      	ldrb	r3, [r7, #23]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d102      	bne.n	80092c4 <create_chain+0x122>
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	e000      	b.n	80092c6 <create_chain+0x124>
 80092c4:	2301      	movs	r3, #1
 80092c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80092c8:	69fb      	ldr	r3, [r7, #28]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b087      	sub	sp, #28
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	3304      	adds	r3, #4
 80092e8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	0a5b      	lsrs	r3, r3, #9
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	8952      	ldrh	r2, [r2, #10]
 80092f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	613a      	str	r2, [r7, #16]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <clmt_clust+0x3a>
 8009308:	2300      	movs	r3, #0
 800930a:	e010      	b.n	800932e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	429a      	cmp	r2, r3
 8009312:	d307      	bcc.n	8009324 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3304      	adds	r3, #4
 8009320:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009322:	e7e9      	b.n	80092f8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009324:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4413      	add	r3, r2
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009350:	d204      	bcs.n	800935c <dir_sdi+0x22>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	f003 031f 	and.w	r3, r3, #31
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <dir_sdi+0x26>
		return FR_INT_ERR;
 800935c:	2302      	movs	r3, #2
 800935e:	e063      	b.n	8009428 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <dir_sdi+0x46>
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d902      	bls.n	8009380 <dir_sdi+0x46>
		clst = fs->dirbase;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	095b      	lsrs	r3, r3, #5
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	8912      	ldrh	r2, [r2, #8]
 800938e:	4293      	cmp	r3, r2
 8009390:	d301      	bcc.n	8009396 <dir_sdi+0x5c>
 8009392:	2302      	movs	r3, #2
 8009394:	e048      	b.n	8009428 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	61da      	str	r2, [r3, #28]
 800939e:	e029      	b.n	80093f4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	895b      	ldrh	r3, [r3, #10]
 80093a4:	025b      	lsls	r3, r3, #9
 80093a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093a8:	e019      	b.n	80093de <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6979      	ldr	r1, [r7, #20]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff fd01 	bl	8008db6 <get_fat>
 80093b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d101      	bne.n	80093c2 <dir_sdi+0x88>
 80093be:	2301      	movs	r3, #1
 80093c0:	e032      	b.n	8009428 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d904      	bls.n	80093d2 <dir_sdi+0x98>
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d301      	bcc.n	80093d6 <dir_sdi+0x9c>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e028      	b.n	8009428 <dir_sdi+0xee>
			ofs -= csz;
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d2e1      	bcs.n	80093aa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80093e6:	6979      	ldr	r1, [r7, #20]
 80093e8:	6938      	ldr	r0, [r7, #16]
 80093ea:	f7ff fcc5 	bl	8008d78 <clust2sect>
 80093ee:	4602      	mov	r2, r0
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <dir_sdi+0xcc>
 8009402:	2302      	movs	r3, #2
 8009404:	e010      	b.n	8009428 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	0a5b      	lsrs	r3, r3, #9
 800940e:	441a      	add	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009420:	441a      	add	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	3320      	adds	r3, #32
 8009446:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <dir_next+0x28>
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009456:	d301      	bcc.n	800945c <dir_next+0x2c>
 8009458:	2304      	movs	r3, #4
 800945a:	e0aa      	b.n	80095b2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 8098 	bne.w	8009598 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	095b      	lsrs	r3, r3, #5
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	8912      	ldrh	r2, [r2, #8]
 8009482:	4293      	cmp	r3, r2
 8009484:	f0c0 8088 	bcc.w	8009598 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	61da      	str	r2, [r3, #28]
 800948e:	2304      	movs	r3, #4
 8009490:	e08f      	b.n	80095b2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	0a5b      	lsrs	r3, r3, #9
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	8952      	ldrh	r2, [r2, #10]
 800949a:	3a01      	subs	r2, #1
 800949c:	4013      	ands	r3, r2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d17a      	bne.n	8009598 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7ff fc83 	bl	8008db6 <get_fat>
 80094b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d801      	bhi.n	80094bc <dir_next+0x8c>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e07a      	b.n	80095b2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d101      	bne.n	80094c8 <dir_next+0x98>
 80094c4:	2301      	movs	r3, #1
 80094c6:	e074      	b.n	80095b2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d358      	bcc.n	8009584 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	61da      	str	r2, [r3, #28]
 80094de:	2304      	movs	r3, #4
 80094e0:	e067      	b.n	80095b2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7ff fe59 	bl	80091a2 <create_chain>
 80094f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <dir_next+0xcc>
 80094f8:	2307      	movs	r3, #7
 80094fa:	e05a      	b.n	80095b2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <dir_next+0xd6>
 8009502:	2302      	movs	r3, #2
 8009504:	e055      	b.n	80095b2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d101      	bne.n	8009512 <dir_next+0xe2>
 800950e:	2301      	movs	r3, #1
 8009510:	e04f      	b.n	80095b2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff fb50 	bl	8008bb8 <sync_window>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <dir_next+0xf2>
 800951e:	2301      	movs	r3, #1
 8009520:	e047      	b.n	80095b2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3330      	adds	r3, #48	@ 0x30
 8009526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800952a:	2100      	movs	r1, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff f97a 	bl	8008826 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fc1d 	bl	8008d78 <clust2sect>
 800953e:	4602      	mov	r2, r0
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009544:	e012      	b.n	800956c <dir_next+0x13c>
						fs->wflag = 1;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff fb33 	bl	8008bb8 <sync_window>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <dir_next+0x12c>
 8009558:	2301      	movs	r3, #1
 800955a:	e02a      	b.n	80095b2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3301      	adds	r3, #1
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	895b      	ldrh	r3, [r3, #10]
 8009570:	461a      	mov	r2, r3
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4293      	cmp	r3, r2
 8009576:	d3e6      	bcc.n	8009546 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800958a:	6979      	ldr	r1, [r7, #20]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7ff fbf3 	bl	8008d78 <clust2sect>
 8009592:	4602      	mov	r2, r0
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	441a      	add	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff feb4 	bl	800933a <dir_sdi>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d12b      	bne.n	8009634 <dir_alloc+0x7a>
		n = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	4619      	mov	r1, r3
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff fb2a 	bl	8008c40 <move_window>
 80095ec:	4603      	mov	r3, r0
 80095ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d11d      	bne.n	8009632 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2be5      	cmp	r3, #229	@ 0xe5
 80095fe:	d004      	beq.n	800960a <dir_alloc+0x50>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d107      	bne.n	800961a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	3301      	adds	r3, #1
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d102      	bne.n	800961e <dir_alloc+0x64>
 8009618:	e00c      	b.n	8009634 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800961e:	2101      	movs	r1, #1
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ff05 	bl	8009430 <dir_next>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0d7      	beq.n	80095e0 <dir_alloc+0x26>
 8009630:	e000      	b.n	8009634 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009632:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b04      	cmp	r3, #4
 8009638:	d101      	bne.n	800963e <dir_alloc+0x84>
 800963a:	2307      	movs	r3, #7
 800963c:	75fb      	strb	r3, [r7, #23]
	return res;
 800963e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	331a      	adds	r3, #26
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff f842 	bl	80086e0 <ld_word>
 800965c:	4603      	mov	r3, r0
 800965e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b03      	cmp	r3, #3
 8009666:	d109      	bne.n	800967c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	3314      	adds	r3, #20
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff f837 	bl	80086e0 <ld_word>
 8009672:	4603      	mov	r3, r0
 8009674:	041b      	lsls	r3, r3, #16
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800967c:	68fb      	ldr	r3, [r7, #12]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	331a      	adds	r3, #26
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	b292      	uxth	r2, r2
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff f85a 	bl	8008756 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d109      	bne.n	80096be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f103 0214 	add.w	r2, r3, #20
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4619      	mov	r1, r3
 80096b8:	4610      	mov	r0, r2
 80096ba:	f7ff f84c 	bl	8008756 <st_word>
	}
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80096d4:	2100      	movs	r1, #0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff fe2f 	bl	800933a <dir_sdi>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <dir_find+0x24>
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	e03e      	b.n	8009768 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6938      	ldr	r0, [r7, #16]
 80096f2:	f7ff faa5 	bl	8008c40 <move_window>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d12f      	bne.n	8009760 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d102      	bne.n	8009714 <dir_find+0x4e>
 800970e:	2304      	movs	r3, #4
 8009710:	75fb      	strb	r3, [r7, #23]
 8009712:	e028      	b.n	8009766 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	330b      	adds	r3, #11
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009720:	b2da      	uxtb	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	330b      	adds	r3, #11
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	f003 0308 	and.w	r3, r3, #8
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <dir_find+0x86>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a18      	ldr	r0, [r3, #32]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	3324      	adds	r3, #36	@ 0x24
 800973e:	220b      	movs	r2, #11
 8009740:	4619      	mov	r1, r3
 8009742:	f7ff f88b 	bl	800885c <mem_cmp>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fe6e 	bl	8009430 <dir_next>
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c5      	beq.n	80096ea <dir_find+0x24>
 800975e:	e002      	b.n	8009766 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009764:	bf00      	nop

	return res;
 8009766:	7dfb      	ldrb	r3, [r7, #23]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800977e:	2101      	movs	r1, #1
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff1a 	bl	80095ba <dir_alloc>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d11c      	bne.n	80097ca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	4619      	mov	r1, r3
 8009796:	68b8      	ldr	r0, [r7, #8]
 8009798:	f7ff fa52 	bl	8008c40 <move_window>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d111      	bne.n	80097ca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	2220      	movs	r2, #32
 80097ac:	2100      	movs	r1, #0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff f839 	bl	8008826 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a18      	ldr	r0, [r3, #32]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3324      	adds	r3, #36	@ 0x24
 80097bc:	220b      	movs	r2, #11
 80097be:	4619      	mov	r1, r3
 80097c0:	f7ff f810 	bl	80087e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2201      	movs	r2, #1
 80097c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3324      	adds	r3, #36	@ 0x24
 80097e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80097ea:	220b      	movs	r2, #11
 80097ec:	2120      	movs	r1, #32
 80097ee:	68b8      	ldr	r0, [r7, #8]
 80097f0:	f7ff f819 	bl	8008826 <mem_set>
	si = i = 0; ni = 8;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	61fb      	str	r3, [r7, #28]
 80097fc:	2308      	movs	r3, #8
 80097fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	61fa      	str	r2, [r7, #28]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800980e:	7efb      	ldrb	r3, [r7, #27]
 8009810:	2b20      	cmp	r3, #32
 8009812:	d94e      	bls.n	80098b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009814:	7efb      	ldrb	r3, [r7, #27]
 8009816:	2b2f      	cmp	r3, #47	@ 0x2f
 8009818:	d006      	beq.n	8009828 <create_name+0x54>
 800981a:	7efb      	ldrb	r3, [r7, #27]
 800981c:	2b5c      	cmp	r3, #92	@ 0x5c
 800981e:	d110      	bne.n	8009842 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009820:	e002      	b.n	8009828 <create_name+0x54>
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b2f      	cmp	r3, #47	@ 0x2f
 8009832:	d0f6      	beq.n	8009822 <create_name+0x4e>
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	4413      	add	r3, r2
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b5c      	cmp	r3, #92	@ 0x5c
 800983e:	d0f0      	beq.n	8009822 <create_name+0x4e>
			break;
 8009840:	e038      	b.n	80098b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009842:	7efb      	ldrb	r3, [r7, #27]
 8009844:	2b2e      	cmp	r3, #46	@ 0x2e
 8009846:	d003      	beq.n	8009850 <create_name+0x7c>
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	429a      	cmp	r2, r3
 800984e:	d30c      	bcc.n	800986a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b0b      	cmp	r3, #11
 8009854:	d002      	beq.n	800985c <create_name+0x88>
 8009856:	7efb      	ldrb	r3, [r7, #27]
 8009858:	2b2e      	cmp	r3, #46	@ 0x2e
 800985a:	d001      	beq.n	8009860 <create_name+0x8c>
 800985c:	2306      	movs	r3, #6
 800985e:	e044      	b.n	80098ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009860:	2308      	movs	r3, #8
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	230b      	movs	r3, #11
 8009866:	617b      	str	r3, [r7, #20]
			continue;
 8009868:	e022      	b.n	80098b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800986a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800986e:	2b00      	cmp	r3, #0
 8009870:	da04      	bge.n	800987c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009872:	7efb      	ldrb	r3, [r7, #27]
 8009874:	3b80      	subs	r3, #128	@ 0x80
 8009876:	4a1f      	ldr	r2, [pc, #124]	@ (80098f4 <create_name+0x120>)
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800987c:	7efb      	ldrb	r3, [r7, #27]
 800987e:	4619      	mov	r1, r3
 8009880:	481d      	ldr	r0, [pc, #116]	@ (80098f8 <create_name+0x124>)
 8009882:	f7ff f812 	bl	80088aa <chk_chr>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <create_name+0xbc>
 800988c:	2306      	movs	r3, #6
 800988e:	e02c      	b.n	80098ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009890:	7efb      	ldrb	r3, [r7, #27]
 8009892:	2b60      	cmp	r3, #96	@ 0x60
 8009894:	d905      	bls.n	80098a2 <create_name+0xce>
 8009896:	7efb      	ldrb	r3, [r7, #27]
 8009898:	2b7a      	cmp	r3, #122	@ 0x7a
 800989a:	d802      	bhi.n	80098a2 <create_name+0xce>
 800989c:	7efb      	ldrb	r3, [r7, #27]
 800989e:	3b20      	subs	r3, #32
 80098a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	613a      	str	r2, [r7, #16]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4413      	add	r3, r2
 80098ac:	7efa      	ldrb	r2, [r7, #27]
 80098ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80098b0:	e7a6      	b.n	8009800 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80098b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	441a      	add	r2, r3
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <create_name+0xf4>
 80098c4:	2306      	movs	r3, #6
 80098c6:	e010      	b.n	80098ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2be5      	cmp	r3, #229	@ 0xe5
 80098ce:	d102      	bne.n	80098d6 <create_name+0x102>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2205      	movs	r2, #5
 80098d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80098d6:	7efb      	ldrb	r3, [r7, #27]
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d801      	bhi.n	80098e0 <create_name+0x10c>
 80098dc:	2204      	movs	r2, #4
 80098de:	e000      	b.n	80098e2 <create_name+0x10e>
 80098e0:	2200      	movs	r2, #0
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	330b      	adds	r3, #11
 80098e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80098e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	0800bd50 	.word	0x0800bd50
 80098f8:	0800bc9c 	.word	0x0800bc9c

080098fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009910:	e002      	b.n	8009918 <follow_path+0x1c>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b2f      	cmp	r3, #47	@ 0x2f
 800991e:	d0f8      	beq.n	8009912 <follow_path+0x16>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b5c      	cmp	r3, #92	@ 0x5c
 8009926:	d0f4      	beq.n	8009912 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2200      	movs	r2, #0
 800992c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b1f      	cmp	r3, #31
 8009934:	d80a      	bhi.n	800994c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2280      	movs	r2, #128	@ 0x80
 800993a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800993e:	2100      	movs	r1, #0
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fcfa 	bl	800933a <dir_sdi>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]
 800994a:	e043      	b.n	80099d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800994c:	463b      	mov	r3, r7
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff ff3f 	bl	80097d4 <create_name>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d134      	bne.n	80099ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff feb0 	bl	80096c6 <dir_find>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009970:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b04      	cmp	r3, #4
 800997c:	d127      	bne.n	80099ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d122      	bne.n	80099ce <follow_path+0xd2>
 8009988:	2305      	movs	r3, #5
 800998a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800998c:	e01f      	b.n	80099ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d11c      	bne.n	80099d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	799b      	ldrb	r3, [r3, #6]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80099a4:	2305      	movs	r3, #5
 80099a6:	75fb      	strb	r3, [r7, #23]
 80099a8:	e014      	b.n	80099d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b8:	4413      	add	r3, r2
 80099ba:	4619      	mov	r1, r3
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fe43 	bl	8009648 <ld_clust>
 80099c2:	4602      	mov	r2, r0
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099c8:	e7c0      	b.n	800994c <follow_path+0x50>
			if (res != FR_OK) break;
 80099ca:	bf00      	nop
 80099cc:	e002      	b.n	80099d4 <follow_path+0xd8>
				break;
 80099ce:	bf00      	nop
 80099d0:	e000      	b.n	80099d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099d2:	bf00      	nop
			}
		}
	}

	return res;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80099de:	b480      	push	{r7}
 80099e0:	b087      	sub	sp, #28
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80099e6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d031      	beq.n	8009a58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	e002      	b.n	8009a02 <get_ldnumber+0x24>
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	3301      	adds	r3, #1
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d903      	bls.n	8009a12 <get_ldnumber+0x34>
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009a10:	d1f4      	bne.n	80099fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b3a      	cmp	r3, #58	@ 0x3a
 8009a18:	d11c      	bne.n	8009a54 <get_ldnumber+0x76>
			tp = *path;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	60fa      	str	r2, [r7, #12]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	3b30      	subs	r3, #48	@ 0x30
 8009a2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	d80e      	bhi.n	8009a50 <get_ldnumber+0x72>
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d10a      	bne.n	8009a50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d107      	bne.n	8009a50 <get_ldnumber+0x72>
					vol = (int)i;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	3301      	adds	r3, #1
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	e002      	b.n	8009a5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009a54:	2300      	movs	r3, #0
 8009a56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009a58:	693b      	ldr	r3, [r7, #16]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	70da      	strb	r2, [r3, #3]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff f8dc 	bl	8008c40 <move_window>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <check_fs+0x2a>
 8009a8e:	2304      	movs	r3, #4
 8009a90:	e038      	b.n	8009b04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3330      	adds	r3, #48	@ 0x30
 8009a96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fe20 	bl	80086e0 <ld_word>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d001      	beq.n	8009ab0 <check_fs+0x48>
 8009aac:	2303      	movs	r3, #3
 8009aae:	e029      	b.n	8009b04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ab6:	2be9      	cmp	r3, #233	@ 0xe9
 8009ab8:	d009      	beq.n	8009ace <check_fs+0x66>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ac0:	2beb      	cmp	r3, #235	@ 0xeb
 8009ac2:	d11e      	bne.n	8009b02 <check_fs+0x9a>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009aca:	2b90      	cmp	r3, #144	@ 0x90
 8009acc:	d119      	bne.n	8009b02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3330      	adds	r3, #48	@ 0x30
 8009ad2:	3336      	adds	r3, #54	@ 0x36
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe fe1b 	bl	8008710 <ld_dword>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8009b0c <check_fs+0xa4>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d101      	bne.n	8009aea <check_fs+0x82>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e00c      	b.n	8009b04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3330      	adds	r3, #48	@ 0x30
 8009aee:	3352      	adds	r3, #82	@ 0x52
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fe0d 	bl	8008710 <ld_dword>
 8009af6:	4603      	mov	r3, r0
 8009af8:	4a05      	ldr	r2, [pc, #20]	@ (8009b10 <check_fs+0xa8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d101      	bne.n	8009b02 <check_fs+0x9a>
 8009afe:	2300      	movs	r3, #0
 8009b00:	e000      	b.n	8009b04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009b02:	2302      	movs	r3, #2
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	00544146 	.word	0x00544146
 8009b10:	33544146 	.word	0x33544146

08009b14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b096      	sub	sp, #88	@ 0x58
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff ff58 	bl	80099de <get_ldnumber>
 8009b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	da01      	bge.n	8009b3a <find_volume+0x26>
 8009b36:	230b      	movs	r3, #11
 8009b38:	e22d      	b.n	8009f96 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b3a:	4aa1      	ldr	r2, [pc, #644]	@ (8009dc0 <find_volume+0x2ac>)
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <find_volume+0x3a>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	e223      	b.n	8009f96 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	f023 0301 	bic.w	r3, r3, #1
 8009b5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01a      	beq.n	8009b9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fd1b 	bl	80085a4 <disk_status>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10c      	bne.n	8009b9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d007      	beq.n	8009b96 <find_volume+0x82>
 8009b86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009b92:	230a      	movs	r3, #10
 8009b94:	e1ff      	b.n	8009f96 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009b96:	2300      	movs	r3, #0
 8009b98:	e1fd      	b.n	8009f96 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fd13 	bl	80085d8 <disk_initialize>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e1e6      	b.n	8009f96 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <find_volume+0xca>
 8009bce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e1db      	b.n	8009f96 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009be2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009be4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009be6:	f7ff ff3f 	bl	8009a68 <check_fs>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d149      	bne.n	8009c8c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bfc:	e01e      	b.n	8009c3c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009c0c:	4413      	add	r3, r2
 8009c0e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	3304      	adds	r3, #4
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d006      	beq.n	8009c28 <find_volume+0x114>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fd76 	bl	8008710 <ld_dword>
 8009c24:	4602      	mov	r2, r0
 8009c26:	e000      	b.n	8009c2a <find_volume+0x116>
 8009c28:	2200      	movs	r2, #0
 8009c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	3358      	adds	r3, #88	@ 0x58
 8009c30:	443b      	add	r3, r7
 8009c32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c38:	3301      	adds	r3, #1
 8009c3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d9dd      	bls.n	8009bfe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009c42:	2300      	movs	r3, #0
 8009c44:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <find_volume+0x13e>
 8009c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	3358      	adds	r3, #88	@ 0x58
 8009c58:	443b      	add	r3, r7
 8009c5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009c5e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <find_volume+0x15e>
 8009c66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c6a:	f7ff fefd 	bl	8009a68 <check_fs>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	e000      	b.n	8009c74 <find_volume+0x160>
 8009c72:	2303      	movs	r3, #3
 8009c74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009c78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d905      	bls.n	8009c8c <find_volume+0x178>
 8009c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c82:	3301      	adds	r3, #1
 8009c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d9e2      	bls.n	8009c52 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d101      	bne.n	8009c98 <find_volume+0x184>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e17e      	b.n	8009f96 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d901      	bls.n	8009ca4 <find_volume+0x190>
 8009ca0:	230d      	movs	r3, #13
 8009ca2:	e178      	b.n	8009f96 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	3330      	adds	r3, #48	@ 0x30
 8009ca8:	330b      	adds	r3, #11
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fd18 	bl	80086e0 <ld_word>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb6:	d001      	beq.n	8009cbc <find_volume+0x1a8>
 8009cb8:	230d      	movs	r3, #13
 8009cba:	e16c      	b.n	8009f96 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	3330      	adds	r3, #48	@ 0x30
 8009cc0:	3316      	adds	r3, #22
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fd0c 	bl	80086e0 <ld_word>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d106      	bne.n	8009ce0 <find_volume+0x1cc>
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	3330      	adds	r3, #48	@ 0x30
 8009cd6:	3324      	adds	r3, #36	@ 0x24
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fd19 	bl	8008710 <ld_dword>
 8009cde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ce4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf2:	789b      	ldrb	r3, [r3, #2]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d005      	beq.n	8009d04 <find_volume+0x1f0>
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfa:	789b      	ldrb	r3, [r3, #2]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d001      	beq.n	8009d04 <find_volume+0x1f0>
 8009d00:	230d      	movs	r3, #13
 8009d02:	e148      	b.n	8009f96 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	789b      	ldrb	r3, [r3, #2]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
 8009d10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	895b      	ldrh	r3, [r3, #10]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d008      	beq.n	8009d38 <find_volume+0x224>
 8009d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d28:	895b      	ldrh	r3, [r3, #10]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	895b      	ldrh	r3, [r3, #10]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	4013      	ands	r3, r2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <find_volume+0x228>
 8009d38:	230d      	movs	r3, #13
 8009d3a:	e12c      	b.n	8009f96 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3e:	3330      	adds	r3, #48	@ 0x30
 8009d40:	3311      	adds	r3, #17
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fccc 	bl	80086e0 <ld_word>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	891b      	ldrh	r3, [r3, #8]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <find_volume+0x24e>
 8009d5e:	230d      	movs	r3, #13
 8009d60:	e119      	b.n	8009f96 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	3330      	adds	r3, #48	@ 0x30
 8009d66:	3313      	adds	r3, #19
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fcb9 	bl	80086e0 <ld_word>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <find_volume+0x272>
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	3330      	adds	r3, #48	@ 0x30
 8009d7c:	3320      	adds	r3, #32
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fe fcc6 	bl	8008710 <ld_dword>
 8009d84:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	3330      	adds	r3, #48	@ 0x30
 8009d8a:	330e      	adds	r3, #14
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fe fca7 	bl	80086e0 <ld_word>
 8009d92:	4603      	mov	r3, r0
 8009d94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009d96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <find_volume+0x28c>
 8009d9c:	230d      	movs	r3, #13
 8009d9e:	e0fa      	b.n	8009f96 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009da0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da4:	4413      	add	r3, r2
 8009da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009da8:	8912      	ldrh	r2, [r2, #8]
 8009daa:	0912      	lsrs	r2, r2, #4
 8009dac:	b292      	uxth	r2, r2
 8009dae:	4413      	add	r3, r2
 8009db0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d204      	bcs.n	8009dc4 <find_volume+0x2b0>
 8009dba:	230d      	movs	r3, #13
 8009dbc:	e0eb      	b.n	8009f96 <find_volume+0x482>
 8009dbe:	bf00      	nop
 8009dc0:	20040664 	.word	0x20040664
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dcc:	8952      	ldrh	r2, [r2, #10]
 8009dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <find_volume+0x2ca>
 8009dda:	230d      	movs	r3, #13
 8009ddc:	e0db      	b.n	8009f96 <find_volume+0x482>
		fmt = FS_FAT32;
 8009dde:	2303      	movs	r3, #3
 8009de0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d802      	bhi.n	8009df4 <find_volume+0x2e0>
 8009dee:	2302      	movs	r3, #2
 8009df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d802      	bhi.n	8009e04 <find_volume+0x2f0>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	1c9a      	adds	r2, r3, #2
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009e12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e16:	441a      	add	r2, r3
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009e1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	441a      	add	r2, r3
 8009e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e24:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009e26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d11e      	bne.n	8009e6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	3330      	adds	r3, #48	@ 0x30
 8009e32:	332a      	adds	r3, #42	@ 0x2a
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fe fc53 	bl	80086e0 <ld_word>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <find_volume+0x330>
 8009e40:	230d      	movs	r3, #13
 8009e42:	e0a8      	b.n	8009f96 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	891b      	ldrh	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <find_volume+0x33c>
 8009e4c:	230d      	movs	r3, #13
 8009e4e:	e0a2      	b.n	8009f96 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e52:	3330      	adds	r3, #48	@ 0x30
 8009e54:	332c      	adds	r3, #44	@ 0x2c
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fc5a 	bl	8008710 <ld_dword>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e6a:	e01f      	b.n	8009eac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6e:	891b      	ldrh	r3, [r3, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <find_volume+0x364>
 8009e74:	230d      	movs	r3, #13
 8009e76:	e08e      	b.n	8009f96 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7a:	6a1a      	ldr	r2, [r3, #32]
 8009e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e7e:	441a      	add	r2, r3
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009e84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d103      	bne.n	8009e94 <find_volume+0x380>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	e00a      	b.n	8009eaa <find_volume+0x396>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	695a      	ldr	r2, [r3, #20]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	4413      	add	r3, r2
 8009e9e:	085a      	lsrs	r2, r3, #1
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009eaa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	699a      	ldr	r2, [r3, #24]
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eb2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009eb6:	0a5b      	lsrs	r3, r3, #9
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d201      	bcs.n	8009ec0 <find_volume+0x3ac>
 8009ebc:	230d      	movs	r3, #13
 8009ebe:	e06a      	b.n	8009f96 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec6:	611a      	str	r2, [r3, #16]
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	2280      	movs	r2, #128	@ 0x80
 8009ed4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d149      	bne.n	8009f72 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	3330      	adds	r3, #48	@ 0x30
 8009ee2:	3330      	adds	r3, #48	@ 0x30
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe fbfb 	bl	80086e0 <ld_word>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d140      	bne.n	8009f72 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ef8:	f7fe fea2 	bl	8008c40 <move_window>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d137      	bne.n	8009f72 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f04:	2200      	movs	r2, #0
 8009f06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0a:	3330      	adds	r3, #48	@ 0x30
 8009f0c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fbe5 	bl	80086e0 <ld_word>
 8009f16:	4603      	mov	r3, r0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d127      	bne.n	8009f72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	3330      	adds	r3, #48	@ 0x30
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fbf2 	bl	8008710 <ld_dword>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa0 <find_volume+0x48c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d11e      	bne.n	8009f72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f36:	3330      	adds	r3, #48	@ 0x30
 8009f38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe fbe7 	bl	8008710 <ld_dword>
 8009f42:	4603      	mov	r3, r0
 8009f44:	4a17      	ldr	r2, [pc, #92]	@ (8009fa4 <find_volume+0x490>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d113      	bne.n	8009f72 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	3330      	adds	r3, #48	@ 0x30
 8009f4e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fbdc 	bl	8008710 <ld_dword>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	3330      	adds	r3, #48	@ 0x30
 8009f62:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fbd2 	bl	8008710 <ld_dword>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f74:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009f78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <find_volume+0x494>)
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <find_volume+0x494>)
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	4b08      	ldr	r3, [pc, #32]	@ (8009fa8 <find_volume+0x494>)
 8009f88:	881a      	ldrh	r2, [r3, #0]
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009f8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f90:	f7fe fdee 	bl	8008b70 <clear_lock>
#endif
	return FR_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3758      	adds	r7, #88	@ 0x58
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	41615252 	.word	0x41615252
 8009fa4:	61417272 	.word	0x61417272
 8009fa8:	20040668 	.word	0x20040668

08009fac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009fb6:	2309      	movs	r3, #9
 8009fb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01c      	beq.n	8009ffa <validate+0x4e>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d018      	beq.n	8009ffa <validate+0x4e>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d013      	beq.n	8009ffa <validate+0x4e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	889a      	ldrh	r2, [r3, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	88db      	ldrh	r3, [r3, #6]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d10c      	bne.n	8009ffa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	785b      	ldrb	r3, [r3, #1]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fadc 	bl	80085a4 <disk_status>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <validate+0x4e>
			res = FR_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <validate+0x5a>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	e000      	b.n	800a008 <validate+0x5c>
 800a006:	2300      	movs	r3, #0
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	6013      	str	r3, [r2, #0]
	return res;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a02a:	f107 0310 	add.w	r3, r7, #16
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fcd5 	bl	80099de <get_ldnumber>
 800a034:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da01      	bge.n	800a040 <f_mount+0x28>
 800a03c:	230b      	movs	r3, #11
 800a03e:	e02b      	b.n	800a098 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a040:	4a17      	ldr	r2, [pc, #92]	@ (800a0a0 <f_mount+0x88>)
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a048:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a050:	69b8      	ldr	r0, [r7, #24]
 800a052:	f7fe fd8d 	bl	8008b70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	490d      	ldr	r1, [pc, #52]	@ (800a0a0 <f_mount+0x88>)
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <f_mount+0x66>
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d001      	beq.n	800a082 <f_mount+0x6a>
 800a07e:	2300      	movs	r3, #0
 800a080:	e00a      	b.n	800a098 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a082:	f107 010c 	add.w	r1, r7, #12
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	2200      	movs	r2, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fd41 	bl	8009b14 <find_volume>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a096:	7dfb      	ldrb	r3, [r7, #23]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3720      	adds	r7, #32
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20040664 	.word	0x20040664

0800a0a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b098      	sub	sp, #96	@ 0x60
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <f_open+0x18>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	e1a9      	b.n	800a410 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a0c4:	79fa      	ldrb	r2, [r7, #7]
 800a0c6:	f107 0110 	add.w	r1, r7, #16
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff fd20 	bl	8009b14 <find_volume>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a0da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f040 818d 	bne.w	800a3fe <f_open+0x35a>
		dj.obj.fs = fs;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	f107 0314 	add.w	r3, r7, #20
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fc03 	bl	80098fc <follow_path>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a100:	2b00      	cmp	r3, #0
 800a102:	d118      	bne.n	800a136 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a104:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da03      	bge.n	800a116 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a10e:	2306      	movs	r3, #6
 800a110:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a114:	e00f      	b.n	800a136 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	bf8c      	ite	hi
 800a11c:	2301      	movhi	r3, #1
 800a11e:	2300      	movls	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	461a      	mov	r2, r3
 800a124:	f107 0314 	add.w	r3, r7, #20
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fbd8 	bl	80088e0 <chk_lock>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	f003 031c 	and.w	r3, r3, #28
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d07f      	beq.n	800a240 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a140:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a144:	2b00      	cmp	r3, #0
 800a146:	d017      	beq.n	800a178 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a148:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d10e      	bne.n	800a16e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a150:	f7fe fc22 	bl	8008998 <enq_lock>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <f_open+0xc4>
 800a15a:	f107 0314 	add.w	r3, r7, #20
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff fb06 	bl	8009770 <dir_register>
 800a164:	4603      	mov	r3, r0
 800a166:	e000      	b.n	800a16a <f_open+0xc6>
 800a168:	2312      	movs	r3, #18
 800a16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	f043 0308 	orr.w	r3, r3, #8
 800a174:	71fb      	strb	r3, [r7, #7]
 800a176:	e010      	b.n	800a19a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a178:	7ebb      	ldrb	r3, [r7, #26]
 800a17a:	f003 0311 	and.w	r3, r3, #17
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <f_open+0xe6>
					res = FR_DENIED;
 800a182:	2307      	movs	r3, #7
 800a184:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a188:	e007      	b.n	800a19a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <f_open+0xf6>
 800a194:	2308      	movs	r3, #8
 800a196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a19a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d168      	bne.n	800a274 <f_open+0x1d0>
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	f003 0308 	and.w	r3, r3, #8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d063      	beq.n	800a274 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a1ac:	f7fd fcbe 	bl	8007b2c <get_fattime>
 800a1b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b4:	330e      	adds	r3, #14
 800a1b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7fe fae7 	bl	800878c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c0:	3316      	adds	r3, #22
 800a1c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe fae1 	bl	800878c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1cc:	330b      	adds	r3, #11
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fa35 	bl	8009648 <ld_clust>
 800a1de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff fa4d 	bl	8009686 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ee:	331c      	adds	r3, #28
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe faca 	bl	800878c <st_dword>
					fs->wflag = 1;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d037      	beq.n	800a274 <f_open+0x1d0>
						dw = fs->winsect;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a20a:	f107 0314 	add.w	r3, r7, #20
 800a20e:	2200      	movs	r2, #0
 800a210:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe ff60 	bl	80090d8 <remove_chain>
 800a218:	4603      	mov	r3, r0
 800a21a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a21e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a222:	2b00      	cmp	r3, #0
 800a224:	d126      	bne.n	800a274 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fd08 	bl	8008c40 <move_window>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a23a:	3a01      	subs	r2, #1
 800a23c:	60da      	str	r2, [r3, #12]
 800a23e:	e019      	b.n	800a274 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a240:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a244:	2b00      	cmp	r3, #0
 800a246:	d115      	bne.n	800a274 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a248:	7ebb      	ldrb	r3, [r7, #26]
 800a24a:	f003 0310 	and.w	r3, r3, #16
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <f_open+0x1b6>
					res = FR_NO_FILE;
 800a252:	2304      	movs	r3, #4
 800a254:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a258:	e00c      	b.n	800a274 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a25a:	79fb      	ldrb	r3, [r7, #7]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <f_open+0x1d0>
 800a264:	7ebb      	ldrb	r3, [r7, #26]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <f_open+0x1d0>
						res = FR_DENIED;
 800a26e:	2307      	movs	r3, #7
 800a270:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a274:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d126      	bne.n	800a2ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a28c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	bf8c      	ite	hi
 800a2a2:	2301      	movhi	r3, #1
 800a2a4:	2300      	movls	r3, #0
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	f107 0314 	add.w	r3, r7, #20
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe fb93 	bl	80089dc <inc_lock>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <f_open+0x226>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a2ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 8095 	bne.w	800a3fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff f9b4 	bl	8009648 <ld_clust>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e8:	331c      	adds	r3, #28
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe fa10 	bl	8008710 <ld_dword>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	88da      	ldrh	r2, [r3, #6]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	79fa      	ldrb	r2, [r7, #7]
 800a30e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3330      	adds	r3, #48	@ 0x30
 800a326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a32a:	2100      	movs	r1, #0
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fa7a 	bl	8008826 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	f003 0320 	and.w	r3, r3, #32
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d060      	beq.n	800a3fe <f_open+0x35a>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d05c      	beq.n	800a3fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	895b      	ldrh	r3, [r3, #10]
 800a350:	025b      	lsls	r3, r3, #9
 800a352:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a360:	e016      	b.n	800a390 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fd25 	bl	8008db6 <get_fat>
 800a36c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a36e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a370:	2b01      	cmp	r3, #1
 800a372:	d802      	bhi.n	800a37a <f_open+0x2d6>
 800a374:	2302      	movs	r3, #2
 800a376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a37a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a380:	d102      	bne.n	800a388 <f_open+0x2e4>
 800a382:	2301      	movs	r3, #1
 800a384:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a388:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a390:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <f_open+0x2fc>
 800a398:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a39a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d8e0      	bhi.n	800a362 <f_open+0x2be>
				}
				fp->clust = clst;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d127      	bne.n	800a3fe <f_open+0x35a>
 800a3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d022      	beq.n	800a3fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe fcdb 	bl	8008d78 <clust2sect>
 800a3c2:	6478      	str	r0, [r7, #68]	@ 0x44
 800a3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d103      	bne.n	800a3d2 <f_open+0x32e>
						res = FR_INT_ERR;
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a3d0:	e015      	b.n	800a3fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a3d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3d4:	0a5a      	lsrs	r2, r3, #9
 800a3d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d8:	441a      	add	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	7858      	ldrb	r0, [r3, #1]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a1a      	ldr	r2, [r3, #32]
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f7fe f919 	bl	8008624 <disk_read>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <f_open+0x35a>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a3fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <f_open+0x368>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a40c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a410:	4618      	mov	r0, r3
 800a412:	3760      	adds	r7, #96	@ 0x60
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08c      	sub	sp, #48	@ 0x30
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f107 0210 	add.w	r2, r7, #16
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fdb7 	bl	8009fac <validate>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a444:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d107      	bne.n	800a45c <f_write+0x44>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	7d5b      	ldrb	r3, [r3, #21]
 800a450:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <f_write+0x4a>
 800a45c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a460:	e14b      	b.n	800a6fa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	7d1b      	ldrb	r3, [r3, #20]
 800a466:	f003 0302 	and.w	r3, r3, #2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <f_write+0x5a>
 800a46e:	2307      	movs	r3, #7
 800a470:	e143      	b.n	800a6fa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	699a      	ldr	r2, [r3, #24]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	429a      	cmp	r2, r3
 800a480:	f080 812d 	bcs.w	800a6de <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	43db      	mvns	r3, r3
 800a48a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a48c:	e127      	b.n	800a6de <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 80e3 	bne.w	800a662 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	0a5b      	lsrs	r3, r3, #9
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	8952      	ldrh	r2, [r2, #10]
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d143      	bne.n	800a53a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10c      	bne.n	800a4d4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d11a      	bne.n	800a4fc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fe69 	bl	80091a2 <create_chain>
 800a4d0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a4d2:	e013      	b.n	800a4fc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d007      	beq.n	800a4ec <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7fe fef5 	bl	80092d2 <clmt_clust>
 800a4e8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a4ea:	e007      	b.n	800a4fc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7fe fe54 	bl	80091a2 <create_chain>
 800a4fa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80f2 	beq.w	800a6e8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a506:	2b01      	cmp	r3, #1
 800a508:	d104      	bne.n	800a514 <f_write+0xfc>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2202      	movs	r2, #2
 800a50e:	755a      	strb	r2, [r3, #21]
 800a510:	2302      	movs	r3, #2
 800a512:	e0f2      	b.n	800a6fa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d104      	bne.n	800a526 <f_write+0x10e>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	755a      	strb	r2, [r3, #21]
 800a522:	2301      	movs	r3, #1
 800a524:	e0e9      	b.n	800a6fa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a52a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <f_write+0x122>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a538:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	b25b      	sxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	da18      	bge.n	800a576 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	7858      	ldrb	r0, [r3, #1]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a1a      	ldr	r2, [r3, #32]
 800a552:	2301      	movs	r3, #1
 800a554:	f7fe f886 	bl	8008664 <disk_write>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <f_write+0x150>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	755a      	strb	r2, [r3, #21]
 800a564:	2301      	movs	r3, #1
 800a566:	e0c8      	b.n	800a6fa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	7d1b      	ldrb	r3, [r3, #20]
 800a56c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a570:	b2da      	uxtb	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	4619      	mov	r1, r3
 800a57e:	4610      	mov	r0, r2
 800a580:	f7fe fbfa 	bl	8008d78 <clust2sect>
 800a584:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <f_write+0x17e>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2202      	movs	r2, #2
 800a590:	755a      	strb	r2, [r3, #21]
 800a592:	2302      	movs	r3, #2
 800a594:	e0b1      	b.n	800a6fa <f_write+0x2e2>
			sect += csect;
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	4413      	add	r3, r2
 800a59c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	0a5b      	lsrs	r3, r3, #9
 800a5a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d03c      	beq.n	800a624 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	8952      	ldrh	r2, [r2, #10]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d905      	bls.n	800a5c4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	895b      	ldrh	r3, [r3, #10]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	7858      	ldrb	r0, [r3, #1]
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	69f9      	ldr	r1, [r7, #28]
 800a5ce:	f7fe f849 	bl	8008664 <disk_write>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <f_write+0x1ca>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	755a      	strb	r2, [r3, #21]
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e08b      	b.n	800a6fa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	6a3a      	ldr	r2, [r7, #32]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d915      	bls.n	800a61c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	025b      	lsls	r3, r3, #9
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a608:	4619      	mov	r1, r3
 800a60a:	f7fe f8eb 	bl	80087e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	7d1b      	ldrb	r3, [r3, #20]
 800a612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a616:	b2da      	uxtb	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	025b      	lsls	r3, r3, #9
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a622:	e03f      	b.n	800a6a4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d016      	beq.n	800a65c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a636:	429a      	cmp	r2, r3
 800a638:	d210      	bcs.n	800a65c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	7858      	ldrb	r0, [r3, #1]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a644:	2301      	movs	r3, #1
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	f7fd ffec 	bl	8008624 <disk_read>
 800a64c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d004      	beq.n	800a65c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	755a      	strb	r2, [r3, #21]
 800a658:	2301      	movs	r3, #1
 800a65a:	e04e      	b.n	800a6fa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a66e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d901      	bls.n	800a67c <f_write+0x264>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68a:	4413      	add	r3, r2
 800a68c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a68e:	69f9      	ldr	r1, [r7, #28]
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe f8a7 	bl	80087e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	7d1b      	ldrb	r3, [r3, #20]
 800a69a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a6a4:	69fa      	ldr	r2, [r7, #28]
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a8:	4413      	add	r3, r2
 800a6aa:	61fb      	str	r3, [r7, #28]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	699a      	ldr	r2, [r3, #24]
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b2:	441a      	add	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	619a      	str	r2, [r3, #24]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	bf38      	it	cc
 800a6c4:	461a      	movcc	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d0:	441a      	add	r2, r3
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f47f aed4 	bne.w	800a48e <f_write+0x76>
 800a6e6:	e000      	b.n	800a6ea <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a6e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	7d1b      	ldrb	r3, [r3, #20]
 800a6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3730      	adds	r7, #48	@ 0x30
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f107 0208 	add.w	r2, r7, #8
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fc4a 	bl	8009fac <validate>
 800a718:	4603      	mov	r3, r0
 800a71a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d168      	bne.n	800a7f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7d1b      	ldrb	r3, [r3, #20]
 800a726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d062      	beq.n	800a7f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	7d1b      	ldrb	r3, [r3, #20]
 800a732:	b25b      	sxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	da15      	bge.n	800a764 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	7858      	ldrb	r0, [r3, #1]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a1a      	ldr	r2, [r3, #32]
 800a746:	2301      	movs	r3, #1
 800a748:	f7fd ff8c 	bl	8008664 <disk_write>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <f_sync+0x54>
 800a752:	2301      	movs	r3, #1
 800a754:	e04f      	b.n	800a7f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	7d1b      	ldrb	r3, [r3, #20]
 800a75a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a764:	f7fd f9e2 	bl	8007b2c <get_fattime>
 800a768:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7fe fa64 	bl	8008c40 <move_window>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d138      	bne.n	800a7f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a786:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	330b      	adds	r3, #11
 800a78c:	781a      	ldrb	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	330b      	adds	r3, #11
 800a792:	f042 0220 	orr.w	r2, r2, #32
 800a796:	b2d2      	uxtb	r2, r2
 800a798:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	f7fe ff6e 	bl	8009686 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f103 021c 	add.w	r2, r3, #28
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fd ffe8 	bl	800878c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3316      	adds	r3, #22
 800a7c0:	6939      	ldr	r1, [r7, #16]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fd ffe2 	bl	800878c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3312      	adds	r3, #18
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fd ffc1 	bl	8008756 <st_word>
					fs->wflag = 1;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe fa5d 	bl	8008c9c <sync_fs>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff ff7b 	bl	800a702 <f_sync>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d118      	bne.n	800a848 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f107 0208 	add.w	r2, r7, #8
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fbc4 	bl	8009fac <validate>
 800a824:	4603      	mov	r3, r0
 800a826:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10c      	bne.n	800a848 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe f960 	bl	8008af8 <dec_lock>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a862:	2301      	movs	r3, #1
 800a864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a86a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a86c:	7a5b      	ldrb	r3, [r3, #9]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d131      	bne.n	800a8d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a874:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a876:	7a5b      	ldrb	r3, [r3, #9]
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a87e:	2100      	movs	r1, #0
 800a880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a882:	4b19      	ldr	r3, [pc, #100]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a884:	7a5b      	ldrb	r3, [r3, #9]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	4a17      	ldr	r2, [pc, #92]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a892:	4b15      	ldr	r3, [pc, #84]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a894:	7a5b      	ldrb	r3, [r3, #9]
 800a896:	b2db      	uxtb	r3, r3
 800a898:	461a      	mov	r2, r3
 800a89a:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a89c:	4413      	add	r3, r2
 800a89e:	79fa      	ldrb	r2, [r7, #7]
 800a8a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a8a2:	4b11      	ldr	r3, [pc, #68]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a8a4:	7a5b      	ldrb	r3, [r3, #9]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	b2d1      	uxtb	r1, r2
 800a8ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a8e8 <FATFS_LinkDriverEx+0x94>)
 800a8ae:	7251      	strb	r1, [r2, #9]
 800a8b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a8b2:	7dbb      	ldrb	r3, [r7, #22]
 800a8b4:	3330      	adds	r3, #48	@ 0x30
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	223a      	movs	r2, #58	@ 0x3a
 800a8c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	222f      	movs	r2, #47	@ 0x2f
 800a8ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	3303      	adds	r3, #3
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	2004068c 	.word	0x2004068c

0800a8ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff ffaa 	bl	800a854 <FATFS_LinkDriverEx>
 800a900:	4603      	mov	r3, r0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <rand>:
 800a90c:	4b16      	ldr	r3, [pc, #88]	@ (800a968 <rand+0x5c>)
 800a90e:	b510      	push	{r4, lr}
 800a910:	681c      	ldr	r4, [r3, #0]
 800a912:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a914:	b9b3      	cbnz	r3, 800a944 <rand+0x38>
 800a916:	2018      	movs	r0, #24
 800a918:	f000 fa40 	bl	800ad9c <malloc>
 800a91c:	4602      	mov	r2, r0
 800a91e:	6320      	str	r0, [r4, #48]	@ 0x30
 800a920:	b920      	cbnz	r0, 800a92c <rand+0x20>
 800a922:	4b12      	ldr	r3, [pc, #72]	@ (800a96c <rand+0x60>)
 800a924:	4812      	ldr	r0, [pc, #72]	@ (800a970 <rand+0x64>)
 800a926:	2152      	movs	r1, #82	@ 0x52
 800a928:	f000 f9d0 	bl	800accc <__assert_func>
 800a92c:	4911      	ldr	r1, [pc, #68]	@ (800a974 <rand+0x68>)
 800a92e:	4b12      	ldr	r3, [pc, #72]	@ (800a978 <rand+0x6c>)
 800a930:	e9c0 1300 	strd	r1, r3, [r0]
 800a934:	4b11      	ldr	r3, [pc, #68]	@ (800a97c <rand+0x70>)
 800a936:	6083      	str	r3, [r0, #8]
 800a938:	230b      	movs	r3, #11
 800a93a:	8183      	strh	r3, [r0, #12]
 800a93c:	2100      	movs	r1, #0
 800a93e:	2001      	movs	r0, #1
 800a940:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a944:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a946:	480e      	ldr	r0, [pc, #56]	@ (800a980 <rand+0x74>)
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	694c      	ldr	r4, [r1, #20]
 800a94c:	4a0d      	ldr	r2, [pc, #52]	@ (800a984 <rand+0x78>)
 800a94e:	4358      	muls	r0, r3
 800a950:	fb02 0004 	mla	r0, r2, r4, r0
 800a954:	fba3 3202 	umull	r3, r2, r3, r2
 800a958:	3301      	adds	r3, #1
 800a95a:	eb40 0002 	adc.w	r0, r0, r2
 800a95e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a962:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a966:	bd10      	pop	{r4, pc}
 800a968:	200400bc 	.word	0x200400bc
 800a96c:	0800bdd0 	.word	0x0800bdd0
 800a970:	0800bde7 	.word	0x0800bde7
 800a974:	abcd330e 	.word	0xabcd330e
 800a978:	e66d1234 	.word	0xe66d1234
 800a97c:	0005deec 	.word	0x0005deec
 800a980:	5851f42d 	.word	0x5851f42d
 800a984:	4c957f2d 	.word	0x4c957f2d

0800a988 <std>:
 800a988:	2300      	movs	r3, #0
 800a98a:	b510      	push	{r4, lr}
 800a98c:	4604      	mov	r4, r0
 800a98e:	e9c0 3300 	strd	r3, r3, [r0]
 800a992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a996:	6083      	str	r3, [r0, #8]
 800a998:	8181      	strh	r1, [r0, #12]
 800a99a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a99c:	81c2      	strh	r2, [r0, #14]
 800a99e:	6183      	str	r3, [r0, #24]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	305c      	adds	r0, #92	@ 0x5c
 800a9a6:	f000 f914 	bl	800abd2 <memset>
 800a9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e0 <std+0x58>)
 800a9ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <std+0x5c>)
 800a9b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e8 <std+0x60>)
 800a9b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9ec <std+0x64>)
 800a9b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f0 <std+0x68>)
 800a9bc:	6224      	str	r4, [r4, #32]
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d006      	beq.n	800a9d0 <std+0x48>
 800a9c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9c6:	4294      	cmp	r4, r2
 800a9c8:	d002      	beq.n	800a9d0 <std+0x48>
 800a9ca:	33d0      	adds	r3, #208	@ 0xd0
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	d105      	bne.n	800a9dc <std+0x54>
 800a9d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d8:	f000 b974 	b.w	800acc4 <__retarget_lock_init_recursive>
 800a9dc:	bd10      	pop	{r4, pc}
 800a9de:	bf00      	nop
 800a9e0:	0800ab4d 	.word	0x0800ab4d
 800a9e4:	0800ab6f 	.word	0x0800ab6f
 800a9e8:	0800aba7 	.word	0x0800aba7
 800a9ec:	0800abcb 	.word	0x0800abcb
 800a9f0:	20040698 	.word	0x20040698

0800a9f4 <stdio_exit_handler>:
 800a9f4:	4a02      	ldr	r2, [pc, #8]	@ (800aa00 <stdio_exit_handler+0xc>)
 800a9f6:	4903      	ldr	r1, [pc, #12]	@ (800aa04 <stdio_exit_handler+0x10>)
 800a9f8:	4803      	ldr	r0, [pc, #12]	@ (800aa08 <stdio_exit_handler+0x14>)
 800a9fa:	f000 b869 	b.w	800aad0 <_fwalk_sglue>
 800a9fe:	bf00      	nop
 800aa00:	200400b0 	.word	0x200400b0
 800aa04:	0800b5dd 	.word	0x0800b5dd
 800aa08:	200400c0 	.word	0x200400c0

0800aa0c <cleanup_stdio>:
 800aa0c:	6841      	ldr	r1, [r0, #4]
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa40 <cleanup_stdio+0x34>)
 800aa10:	4299      	cmp	r1, r3
 800aa12:	b510      	push	{r4, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	d001      	beq.n	800aa1c <cleanup_stdio+0x10>
 800aa18:	f000 fde0 	bl	800b5dc <_fflush_r>
 800aa1c:	68a1      	ldr	r1, [r4, #8]
 800aa1e:	4b09      	ldr	r3, [pc, #36]	@ (800aa44 <cleanup_stdio+0x38>)
 800aa20:	4299      	cmp	r1, r3
 800aa22:	d002      	beq.n	800aa2a <cleanup_stdio+0x1e>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 fdd9 	bl	800b5dc <_fflush_r>
 800aa2a:	68e1      	ldr	r1, [r4, #12]
 800aa2c:	4b06      	ldr	r3, [pc, #24]	@ (800aa48 <cleanup_stdio+0x3c>)
 800aa2e:	4299      	cmp	r1, r3
 800aa30:	d004      	beq.n	800aa3c <cleanup_stdio+0x30>
 800aa32:	4620      	mov	r0, r4
 800aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa38:	f000 bdd0 	b.w	800b5dc <_fflush_r>
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	bf00      	nop
 800aa40:	20040698 	.word	0x20040698
 800aa44:	20040700 	.word	0x20040700
 800aa48:	20040768 	.word	0x20040768

0800aa4c <global_stdio_init.part.0>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa7c <global_stdio_init.part.0+0x30>)
 800aa50:	4c0b      	ldr	r4, [pc, #44]	@ (800aa80 <global_stdio_init.part.0+0x34>)
 800aa52:	4a0c      	ldr	r2, [pc, #48]	@ (800aa84 <global_stdio_init.part.0+0x38>)
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	4620      	mov	r0, r4
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2104      	movs	r1, #4
 800aa5c:	f7ff ff94 	bl	800a988 <std>
 800aa60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa64:	2201      	movs	r2, #1
 800aa66:	2109      	movs	r1, #9
 800aa68:	f7ff ff8e 	bl	800a988 <std>
 800aa6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa70:	2202      	movs	r2, #2
 800aa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa76:	2112      	movs	r1, #18
 800aa78:	f7ff bf86 	b.w	800a988 <std>
 800aa7c:	200407d0 	.word	0x200407d0
 800aa80:	20040698 	.word	0x20040698
 800aa84:	0800a9f5 	.word	0x0800a9f5

0800aa88 <__sfp_lock_acquire>:
 800aa88:	4801      	ldr	r0, [pc, #4]	@ (800aa90 <__sfp_lock_acquire+0x8>)
 800aa8a:	f000 b91c 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800aa8e:	bf00      	nop
 800aa90:	200407d9 	.word	0x200407d9

0800aa94 <__sfp_lock_release>:
 800aa94:	4801      	ldr	r0, [pc, #4]	@ (800aa9c <__sfp_lock_release+0x8>)
 800aa96:	f000 b917 	b.w	800acc8 <__retarget_lock_release_recursive>
 800aa9a:	bf00      	nop
 800aa9c:	200407d9 	.word	0x200407d9

0800aaa0 <__sinit>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	f7ff fff0 	bl	800aa88 <__sfp_lock_acquire>
 800aaa8:	6a23      	ldr	r3, [r4, #32]
 800aaaa:	b11b      	cbz	r3, 800aab4 <__sinit+0x14>
 800aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aab0:	f7ff bff0 	b.w	800aa94 <__sfp_lock_release>
 800aab4:	4b04      	ldr	r3, [pc, #16]	@ (800aac8 <__sinit+0x28>)
 800aab6:	6223      	str	r3, [r4, #32]
 800aab8:	4b04      	ldr	r3, [pc, #16]	@ (800aacc <__sinit+0x2c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f5      	bne.n	800aaac <__sinit+0xc>
 800aac0:	f7ff ffc4 	bl	800aa4c <global_stdio_init.part.0>
 800aac4:	e7f2      	b.n	800aaac <__sinit+0xc>
 800aac6:	bf00      	nop
 800aac8:	0800aa0d 	.word	0x0800aa0d
 800aacc:	200407d0 	.word	0x200407d0

0800aad0 <_fwalk_sglue>:
 800aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	4607      	mov	r7, r0
 800aad6:	4688      	mov	r8, r1
 800aad8:	4614      	mov	r4, r2
 800aada:	2600      	movs	r6, #0
 800aadc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aae0:	f1b9 0901 	subs.w	r9, r9, #1
 800aae4:	d505      	bpl.n	800aaf2 <_fwalk_sglue+0x22>
 800aae6:	6824      	ldr	r4, [r4, #0]
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	d1f7      	bne.n	800aadc <_fwalk_sglue+0xc>
 800aaec:	4630      	mov	r0, r6
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	89ab      	ldrh	r3, [r5, #12]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d907      	bls.n	800ab08 <_fwalk_sglue+0x38>
 800aaf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aafc:	3301      	adds	r3, #1
 800aafe:	d003      	beq.n	800ab08 <_fwalk_sglue+0x38>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4638      	mov	r0, r7
 800ab04:	47c0      	blx	r8
 800ab06:	4306      	orrs	r6, r0
 800ab08:	3568      	adds	r5, #104	@ 0x68
 800ab0a:	e7e9      	b.n	800aae0 <_fwalk_sglue+0x10>

0800ab0c <siprintf>:
 800ab0c:	b40e      	push	{r1, r2, r3}
 800ab0e:	b500      	push	{lr}
 800ab10:	b09c      	sub	sp, #112	@ 0x70
 800ab12:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab14:	9002      	str	r0, [sp, #8]
 800ab16:	9006      	str	r0, [sp, #24]
 800ab18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab1c:	4809      	ldr	r0, [pc, #36]	@ (800ab44 <siprintf+0x38>)
 800ab1e:	9107      	str	r1, [sp, #28]
 800ab20:	9104      	str	r1, [sp, #16]
 800ab22:	4909      	ldr	r1, [pc, #36]	@ (800ab48 <siprintf+0x3c>)
 800ab24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab28:	9105      	str	r1, [sp, #20]
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	a902      	add	r1, sp, #8
 800ab30:	f000 fa46 	bl	800afc0 <_svfiprintf_r>
 800ab34:	9b02      	ldr	r3, [sp, #8]
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	b01c      	add	sp, #112	@ 0x70
 800ab3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab40:	b003      	add	sp, #12
 800ab42:	4770      	bx	lr
 800ab44:	200400bc 	.word	0x200400bc
 800ab48:	ffff0208 	.word	0xffff0208

0800ab4c <__sread>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	460c      	mov	r4, r1
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	f000 f868 	bl	800ac28 <_read_r>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	bfab      	itete	ge
 800ab5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab60:	181b      	addge	r3, r3, r0
 800ab62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab66:	bfac      	ite	ge
 800ab68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab6a:	81a3      	strhlt	r3, [r4, #12]
 800ab6c:	bd10      	pop	{r4, pc}

0800ab6e <__swrite>:
 800ab6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	461f      	mov	r7, r3
 800ab74:	898b      	ldrh	r3, [r1, #12]
 800ab76:	05db      	lsls	r3, r3, #23
 800ab78:	4605      	mov	r5, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4616      	mov	r6, r2
 800ab7e:	d505      	bpl.n	800ab8c <__swrite+0x1e>
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	2302      	movs	r3, #2
 800ab86:	2200      	movs	r2, #0
 800ab88:	f000 f83c 	bl	800ac04 <_lseek_r>
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab96:	81a3      	strh	r3, [r4, #12]
 800ab98:	4632      	mov	r2, r6
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	f000 b853 	b.w	800ac4c <_write_r>

0800aba6 <__sseek>:
 800aba6:	b510      	push	{r4, lr}
 800aba8:	460c      	mov	r4, r1
 800abaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abae:	f000 f829 	bl	800ac04 <_lseek_r>
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	bf15      	itete	ne
 800abb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abc2:	81a3      	strheq	r3, [r4, #12]
 800abc4:	bf18      	it	ne
 800abc6:	81a3      	strhne	r3, [r4, #12]
 800abc8:	bd10      	pop	{r4, pc}

0800abca <__sclose>:
 800abca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abce:	f000 b809 	b.w	800abe4 <_close_r>

0800abd2 <memset>:
 800abd2:	4402      	add	r2, r0
 800abd4:	4603      	mov	r3, r0
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d100      	bne.n	800abdc <memset+0xa>
 800abda:	4770      	bx	lr
 800abdc:	f803 1b01 	strb.w	r1, [r3], #1
 800abe0:	e7f9      	b.n	800abd6 <memset+0x4>
	...

0800abe4 <_close_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d06      	ldr	r5, [pc, #24]	@ (800ac00 <_close_r+0x1c>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f7 fac6 	bl	8002180 <_close>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_close_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_close_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	200407d4 	.word	0x200407d4

0800ac04 <_lseek_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d07      	ldr	r5, [pc, #28]	@ (800ac24 <_lseek_r+0x20>)
 800ac08:	4604      	mov	r4, r0
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f7f7 fadb 	bl	80021ce <_lseek>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_lseek_r+0x1e>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_lseek_r+0x1e>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	200407d4 	.word	0x200407d4

0800ac28 <_read_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	@ (800ac48 <_read_r+0x20>)
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7f7 fa69 	bl	800210e <_read>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_read_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_read_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	200407d4 	.word	0x200407d4

0800ac4c <_write_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d07      	ldr	r5, [pc, #28]	@ (800ac6c <_write_r+0x20>)
 800ac50:	4604      	mov	r4, r0
 800ac52:	4608      	mov	r0, r1
 800ac54:	4611      	mov	r1, r2
 800ac56:	2200      	movs	r2, #0
 800ac58:	602a      	str	r2, [r5, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f7f7 fa74 	bl	8002148 <_write>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_write_r+0x1e>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_write_r+0x1e>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	200407d4 	.word	0x200407d4

0800ac70 <__errno>:
 800ac70:	4b01      	ldr	r3, [pc, #4]	@ (800ac78 <__errno+0x8>)
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	200400bc 	.word	0x200400bc

0800ac7c <__libc_init_array>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4d0d      	ldr	r5, [pc, #52]	@ (800acb4 <__libc_init_array+0x38>)
 800ac80:	4c0d      	ldr	r4, [pc, #52]	@ (800acb8 <__libc_init_array+0x3c>)
 800ac82:	1b64      	subs	r4, r4, r5
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	2600      	movs	r6, #0
 800ac88:	42a6      	cmp	r6, r4
 800ac8a:	d109      	bne.n	800aca0 <__libc_init_array+0x24>
 800ac8c:	4d0b      	ldr	r5, [pc, #44]	@ (800acbc <__libc_init_array+0x40>)
 800ac8e:	4c0c      	ldr	r4, [pc, #48]	@ (800acc0 <__libc_init_array+0x44>)
 800ac90:	f000 fff0 	bl	800bc74 <_init>
 800ac94:	1b64      	subs	r4, r4, r5
 800ac96:	10a4      	asrs	r4, r4, #2
 800ac98:	2600      	movs	r6, #0
 800ac9a:	42a6      	cmp	r6, r4
 800ac9c:	d105      	bne.n	800acaa <__libc_init_array+0x2e>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca4:	4798      	blx	r3
 800aca6:	3601      	adds	r6, #1
 800aca8:	e7ee      	b.n	800ac88 <__libc_init_array+0xc>
 800acaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800acae:	4798      	blx	r3
 800acb0:	3601      	adds	r6, #1
 800acb2:	e7f2      	b.n	800ac9a <__libc_init_array+0x1e>
 800acb4:	0800beb8 	.word	0x0800beb8
 800acb8:	0800beb8 	.word	0x0800beb8
 800acbc:	0800beb8 	.word	0x0800beb8
 800acc0:	0800bebc 	.word	0x0800bebc

0800acc4 <__retarget_lock_init_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <__retarget_lock_acquire_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__retarget_lock_release_recursive>:
 800acc8:	4770      	bx	lr
	...

0800accc <__assert_func>:
 800accc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acce:	4614      	mov	r4, r2
 800acd0:	461a      	mov	r2, r3
 800acd2:	4b09      	ldr	r3, [pc, #36]	@ (800acf8 <__assert_func+0x2c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4605      	mov	r5, r0
 800acd8:	68d8      	ldr	r0, [r3, #12]
 800acda:	b954      	cbnz	r4, 800acf2 <__assert_func+0x26>
 800acdc:	4b07      	ldr	r3, [pc, #28]	@ (800acfc <__assert_func+0x30>)
 800acde:	461c      	mov	r4, r3
 800ace0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ace4:	9100      	str	r1, [sp, #0]
 800ace6:	462b      	mov	r3, r5
 800ace8:	4905      	ldr	r1, [pc, #20]	@ (800ad00 <__assert_func+0x34>)
 800acea:	f000 fc9f 	bl	800b62c <fiprintf>
 800acee:	f000 fce7 	bl	800b6c0 <abort>
 800acf2:	4b04      	ldr	r3, [pc, #16]	@ (800ad04 <__assert_func+0x38>)
 800acf4:	e7f4      	b.n	800ace0 <__assert_func+0x14>
 800acf6:	bf00      	nop
 800acf8:	200400bc 	.word	0x200400bc
 800acfc:	0800be7a 	.word	0x0800be7a
 800ad00:	0800be4c 	.word	0x0800be4c
 800ad04:	0800be3f 	.word	0x0800be3f

0800ad08 <_free_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d041      	beq.n	800ad94 <_free_r+0x8c>
 800ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad14:	1f0c      	subs	r4, r1, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfb8      	it	lt
 800ad1a:	18e4      	addlt	r4, r4, r3
 800ad1c:	f000 f8e8 	bl	800aef0 <__malloc_lock>
 800ad20:	4a1d      	ldr	r2, [pc, #116]	@ (800ad98 <_free_r+0x90>)
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	b933      	cbnz	r3, 800ad34 <_free_r+0x2c>
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	6014      	str	r4, [r2, #0]
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad30:	f000 b8e4 	b.w	800aefc <__malloc_unlock>
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	d908      	bls.n	800ad4a <_free_r+0x42>
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	1821      	adds	r1, r4, r0
 800ad3c:	428b      	cmp	r3, r1
 800ad3e:	bf01      	itttt	eq
 800ad40:	6819      	ldreq	r1, [r3, #0]
 800ad42:	685b      	ldreq	r3, [r3, #4]
 800ad44:	1809      	addeq	r1, r1, r0
 800ad46:	6021      	streq	r1, [r4, #0]
 800ad48:	e7ed      	b.n	800ad26 <_free_r+0x1e>
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	b10b      	cbz	r3, 800ad54 <_free_r+0x4c>
 800ad50:	42a3      	cmp	r3, r4
 800ad52:	d9fa      	bls.n	800ad4a <_free_r+0x42>
 800ad54:	6811      	ldr	r1, [r2, #0]
 800ad56:	1850      	adds	r0, r2, r1
 800ad58:	42a0      	cmp	r0, r4
 800ad5a:	d10b      	bne.n	800ad74 <_free_r+0x6c>
 800ad5c:	6820      	ldr	r0, [r4, #0]
 800ad5e:	4401      	add	r1, r0
 800ad60:	1850      	adds	r0, r2, r1
 800ad62:	4283      	cmp	r3, r0
 800ad64:	6011      	str	r1, [r2, #0]
 800ad66:	d1e0      	bne.n	800ad2a <_free_r+0x22>
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	6053      	str	r3, [r2, #4]
 800ad6e:	4408      	add	r0, r1
 800ad70:	6010      	str	r0, [r2, #0]
 800ad72:	e7da      	b.n	800ad2a <_free_r+0x22>
 800ad74:	d902      	bls.n	800ad7c <_free_r+0x74>
 800ad76:	230c      	movs	r3, #12
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	e7d6      	b.n	800ad2a <_free_r+0x22>
 800ad7c:	6820      	ldr	r0, [r4, #0]
 800ad7e:	1821      	adds	r1, r4, r0
 800ad80:	428b      	cmp	r3, r1
 800ad82:	bf04      	itt	eq
 800ad84:	6819      	ldreq	r1, [r3, #0]
 800ad86:	685b      	ldreq	r3, [r3, #4]
 800ad88:	6063      	str	r3, [r4, #4]
 800ad8a:	bf04      	itt	eq
 800ad8c:	1809      	addeq	r1, r1, r0
 800ad8e:	6021      	streq	r1, [r4, #0]
 800ad90:	6054      	str	r4, [r2, #4]
 800ad92:	e7ca      	b.n	800ad2a <_free_r+0x22>
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
 800ad96:	bf00      	nop
 800ad98:	200407e0 	.word	0x200407e0

0800ad9c <malloc>:
 800ad9c:	4b02      	ldr	r3, [pc, #8]	@ (800ada8 <malloc+0xc>)
 800ad9e:	4601      	mov	r1, r0
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	f000 b825 	b.w	800adf0 <_malloc_r>
 800ada6:	bf00      	nop
 800ada8:	200400bc 	.word	0x200400bc

0800adac <sbrk_aligned>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	4e0f      	ldr	r6, [pc, #60]	@ (800adec <sbrk_aligned+0x40>)
 800adb0:	460c      	mov	r4, r1
 800adb2:	6831      	ldr	r1, [r6, #0]
 800adb4:	4605      	mov	r5, r0
 800adb6:	b911      	cbnz	r1, 800adbe <sbrk_aligned+0x12>
 800adb8:	f000 fc64 	bl	800b684 <_sbrk_r>
 800adbc:	6030      	str	r0, [r6, #0]
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 fc5f 	bl	800b684 <_sbrk_r>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	d103      	bne.n	800add2 <sbrk_aligned+0x26>
 800adca:	f04f 34ff 	mov.w	r4, #4294967295
 800adce:	4620      	mov	r0, r4
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	1cc4      	adds	r4, r0, #3
 800add4:	f024 0403 	bic.w	r4, r4, #3
 800add8:	42a0      	cmp	r0, r4
 800adda:	d0f8      	beq.n	800adce <sbrk_aligned+0x22>
 800addc:	1a21      	subs	r1, r4, r0
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 fc50 	bl	800b684 <_sbrk_r>
 800ade4:	3001      	adds	r0, #1
 800ade6:	d1f2      	bne.n	800adce <sbrk_aligned+0x22>
 800ade8:	e7ef      	b.n	800adca <sbrk_aligned+0x1e>
 800adea:	bf00      	nop
 800adec:	200407dc 	.word	0x200407dc

0800adf0 <_malloc_r>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	1ccd      	adds	r5, r1, #3
 800adf6:	f025 0503 	bic.w	r5, r5, #3
 800adfa:	3508      	adds	r5, #8
 800adfc:	2d0c      	cmp	r5, #12
 800adfe:	bf38      	it	cc
 800ae00:	250c      	movcc	r5, #12
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	4606      	mov	r6, r0
 800ae06:	db01      	blt.n	800ae0c <_malloc_r+0x1c>
 800ae08:	42a9      	cmp	r1, r5
 800ae0a:	d904      	bls.n	800ae16 <_malloc_r+0x26>
 800ae0c:	230c      	movs	r3, #12
 800ae0e:	6033      	str	r3, [r6, #0]
 800ae10:	2000      	movs	r0, #0
 800ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeec <_malloc_r+0xfc>
 800ae1a:	f000 f869 	bl	800aef0 <__malloc_lock>
 800ae1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae22:	461c      	mov	r4, r3
 800ae24:	bb44      	cbnz	r4, 800ae78 <_malloc_r+0x88>
 800ae26:	4629      	mov	r1, r5
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff ffbf 	bl	800adac <sbrk_aligned>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	4604      	mov	r4, r0
 800ae32:	d158      	bne.n	800aee6 <_malloc_r+0xf6>
 800ae34:	f8d8 4000 	ldr.w	r4, [r8]
 800ae38:	4627      	mov	r7, r4
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	d143      	bne.n	800aec6 <_malloc_r+0xd6>
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d04b      	beq.n	800aeda <_malloc_r+0xea>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	4639      	mov	r1, r7
 800ae46:	4630      	mov	r0, r6
 800ae48:	eb04 0903 	add.w	r9, r4, r3
 800ae4c:	f000 fc1a 	bl	800b684 <_sbrk_r>
 800ae50:	4581      	cmp	r9, r0
 800ae52:	d142      	bne.n	800aeda <_malloc_r+0xea>
 800ae54:	6821      	ldr	r1, [r4, #0]
 800ae56:	1a6d      	subs	r5, r5, r1
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7ff ffa6 	bl	800adac <sbrk_aligned>
 800ae60:	3001      	adds	r0, #1
 800ae62:	d03a      	beq.n	800aeda <_malloc_r+0xea>
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	442b      	add	r3, r5
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	bb62      	cbnz	r2, 800aecc <_malloc_r+0xdc>
 800ae72:	f8c8 7000 	str.w	r7, [r8]
 800ae76:	e00f      	b.n	800ae98 <_malloc_r+0xa8>
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	1b52      	subs	r2, r2, r5
 800ae7c:	d420      	bmi.n	800aec0 <_malloc_r+0xd0>
 800ae7e:	2a0b      	cmp	r2, #11
 800ae80:	d917      	bls.n	800aeb2 <_malloc_r+0xc2>
 800ae82:	1961      	adds	r1, r4, r5
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	6025      	str	r5, [r4, #0]
 800ae88:	bf18      	it	ne
 800ae8a:	6059      	strne	r1, [r3, #4]
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	bf08      	it	eq
 800ae90:	f8c8 1000 	streq.w	r1, [r8]
 800ae94:	5162      	str	r2, [r4, r5]
 800ae96:	604b      	str	r3, [r1, #4]
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f000 f82f 	bl	800aefc <__malloc_unlock>
 800ae9e:	f104 000b 	add.w	r0, r4, #11
 800aea2:	1d23      	adds	r3, r4, #4
 800aea4:	f020 0007 	bic.w	r0, r0, #7
 800aea8:	1ac2      	subs	r2, r0, r3
 800aeaa:	bf1c      	itt	ne
 800aeac:	1a1b      	subne	r3, r3, r0
 800aeae:	50a3      	strne	r3, [r4, r2]
 800aeb0:	e7af      	b.n	800ae12 <_malloc_r+0x22>
 800aeb2:	6862      	ldr	r2, [r4, #4]
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	bf0c      	ite	eq
 800aeb8:	f8c8 2000 	streq.w	r2, [r8]
 800aebc:	605a      	strne	r2, [r3, #4]
 800aebe:	e7eb      	b.n	800ae98 <_malloc_r+0xa8>
 800aec0:	4623      	mov	r3, r4
 800aec2:	6864      	ldr	r4, [r4, #4]
 800aec4:	e7ae      	b.n	800ae24 <_malloc_r+0x34>
 800aec6:	463c      	mov	r4, r7
 800aec8:	687f      	ldr	r7, [r7, #4]
 800aeca:	e7b6      	b.n	800ae3a <_malloc_r+0x4a>
 800aecc:	461a      	mov	r2, r3
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d1fb      	bne.n	800aecc <_malloc_r+0xdc>
 800aed4:	2300      	movs	r3, #0
 800aed6:	6053      	str	r3, [r2, #4]
 800aed8:	e7de      	b.n	800ae98 <_malloc_r+0xa8>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	4630      	mov	r0, r6
 800aee0:	f000 f80c 	bl	800aefc <__malloc_unlock>
 800aee4:	e794      	b.n	800ae10 <_malloc_r+0x20>
 800aee6:	6005      	str	r5, [r0, #0]
 800aee8:	e7d6      	b.n	800ae98 <_malloc_r+0xa8>
 800aeea:	bf00      	nop
 800aeec:	200407e0 	.word	0x200407e0

0800aef0 <__malloc_lock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	@ (800aef8 <__malloc_lock+0x8>)
 800aef2:	f7ff bee8 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800aef6:	bf00      	nop
 800aef8:	200407d8 	.word	0x200407d8

0800aefc <__malloc_unlock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	@ (800af04 <__malloc_unlock+0x8>)
 800aefe:	f7ff bee3 	b.w	800acc8 <__retarget_lock_release_recursive>
 800af02:	bf00      	nop
 800af04:	200407d8 	.word	0x200407d8

0800af08 <__ssputs_r>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	688e      	ldr	r6, [r1, #8]
 800af0e:	461f      	mov	r7, r3
 800af10:	42be      	cmp	r6, r7
 800af12:	680b      	ldr	r3, [r1, #0]
 800af14:	4682      	mov	sl, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4690      	mov	r8, r2
 800af1a:	d82d      	bhi.n	800af78 <__ssputs_r+0x70>
 800af1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af24:	d026      	beq.n	800af74 <__ssputs_r+0x6c>
 800af26:	6965      	ldr	r5, [r4, #20]
 800af28:	6909      	ldr	r1, [r1, #16]
 800af2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af2e:	eba3 0901 	sub.w	r9, r3, r1
 800af32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af36:	1c7b      	adds	r3, r7, #1
 800af38:	444b      	add	r3, r9
 800af3a:	106d      	asrs	r5, r5, #1
 800af3c:	429d      	cmp	r5, r3
 800af3e:	bf38      	it	cc
 800af40:	461d      	movcc	r5, r3
 800af42:	0553      	lsls	r3, r2, #21
 800af44:	d527      	bpl.n	800af96 <__ssputs_r+0x8e>
 800af46:	4629      	mov	r1, r5
 800af48:	f7ff ff52 	bl	800adf0 <_malloc_r>
 800af4c:	4606      	mov	r6, r0
 800af4e:	b360      	cbz	r0, 800afaa <__ssputs_r+0xa2>
 800af50:	6921      	ldr	r1, [r4, #16]
 800af52:	464a      	mov	r2, r9
 800af54:	f000 fba6 	bl	800b6a4 <memcpy>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	6126      	str	r6, [r4, #16]
 800af66:	6165      	str	r5, [r4, #20]
 800af68:	444e      	add	r6, r9
 800af6a:	eba5 0509 	sub.w	r5, r5, r9
 800af6e:	6026      	str	r6, [r4, #0]
 800af70:	60a5      	str	r5, [r4, #8]
 800af72:	463e      	mov	r6, r7
 800af74:	42be      	cmp	r6, r7
 800af76:	d900      	bls.n	800af7a <__ssputs_r+0x72>
 800af78:	463e      	mov	r6, r7
 800af7a:	6820      	ldr	r0, [r4, #0]
 800af7c:	4632      	mov	r2, r6
 800af7e:	4641      	mov	r1, r8
 800af80:	f000 fb66 	bl	800b650 <memmove>
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	1b9b      	subs	r3, r3, r6
 800af88:	60a3      	str	r3, [r4, #8]
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	4433      	add	r3, r6
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	2000      	movs	r0, #0
 800af92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af96:	462a      	mov	r2, r5
 800af98:	f000 fb99 	bl	800b6ce <_realloc_r>
 800af9c:	4606      	mov	r6, r0
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d1e0      	bne.n	800af64 <__ssputs_r+0x5c>
 800afa2:	6921      	ldr	r1, [r4, #16]
 800afa4:	4650      	mov	r0, sl
 800afa6:	f7ff feaf 	bl	800ad08 <_free_r>
 800afaa:	230c      	movs	r3, #12
 800afac:	f8ca 3000 	str.w	r3, [sl]
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e7e9      	b.n	800af92 <__ssputs_r+0x8a>
	...

0800afc0 <_svfiprintf_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	4698      	mov	r8, r3
 800afc6:	898b      	ldrh	r3, [r1, #12]
 800afc8:	061b      	lsls	r3, r3, #24
 800afca:	b09d      	sub	sp, #116	@ 0x74
 800afcc:	4607      	mov	r7, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	4614      	mov	r4, r2
 800afd2:	d510      	bpl.n	800aff6 <_svfiprintf_r+0x36>
 800afd4:	690b      	ldr	r3, [r1, #16]
 800afd6:	b973      	cbnz	r3, 800aff6 <_svfiprintf_r+0x36>
 800afd8:	2140      	movs	r1, #64	@ 0x40
 800afda:	f7ff ff09 	bl	800adf0 <_malloc_r>
 800afde:	6028      	str	r0, [r5, #0]
 800afe0:	6128      	str	r0, [r5, #16]
 800afe2:	b930      	cbnz	r0, 800aff2 <_svfiprintf_r+0x32>
 800afe4:	230c      	movs	r3, #12
 800afe6:	603b      	str	r3, [r7, #0]
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	b01d      	add	sp, #116	@ 0x74
 800afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff2:	2340      	movs	r3, #64	@ 0x40
 800aff4:	616b      	str	r3, [r5, #20]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800affa:	2320      	movs	r3, #32
 800affc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b000:	f8cd 800c 	str.w	r8, [sp, #12]
 800b004:	2330      	movs	r3, #48	@ 0x30
 800b006:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1a4 <_svfiprintf_r+0x1e4>
 800b00a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b00e:	f04f 0901 	mov.w	r9, #1
 800b012:	4623      	mov	r3, r4
 800b014:	469a      	mov	sl, r3
 800b016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01a:	b10a      	cbz	r2, 800b020 <_svfiprintf_r+0x60>
 800b01c:	2a25      	cmp	r2, #37	@ 0x25
 800b01e:	d1f9      	bne.n	800b014 <_svfiprintf_r+0x54>
 800b020:	ebba 0b04 	subs.w	fp, sl, r4
 800b024:	d00b      	beq.n	800b03e <_svfiprintf_r+0x7e>
 800b026:	465b      	mov	r3, fp
 800b028:	4622      	mov	r2, r4
 800b02a:	4629      	mov	r1, r5
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7ff ff6b 	bl	800af08 <__ssputs_r>
 800b032:	3001      	adds	r0, #1
 800b034:	f000 80a7 	beq.w	800b186 <_svfiprintf_r+0x1c6>
 800b038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b03a:	445a      	add	r2, fp
 800b03c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b03e:	f89a 3000 	ldrb.w	r3, [sl]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 809f 	beq.w	800b186 <_svfiprintf_r+0x1c6>
 800b048:	2300      	movs	r3, #0
 800b04a:	f04f 32ff 	mov.w	r2, #4294967295
 800b04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b052:	f10a 0a01 	add.w	sl, sl, #1
 800b056:	9304      	str	r3, [sp, #16]
 800b058:	9307      	str	r3, [sp, #28]
 800b05a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b05e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b060:	4654      	mov	r4, sl
 800b062:	2205      	movs	r2, #5
 800b064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b068:	484e      	ldr	r0, [pc, #312]	@ (800b1a4 <_svfiprintf_r+0x1e4>)
 800b06a:	f7f5 f8c9 	bl	8000200 <memchr>
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	b9d8      	cbnz	r0, 800b0aa <_svfiprintf_r+0xea>
 800b072:	06d0      	lsls	r0, r2, #27
 800b074:	bf44      	itt	mi
 800b076:	2320      	movmi	r3, #32
 800b078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b07c:	0711      	lsls	r1, r2, #28
 800b07e:	bf44      	itt	mi
 800b080:	232b      	movmi	r3, #43	@ 0x2b
 800b082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b086:	f89a 3000 	ldrb.w	r3, [sl]
 800b08a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08c:	d015      	beq.n	800b0ba <_svfiprintf_r+0xfa>
 800b08e:	9a07      	ldr	r2, [sp, #28]
 800b090:	4654      	mov	r4, sl
 800b092:	2000      	movs	r0, #0
 800b094:	f04f 0c0a 	mov.w	ip, #10
 800b098:	4621      	mov	r1, r4
 800b09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b09e:	3b30      	subs	r3, #48	@ 0x30
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d94b      	bls.n	800b13c <_svfiprintf_r+0x17c>
 800b0a4:	b1b0      	cbz	r0, 800b0d4 <_svfiprintf_r+0x114>
 800b0a6:	9207      	str	r2, [sp, #28]
 800b0a8:	e014      	b.n	800b0d4 <_svfiprintf_r+0x114>
 800b0aa:	eba0 0308 	sub.w	r3, r0, r8
 800b0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	46a2      	mov	sl, r4
 800b0b8:	e7d2      	b.n	800b060 <_svfiprintf_r+0xa0>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	1d19      	adds	r1, r3, #4
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	9103      	str	r1, [sp, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfbb      	ittet	lt
 800b0c6:	425b      	neglt	r3, r3
 800b0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b0cc:	9307      	strge	r3, [sp, #28]
 800b0ce:	9307      	strlt	r3, [sp, #28]
 800b0d0:	bfb8      	it	lt
 800b0d2:	9204      	strlt	r2, [sp, #16]
 800b0d4:	7823      	ldrb	r3, [r4, #0]
 800b0d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0d8:	d10a      	bne.n	800b0f0 <_svfiprintf_r+0x130>
 800b0da:	7863      	ldrb	r3, [r4, #1]
 800b0dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0de:	d132      	bne.n	800b146 <_svfiprintf_r+0x186>
 800b0e0:	9b03      	ldr	r3, [sp, #12]
 800b0e2:	1d1a      	adds	r2, r3, #4
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	9203      	str	r2, [sp, #12]
 800b0e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0ec:	3402      	adds	r4, #2
 800b0ee:	9305      	str	r3, [sp, #20]
 800b0f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b1b4 <_svfiprintf_r+0x1f4>
 800b0f4:	7821      	ldrb	r1, [r4, #0]
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	f7f5 f881 	bl	8000200 <memchr>
 800b0fe:	b138      	cbz	r0, 800b110 <_svfiprintf_r+0x150>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	eba0 000a 	sub.w	r0, r0, sl
 800b106:	2240      	movs	r2, #64	@ 0x40
 800b108:	4082      	lsls	r2, r0
 800b10a:	4313      	orrs	r3, r2
 800b10c:	3401      	adds	r4, #1
 800b10e:	9304      	str	r3, [sp, #16]
 800b110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b114:	4824      	ldr	r0, [pc, #144]	@ (800b1a8 <_svfiprintf_r+0x1e8>)
 800b116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b11a:	2206      	movs	r2, #6
 800b11c:	f7f5 f870 	bl	8000200 <memchr>
 800b120:	2800      	cmp	r0, #0
 800b122:	d036      	beq.n	800b192 <_svfiprintf_r+0x1d2>
 800b124:	4b21      	ldr	r3, [pc, #132]	@ (800b1ac <_svfiprintf_r+0x1ec>)
 800b126:	bb1b      	cbnz	r3, 800b170 <_svfiprintf_r+0x1b0>
 800b128:	9b03      	ldr	r3, [sp, #12]
 800b12a:	3307      	adds	r3, #7
 800b12c:	f023 0307 	bic.w	r3, r3, #7
 800b130:	3308      	adds	r3, #8
 800b132:	9303      	str	r3, [sp, #12]
 800b134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b136:	4433      	add	r3, r6
 800b138:	9309      	str	r3, [sp, #36]	@ 0x24
 800b13a:	e76a      	b.n	800b012 <_svfiprintf_r+0x52>
 800b13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b140:	460c      	mov	r4, r1
 800b142:	2001      	movs	r0, #1
 800b144:	e7a8      	b.n	800b098 <_svfiprintf_r+0xd8>
 800b146:	2300      	movs	r3, #0
 800b148:	3401      	adds	r4, #1
 800b14a:	9305      	str	r3, [sp, #20]
 800b14c:	4619      	mov	r1, r3
 800b14e:	f04f 0c0a 	mov.w	ip, #10
 800b152:	4620      	mov	r0, r4
 800b154:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b158:	3a30      	subs	r2, #48	@ 0x30
 800b15a:	2a09      	cmp	r2, #9
 800b15c:	d903      	bls.n	800b166 <_svfiprintf_r+0x1a6>
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0c6      	beq.n	800b0f0 <_svfiprintf_r+0x130>
 800b162:	9105      	str	r1, [sp, #20]
 800b164:	e7c4      	b.n	800b0f0 <_svfiprintf_r+0x130>
 800b166:	fb0c 2101 	mla	r1, ip, r1, r2
 800b16a:	4604      	mov	r4, r0
 800b16c:	2301      	movs	r3, #1
 800b16e:	e7f0      	b.n	800b152 <_svfiprintf_r+0x192>
 800b170:	ab03      	add	r3, sp, #12
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	462a      	mov	r2, r5
 800b176:	4b0e      	ldr	r3, [pc, #56]	@ (800b1b0 <_svfiprintf_r+0x1f0>)
 800b178:	a904      	add	r1, sp, #16
 800b17a:	4638      	mov	r0, r7
 800b17c:	f3af 8000 	nop.w
 800b180:	1c42      	adds	r2, r0, #1
 800b182:	4606      	mov	r6, r0
 800b184:	d1d6      	bne.n	800b134 <_svfiprintf_r+0x174>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	065b      	lsls	r3, r3, #25
 800b18a:	f53f af2d 	bmi.w	800afe8 <_svfiprintf_r+0x28>
 800b18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b190:	e72c      	b.n	800afec <_svfiprintf_r+0x2c>
 800b192:	ab03      	add	r3, sp, #12
 800b194:	9300      	str	r3, [sp, #0]
 800b196:	462a      	mov	r2, r5
 800b198:	4b05      	ldr	r3, [pc, #20]	@ (800b1b0 <_svfiprintf_r+0x1f0>)
 800b19a:	a904      	add	r1, sp, #16
 800b19c:	4638      	mov	r0, r7
 800b19e:	f000 f879 	bl	800b294 <_printf_i>
 800b1a2:	e7ed      	b.n	800b180 <_svfiprintf_r+0x1c0>
 800b1a4:	0800be7b 	.word	0x0800be7b
 800b1a8:	0800be85 	.word	0x0800be85
 800b1ac:	00000000 	.word	0x00000000
 800b1b0:	0800af09 	.word	0x0800af09
 800b1b4:	0800be81 	.word	0x0800be81

0800b1b8 <_printf_common>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	4616      	mov	r6, r2
 800b1be:	4698      	mov	r8, r3
 800b1c0:	688a      	ldr	r2, [r1, #8]
 800b1c2:	690b      	ldr	r3, [r1, #16]
 800b1c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	bfb8      	it	lt
 800b1cc:	4613      	movlt	r3, r2
 800b1ce:	6033      	str	r3, [r6, #0]
 800b1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b10a      	cbz	r2, 800b1de <_printf_common+0x26>
 800b1da:	3301      	adds	r3, #1
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	0699      	lsls	r1, r3, #26
 800b1e2:	bf42      	ittt	mi
 800b1e4:	6833      	ldrmi	r3, [r6, #0]
 800b1e6:	3302      	addmi	r3, #2
 800b1e8:	6033      	strmi	r3, [r6, #0]
 800b1ea:	6825      	ldr	r5, [r4, #0]
 800b1ec:	f015 0506 	ands.w	r5, r5, #6
 800b1f0:	d106      	bne.n	800b200 <_printf_common+0x48>
 800b1f2:	f104 0a19 	add.w	sl, r4, #25
 800b1f6:	68e3      	ldr	r3, [r4, #12]
 800b1f8:	6832      	ldr	r2, [r6, #0]
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	dc26      	bgt.n	800b24e <_printf_common+0x96>
 800b200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	3b00      	subs	r3, #0
 800b208:	bf18      	it	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	0692      	lsls	r2, r2, #26
 800b20e:	d42b      	bmi.n	800b268 <_printf_common+0xb0>
 800b210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b214:	4641      	mov	r1, r8
 800b216:	4638      	mov	r0, r7
 800b218:	47c8      	blx	r9
 800b21a:	3001      	adds	r0, #1
 800b21c:	d01e      	beq.n	800b25c <_printf_common+0xa4>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	f003 0306 	and.w	r3, r3, #6
 800b226:	2b04      	cmp	r3, #4
 800b228:	bf02      	ittt	eq
 800b22a:	68e5      	ldreq	r5, [r4, #12]
 800b22c:	6833      	ldreq	r3, [r6, #0]
 800b22e:	1aed      	subeq	r5, r5, r3
 800b230:	68a3      	ldr	r3, [r4, #8]
 800b232:	bf0c      	ite	eq
 800b234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b238:	2500      	movne	r5, #0
 800b23a:	4293      	cmp	r3, r2
 800b23c:	bfc4      	itt	gt
 800b23e:	1a9b      	subgt	r3, r3, r2
 800b240:	18ed      	addgt	r5, r5, r3
 800b242:	2600      	movs	r6, #0
 800b244:	341a      	adds	r4, #26
 800b246:	42b5      	cmp	r5, r6
 800b248:	d11a      	bne.n	800b280 <_printf_common+0xc8>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e008      	b.n	800b260 <_printf_common+0xa8>
 800b24e:	2301      	movs	r3, #1
 800b250:	4652      	mov	r2, sl
 800b252:	4641      	mov	r1, r8
 800b254:	4638      	mov	r0, r7
 800b256:	47c8      	blx	r9
 800b258:	3001      	adds	r0, #1
 800b25a:	d103      	bne.n	800b264 <_printf_common+0xac>
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b264:	3501      	adds	r5, #1
 800b266:	e7c6      	b.n	800b1f6 <_printf_common+0x3e>
 800b268:	18e1      	adds	r1, r4, r3
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	2030      	movs	r0, #48	@ 0x30
 800b26e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b272:	4422      	add	r2, r4
 800b274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b27c:	3302      	adds	r3, #2
 800b27e:	e7c7      	b.n	800b210 <_printf_common+0x58>
 800b280:	2301      	movs	r3, #1
 800b282:	4622      	mov	r2, r4
 800b284:	4641      	mov	r1, r8
 800b286:	4638      	mov	r0, r7
 800b288:	47c8      	blx	r9
 800b28a:	3001      	adds	r0, #1
 800b28c:	d0e6      	beq.n	800b25c <_printf_common+0xa4>
 800b28e:	3601      	adds	r6, #1
 800b290:	e7d9      	b.n	800b246 <_printf_common+0x8e>
	...

0800b294 <_printf_i>:
 800b294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	7e0f      	ldrb	r7, [r1, #24]
 800b29a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b29c:	2f78      	cmp	r7, #120	@ 0x78
 800b29e:	4691      	mov	r9, r2
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	469a      	mov	sl, r3
 800b2a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2aa:	d807      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ac:	2f62      	cmp	r7, #98	@ 0x62
 800b2ae:	d80a      	bhi.n	800b2c6 <_printf_i+0x32>
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	f000 80d2 	beq.w	800b45a <_printf_i+0x1c6>
 800b2b6:	2f58      	cmp	r7, #88	@ 0x58
 800b2b8:	f000 80b9 	beq.w	800b42e <_printf_i+0x19a>
 800b2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2c4:	e03a      	b.n	800b33c <_printf_i+0xa8>
 800b2c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2ca:	2b15      	cmp	r3, #21
 800b2cc:	d8f6      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b2d4 <_printf_i+0x40>)
 800b2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b2bd 	.word	0x0800b2bd
 800b2e0:	0800b2bd 	.word	0x0800b2bd
 800b2e4:	0800b2bd 	.word	0x0800b2bd
 800b2e8:	0800b2bd 	.word	0x0800b2bd
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b2bd 	.word	0x0800b2bd
 800b2f4:	0800b2bd 	.word	0x0800b2bd
 800b2f8:	0800b2bd 	.word	0x0800b2bd
 800b2fc:	0800b2bd 	.word	0x0800b2bd
 800b300:	0800b441 	.word	0x0800b441
 800b304:	0800b36b 	.word	0x0800b36b
 800b308:	0800b3fb 	.word	0x0800b3fb
 800b30c:	0800b2bd 	.word	0x0800b2bd
 800b310:	0800b2bd 	.word	0x0800b2bd
 800b314:	0800b463 	.word	0x0800b463
 800b318:	0800b2bd 	.word	0x0800b2bd
 800b31c:	0800b36b 	.word	0x0800b36b
 800b320:	0800b2bd 	.word	0x0800b2bd
 800b324:	0800b2bd 	.word	0x0800b2bd
 800b328:	0800b403 	.word	0x0800b403
 800b32c:	6833      	ldr	r3, [r6, #0]
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6032      	str	r2, [r6, #0]
 800b334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b33c:	2301      	movs	r3, #1
 800b33e:	e09d      	b.n	800b47c <_printf_i+0x1e8>
 800b340:	6833      	ldr	r3, [r6, #0]
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	1d19      	adds	r1, r3, #4
 800b346:	6031      	str	r1, [r6, #0]
 800b348:	0606      	lsls	r6, r0, #24
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0xbc>
 800b34c:	681d      	ldr	r5, [r3, #0]
 800b34e:	e003      	b.n	800b358 <_printf_i+0xc4>
 800b350:	0645      	lsls	r5, r0, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0xb8>
 800b354:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b358:	2d00      	cmp	r5, #0
 800b35a:	da03      	bge.n	800b364 <_printf_i+0xd0>
 800b35c:	232d      	movs	r3, #45	@ 0x2d
 800b35e:	426d      	negs	r5, r5
 800b360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b364:	4859      	ldr	r0, [pc, #356]	@ (800b4cc <_printf_i+0x238>)
 800b366:	230a      	movs	r3, #10
 800b368:	e011      	b.n	800b38e <_printf_i+0xfa>
 800b36a:	6821      	ldr	r1, [r4, #0]
 800b36c:	6833      	ldr	r3, [r6, #0]
 800b36e:	0608      	lsls	r0, r1, #24
 800b370:	f853 5b04 	ldr.w	r5, [r3], #4
 800b374:	d402      	bmi.n	800b37c <_printf_i+0xe8>
 800b376:	0649      	lsls	r1, r1, #25
 800b378:	bf48      	it	mi
 800b37a:	b2ad      	uxthmi	r5, r5
 800b37c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b37e:	4853      	ldr	r0, [pc, #332]	@ (800b4cc <_printf_i+0x238>)
 800b380:	6033      	str	r3, [r6, #0]
 800b382:	bf14      	ite	ne
 800b384:	230a      	movne	r3, #10
 800b386:	2308      	moveq	r3, #8
 800b388:	2100      	movs	r1, #0
 800b38a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b38e:	6866      	ldr	r6, [r4, #4]
 800b390:	60a6      	str	r6, [r4, #8]
 800b392:	2e00      	cmp	r6, #0
 800b394:	bfa2      	ittt	ge
 800b396:	6821      	ldrge	r1, [r4, #0]
 800b398:	f021 0104 	bicge.w	r1, r1, #4
 800b39c:	6021      	strge	r1, [r4, #0]
 800b39e:	b90d      	cbnz	r5, 800b3a4 <_printf_i+0x110>
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	d04b      	beq.n	800b43c <_printf_i+0x1a8>
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3aa:	fb03 5711 	mls	r7, r3, r1, r5
 800b3ae:	5dc7      	ldrb	r7, [r0, r7]
 800b3b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3b4:	462f      	mov	r7, r5
 800b3b6:	42bb      	cmp	r3, r7
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	d9f4      	bls.n	800b3a6 <_printf_i+0x112>
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	d10b      	bne.n	800b3d8 <_printf_i+0x144>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	07df      	lsls	r7, r3, #31
 800b3c4:	d508      	bpl.n	800b3d8 <_printf_i+0x144>
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	6861      	ldr	r1, [r4, #4]
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	bfde      	ittt	le
 800b3ce:	2330      	movle	r3, #48	@ 0x30
 800b3d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3d8:	1b92      	subs	r2, r2, r6
 800b3da:	6122      	str	r2, [r4, #16]
 800b3dc:	f8cd a000 	str.w	sl, [sp]
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	aa03      	add	r2, sp, #12
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7ff fee6 	bl	800b1b8 <_printf_common>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d14a      	bne.n	800b486 <_printf_i+0x1f2>
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	b004      	add	sp, #16
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	f043 0320 	orr.w	r3, r3, #32
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	4833      	ldr	r0, [pc, #204]	@ (800b4d0 <_printf_i+0x23c>)
 800b404:	2778      	movs	r7, #120	@ 0x78
 800b406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	6831      	ldr	r1, [r6, #0]
 800b40e:	061f      	lsls	r7, r3, #24
 800b410:	f851 5b04 	ldr.w	r5, [r1], #4
 800b414:	d402      	bmi.n	800b41c <_printf_i+0x188>
 800b416:	065f      	lsls	r7, r3, #25
 800b418:	bf48      	it	mi
 800b41a:	b2ad      	uxthmi	r5, r5
 800b41c:	6031      	str	r1, [r6, #0]
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	bf44      	itt	mi
 800b422:	f043 0320 	orrmi.w	r3, r3, #32
 800b426:	6023      	strmi	r3, [r4, #0]
 800b428:	b11d      	cbz	r5, 800b432 <_printf_i+0x19e>
 800b42a:	2310      	movs	r3, #16
 800b42c:	e7ac      	b.n	800b388 <_printf_i+0xf4>
 800b42e:	4827      	ldr	r0, [pc, #156]	@ (800b4cc <_printf_i+0x238>)
 800b430:	e7e9      	b.n	800b406 <_printf_i+0x172>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	f023 0320 	bic.w	r3, r3, #32
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	e7f6      	b.n	800b42a <_printf_i+0x196>
 800b43c:	4616      	mov	r6, r2
 800b43e:	e7bd      	b.n	800b3bc <_printf_i+0x128>
 800b440:	6833      	ldr	r3, [r6, #0]
 800b442:	6825      	ldr	r5, [r4, #0]
 800b444:	6961      	ldr	r1, [r4, #20]
 800b446:	1d18      	adds	r0, r3, #4
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	062e      	lsls	r6, r5, #24
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	d501      	bpl.n	800b454 <_printf_i+0x1c0>
 800b450:	6019      	str	r1, [r3, #0]
 800b452:	e002      	b.n	800b45a <_printf_i+0x1c6>
 800b454:	0668      	lsls	r0, r5, #25
 800b456:	d5fb      	bpl.n	800b450 <_printf_i+0x1bc>
 800b458:	8019      	strh	r1, [r3, #0]
 800b45a:	2300      	movs	r3, #0
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	4616      	mov	r6, r2
 800b460:	e7bc      	b.n	800b3dc <_printf_i+0x148>
 800b462:	6833      	ldr	r3, [r6, #0]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	6032      	str	r2, [r6, #0]
 800b468:	681e      	ldr	r6, [r3, #0]
 800b46a:	6862      	ldr	r2, [r4, #4]
 800b46c:	2100      	movs	r1, #0
 800b46e:	4630      	mov	r0, r6
 800b470:	f7f4 fec6 	bl	8000200 <memchr>
 800b474:	b108      	cbz	r0, 800b47a <_printf_i+0x1e6>
 800b476:	1b80      	subs	r0, r0, r6
 800b478:	6060      	str	r0, [r4, #4]
 800b47a:	6863      	ldr	r3, [r4, #4]
 800b47c:	6123      	str	r3, [r4, #16]
 800b47e:	2300      	movs	r3, #0
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b484:	e7aa      	b.n	800b3dc <_printf_i+0x148>
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	4632      	mov	r2, r6
 800b48a:	4649      	mov	r1, r9
 800b48c:	4640      	mov	r0, r8
 800b48e:	47d0      	blx	sl
 800b490:	3001      	adds	r0, #1
 800b492:	d0ad      	beq.n	800b3f0 <_printf_i+0x15c>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	079b      	lsls	r3, r3, #30
 800b498:	d413      	bmi.n	800b4c2 <_printf_i+0x22e>
 800b49a:	68e0      	ldr	r0, [r4, #12]
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	4298      	cmp	r0, r3
 800b4a0:	bfb8      	it	lt
 800b4a2:	4618      	movlt	r0, r3
 800b4a4:	e7a6      	b.n	800b3f4 <_printf_i+0x160>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	47d0      	blx	sl
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d09d      	beq.n	800b3f0 <_printf_i+0x15c>
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	9903      	ldr	r1, [sp, #12]
 800b4ba:	1a5b      	subs	r3, r3, r1
 800b4bc:	42ab      	cmp	r3, r5
 800b4be:	dcf2      	bgt.n	800b4a6 <_printf_i+0x212>
 800b4c0:	e7eb      	b.n	800b49a <_printf_i+0x206>
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	f104 0619 	add.w	r6, r4, #25
 800b4c8:	e7f5      	b.n	800b4b6 <_printf_i+0x222>
 800b4ca:	bf00      	nop
 800b4cc:	0800be8c 	.word	0x0800be8c
 800b4d0:	0800be9d 	.word	0x0800be9d

0800b4d4 <__sflush_r>:
 800b4d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4dc:	0716      	lsls	r6, r2, #28
 800b4de:	4605      	mov	r5, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	d454      	bmi.n	800b58e <__sflush_r+0xba>
 800b4e4:	684b      	ldr	r3, [r1, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dc02      	bgt.n	800b4f0 <__sflush_r+0x1c>
 800b4ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	dd48      	ble.n	800b582 <__sflush_r+0xae>
 800b4f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4f2:	2e00      	cmp	r6, #0
 800b4f4:	d045      	beq.n	800b582 <__sflush_r+0xae>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b4fc:	682f      	ldr	r7, [r5, #0]
 800b4fe:	6a21      	ldr	r1, [r4, #32]
 800b500:	602b      	str	r3, [r5, #0]
 800b502:	d030      	beq.n	800b566 <__sflush_r+0x92>
 800b504:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	0759      	lsls	r1, r3, #29
 800b50a:	d505      	bpl.n	800b518 <__sflush_r+0x44>
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b512:	b10b      	cbz	r3, 800b518 <__sflush_r+0x44>
 800b514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	2300      	movs	r3, #0
 800b51a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b51c:	6a21      	ldr	r1, [r4, #32]
 800b51e:	4628      	mov	r0, r5
 800b520:	47b0      	blx	r6
 800b522:	1c43      	adds	r3, r0, #1
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	d106      	bne.n	800b536 <__sflush_r+0x62>
 800b528:	6829      	ldr	r1, [r5, #0]
 800b52a:	291d      	cmp	r1, #29
 800b52c:	d82b      	bhi.n	800b586 <__sflush_r+0xb2>
 800b52e:	4a2a      	ldr	r2, [pc, #168]	@ (800b5d8 <__sflush_r+0x104>)
 800b530:	410a      	asrs	r2, r1
 800b532:	07d6      	lsls	r6, r2, #31
 800b534:	d427      	bmi.n	800b586 <__sflush_r+0xb2>
 800b536:	2200      	movs	r2, #0
 800b538:	6062      	str	r2, [r4, #4]
 800b53a:	04d9      	lsls	r1, r3, #19
 800b53c:	6922      	ldr	r2, [r4, #16]
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	d504      	bpl.n	800b54c <__sflush_r+0x78>
 800b542:	1c42      	adds	r2, r0, #1
 800b544:	d101      	bne.n	800b54a <__sflush_r+0x76>
 800b546:	682b      	ldr	r3, [r5, #0]
 800b548:	b903      	cbnz	r3, 800b54c <__sflush_r+0x78>
 800b54a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b54c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b54e:	602f      	str	r7, [r5, #0]
 800b550:	b1b9      	cbz	r1, 800b582 <__sflush_r+0xae>
 800b552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b556:	4299      	cmp	r1, r3
 800b558:	d002      	beq.n	800b560 <__sflush_r+0x8c>
 800b55a:	4628      	mov	r0, r5
 800b55c:	f7ff fbd4 	bl	800ad08 <_free_r>
 800b560:	2300      	movs	r3, #0
 800b562:	6363      	str	r3, [r4, #52]	@ 0x34
 800b564:	e00d      	b.n	800b582 <__sflush_r+0xae>
 800b566:	2301      	movs	r3, #1
 800b568:	4628      	mov	r0, r5
 800b56a:	47b0      	blx	r6
 800b56c:	4602      	mov	r2, r0
 800b56e:	1c50      	adds	r0, r2, #1
 800b570:	d1c9      	bne.n	800b506 <__sflush_r+0x32>
 800b572:	682b      	ldr	r3, [r5, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0c6      	beq.n	800b506 <__sflush_r+0x32>
 800b578:	2b1d      	cmp	r3, #29
 800b57a:	d001      	beq.n	800b580 <__sflush_r+0xac>
 800b57c:	2b16      	cmp	r3, #22
 800b57e:	d11e      	bne.n	800b5be <__sflush_r+0xea>
 800b580:	602f      	str	r7, [r5, #0]
 800b582:	2000      	movs	r0, #0
 800b584:	e022      	b.n	800b5cc <__sflush_r+0xf8>
 800b586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b58a:	b21b      	sxth	r3, r3
 800b58c:	e01b      	b.n	800b5c6 <__sflush_r+0xf2>
 800b58e:	690f      	ldr	r7, [r1, #16]
 800b590:	2f00      	cmp	r7, #0
 800b592:	d0f6      	beq.n	800b582 <__sflush_r+0xae>
 800b594:	0793      	lsls	r3, r2, #30
 800b596:	680e      	ldr	r6, [r1, #0]
 800b598:	bf08      	it	eq
 800b59a:	694b      	ldreq	r3, [r1, #20]
 800b59c:	600f      	str	r7, [r1, #0]
 800b59e:	bf18      	it	ne
 800b5a0:	2300      	movne	r3, #0
 800b5a2:	eba6 0807 	sub.w	r8, r6, r7
 800b5a6:	608b      	str	r3, [r1, #8]
 800b5a8:	f1b8 0f00 	cmp.w	r8, #0
 800b5ac:	dde9      	ble.n	800b582 <__sflush_r+0xae>
 800b5ae:	6a21      	ldr	r1, [r4, #32]
 800b5b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5b2:	4643      	mov	r3, r8
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	47b0      	blx	r6
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	dc08      	bgt.n	800b5d0 <__sflush_r+0xfc>
 800b5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d0:	4407      	add	r7, r0
 800b5d2:	eba8 0800 	sub.w	r8, r8, r0
 800b5d6:	e7e7      	b.n	800b5a8 <__sflush_r+0xd4>
 800b5d8:	dfbffffe 	.word	0xdfbffffe

0800b5dc <_fflush_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	690b      	ldr	r3, [r1, #16]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	b913      	cbnz	r3, 800b5ec <_fflush_r+0x10>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	b118      	cbz	r0, 800b5f6 <_fflush_r+0x1a>
 800b5ee:	6a03      	ldr	r3, [r0, #32]
 800b5f0:	b90b      	cbnz	r3, 800b5f6 <_fflush_r+0x1a>
 800b5f2:	f7ff fa55 	bl	800aaa0 <__sinit>
 800b5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0f3      	beq.n	800b5e6 <_fflush_r+0xa>
 800b5fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b600:	07d0      	lsls	r0, r2, #31
 800b602:	d404      	bmi.n	800b60e <_fflush_r+0x32>
 800b604:	0599      	lsls	r1, r3, #22
 800b606:	d402      	bmi.n	800b60e <_fflush_r+0x32>
 800b608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b60a:	f7ff fb5c 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800b60e:	4628      	mov	r0, r5
 800b610:	4621      	mov	r1, r4
 800b612:	f7ff ff5f 	bl	800b4d4 <__sflush_r>
 800b616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b618:	07da      	lsls	r2, r3, #31
 800b61a:	4605      	mov	r5, r0
 800b61c:	d4e4      	bmi.n	800b5e8 <_fflush_r+0xc>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	059b      	lsls	r3, r3, #22
 800b622:	d4e1      	bmi.n	800b5e8 <_fflush_r+0xc>
 800b624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b626:	f7ff fb4f 	bl	800acc8 <__retarget_lock_release_recursive>
 800b62a:	e7dd      	b.n	800b5e8 <_fflush_r+0xc>

0800b62c <fiprintf>:
 800b62c:	b40e      	push	{r1, r2, r3}
 800b62e:	b503      	push	{r0, r1, lr}
 800b630:	4601      	mov	r1, r0
 800b632:	ab03      	add	r3, sp, #12
 800b634:	4805      	ldr	r0, [pc, #20]	@ (800b64c <fiprintf+0x20>)
 800b636:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63a:	6800      	ldr	r0, [r0, #0]
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f000 f89d 	bl	800b77c <_vfiprintf_r>
 800b642:	b002      	add	sp, #8
 800b644:	f85d eb04 	ldr.w	lr, [sp], #4
 800b648:	b003      	add	sp, #12
 800b64a:	4770      	bx	lr
 800b64c:	200400bc 	.word	0x200400bc

0800b650 <memmove>:
 800b650:	4288      	cmp	r0, r1
 800b652:	b510      	push	{r4, lr}
 800b654:	eb01 0402 	add.w	r4, r1, r2
 800b658:	d902      	bls.n	800b660 <memmove+0x10>
 800b65a:	4284      	cmp	r4, r0
 800b65c:	4623      	mov	r3, r4
 800b65e:	d807      	bhi.n	800b670 <memmove+0x20>
 800b660:	1e43      	subs	r3, r0, #1
 800b662:	42a1      	cmp	r1, r4
 800b664:	d008      	beq.n	800b678 <memmove+0x28>
 800b666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b66e:	e7f8      	b.n	800b662 <memmove+0x12>
 800b670:	4402      	add	r2, r0
 800b672:	4601      	mov	r1, r0
 800b674:	428a      	cmp	r2, r1
 800b676:	d100      	bne.n	800b67a <memmove+0x2a>
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b682:	e7f7      	b.n	800b674 <memmove+0x24>

0800b684 <_sbrk_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d06      	ldr	r5, [pc, #24]	@ (800b6a0 <_sbrk_r+0x1c>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	602b      	str	r3, [r5, #0]
 800b690:	f7f6 fdaa 	bl	80021e8 <_sbrk>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d102      	bne.n	800b69e <_sbrk_r+0x1a>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	b103      	cbz	r3, 800b69e <_sbrk_r+0x1a>
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	200407d4 	.word	0x200407d4

0800b6a4 <memcpy>:
 800b6a4:	440a      	add	r2, r1
 800b6a6:	4291      	cmp	r1, r2
 800b6a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6ac:	d100      	bne.n	800b6b0 <memcpy+0xc>
 800b6ae:	4770      	bx	lr
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ba:	4291      	cmp	r1, r2
 800b6bc:	d1f9      	bne.n	800b6b2 <memcpy+0xe>
 800b6be:	bd10      	pop	{r4, pc}

0800b6c0 <abort>:
 800b6c0:	b508      	push	{r3, lr}
 800b6c2:	2006      	movs	r0, #6
 800b6c4:	f000 fa2e 	bl	800bb24 <raise>
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f7f6 fd15 	bl	80020f8 <_exit>

0800b6ce <_realloc_r>:
 800b6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	4615      	mov	r5, r2
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	b921      	cbnz	r1, 800b6e4 <_realloc_r+0x16>
 800b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6de:	4611      	mov	r1, r2
 800b6e0:	f7ff bb86 	b.w	800adf0 <_malloc_r>
 800b6e4:	b92a      	cbnz	r2, 800b6f2 <_realloc_r+0x24>
 800b6e6:	f7ff fb0f 	bl	800ad08 <_free_r>
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f2:	f000 fa33 	bl	800bb5c <_malloc_usable_size_r>
 800b6f6:	4285      	cmp	r5, r0
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	d802      	bhi.n	800b702 <_realloc_r+0x34>
 800b6fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b700:	d8f4      	bhi.n	800b6ec <_realloc_r+0x1e>
 800b702:	4629      	mov	r1, r5
 800b704:	4640      	mov	r0, r8
 800b706:	f7ff fb73 	bl	800adf0 <_malloc_r>
 800b70a:	4607      	mov	r7, r0
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d0ec      	beq.n	800b6ea <_realloc_r+0x1c>
 800b710:	42b5      	cmp	r5, r6
 800b712:	462a      	mov	r2, r5
 800b714:	4621      	mov	r1, r4
 800b716:	bf28      	it	cs
 800b718:	4632      	movcs	r2, r6
 800b71a:	f7ff ffc3 	bl	800b6a4 <memcpy>
 800b71e:	4621      	mov	r1, r4
 800b720:	4640      	mov	r0, r8
 800b722:	f7ff faf1 	bl	800ad08 <_free_r>
 800b726:	463c      	mov	r4, r7
 800b728:	e7e0      	b.n	800b6ec <_realloc_r+0x1e>

0800b72a <__sfputc_r>:
 800b72a:	6893      	ldr	r3, [r2, #8]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	b410      	push	{r4}
 800b732:	6093      	str	r3, [r2, #8]
 800b734:	da08      	bge.n	800b748 <__sfputc_r+0x1e>
 800b736:	6994      	ldr	r4, [r2, #24]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	db01      	blt.n	800b740 <__sfputc_r+0x16>
 800b73c:	290a      	cmp	r1, #10
 800b73e:	d103      	bne.n	800b748 <__sfputc_r+0x1e>
 800b740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b744:	f000 b932 	b.w	800b9ac <__swbuf_r>
 800b748:	6813      	ldr	r3, [r2, #0]
 800b74a:	1c58      	adds	r0, r3, #1
 800b74c:	6010      	str	r0, [r2, #0]
 800b74e:	7019      	strb	r1, [r3, #0]
 800b750:	4608      	mov	r0, r1
 800b752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <__sfputs_r>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	4606      	mov	r6, r0
 800b75c:	460f      	mov	r7, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	18d5      	adds	r5, r2, r3
 800b762:	42ac      	cmp	r4, r5
 800b764:	d101      	bne.n	800b76a <__sfputs_r+0x12>
 800b766:	2000      	movs	r0, #0
 800b768:	e007      	b.n	800b77a <__sfputs_r+0x22>
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	463a      	mov	r2, r7
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff ffda 	bl	800b72a <__sfputc_r>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d1f3      	bne.n	800b762 <__sfputs_r+0xa>
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b77c <_vfiprintf_r>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	460d      	mov	r5, r1
 800b782:	b09d      	sub	sp, #116	@ 0x74
 800b784:	4614      	mov	r4, r2
 800b786:	4698      	mov	r8, r3
 800b788:	4606      	mov	r6, r0
 800b78a:	b118      	cbz	r0, 800b794 <_vfiprintf_r+0x18>
 800b78c:	6a03      	ldr	r3, [r0, #32]
 800b78e:	b90b      	cbnz	r3, 800b794 <_vfiprintf_r+0x18>
 800b790:	f7ff f986 	bl	800aaa0 <__sinit>
 800b794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b796:	07d9      	lsls	r1, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	059a      	lsls	r2, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a2:	f7ff fa90 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	071b      	lsls	r3, r3, #28
 800b7aa:	d501      	bpl.n	800b7b0 <_vfiprintf_r+0x34>
 800b7ac:	692b      	ldr	r3, [r5, #16]
 800b7ae:	b99b      	cbnz	r3, 800b7d8 <_vfiprintf_r+0x5c>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f938 	bl	800ba28 <__swsetup_r>
 800b7b8:	b170      	cbz	r0, 800b7d8 <_vfiprintf_r+0x5c>
 800b7ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7bc:	07dc      	lsls	r4, r3, #31
 800b7be:	d504      	bpl.n	800b7ca <_vfiprintf_r+0x4e>
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c4:	b01d      	add	sp, #116	@ 0x74
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	0598      	lsls	r0, r3, #22
 800b7ce:	d4f7      	bmi.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d2:	f7ff fa79 	bl	800acc8 <__retarget_lock_release_recursive>
 800b7d6:	e7f3      	b.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7dc:	2320      	movs	r3, #32
 800b7de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e6:	2330      	movs	r3, #48	@ 0x30
 800b7e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b998 <_vfiprintf_r+0x21c>
 800b7ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f0:	f04f 0901 	mov.w	r9, #1
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	469a      	mov	sl, r3
 800b7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fc:	b10a      	cbz	r2, 800b802 <_vfiprintf_r+0x86>
 800b7fe:	2a25      	cmp	r2, #37	@ 0x25
 800b800:	d1f9      	bne.n	800b7f6 <_vfiprintf_r+0x7a>
 800b802:	ebba 0b04 	subs.w	fp, sl, r4
 800b806:	d00b      	beq.n	800b820 <_vfiprintf_r+0xa4>
 800b808:	465b      	mov	r3, fp
 800b80a:	4622      	mov	r2, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	4630      	mov	r0, r6
 800b810:	f7ff ffa2 	bl	800b758 <__sfputs_r>
 800b814:	3001      	adds	r0, #1
 800b816:	f000 80a7 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b81a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b81c:	445a      	add	r2, fp
 800b81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b820:	f89a 3000 	ldrb.w	r3, [sl]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 809f 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b834:	f10a 0a01 	add.w	sl, sl, #1
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	9307      	str	r3, [sp, #28]
 800b83c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b840:	931a      	str	r3, [sp, #104]	@ 0x68
 800b842:	4654      	mov	r4, sl
 800b844:	2205      	movs	r2, #5
 800b846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84a:	4853      	ldr	r0, [pc, #332]	@ (800b998 <_vfiprintf_r+0x21c>)
 800b84c:	f7f4 fcd8 	bl	8000200 <memchr>
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	b9d8      	cbnz	r0, 800b88c <_vfiprintf_r+0x110>
 800b854:	06d1      	lsls	r1, r2, #27
 800b856:	bf44      	itt	mi
 800b858:	2320      	movmi	r3, #32
 800b85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b85e:	0713      	lsls	r3, r2, #28
 800b860:	bf44      	itt	mi
 800b862:	232b      	movmi	r3, #43	@ 0x2b
 800b864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b868:	f89a 3000 	ldrb.w	r3, [sl]
 800b86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b86e:	d015      	beq.n	800b89c <_vfiprintf_r+0x120>
 800b870:	9a07      	ldr	r2, [sp, #28]
 800b872:	4654      	mov	r4, sl
 800b874:	2000      	movs	r0, #0
 800b876:	f04f 0c0a 	mov.w	ip, #10
 800b87a:	4621      	mov	r1, r4
 800b87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b880:	3b30      	subs	r3, #48	@ 0x30
 800b882:	2b09      	cmp	r3, #9
 800b884:	d94b      	bls.n	800b91e <_vfiprintf_r+0x1a2>
 800b886:	b1b0      	cbz	r0, 800b8b6 <_vfiprintf_r+0x13a>
 800b888:	9207      	str	r2, [sp, #28]
 800b88a:	e014      	b.n	800b8b6 <_vfiprintf_r+0x13a>
 800b88c:	eba0 0308 	sub.w	r3, r0, r8
 800b890:	fa09 f303 	lsl.w	r3, r9, r3
 800b894:	4313      	orrs	r3, r2
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	46a2      	mov	sl, r4
 800b89a:	e7d2      	b.n	800b842 <_vfiprintf_r+0xc6>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	1d19      	adds	r1, r3, #4
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	9103      	str	r1, [sp, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bfbb      	ittet	lt
 800b8a8:	425b      	neglt	r3, r3
 800b8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ae:	9307      	strge	r3, [sp, #28]
 800b8b0:	9307      	strlt	r3, [sp, #28]
 800b8b2:	bfb8      	it	lt
 800b8b4:	9204      	strlt	r2, [sp, #16]
 800b8b6:	7823      	ldrb	r3, [r4, #0]
 800b8b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ba:	d10a      	bne.n	800b8d2 <_vfiprintf_r+0x156>
 800b8bc:	7863      	ldrb	r3, [r4, #1]
 800b8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c0:	d132      	bne.n	800b928 <_vfiprintf_r+0x1ac>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	1d1a      	adds	r2, r3, #4
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	9203      	str	r2, [sp, #12]
 800b8ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8ce:	3402      	adds	r4, #2
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9a8 <_vfiprintf_r+0x22c>
 800b8d6:	7821      	ldrb	r1, [r4, #0]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7f4 fc90 	bl	8000200 <memchr>
 800b8e0:	b138      	cbz	r0, 800b8f2 <_vfiprintf_r+0x176>
 800b8e2:	9b04      	ldr	r3, [sp, #16]
 800b8e4:	eba0 000a 	sub.w	r0, r0, sl
 800b8e8:	2240      	movs	r2, #64	@ 0x40
 800b8ea:	4082      	lsls	r2, r0
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4829      	ldr	r0, [pc, #164]	@ (800b99c <_vfiprintf_r+0x220>)
 800b8f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8fc:	2206      	movs	r2, #6
 800b8fe:	f7f4 fc7f 	bl	8000200 <memchr>
 800b902:	2800      	cmp	r0, #0
 800b904:	d03f      	beq.n	800b986 <_vfiprintf_r+0x20a>
 800b906:	4b26      	ldr	r3, [pc, #152]	@ (800b9a0 <_vfiprintf_r+0x224>)
 800b908:	bb1b      	cbnz	r3, 800b952 <_vfiprintf_r+0x1d6>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	3307      	adds	r3, #7
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b918:	443b      	add	r3, r7
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	e76a      	b.n	800b7f4 <_vfiprintf_r+0x78>
 800b91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b922:	460c      	mov	r4, r1
 800b924:	2001      	movs	r0, #1
 800b926:	e7a8      	b.n	800b87a <_vfiprintf_r+0xfe>
 800b928:	2300      	movs	r3, #0
 800b92a:	3401      	adds	r4, #1
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	4619      	mov	r1, r3
 800b930:	f04f 0c0a 	mov.w	ip, #10
 800b934:	4620      	mov	r0, r4
 800b936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93a:	3a30      	subs	r2, #48	@ 0x30
 800b93c:	2a09      	cmp	r2, #9
 800b93e:	d903      	bls.n	800b948 <_vfiprintf_r+0x1cc>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <_vfiprintf_r+0x156>
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	e7c4      	b.n	800b8d2 <_vfiprintf_r+0x156>
 800b948:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94c:	4604      	mov	r4, r0
 800b94e:	2301      	movs	r3, #1
 800b950:	e7f0      	b.n	800b934 <_vfiprintf_r+0x1b8>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b95a:	a904      	add	r1, sp, #16
 800b95c:	4630      	mov	r0, r6
 800b95e:	f3af 8000 	nop.w
 800b962:	4607      	mov	r7, r0
 800b964:	1c78      	adds	r0, r7, #1
 800b966:	d1d6      	bne.n	800b916 <_vfiprintf_r+0x19a>
 800b968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d402      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b976:	f7ff f9a7 	bl	800acc8 <__retarget_lock_release_recursive>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	065b      	lsls	r3, r3, #25
 800b97e:	f53f af1f 	bmi.w	800b7c0 <_vfiprintf_r+0x44>
 800b982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b984:	e71e      	b.n	800b7c4 <_vfiprintf_r+0x48>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4b05      	ldr	r3, [pc, #20]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b98e:	a904      	add	r1, sp, #16
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff fc7f 	bl	800b294 <_printf_i>
 800b996:	e7e4      	b.n	800b962 <_vfiprintf_r+0x1e6>
 800b998:	0800be7b 	.word	0x0800be7b
 800b99c:	0800be85 	.word	0x0800be85
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	0800b759 	.word	0x0800b759
 800b9a8:	0800be81 	.word	0x0800be81

0800b9ac <__swbuf_r>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	460e      	mov	r6, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	b118      	cbz	r0, 800b9be <__swbuf_r+0x12>
 800b9b6:	6a03      	ldr	r3, [r0, #32]
 800b9b8:	b90b      	cbnz	r3, 800b9be <__swbuf_r+0x12>
 800b9ba:	f7ff f871 	bl	800aaa0 <__sinit>
 800b9be:	69a3      	ldr	r3, [r4, #24]
 800b9c0:	60a3      	str	r3, [r4, #8]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	071a      	lsls	r2, r3, #28
 800b9c6:	d501      	bpl.n	800b9cc <__swbuf_r+0x20>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b943      	cbnz	r3, 800b9de <__swbuf_r+0x32>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f82a 	bl	800ba28 <__swsetup_r>
 800b9d4:	b118      	cbz	r0, 800b9de <__swbuf_r+0x32>
 800b9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9da:	4638      	mov	r0, r7
 800b9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	6922      	ldr	r2, [r4, #16]
 800b9e2:	1a98      	subs	r0, r3, r2
 800b9e4:	6963      	ldr	r3, [r4, #20]
 800b9e6:	b2f6      	uxtb	r6, r6
 800b9e8:	4283      	cmp	r3, r0
 800b9ea:	4637      	mov	r7, r6
 800b9ec:	dc05      	bgt.n	800b9fa <__swbuf_r+0x4e>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f7ff fdf3 	bl	800b5dc <_fflush_r>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d1ed      	bne.n	800b9d6 <__swbuf_r+0x2a>
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60a3      	str	r3, [r4, #8]
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	701e      	strb	r6, [r3, #0]
 800ba08:	6962      	ldr	r2, [r4, #20]
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d004      	beq.n	800ba1a <__swbuf_r+0x6e>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d5e1      	bpl.n	800b9da <__swbuf_r+0x2e>
 800ba16:	2e0a      	cmp	r6, #10
 800ba18:	d1df      	bne.n	800b9da <__swbuf_r+0x2e>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7ff fddd 	bl	800b5dc <_fflush_r>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0d9      	beq.n	800b9da <__swbuf_r+0x2e>
 800ba26:	e7d6      	b.n	800b9d6 <__swbuf_r+0x2a>

0800ba28 <__swsetup_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4b29      	ldr	r3, [pc, #164]	@ (800bad0 <__swsetup_r+0xa8>)
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	460c      	mov	r4, r1
 800ba32:	b118      	cbz	r0, 800ba3c <__swsetup_r+0x14>
 800ba34:	6a03      	ldr	r3, [r0, #32]
 800ba36:	b90b      	cbnz	r3, 800ba3c <__swsetup_r+0x14>
 800ba38:	f7ff f832 	bl	800aaa0 <__sinit>
 800ba3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba40:	0719      	lsls	r1, r3, #28
 800ba42:	d422      	bmi.n	800ba8a <__swsetup_r+0x62>
 800ba44:	06da      	lsls	r2, r3, #27
 800ba46:	d407      	bmi.n	800ba58 <__swsetup_r+0x30>
 800ba48:	2209      	movs	r2, #9
 800ba4a:	602a      	str	r2, [r5, #0]
 800ba4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	e033      	b.n	800bac0 <__swsetup_r+0x98>
 800ba58:	0758      	lsls	r0, r3, #29
 800ba5a:	d512      	bpl.n	800ba82 <__swsetup_r+0x5a>
 800ba5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba5e:	b141      	cbz	r1, 800ba72 <__swsetup_r+0x4a>
 800ba60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba64:	4299      	cmp	r1, r3
 800ba66:	d002      	beq.n	800ba6e <__swsetup_r+0x46>
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f7ff f94d 	bl	800ad08 <_free_r>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6063      	str	r3, [r4, #4]
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f043 0308 	orr.w	r3, r3, #8
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	b94b      	cbnz	r3, 800baa2 <__swsetup_r+0x7a>
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba98:	d003      	beq.n	800baa2 <__swsetup_r+0x7a>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 f88b 	bl	800bbb8 <__smakebuf_r>
 800baa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa6:	f013 0201 	ands.w	r2, r3, #1
 800baaa:	d00a      	beq.n	800bac2 <__swsetup_r+0x9a>
 800baac:	2200      	movs	r2, #0
 800baae:	60a2      	str	r2, [r4, #8]
 800bab0:	6962      	ldr	r2, [r4, #20]
 800bab2:	4252      	negs	r2, r2
 800bab4:	61a2      	str	r2, [r4, #24]
 800bab6:	6922      	ldr	r2, [r4, #16]
 800bab8:	b942      	cbnz	r2, 800bacc <__swsetup_r+0xa4>
 800baba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800babe:	d1c5      	bne.n	800ba4c <__swsetup_r+0x24>
 800bac0:	bd38      	pop	{r3, r4, r5, pc}
 800bac2:	0799      	lsls	r1, r3, #30
 800bac4:	bf58      	it	pl
 800bac6:	6962      	ldrpl	r2, [r4, #20]
 800bac8:	60a2      	str	r2, [r4, #8]
 800baca:	e7f4      	b.n	800bab6 <__swsetup_r+0x8e>
 800bacc:	2000      	movs	r0, #0
 800bace:	e7f7      	b.n	800bac0 <__swsetup_r+0x98>
 800bad0:	200400bc 	.word	0x200400bc

0800bad4 <_raise_r>:
 800bad4:	291f      	cmp	r1, #31
 800bad6:	b538      	push	{r3, r4, r5, lr}
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	d904      	bls.n	800bae8 <_raise_r+0x14>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baea:	b112      	cbz	r2, 800baf2 <_raise_r+0x1e>
 800baec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baf0:	b94b      	cbnz	r3, 800bb06 <_raise_r+0x32>
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 f830 	bl	800bb58 <_getpid_r>
 800baf8:	4622      	mov	r2, r4
 800bafa:	4601      	mov	r1, r0
 800bafc:	4628      	mov	r0, r5
 800bafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb02:	f000 b817 	b.w	800bb34 <_kill_r>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d00a      	beq.n	800bb20 <_raise_r+0x4c>
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	d103      	bne.n	800bb16 <_raise_r+0x42>
 800bb0e:	2316      	movs	r3, #22
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	2001      	movs	r0, #1
 800bb14:	e7e7      	b.n	800bae6 <_raise_r+0x12>
 800bb16:	2100      	movs	r1, #0
 800bb18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4798      	blx	r3
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7e0      	b.n	800bae6 <_raise_r+0x12>

0800bb24 <raise>:
 800bb24:	4b02      	ldr	r3, [pc, #8]	@ (800bb30 <raise+0xc>)
 800bb26:	4601      	mov	r1, r0
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f7ff bfd3 	b.w	800bad4 <_raise_r>
 800bb2e:	bf00      	nop
 800bb30:	200400bc 	.word	0x200400bc

0800bb34 <_kill_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d07      	ldr	r5, [pc, #28]	@ (800bb54 <_kill_r+0x20>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	f7f6 fac9 	bl	80020d8 <_kill>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d102      	bne.n	800bb50 <_kill_r+0x1c>
 800bb4a:	682b      	ldr	r3, [r5, #0]
 800bb4c:	b103      	cbz	r3, 800bb50 <_kill_r+0x1c>
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop
 800bb54:	200407d4 	.word	0x200407d4

0800bb58 <_getpid_r>:
 800bb58:	f7f6 bab6 	b.w	80020c8 <_getpid>

0800bb5c <_malloc_usable_size_r>:
 800bb5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb60:	1f18      	subs	r0, r3, #4
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfbc      	itt	lt
 800bb66:	580b      	ldrlt	r3, [r1, r0]
 800bb68:	18c0      	addlt	r0, r0, r3
 800bb6a:	4770      	bx	lr

0800bb6c <__swhatbuf_r>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	460c      	mov	r4, r1
 800bb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb74:	2900      	cmp	r1, #0
 800bb76:	b096      	sub	sp, #88	@ 0x58
 800bb78:	4615      	mov	r5, r2
 800bb7a:	461e      	mov	r6, r3
 800bb7c:	da0d      	bge.n	800bb9a <__swhatbuf_r+0x2e>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb84:	f04f 0100 	mov.w	r1, #0
 800bb88:	bf14      	ite	ne
 800bb8a:	2340      	movne	r3, #64	@ 0x40
 800bb8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb90:	2000      	movs	r0, #0
 800bb92:	6031      	str	r1, [r6, #0]
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	b016      	add	sp, #88	@ 0x58
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	466a      	mov	r2, sp
 800bb9c:	f000 f848 	bl	800bc30 <_fstat_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	dbec      	blt.n	800bb7e <__swhatbuf_r+0x12>
 800bba4:	9901      	ldr	r1, [sp, #4]
 800bba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbae:	4259      	negs	r1, r3
 800bbb0:	4159      	adcs	r1, r3
 800bbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbb6:	e7eb      	b.n	800bb90 <__swhatbuf_r+0x24>

0800bbb8 <__smakebuf_r>:
 800bbb8:	898b      	ldrh	r3, [r1, #12]
 800bbba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	d507      	bpl.n	800bbd4 <__smakebuf_r+0x1c>
 800bbc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	6123      	str	r3, [r4, #16]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	6163      	str	r3, [r4, #20]
 800bbd0:	b003      	add	sp, #12
 800bbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd4:	ab01      	add	r3, sp, #4
 800bbd6:	466a      	mov	r2, sp
 800bbd8:	f7ff ffc8 	bl	800bb6c <__swhatbuf_r>
 800bbdc:	9f00      	ldr	r7, [sp, #0]
 800bbde:	4605      	mov	r5, r0
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff f904 	bl	800adf0 <_malloc_r>
 800bbe8:	b948      	cbnz	r0, 800bbfe <__smakebuf_r+0x46>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	059a      	lsls	r2, r3, #22
 800bbf0:	d4ee      	bmi.n	800bbd0 <__smakebuf_r+0x18>
 800bbf2:	f023 0303 	bic.w	r3, r3, #3
 800bbf6:	f043 0302 	orr.w	r3, r3, #2
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	e7e2      	b.n	800bbc4 <__smakebuf_r+0xc>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	6020      	str	r0, [r4, #0]
 800bc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc0e:	b15b      	cbz	r3, 800bc28 <__smakebuf_r+0x70>
 800bc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 f81d 	bl	800bc54 <_isatty_r>
 800bc1a:	b128      	cbz	r0, 800bc28 <__smakebuf_r+0x70>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f023 0303 	bic.w	r3, r3, #3
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	431d      	orrs	r5, r3
 800bc2c:	81a5      	strh	r5, [r4, #12]
 800bc2e:	e7cf      	b.n	800bbd0 <__smakebuf_r+0x18>

0800bc30 <_fstat_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	@ (800bc50 <_fstat_r+0x20>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f7f6 faab 	bl	8002198 <_fstat>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d102      	bne.n	800bc4c <_fstat_r+0x1c>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b103      	cbz	r3, 800bc4c <_fstat_r+0x1c>
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	bf00      	nop
 800bc50:	200407d4 	.word	0x200407d4

0800bc54 <_isatty_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	@ (800bc70 <_isatty_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f6 faaa 	bl	80021b8 <_isatty>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_isatty_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_isatty_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	200407d4 	.word	0x200407d4

0800bc74 <_init>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr

0800bc80 <_fini>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	bf00      	nop
 800bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc86:	bc08      	pop	{r3}
 800bc88:	469e      	mov	lr, r3
 800bc8a:	4770      	bx	lr
