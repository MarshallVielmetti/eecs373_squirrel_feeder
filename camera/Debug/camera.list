
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003f2c  08003f2c  00004f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f9c  08003f9c  00004f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa4  08003fa4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2004000c  08003fb8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040354  08003fb8  00005354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9eb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afa  00000000  00000000  00011a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00013528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b8  00000000  00000000  00013f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028558  00000000  00000000  000146e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8a9  00000000  00000000  0003cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9611  00000000  00000000  000494e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142afa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  00142b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  001453dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003f14 	.word	0x08003f14

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	08003f14 	.word	0x08003f14

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <VC0706_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];
    buffer[0] = VC0706_CMD_PREFIX;
 80004fc:	2356      	movs	r3, #86	@ 0x56
 80004fe:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8000500:	2300      	movs	r3, #0
 8000502:	737b      	strb	r3, [r7, #13]
    buffer[2] = cmd;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < params_len; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	77fb      	strb	r3, [r7, #31]
 800050c:	e00c      	b.n	8000528 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 800050e:	7ffb      	ldrb	r3, [r7, #31]
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	441a      	add	r2, r3
 8000514:	7ffb      	ldrb	r3, [r7, #31]
 8000516:	3303      	adds	r3, #3
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	3320      	adds	r3, #32
 800051c:	443b      	add	r3, r7
 800051e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8000522:	7ffb      	ldrb	r3, [r7, #31]
 8000524:	3301      	adds	r3, #1
 8000526:	77fb      	strb	r3, [r7, #31]
 8000528:	7ffa      	ldrb	r2, [r7, #31]
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3ee      	bcc.n	800050e <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&huart3, buffer, 3 + params_len, HAL_MAX_DELAY);
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	b29b      	uxth	r3, r3
 8000534:	3303      	adds	r3, #3
 8000536:	b29a      	uxth	r2, r3
 8000538:	f107 010c 	add.w	r1, r7, #12
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <VC0706_SendCommand+0x64>)
 8000542:	f002 fd45 	bl	8002fd0 <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200402bc 	.word	0x200402bc

08000554 <VC0706_TakePhoto>:

uint8_t VC0706_TakePhoto(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 800055a:	2301      	movs	r3, #1
 800055c:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2202      	movs	r2, #2
 8000564:	4619      	mov	r1, r3
 8000566:	2036      	movs	r0, #54	@ 0x36
 8000568:	f7ff ffc0 	bl	80004ec <VC0706_SendCommand>

    uint8_t response[5]={0};
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	2300      	movs	r3, #0
 8000572:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000); // 1-second timeout
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	2205      	movs	r2, #5
 800057c:	480f      	ldr	r0, [pc, #60]	@ (80005bc <VC0706_TakePhoto+0x68>)
 800057e:	f002 fdb5 	bl	80030ec <HAL_UART_Receive>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 800058c:	2300      	movs	r3, #0
 800058e:	e011      	b.n	80005b4 <VC0706_TakePhoto+0x60>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    if (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00) {
 8000590:	793b      	ldrb	r3, [r7, #4]
 8000592:	2b76      	cmp	r3, #118	@ 0x76
 8000594:	d10d      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10a      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b36      	cmp	r3, #54	@ 0x36
 80005a0:	d107      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d104      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 80005a8:	7a3b      	ldrb	r3, [r7, #8]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
        return 1; // Success
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <VC0706_TakePhoto+0x60>
    } else {
        // Unexpected response received, handle accordingly
        return 0;
 80005b2:	2300      	movs	r3, #0
    }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200402bc 	.word	0x200402bc

080005c0 <VC0706_ReadImage>:



uint8_t VC0706_ReadImage(uint8_t *imageBuffer, uint32_t bufferSize) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    uint32_t address = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    uint32_t bytesReceived = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
    uint8_t readCommand[8];

    while (bytesReceived < bufferSize) {
 80005d2:	e037      	b.n	8000644 <VC0706_ReadImage+0x84>
        uint16_t chunkSize = (bufferSize - bytesReceived > CAMERA_BUFFER_SIZE) ? CAMERA_BUFFER_SIZE : (bufferSize - bytesReceived);
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005de:	bf28      	it	cs
 80005e0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80005e4:	82fb      	strh	r3, [r7, #22]

        // Prepare the read command for the camera
        readCommand[0] = 0x0C;
 80005e6:	230c      	movs	r3, #12
 80005e8:	733b      	strb	r3, [r7, #12]
        readCommand[1] = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	737b      	strb	r3, [r7, #13]
        readCommand[2] = (address >> 8) & 0xFF;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73bb      	strb	r3, [r7, #14]
        readCommand[3] = address & 0xFF;
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	73fb      	strb	r3, [r7, #15]
        readCommand[4] = (chunkSize >> 8) & 0xFF;
 80005fc:	8afb      	ldrh	r3, [r7, #22]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b29b      	uxth	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	743b      	strb	r3, [r7, #16]
        readCommand[5] = chunkSize & 0xFF;
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	747b      	strb	r3, [r7, #17]
        readCommand[6] = 0x10;
 800060c:	2310      	movs	r3, #16
 800060e:	74bb      	strb	r3, [r7, #18]
        readCommand[7] = 0x00;
 8000610:	2300      	movs	r3, #0
 8000612:	74fb      	strb	r3, [r7, #19]

        VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2208      	movs	r2, #8
 800061a:	4619      	mov	r1, r3
 800061c:	2032      	movs	r0, #50	@ 0x32
 800061e:	f7ff ff65 	bl	80004ec <VC0706_SendCommand>

        HAL_UART_Receive(&huart3, imageBuffer + bytesReceived, chunkSize, HAL_MAX_DELAY);
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	18d1      	adds	r1, r2, r3
 8000628:	8afa      	ldrh	r2, [r7, #22]
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <VC0706_ReadImage+0x98>)
 8000630:	f002 fd5c 	bl	80030ec <HAL_UART_Receive>
        bytesReceived += chunkSize;
 8000634:	8afb      	ldrh	r3, [r7, #22]
 8000636:	69ba      	ldr	r2, [r7, #24]
 8000638:	4413      	add	r3, r2
 800063a:	61bb      	str	r3, [r7, #24]
        address += chunkSize;
 800063c:	8afb      	ldrh	r3, [r7, #22]
 800063e:	69fa      	ldr	r2, [r7, #28]
 8000640:	4413      	add	r3, r2
 8000642:	61fb      	str	r3, [r7, #28]
    while (bytesReceived < bufferSize) {
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3c3      	bcc.n	80005d4 <VC0706_ReadImage+0x14>
    }
    return 1;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200402bc 	.word	0x200402bc

0800065c <VC0706_Reset>:
    return (response[3] == 0x0); // Check if baud rate was set successfully
}



uint8_t VC0706_Reset(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
    uint8_t resetCommand[] = {0x00};
 8000662:	2300      	movs	r3, #0
 8000664:	713b      	strb	r3, [r7, #4]
    VC0706_SendCommand(VC0706_CMD_RESET, resetCommand, sizeof(resetCommand));
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	2026      	movs	r0, #38	@ 0x26
 800066e:	f7ff ff3d 	bl	80004ec <VC0706_SendCommand>

    uint8_t response[4];
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 10000);
 8000672:	4639      	mov	r1, r7
 8000674:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000678:	2204      	movs	r2, #4
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <VC0706_Reset+0x3c>)
 800067c:	f002 fd36 	bl	80030ec <HAL_UART_Receive>
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
    return (response[3] == 0x0); // Check if reset was successful
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200402bc 	.word	0x200402bc

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fc94 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f823 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 f8ff 	bl	80008ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 f865 	bl	800077c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006b2:	f000 f8af 	bl	8000814 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  VC0706_SetBaudRate();
  int reset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  if (VC0706_Reset()){
 80006ba:	f7ff ffcf 	bl	800065c <VC0706_Reset>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <main+0x2c>
	  reset = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
  }
//    HAL_Delay(1000);
  int photo = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  // Take a photo
  if (VC0706_TakePhoto()) {
 80006cc:	f7ff ff42 	bl	8000554 <VC0706_TakePhoto>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <main+0x48>
	  photo = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
      // Capture the image into the buffer
      VC0706_ReadImage(cameraBuffer, sizeof(cameraBuffer));
 80006da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006de:	4803      	ldr	r0, [pc, #12]	@ (80006ec <main+0x50>)
 80006e0:	f7ff ff6e 	bl	80005c0 <VC0706_ReadImage>
  }

  int r = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x4c>
 80006ec:	20040028 	.word	0x20040028

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2244      	movs	r2, #68	@ 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fbdc 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000712:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000716:	f000 ff67 	bl	80015e8 <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000720:	f000 fb1a 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000724:	2310      	movs	r3, #16
 8000726:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000730:	2360      	movs	r3, #96	@ 0x60
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f807 	bl	8001750 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000748:	f000 fb06 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc0d 	bl	8001f84 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000770:	f000 faf2 	bl	8000d58 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3758      	adds	r7, #88	@ 0x58
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	@ (8000810 <MX_USART1_UART_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_USART1_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007c6:	f002 fbb3 	bl	8002f30 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 fac2 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007d8:	f003 faa6 	bl	8003d28 <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 fab9 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007ea:	f003 fadb 	bl	8003da4 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 fab0 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_USART1_UART_Init+0x90>)
 80007fa:	f003 fa5c 	bl	8003cb6 <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 faa8 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20040228 	.word	0x20040228
 8000810:	40013800 	.word	0x40013800

08000814 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 800081a:	4a23      	ldr	r2, [pc, #140]	@ (80008a8 <MX_USART3_UART_Init+0x94>)
 800081c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085c:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 800085e:	f002 fb67 	bl	8002f30 <HAL_UART_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 fa76 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000870:	f003 fa5a 	bl	8003d28 <HAL_UARTEx_SetTxFifoThreshold>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 fa6d 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000882:	f003 fa8f 	bl	8003da4 <HAL_UARTEx_SetRxFifoThreshold>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 fa64 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_USART3_UART_Init+0x90>)
 8000892:	f003 fa10 	bl	8003cb6 <HAL_UARTEx_DisableFifoMode>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 fa5c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200402bc 	.word	0x200402bc
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	4bb2      	ldr	r3, [pc, #712]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4ab1      	ldr	r2, [pc, #708]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4baf      	ldr	r3, [pc, #700]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4bac      	ldr	r3, [pc, #688]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4aab      	ldr	r2, [pc, #684]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4ba9      	ldr	r3, [pc, #676]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	4ba6      	ldr	r3, [pc, #664]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4aa5      	ldr	r2, [pc, #660]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4ba3      	ldr	r3, [pc, #652]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4ba0      	ldr	r3, [pc, #640]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a9f      	ldr	r2, [pc, #636]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b9d      	ldr	r3, [pc, #628]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b9a      	ldr	r3, [pc, #616]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a99      	ldr	r2, [pc, #612]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b97      	ldr	r3, [pc, #604]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b94      	ldr	r3, [pc, #592]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a93      	ldr	r2, [pc, #588]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b91      	ldr	r3, [pc, #580]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b8e      	ldr	r3, [pc, #568]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a8d      	ldr	r2, [pc, #564]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b8b      	ldr	r3, [pc, #556]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b88      	ldr	r3, [pc, #544]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a87      	ldr	r2, [pc, #540]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b85      	ldr	r3, [pc, #532]	@ (8000b8c <MX_GPIO_Init+0x2e0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000982:	f000 fed5 	bl	8001730 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000996:	230d      	movs	r3, #13
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	487b      	ldr	r0, [pc, #492]	@ (8000b90 <MX_GPIO_Init+0x2e4>)
 80009a2:	f000 fc6f 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	2312      	movs	r3, #18
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009b6:	2304      	movs	r3, #4
 80009b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	4874      	ldr	r0, [pc, #464]	@ (8000b94 <MX_GPIO_Init+0x2e8>)
 80009c2:	f000 fc5f 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009d6:	230d      	movs	r3, #13
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	486c      	ldr	r0, [pc, #432]	@ (8000b94 <MX_GPIO_Init+0x2e8>)
 80009e2:	f000 fc4f 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009e6:	233f      	movs	r3, #63	@ 0x3f
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009ea:	230b      	movs	r3, #11
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4867      	ldr	r0, [pc, #412]	@ (8000b98 <MX_GPIO_Init+0x2ec>)
 80009fa:	f000 fc43 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fe:	2301      	movs	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f000 fc32 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000a20:	230a      	movs	r3, #10
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a24:	230b      	movs	r3, #11
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f000 fc25 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23f0      	movs	r3, #240	@ 0xf0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f000 fc14 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4849      	ldr	r0, [pc, #292]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000a78:	f000 fc04 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a80:	230b      	movs	r3, #11
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4843      	ldr	r0, [pc, #268]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000a90:	f000 fbf8 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000a94:	2344      	movs	r3, #68	@ 0x44
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483d      	ldr	r0, [pc, #244]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000aa8:	f000 fbec 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000aac:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4831      	ldr	r0, [pc, #196]	@ (8000b90 <MX_GPIO_Init+0x2e4>)
 8000aca:	f000 fbdb 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ace:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <MX_GPIO_Init+0x2e4>)
 8000aec:	f000 fbca 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b02:	2301      	movs	r3, #1
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000b0e:	f000 fbb9 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b12:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000b24:	230d      	movs	r3, #13
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	481b      	ldr	r0, [pc, #108]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000b30:	f000 fba8 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b46:	230e      	movs	r3, #14
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <MX_GPIO_Init+0x2f0>)
 8000b52:	f000 fb97 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b56:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <MX_GPIO_Init+0x2f4>)
 8000b74:	f000 fb86 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b78:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e00c      	b.n	8000ba4 <MX_GPIO_Init+0x2f8>
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48001000 	.word	0x48001000
 8000b94:	48001400 	.word	0x48001400
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4864      	ldr	r0, [pc, #400]	@ (8000d44 <MX_GPIO_Init+0x498>)
 8000bb2:	f000 fb67 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bc6:	230d      	movs	r3, #13
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	485d      	ldr	r0, [pc, #372]	@ (8000d48 <MX_GPIO_Init+0x49c>)
 8000bd2:	f000 fb57 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000be6:	2302      	movs	r3, #2
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4855      	ldr	r0, [pc, #340]	@ (8000d48 <MX_GPIO_Init+0x49c>)
 8000bf2:	f000 fb47 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8000bf6:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	484d      	ldr	r0, [pc, #308]	@ (8000d48 <MX_GPIO_Init+0x49c>)
 8000c14:	f000 fb36 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000c18:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c38:	f000 fb24 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f000 fb16 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4834      	ldr	r0, [pc, #208]	@ (8000d48 <MX_GPIO_Init+0x49c>)
 8000c76:	f000 fb05 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	482d      	ldr	r0, [pc, #180]	@ (8000d4c <MX_GPIO_Init+0x4a0>)
 8000c96:	f000 faf5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000caa:	230c      	movs	r3, #12
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4825      	ldr	r0, [pc, #148]	@ (8000d4c <MX_GPIO_Init+0x4a0>)
 8000cb6:	f000 fae5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cba:	2378      	movs	r3, #120	@ 0x78
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481d      	ldr	r0, [pc, #116]	@ (8000d4c <MX_GPIO_Init+0x4a0>)
 8000cd6:	f000 fad5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000cda:	2338      	movs	r3, #56	@ 0x38
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cea:	2306      	movs	r3, #6
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4816      	ldr	r0, [pc, #88]	@ (8000d50 <MX_GPIO_Init+0x4a4>)
 8000cf6:	f000 fac5 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <MX_GPIO_Init+0x4a4>)
 8000d18:	f000 fab4 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <MX_GPIO_Init+0x4a8>)
 8000d38:	f000 faa4 	bl	8001284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3738      	adds	r7, #56	@ 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	48001800 	.word	0x48001800
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48001000 	.word	0x48001000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0b0      	sub	sp, #192	@ 0xc0
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	2294      	movs	r2, #148	@ 0x94
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 f875 	bl	8003ebc <memset>
  if(huart->Instance==USART1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a43      	ldr	r2, [pc, #268]	@ (8000ee4 <HAL_UART_MspInit+0x138>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13e      	bne.n	8000e5a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000de0:	2300      	movs	r3, #0
 8000de2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fb89 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df4:	f7ff ffb0 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e04:	4b38      	ldr	r3, [pc, #224]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	4a34      	ldr	r2, [pc, #208]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000e28:	f000 fc82 	bl	8001730 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e2c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e46:	2307      	movs	r3, #7
 8000e48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e50:	4619      	mov	r1, r3
 8000e52:	4826      	ldr	r0, [pc, #152]	@ (8000eec <HAL_UART_MspInit+0x140>)
 8000e54:	f000 fa16 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e58:	e040      	b.n	8000edc <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ef0 <HAL_UART_MspInit+0x144>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d13b      	bne.n	8000edc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e64:	2304      	movs	r3, #4
 8000e66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fb45 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e7c:	f7ff ff6c 	bl	8000d58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e80:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <HAL_UART_MspInit+0x13c>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <HAL_UART_MspInit+0x148>)
 8000ed8:	f000 f9d4 	bl	8001284 <HAL_GPIO_Init>
}
 8000edc:	bf00      	nop
 8000ede:	37c0      	adds	r7, #192	@ 0xc0
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48001800 	.word	0x48001800
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	48000c00 	.word	0x48000c00

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 f893 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	@ (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff ffea 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f002 ff8f 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fae:	f7ff fb75 	bl	800069c <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fb8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000fbc:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 8000fc0:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000fc4:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 8000fc8:	20040354 	.word	0x20040354

08000fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_IRQHandler>

08000fce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f91f 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f80e 	bl	8001000 <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff0:	f7ff feb8 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_InitTick+0x6c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d023      	beq.n	800105c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <HAL_InitTick+0x70>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f91d 	bl	800126a <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d809      	bhi.n	8001050 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f8f5 	bl	8001232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_InitTick+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e007      	b.n	8001060 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e004      	b.n	8001060 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e001      	b.n	8001060 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20040008 	.word	0x20040008
 8001070:	20040000 	.word	0x20040000
 8001074:	20040004 	.word	0x20040004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20040008 	.word	0x20040008
 800109c:	20040350 	.word	0x20040350

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20040350 	.word	0x20040350

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff47 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff5c 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffb0 	bl	80011d8 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e166      	b.n	8001562 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8158 	beq.w	800155c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_GPIO_Init+0x40>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 0201 	and.w	r2, r3, #1
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b03      	cmp	r3, #3
 8001330:	d017      	beq.n	8001362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0203 	and.w	r2, r3, #3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b2 	beq.w	800155c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f8:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <HAL_GPIO_Init+0x2fc>)
 80013fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fc:	4a60      	ldr	r2, [pc, #384]	@ (8001580 <HAL_GPIO_Init+0x2fc>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6613      	str	r3, [r2, #96]	@ 0x60
 8001404:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <HAL_GPIO_Init+0x2fc>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001410:	4a5c      	ldr	r2, [pc, #368]	@ (8001584 <HAL_GPIO_Init+0x300>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800143a:	d02b      	beq.n	8001494 <HAL_GPIO_Init+0x210>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a52      	ldr	r2, [pc, #328]	@ (8001588 <HAL_GPIO_Init+0x304>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d025      	beq.n	8001490 <HAL_GPIO_Init+0x20c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a51      	ldr	r2, [pc, #324]	@ (800158c <HAL_GPIO_Init+0x308>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d01f      	beq.n	800148c <HAL_GPIO_Init+0x208>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a50      	ldr	r2, [pc, #320]	@ (8001590 <HAL_GPIO_Init+0x30c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d019      	beq.n	8001488 <HAL_GPIO_Init+0x204>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4f      	ldr	r2, [pc, #316]	@ (8001594 <HAL_GPIO_Init+0x310>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x200>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4e      	ldr	r2, [pc, #312]	@ (8001598 <HAL_GPIO_Init+0x314>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1fc>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4d      	ldr	r2, [pc, #308]	@ (800159c <HAL_GPIO_Init+0x318>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1f8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4c      	ldr	r2, [pc, #304]	@ (80015a0 <HAL_GPIO_Init+0x31c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1f4>
 8001474:	2307      	movs	r3, #7
 8001476:	e00e      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001478:	2308      	movs	r3, #8
 800147a:	e00c      	b.n	8001496 <HAL_GPIO_Init+0x212>
 800147c:	2306      	movs	r3, #6
 800147e:	e00a      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001480:	2305      	movs	r3, #5
 8001482:	e008      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001484:	2304      	movs	r3, #4
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001488:	2303      	movs	r3, #3
 800148a:	e004      	b.n	8001496 <HAL_GPIO_Init+0x212>
 800148c:	2302      	movs	r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_GPIO_Init+0x212>
 8001494:	2300      	movs	r3, #0
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4093      	lsls	r3, r2
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a6:	4937      	ldr	r1, [pc, #220]	@ (8001584 <HAL_GPIO_Init+0x300>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b4:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d8:	4a32      	ldr	r2, [pc, #200]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014de:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001502:	4a28      	ldr	r2, [pc, #160]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001508:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800152c:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001556:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	f47f ae91 	bne.w	8001294 <HAL_GPIO_Init+0x10>
  }
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	48000400 	.word	0x48000400
 800158c:	48000800 	.word	0x48000800
 8001590:	48000c00 	.word	0x48000c00
 8001594:	48001000 	.word	0x48001000
 8001598:	48001400 	.word	0x48001400
 800159c:	48001800 	.word	0x48001800
 80015a0:	48001c00 	.word	0x48001c00
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b8:	d102      	bne.n	80015c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80015ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015be:	e00b      	b.n	80015d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015ce:	d102      	bne.n	80015d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d4:	e000      	b.n	80015d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80015d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d141      	bne.n	800167a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001602:	d131      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001604:	4b47      	ldr	r3, [pc, #284]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800160a:	4a46      	ldr	r2, [pc, #280]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001610:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800161c:	4a41      	ldr	r2, [pc, #260]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001624:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2232      	movs	r2, #50	@ 0x32
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	4a3f      	ldr	r2, [pc, #252]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	e002      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3b01      	subs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164e:	d102      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f2      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001656:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001662:	d158      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e057      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800166e:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001678:	e04d      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001680:	d141      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001682:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800168e:	d131      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001696:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2232      	movs	r2, #50	@ 0x32
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	0c9b      	lsrs	r3, r3, #18
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	e002      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016da:	d102      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f2      	bne.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ee:	d112      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e011      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001704:	e007      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001714:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40007000 	.word	0x40007000
 8001728:	20040000 	.word	0x20040000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a04      	ldr	r2, [pc, #16]	@ (800174c <HAL_PWREx_EnableVddIO2+0x1c>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173e:	6053      	str	r3, [r2, #4]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f000 bc08 	b.w	8001f74 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4b96      	ldr	r3, [pc, #600]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176e:	4b94      	ldr	r3, [pc, #592]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80e4 	beq.w	800194e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0x4c>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f040 808b 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 8087 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	4b88      	ldr	r3, [pc, #544]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x64>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e3df      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4b81      	ldr	r3, [pc, #516]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_OscConfig+0x7e>
 80017c4:	4b7e      	ldr	r3, [pc, #504]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017cc:	e005      	b.n	80017da <HAL_RCC_OscConfig+0x8a>
 80017ce:	4b7c      	ldr	r3, [pc, #496]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017da:	4293      	cmp	r3, r2
 80017dc:	d223      	bcs.n	8001826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fdcc 	bl	8002380 <RCC_SetFlashLatencyFromMSIRange>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3c0      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b73      	ldr	r3, [pc, #460]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a72      	ldr	r2, [pc, #456]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b70      	ldr	r3, [pc, #448]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	496d      	ldr	r1, [pc, #436]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b6b      	ldr	r3, [pc, #428]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4968      	ldr	r1, [pc, #416]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e025      	b.n	8001872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a65      	ldr	r2, [pc, #404]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b63      	ldr	r3, [pc, #396]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4960      	ldr	r1, [pc, #384]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b5e      	ldr	r3, [pc, #376]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	495b      	ldr	r1, [pc, #364]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fd8c 	bl	8002380 <RCC_SetFlashLatencyFromMSIRange>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e380      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001872:	f000 fcc1 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b51      	ldr	r3, [pc, #324]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4950      	ldr	r1, [pc, #320]	@ (80019c4 <HAL_RCC_OscConfig+0x274>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a4e      	ldr	r2, [pc, #312]	@ (80019c8 <HAL_RCC_OscConfig+0x278>)
 8001890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001892:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fbb2 	bl	8001000 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d052      	beq.n	800194c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	e364      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d032      	beq.n	8001918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a42      	ldr	r2, [pc, #264]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff fbef 	bl	80010a0 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff fbeb 	bl	80010a0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e34d      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a35      	ldr	r2, [pc, #212]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4930      	ldr	r1, [pc, #192]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	492b      	ldr	r1, [pc, #172]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e01a      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001918:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001924:	f7ff fbbc 	bl	80010a0 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192c:	f7ff fbb8 	bl	80010a0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e31a      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1dc>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d073      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x21c>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d10b      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d063      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d15f      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e2f7      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x24c>
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e025      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019a4:	d114      	bne.n	80019d0 <HAL_RCC_OscConfig+0x280>
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a02      	ldr	r2, [pc, #8]	@ (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08003f2c 	.word	0x08003f2c
 80019c8:	20040000 	.word	0x20040000
 80019cc:	20040004 	.word	0x20040004
 80019d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb56 	bl	80010a0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb52 	bl	80010a0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e2b4      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b92      	ldr	r3, [pc, #584]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb42 	bl	80010a0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb3e 	bl	80010a0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e2a0      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	4b88      	ldr	r3, [pc, #544]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d0>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d060      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x310>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d116      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	4b7c      	ldr	r3, [pc, #496]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x328>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e27d      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4973      	ldr	r1, [pc, #460]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e040      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a96:	4b6f      	ldr	r3, [pc, #444]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fafd 	bl	80010a0 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff faf9 	bl	80010a0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e25b      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b65      	ldr	r3, [pc, #404]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b62      	ldr	r3, [pc, #392]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	495f      	ldr	r1, [pc, #380]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b5d      	ldr	r3, [pc, #372]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fad9 	bl	80010a0 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fad5 	bl	80010a0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e237      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b24:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fab4 	bl	80010a0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fab0 	bl	80010a0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e212      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ef      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	e01b      	b.n	8001b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b64:	4a3b      	ldr	r2, [pc, #236]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa97 	bl	80010a0 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff fa93 	bl	80010a0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1f5      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fa5a 	bl	80010a0 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7ff fa56 	bl	80010a0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1b8      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4d8>
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c26:	e029      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d115      	bne.n	8001c5c <HAL_RCC_OscConfig+0x50c>
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c36:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c46:	4a03      	ldr	r2, [pc, #12]	@ (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c62:	4a9c      	ldr	r2, [pc, #624]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c6c:	4b99      	ldr	r3, [pc, #612]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c72:	4a98      	ldr	r2, [pc, #608]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fa0c 	bl	80010a0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fa08 	bl	80010a0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e168      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCC_OscConfig+0x53c>
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9f5 	bl	80010a0 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f9f1 	bl	80010a0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e151      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4b80      	ldr	r3, [pc, #512]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ed      	bne.n	8001cba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d04:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d0a:	4a72      	ldr	r2, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f9c4 	bl	80010a0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f9c0 	bl	80010a0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e122      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2e:	4b69      	ldr	r3, [pc, #420]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x5cc>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b65      	ldr	r3, [pc, #404]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d44:	4a63      	ldr	r2, [pc, #396]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f9a7 	bl	80010a0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d56:	f7ff f9a3 	bl	80010a0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e105      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d68:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80f9 	beq.w	8001f72 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f040 80cf 	bne.w	8001f28 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d8a:	4b52      	ldr	r3, [pc, #328]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d12c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	3b01      	subs	r3, #1
 8001daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d123      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d11b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d113      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d071      	beq.n	8001edc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d068      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dfe:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ac      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e26:	f7ff f93b 	bl	80010a0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f937 	bl	80010a0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e099      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x788>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e66:	0212      	lsls	r2, r2, #8
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e6e:	0852      	lsrs	r2, r2, #1
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0552      	lsls	r2, r2, #21
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e7a:	0852      	lsrs	r2, r2, #1
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	0652      	lsls	r2, r2, #25
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e86:	06d2      	lsls	r2, r2, #27
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	4912      	ldr	r1, [pc, #72]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea8:	f7ff f8fa 	bl	80010a0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f8f6 	bl	80010a0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e058      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ece:	e050      	b.n	8001f72 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e04f      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001edc:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d144      	bne.n	8001f72 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f00:	f7ff f8ce 	bl	80010a0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f8ca 	bl	80010a0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e02c      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x7b8>
 8001f26:	e024      	b.n	8001f72 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d01f      	beq.n	8001f6e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f8b1 	bl	80010a0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f8ad 	bl	80010a0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	4905      	ldr	r1, [pc, #20]	@ (8001f7c <HAL_RCC_OscConfig+0x82c>)
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_RCC_OscConfig+0x830>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
 8001f6c:	e001      	b.n	8001f72 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	feeefffc 	.word	0xfeeefffc

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e11d      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b90      	ldr	r3, [pc, #576]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 020f 	bic.w	r2, r3, #15
 8001fb2:	498b      	ldr	r1, [pc, #556]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b89      	ldr	r3, [pc, #548]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e105      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d908      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	497b      	ldr	r1, [pc, #492]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d079      	beq.n	80020fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d11e      	bne.n	800204c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	4b75      	ldr	r3, [pc, #468]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e0dc      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800201e:	f000 fa09 	bl	8002434 <RCC_GetSysClockFreqFromPLLSource>
 8002022:	4603      	mov	r3, r0
 8002024:	4a70      	ldr	r2, [pc, #448]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d946      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800202a:	4b6e      	ldr	r3, [pc, #440]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d140      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002036:	4b6b      	ldr	r3, [pc, #428]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800203e:	4a69      	ldr	r2, [pc, #420]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002044:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e035      	b.n	80020b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002054:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d115      	bne.n	800208c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b9      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206c:	4b5d      	ldr	r3, [pc, #372]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0ad      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	4b59      	ldr	r3, [pc, #356]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0a5      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800208c:	f000 f8b4 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002090:	4603      	mov	r3, r0
 8002092:	4a55      	ldr	r2, [pc, #340]	@ (80021e8 <HAL_RCC_ClockConfig+0x264>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d90f      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002098:	4b52      	ldr	r3, [pc, #328]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020a4:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ac:	4a4d      	ldr	r2, [pc, #308]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 0203 	bic.w	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4947      	ldr	r1, [pc, #284]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ca:	f7fe ffe9 	bl	80010a0 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe ffe5 	bl	80010a0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e077      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	4b3e      	ldr	r3, [pc, #248]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 020c 	and.w	r2, r3, #12
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1eb      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b80      	cmp	r3, #128	@ 0x80
 80020fe:	d105      	bne.n	800210c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002100:	4b38      	ldr	r3, [pc, #224]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a37      	ldr	r2, [pc, #220]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800210a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002124:	429a      	cmp	r2, r3
 8002126:	d208      	bcs.n	800213a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b2e      	ldr	r3, [pc, #184]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	492b      	ldr	r1, [pc, #172]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213a:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d210      	bcs.n	800216a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002148:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 020f 	bic.w	r2, r3, #15
 8002150:	4923      	ldr	r1, [pc, #140]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002158:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e036      	b.n	80021d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4918      	ldr	r1, [pc, #96]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4910      	ldr	r1, [pc, #64]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a8:	f000 f826 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	490c      	ldr	r1, [pc, #48]	@ (80021ec <HAL_RCC_ClockConfig+0x268>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
 80021c4:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x26c>)
 80021c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe ff17 	bl	8001000 <HAL_InitTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	04c4b400 	.word	0x04c4b400
 80021ec:	08003f2c 	.word	0x08003f2c
 80021f0:	20040000 	.word	0x20040000
 80021f4:	20040004 	.word	0x20040004

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b3e      	ldr	r3, [pc, #248]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d121      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11e      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e005      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002248:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d102      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	e004      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d101      	bne.n	8002280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800227c:	4b23      	ldr	r3, [pc, #140]	@ (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 800227e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d134      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0xa6>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d003      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0xac>
 800229c:	e005      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x110>)
 80022a0:	617b      	str	r3, [r7, #20]
      break;
 80022a2:	e005      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCC_GetSysClockFreq+0x114>)
 80022a6:	617b      	str	r3, [r7, #20]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	617b      	str	r3, [r7, #20]
      break;
 80022ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fb03 f202 	mul.w	r2, r3, r2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	0e5b      	lsrs	r3, r3, #25
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	3301      	adds	r3, #1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022f0:	69bb      	ldr	r3, [r7, #24]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	@ 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	08003f44 	.word	0x08003f44
 8002308:	00f42400 	.word	0x00f42400
 800230c:	007a1200 	.word	0x007a1200

08002310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20040000 	.word	0x20040000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	@ (8002350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	08003f3c 	.word	0x08003f3c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002358:	f7ff ffda 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	@ (800237c <HAL_RCC_GetPCLK2Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08003f3c 	.word	0x08003f3c

08002380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800238c:	4b27      	ldr	r3, [pc, #156]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002398:	f7ff f906 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 800239c:	6178      	str	r0, [r7, #20]
 800239e:	e014      	b.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b22      	ldr	r3, [pc, #136]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	4a21      	ldr	r2, [pc, #132]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b8:	f7ff f8f6 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80023bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	4a1a      	ldr	r2, [pc, #104]	@ (800242c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d0:	d10b      	bne.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	@ 0x80
 80023d6:	d913      	bls.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2ba0      	cmp	r3, #160	@ 0xa0
 80023dc:	d902      	bls.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023de:	2302      	movs	r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	e00d      	b.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e00a      	b.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ee:	d902      	bls.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023f0:	2302      	movs	r3, #2
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	e004      	b.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b70      	cmp	r3, #112	@ 0x70
 80023fa:	d101      	bne.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 020f 	bic.w	r2, r3, #15
 8002408:	4909      	ldr	r1, [pc, #36]	@ (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	40022000 	.word	0x40022000

08002434 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800243a:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d00b      	beq.n	8002462 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d825      	bhi.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d008      	beq.n	8002468 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d11f      	bne.n	800249c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800245e:	613b      	str	r3, [r7, #16]
    break;
 8002460:	e01f      	b.n	80024a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002462:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002464:	613b      	str	r3, [r7, #16]
    break;
 8002466:	e01c      	b.n	80024a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002468:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d107      	bne.n	8002484 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002474:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e005      	b.n	8002490 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002490:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
    break;
 800249a:	e002      	b.n	80024a2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
    break;
 80024a0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a2:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	3301      	adds	r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	fb03 f202 	mul.w	r2, r3, r2
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0e5b      	lsrs	r3, r3, #25
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	3301      	adds	r3, #1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024e2:	683b      	ldr	r3, [r7, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40021000 	.word	0x40021000
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08003f44 	.word	0x08003f44

08002500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002508:	2300      	movs	r3, #0
 800250a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800250c:	2300      	movs	r3, #0
 800250e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d040      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002520:	2b80      	cmp	r3, #128	@ 0x80
 8002522:	d02a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002524:	2b80      	cmp	r3, #128	@ 0x80
 8002526:	d825      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002528:	2b60      	cmp	r3, #96	@ 0x60
 800252a:	d026      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800252c:	2b60      	cmp	r3, #96	@ 0x60
 800252e:	d821      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d006      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002534:	2b40      	cmp	r3, #64	@ 0x40
 8002536:	d81d      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800253c:	2b20      	cmp	r3, #32
 800253e:	d010      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002540:	e018      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002542:	4b89      	ldr	r3, [pc, #548]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a88      	ldr	r2, [pc, #544]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254e:	e015      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fb02 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e00c      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3320      	adds	r3, #32
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fbed 	bl	8002d48 <RCCEx_PLLSAI2_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002572:	e003      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	74fb      	strb	r3, [r7, #19]
      break;
 8002578:	e000      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800257a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002582:	4b79      	ldr	r3, [pc, #484]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002584:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002588:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002590:	4975      	ldr	r1, [pc, #468]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002598:	e001      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d047      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b2:	d030      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b8:	d82a      	bhi.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025be:	d02a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025c4:	d824      	bhi.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ca:	d008      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d0:	d81e      	bhi.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025da:	d010      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025dc:	e018      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025de:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a61      	ldr	r2, [pc, #388]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ea:	e015      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fab4 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fc:	e00c      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3320      	adds	r3, #32
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fb9f 	bl	8002d48 <RCCEx_PLLSAI2_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800260e:	e003      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	74fb      	strb	r3, [r7, #19]
      break;
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800261e:	4b52      	ldr	r3, [pc, #328]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262c:	494e      	ldr	r1, [pc, #312]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002634:	e001      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 809f 	beq.w	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800264c:	4b46      	ldr	r3, [pc, #280]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	4a40      	ldr	r2, [pc, #256]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267e:	4b3b      	ldr	r3, [pc, #236]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3a      	ldr	r2, [pc, #232]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800268a:	f7fe fd09 	bl	80010a0 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002690:	e009      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002692:	f7fe fd05 	bl	80010a0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d902      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	74fb      	strb	r3, [r7, #19]
        break;
 80026a4:	e005      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a6:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ef      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d15b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026c2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01f      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d019      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026d6:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026e2:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002702:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d016      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fcc4 	bl	80010a0 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	e00b      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fcc0 	bl	80010a0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d902      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	74fb      	strb	r3, [r7, #19]
            break;
 8002732:	e006      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ec      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002748:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002760:	e008      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	74bb      	strb	r3, [r7, #18]
 8002766:	e005      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	7c7b      	ldrb	r3, [r7, #17]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4ba0      	ldr	r3, [pc, #640]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	4a9f      	ldr	r2, [pc, #636]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002792:	4b9a      	ldr	r3, [pc, #616]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f023 0203 	bic.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	4996      	ldr	r1, [pc, #600]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b4:	4b91      	ldr	r3, [pc, #580]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 020c 	bic.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	498e      	ldr	r1, [pc, #568]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d6:	4b89      	ldr	r3, [pc, #548]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	4985      	ldr	r1, [pc, #532]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f8:	4b80      	ldr	r3, [pc, #512]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002806:	497d      	ldr	r1, [pc, #500]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800281a:	4b78      	ldr	r3, [pc, #480]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	4974      	ldr	r1, [pc, #464]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800283c:	4b6f      	ldr	r3, [pc, #444]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284a:	496c      	ldr	r1, [pc, #432]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285e:	4b67      	ldr	r3, [pc, #412]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002864:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800286c:	4963      	ldr	r1, [pc, #396]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002880:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800288e:	495b      	ldr	r1, [pc, #364]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028a2:	4b56      	ldr	r3, [pc, #344]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	4952      	ldr	r1, [pc, #328]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028c4:	4b4d      	ldr	r3, [pc, #308]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	494a      	ldr	r1, [pc, #296]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e6:	4b45      	ldr	r3, [pc, #276]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	4941      	ldr	r1, [pc, #260]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002908:	4b3c      	ldr	r3, [pc, #240]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002916:	4939      	ldr	r1, [pc, #228]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d028      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292a:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002930:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002938:	4930      	ldr	r1, [pc, #192]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002948:	d106      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294a:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002950:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002954:	60d3      	str	r3, [r2, #12]
 8002956:	e011      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002960:	d10c      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f8f9 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d04d      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800298c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002990:	d108      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002998:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800299e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029a2:	e012      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029aa:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029c2:	490e      	ldr	r1, [pc, #56]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
 80029e0:	e020      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029ea:	d109      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029ec:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a02      	ldr	r2, [pc, #8]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e014      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f8a5 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d028      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a30:	4b4a      	ldr	r3, [pc, #296]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a3e:	4947      	ldr	r1, [pc, #284]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a41      	ldr	r2, [pc, #260]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
 8002a5c:	e011      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f876 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a8e:	4b33      	ldr	r3, [pc, #204]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a9e:	492f      	ldr	r1, [pc, #188]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f851 	bl	8002b60 <RCCEx_PLLSAI1_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad8:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ade:	f023 0204 	bic.w	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	491c      	ldr	r1, [pc, #112]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002afc:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b02:	f023 0218 	bic.w	r2, r3, #24
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0c:	4913      	ldr	r1, [pc, #76]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b30:	490a      	ldr	r1, [pc, #40]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000

08002b60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b6e:	4b72      	ldr	r3, [pc, #456]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d103      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d142      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e03f      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d018      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0x72>
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d825      	bhi.n	8002bf0 <RCCEx_PLLSAI1_Config+0x90>
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d002      	beq.n	8002bae <RCCEx_PLLSAI1_Config+0x4e>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d009      	beq.n	8002bc0 <RCCEx_PLLSAI1_Config+0x60>
 8002bac:	e020      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bae:	4b62      	ldr	r3, [pc, #392]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e01a      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e013      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd2:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bee:	e006      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e004      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002c06:	4b4c      	ldr	r3, [pc, #304]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4949      	ldr	r1, [pc, #292]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 8086 	bne.w	8002d2c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c20:	4b45      	ldr	r3, [pc, #276]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a44      	ldr	r2, [pc, #272]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fa38 	bl	80010a0 <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c32:	e009      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c34:	f7fe fa34 	bl	80010a0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d902      	bls.n	8002c48 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	73fb      	strb	r3, [r7, #15]
        break;
 8002c46:	e005      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c48:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ef      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d168      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d113      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c60:	4b35      	ldr	r3, [pc, #212]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	4b35      	ldr	r3, [pc, #212]	@ (8002d3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	06d2      	lsls	r2, r2, #27
 8002c74:	4311      	orrs	r1, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6852      	ldr	r2, [r2, #4]
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	492d      	ldr	r1, [pc, #180]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	610b      	str	r3, [r1, #16]
 8002c86:	e02d      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d115      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	4b2b      	ldr	r3, [pc, #172]	@ (8002d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6892      	ldr	r2, [r2, #8]
 8002c9a:	0211      	lsls	r1, r2, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6912      	ldr	r2, [r2, #16]
 8002ca0:	0852      	lsrs	r2, r2, #1
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	0552      	lsls	r2, r2, #21
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6852      	ldr	r2, [r2, #4]
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4921      	ldr	r1, [pc, #132]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
 8002cb8:	e014      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6952      	ldr	r2, [r2, #20]
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6852      	ldr	r2, [r2, #4]
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f9d6 	bl	80010a0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf6:	e009      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf8:	f7fe f9d2 	bl	80010a0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	73fb      	strb	r3, [r7, #15]
          break;
 8002d0a:	e005      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	07ff800f 	.word	0x07ff800f
 8002d40:	ff9f800f 	.word	0xff9f800f
 8002d44:	f9ff800f 	.word	0xf9ff800f

08002d48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b72      	ldr	r3, [pc, #456]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d62:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d103      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d142      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	e03f      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d018      	beq.n	8002dba <RCCEx_PLLSAI2_Config+0x72>
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d825      	bhi.n	8002dd8 <RCCEx_PLLSAI2_Config+0x90>
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d002      	beq.n	8002d96 <RCCEx_PLLSAI2_Config+0x4e>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d009      	beq.n	8002da8 <RCCEx_PLLSAI2_Config+0x60>
 8002d94:	e020      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d96:	4b62      	ldr	r3, [pc, #392]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11d      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da6:	e01a      	b.n	8002dde <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db8:	e013      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dba:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10f      	bne.n	8002de6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dc6:	4b56      	ldr	r3, [pc, #344]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dd6:	e006      	b.n	8002de6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e004      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002de6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002dee:	4b4c      	ldr	r3, [pc, #304]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4949      	ldr	r1, [pc, #292]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8086 	bne.w	8002f14 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e08:	4b45      	ldr	r3, [pc, #276]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a44      	ldr	r2, [pc, #272]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e14:	f7fe f944 	bl	80010a0 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e1a:	e009      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e1c:	f7fe f940 	bl	80010a0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2e:	e005      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e30:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ef      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d168      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d113      	bne.n	8002e70 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e48:	4b35      	ldr	r3, [pc, #212]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	4b35      	ldr	r3, [pc, #212]	@ (8002f24 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6852      	ldr	r2, [r2, #4]
 8002e62:	3a01      	subs	r2, #1
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	430a      	orrs	r2, r1
 8002e68:	492d      	ldr	r1, [pc, #180]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	614b      	str	r3, [r1, #20]
 8002e6e:	e02d      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d115      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e76:	4b2a      	ldr	r3, [pc, #168]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f28 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	0211      	lsls	r1, r2, #8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6912      	ldr	r2, [r2, #16]
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0552      	lsls	r2, r2, #21
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6852      	ldr	r2, [r2, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	4921      	ldr	r1, [pc, #132]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	614b      	str	r3, [r1, #20]
 8002ea0:	e014      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <RCCEx_PLLSAI2_Config+0x1e4>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0211      	lsls	r1, r2, #8
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6952      	ldr	r2, [r2, #20]
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0652      	lsls	r2, r2, #25
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6852      	ldr	r2, [r2, #4]
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f8e2 	bl	80010a0 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee0:	f7fe f8de 	bl	80010a0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef2:	e005      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ef      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	07ff800f 	.word	0x07ff800f
 8002f28:	ff9f800f 	.word	0xff9f800f
 8002f2c:	f9ff800f 	.word	0xf9ff800f

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e042      	b.n	8002fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fd ff29 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2224      	movs	r2, #36	@ 0x24
 8002f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fc7c 	bl	8003878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f97d 	bl	8003280 <UART_SetConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e01b      	b.n	8002fc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fcfb 	bl	80039bc <UART_CheckIdleState>
 8002fc6:	4603      	mov	r3, r0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d17b      	bne.n	80030e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_UART_Transmit+0x26>
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e074      	b.n	80030e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fe f849 	bl	80010a0 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003028:	d108      	bne.n	800303c <HAL_UART_Transmit+0x6c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e003      	b.n	8003044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003044:	e030      	b.n	80030a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fd5d 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e03d      	b.n	80030e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307a:	b292      	uxth	r2, r2
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1c8      	bne.n	8003046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2140      	movs	r1, #64	@ 0x40
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fd26 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e006      	b.n	80030e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003102:	2b20      	cmp	r3, #32
 8003104:	f040 80b6 	bne.w	8003274 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Receive+0x28>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0ae      	b.n	8003276 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2222      	movs	r2, #34	@ 0x22
 8003124:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312e:	f7fd ffb7 	bl	80010a0 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314c:	d10e      	bne.n	800316c <HAL_UART_Receive+0x80>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <HAL_UART_Receive+0x76>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800315c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003160:	e02d      	b.n	80031be <HAL_UART_Receive+0xd2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	22ff      	movs	r2, #255	@ 0xff
 8003166:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800316a:	e028      	b.n	80031be <HAL_UART_Receive+0xd2>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_UART_Receive+0xa4>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_UART_Receive+0x9a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	@ 0xff
 8003180:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003184:	e01b      	b.n	80031be <HAL_UART_Receive+0xd2>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	227f      	movs	r2, #127	@ 0x7f
 800318a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800318e:	e016      	b.n	80031be <HAL_UART_Receive+0xd2>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003198:	d10d      	bne.n	80031b6 <HAL_UART_Receive+0xca>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_UART_Receive+0xc0>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	227f      	movs	r2, #127	@ 0x7f
 80031a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80031aa:	e008      	b.n	80031be <HAL_UART_Receive+0xd2>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	223f      	movs	r2, #63	@ 0x3f
 80031b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80031b4:	e003      	b.n	80031be <HAL_UART_Receive+0xd2>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80031c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ce:	d108      	bne.n	80031e2 <HAL_UART_Receive+0xf6>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	e003      	b.n	80031ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031ea:	e037      	b.n	800325c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2120      	movs	r1, #32
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fc8a 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e033      	b.n	8003276 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10c      	bne.n	800322e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800321a:	b29a      	uxth	r2, r3
 800321c:	8a7b      	ldrh	r3, [r7, #18]
 800321e:	4013      	ands	r3, r2
 8003220:	b29a      	uxth	r2, r3
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	3302      	adds	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e00d      	b.n	800324a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003234:	b29b      	uxth	r3, r3
 8003236:	b2da      	uxtb	r2, r3
 8003238:	8a7b      	ldrh	r3, [r7, #18]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4013      	ands	r3, r2
 800323e:	b2da      	uxtb	r2, r3
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	3301      	adds	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1c1      	bne.n	80031ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b08c      	sub	sp, #48	@ 0x30
 8003286:	af00      	add	r7, sp, #0
 8003288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4baa      	ldr	r3, [pc, #680]	@ (8003558 <UART_SetConfig+0x2d8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a9f      	ldr	r2, [pc, #636]	@ (800355c <UART_SetConfig+0x2dc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80032f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003300:	430b      	orrs	r3, r1
 8003302:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	f023 010f 	bic.w	r1, r3, #15
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a90      	ldr	r2, [pc, #576]	@ (8003560 <UART_SetConfig+0x2e0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d125      	bne.n	8003370 <UART_SetConfig+0xf0>
 8003324:	4b8f      	ldr	r3, [pc, #572]	@ (8003564 <UART_SetConfig+0x2e4>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b03      	cmp	r3, #3
 8003330:	d81a      	bhi.n	8003368 <UART_SetConfig+0xe8>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <UART_SetConfig+0xb8>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	08003349 	.word	0x08003349
 800333c:	08003359 	.word	0x08003359
 8003340:	08003351 	.word	0x08003351
 8003344:	08003361 	.word	0x08003361
 8003348:	2301      	movs	r3, #1
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e116      	b.n	800357e <UART_SetConfig+0x2fe>
 8003350:	2302      	movs	r3, #2
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003356:	e112      	b.n	800357e <UART_SetConfig+0x2fe>
 8003358:	2304      	movs	r3, #4
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800335e:	e10e      	b.n	800357e <UART_SetConfig+0x2fe>
 8003360:	2308      	movs	r3, #8
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003366:	e10a      	b.n	800357e <UART_SetConfig+0x2fe>
 8003368:	2310      	movs	r3, #16
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800336e:	e106      	b.n	800357e <UART_SetConfig+0x2fe>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7c      	ldr	r2, [pc, #496]	@ (8003568 <UART_SetConfig+0x2e8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d138      	bne.n	80033ec <UART_SetConfig+0x16c>
 800337a:	4b7a      	ldr	r3, [pc, #488]	@ (8003564 <UART_SetConfig+0x2e4>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d82d      	bhi.n	80033e4 <UART_SetConfig+0x164>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x110>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033c5 	.word	0x080033c5
 8003394:	080033e5 	.word	0x080033e5
 8003398:	080033e5 	.word	0x080033e5
 800339c:	080033e5 	.word	0x080033e5
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033e5 	.word	0x080033e5
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033cd 	.word	0x080033cd
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033dd 	.word	0x080033dd
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ca:	e0d8      	b.n	800357e <UART_SetConfig+0x2fe>
 80033cc:	2302      	movs	r3, #2
 80033ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d2:	e0d4      	b.n	800357e <UART_SetConfig+0x2fe>
 80033d4:	2304      	movs	r3, #4
 80033d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033da:	e0d0      	b.n	800357e <UART_SetConfig+0x2fe>
 80033dc:	2308      	movs	r3, #8
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e2:	e0cc      	b.n	800357e <UART_SetConfig+0x2fe>
 80033e4:	2310      	movs	r3, #16
 80033e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ea:	e0c8      	b.n	800357e <UART_SetConfig+0x2fe>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5e      	ldr	r2, [pc, #376]	@ (800356c <UART_SetConfig+0x2ec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d125      	bne.n	8003442 <UART_SetConfig+0x1c2>
 80033f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003564 <UART_SetConfig+0x2e4>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003400:	2b30      	cmp	r3, #48	@ 0x30
 8003402:	d016      	beq.n	8003432 <UART_SetConfig+0x1b2>
 8003404:	2b30      	cmp	r3, #48	@ 0x30
 8003406:	d818      	bhi.n	800343a <UART_SetConfig+0x1ba>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d00a      	beq.n	8003422 <UART_SetConfig+0x1a2>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d814      	bhi.n	800343a <UART_SetConfig+0x1ba>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <UART_SetConfig+0x19a>
 8003414:	2b10      	cmp	r3, #16
 8003416:	d008      	beq.n	800342a <UART_SetConfig+0x1aa>
 8003418:	e00f      	b.n	800343a <UART_SetConfig+0x1ba>
 800341a:	2300      	movs	r3, #0
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003420:	e0ad      	b.n	800357e <UART_SetConfig+0x2fe>
 8003422:	2302      	movs	r3, #2
 8003424:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003428:	e0a9      	b.n	800357e <UART_SetConfig+0x2fe>
 800342a:	2304      	movs	r3, #4
 800342c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003430:	e0a5      	b.n	800357e <UART_SetConfig+0x2fe>
 8003432:	2308      	movs	r3, #8
 8003434:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003438:	e0a1      	b.n	800357e <UART_SetConfig+0x2fe>
 800343a:	2310      	movs	r3, #16
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003440:	e09d      	b.n	800357e <UART_SetConfig+0x2fe>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a4a      	ldr	r2, [pc, #296]	@ (8003570 <UART_SetConfig+0x2f0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d125      	bne.n	8003498 <UART_SetConfig+0x218>
 800344c:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <UART_SetConfig+0x2e4>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003456:	2bc0      	cmp	r3, #192	@ 0xc0
 8003458:	d016      	beq.n	8003488 <UART_SetConfig+0x208>
 800345a:	2bc0      	cmp	r3, #192	@ 0xc0
 800345c:	d818      	bhi.n	8003490 <UART_SetConfig+0x210>
 800345e:	2b80      	cmp	r3, #128	@ 0x80
 8003460:	d00a      	beq.n	8003478 <UART_SetConfig+0x1f8>
 8003462:	2b80      	cmp	r3, #128	@ 0x80
 8003464:	d814      	bhi.n	8003490 <UART_SetConfig+0x210>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <UART_SetConfig+0x1f0>
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d008      	beq.n	8003480 <UART_SetConfig+0x200>
 800346e:	e00f      	b.n	8003490 <UART_SetConfig+0x210>
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003476:	e082      	b.n	800357e <UART_SetConfig+0x2fe>
 8003478:	2302      	movs	r3, #2
 800347a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800347e:	e07e      	b.n	800357e <UART_SetConfig+0x2fe>
 8003480:	2304      	movs	r3, #4
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003486:	e07a      	b.n	800357e <UART_SetConfig+0x2fe>
 8003488:	2308      	movs	r3, #8
 800348a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800348e:	e076      	b.n	800357e <UART_SetConfig+0x2fe>
 8003490:	2310      	movs	r3, #16
 8003492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003496:	e072      	b.n	800357e <UART_SetConfig+0x2fe>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a35      	ldr	r2, [pc, #212]	@ (8003574 <UART_SetConfig+0x2f4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12a      	bne.n	80034f8 <UART_SetConfig+0x278>
 80034a2:	4b30      	ldr	r3, [pc, #192]	@ (8003564 <UART_SetConfig+0x2e4>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034b0:	d01a      	beq.n	80034e8 <UART_SetConfig+0x268>
 80034b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034b6:	d81b      	bhi.n	80034f0 <UART_SetConfig+0x270>
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034bc:	d00c      	beq.n	80034d8 <UART_SetConfig+0x258>
 80034be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c2:	d815      	bhi.n	80034f0 <UART_SetConfig+0x270>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <UART_SetConfig+0x250>
 80034c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034cc:	d008      	beq.n	80034e0 <UART_SetConfig+0x260>
 80034ce:	e00f      	b.n	80034f0 <UART_SetConfig+0x270>
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034d6:	e052      	b.n	800357e <UART_SetConfig+0x2fe>
 80034d8:	2302      	movs	r3, #2
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034de:	e04e      	b.n	800357e <UART_SetConfig+0x2fe>
 80034e0:	2304      	movs	r3, #4
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e6:	e04a      	b.n	800357e <UART_SetConfig+0x2fe>
 80034e8:	2308      	movs	r3, #8
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ee:	e046      	b.n	800357e <UART_SetConfig+0x2fe>
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f6:	e042      	b.n	800357e <UART_SetConfig+0x2fe>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a17      	ldr	r2, [pc, #92]	@ (800355c <UART_SetConfig+0x2dc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d13a      	bne.n	8003578 <UART_SetConfig+0x2f8>
 8003502:	4b18      	ldr	r3, [pc, #96]	@ (8003564 <UART_SetConfig+0x2e4>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800350c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003510:	d01a      	beq.n	8003548 <UART_SetConfig+0x2c8>
 8003512:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003516:	d81b      	bhi.n	8003550 <UART_SetConfig+0x2d0>
 8003518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351c:	d00c      	beq.n	8003538 <UART_SetConfig+0x2b8>
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003522:	d815      	bhi.n	8003550 <UART_SetConfig+0x2d0>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <UART_SetConfig+0x2b0>
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352c:	d008      	beq.n	8003540 <UART_SetConfig+0x2c0>
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x2d0>
 8003530:	2300      	movs	r3, #0
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003536:	e022      	b.n	800357e <UART_SetConfig+0x2fe>
 8003538:	2302      	movs	r3, #2
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353e:	e01e      	b.n	800357e <UART_SetConfig+0x2fe>
 8003540:	2304      	movs	r3, #4
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003546:	e01a      	b.n	800357e <UART_SetConfig+0x2fe>
 8003548:	2308      	movs	r3, #8
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354e:	e016      	b.n	800357e <UART_SetConfig+0x2fe>
 8003550:	2310      	movs	r3, #16
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003556:	e012      	b.n	800357e <UART_SetConfig+0x2fe>
 8003558:	cfff69f3 	.word	0xcfff69f3
 800355c:	40008000 	.word	0x40008000
 8003560:	40013800 	.word	0x40013800
 8003564:	40021000 	.word	0x40021000
 8003568:	40004400 	.word	0x40004400
 800356c:	40004800 	.word	0x40004800
 8003570:	40004c00 	.word	0x40004c00
 8003574:	40005000 	.word	0x40005000
 8003578:	2310      	movs	r3, #16
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4aae      	ldr	r2, [pc, #696]	@ (800383c <UART_SetConfig+0x5bc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	f040 8097 	bne.w	80036b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800358a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800358e:	2b08      	cmp	r3, #8
 8003590:	d823      	bhi.n	80035da <UART_SetConfig+0x35a>
 8003592:	a201      	add	r2, pc, #4	@ (adr r2, 8003598 <UART_SetConfig+0x318>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035db 	.word	0x080035db
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035db 	.word	0x080035db
 80035a8:	080035cb 	.word	0x080035cb
 80035ac:	080035db 	.word	0x080035db
 80035b0:	080035db 	.word	0x080035db
 80035b4:	080035db 	.word	0x080035db
 80035b8:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe feb4 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035c2:	e010      	b.n	80035e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b9e      	ldr	r3, [pc, #632]	@ (8003840 <UART_SetConfig+0x5c0>)
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035c8:	e00d      	b.n	80035e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe fe15 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80035ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035d0:	e009      	b.n	80035e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035d8:	e005      	b.n	80035e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8130 	beq.w	800384e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	4a94      	ldr	r2, [pc, #592]	@ (8003844 <UART_SetConfig+0x5c4>)
 80035f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f8:	461a      	mov	r2, r3
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003600:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	429a      	cmp	r2, r3
 8003610:	d305      	bcc.n	800361e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d903      	bls.n	8003626 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003624:	e113      	b.n	800384e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	60fa      	str	r2, [r7, #12]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	4a84      	ldr	r2, [pc, #528]	@ (8003844 <UART_SetConfig+0x5c4>)
 8003634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003638:	b29b      	uxth	r3, r3
 800363a:	2200      	movs	r2, #0
 800363c:	603b      	str	r3, [r7, #0]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003648:	f7fc fdd8 	bl	80001fc <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	020b      	lsls	r3, r1, #8
 800365e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003662:	0202      	lsls	r2, r0, #8
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	6849      	ldr	r1, [r1, #4]
 8003668:	0849      	lsrs	r1, r1, #1
 800366a:	2000      	movs	r0, #0
 800366c:	460c      	mov	r4, r1
 800366e:	4605      	mov	r5, r0
 8003670:	eb12 0804 	adds.w	r8, r2, r4
 8003674:	eb43 0905 	adc.w	r9, r3, r5
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	469a      	mov	sl, r3
 8003680:	4693      	mov	fp, r2
 8003682:	4652      	mov	r2, sl
 8003684:	465b      	mov	r3, fp
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f7fc fdb7 	bl	80001fc <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4613      	mov	r3, r2
 8003694:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800369c:	d308      	bcc.n	80036b0 <UART_SetConfig+0x430>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a4:	d204      	bcs.n	80036b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e0ce      	b.n	800384e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80036b6:	e0ca      	b.n	800384e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c0:	d166      	bne.n	8003790 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80036c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d827      	bhi.n	800371a <UART_SetConfig+0x49a>
 80036ca:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0x450>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fe18 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80036f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036fa:	e014      	b.n	8003726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe fe2a 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003702:	e010      	b.n	8003726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <UART_SetConfig+0x5c0>)
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fd75 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800370e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003710:	e009      	b.n	8003726 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003718:	e005      	b.n	8003726 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003724:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8090 	beq.w	800384e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	4a44      	ldr	r2, [pc, #272]	@ (8003844 <UART_SetConfig+0x5c4>)
 8003734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003738:	461a      	mov	r2, r3
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	441a      	add	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	d916      	bls.n	8003788 <UART_SetConfig+0x508>
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d212      	bcs.n	8003788 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f023 030f 	bic.w	r3, r3, #15
 800376a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b29a      	uxth	r2, r3
 8003778:	8bfb      	ldrh	r3, [r7, #30]
 800377a:	4313      	orrs	r3, r2
 800377c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	8bfa      	ldrh	r2, [r7, #30]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e062      	b.n	800384e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800378e:	e05e      	b.n	800384e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003790:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003794:	2b08      	cmp	r3, #8
 8003796:	d828      	bhi.n	80037ea <UART_SetConfig+0x56a>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <UART_SetConfig+0x520>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fe fdb0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80037c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037ca:	e014      	b.n	80037f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe fdc2 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 80037d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037d2:	e010      	b.n	80037f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <UART_SetConfig+0x5c0>)
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fd0d 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80037de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037e0:	e009      	b.n	80037f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037e8:	e005      	b.n	80037f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037f4:	bf00      	nop
    }

    if (pclk != 0U)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	4a10      	ldr	r2, [pc, #64]	@ (8003844 <UART_SetConfig+0x5c4>)
 8003802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003806:	461a      	mov	r2, r3
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	fbb3 f2f2 	udiv	r2, r3, r2
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	441a      	add	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	d910      	bls.n	8003848 <UART_SetConfig+0x5c8>
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d20c      	bcs.n	8003848 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	b29a      	uxth	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e009      	b.n	800384e <UART_SetConfig+0x5ce>
 800383a:	bf00      	nop
 800383c:	40008000 	.word	0x40008000
 8003840:	00f42400 	.word	0x00f42400
 8003844:	08003f74 	.word	0x08003f74
      }
      else
      {
        ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2201      	movs	r2, #1
 8003852:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2201      	movs	r2, #1
 800385a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2200      	movs	r2, #0
 8003868:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800386a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800386e:	4618      	mov	r0, r3
 8003870:	3730      	adds	r7, #48	@ 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003976:	d10a      	bne.n	800398e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b098      	sub	sp, #96	@ 0x60
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039cc:	f7fd fb68 	bl	80010a0 <HAL_GetTick>
 80039d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d12f      	bne.n	8003a40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f88e 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d022      	beq.n	8003a40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e063      	b.n	8003b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d149      	bne.n	8003ae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f857 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03c      	beq.n	8003ae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	623b      	str	r3, [r7, #32]
   return(result);
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aba:	61fa      	str	r2, [r7, #28]
 8003abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e012      	b.n	8003b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3758      	adds	r7, #88	@ 0x58
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	e04f      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d04b      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fd fab9 	bl	80010a0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e04e      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d037      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	d034      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d031      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d110      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2208      	movs	r2, #8
 8003b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f838 	bl	8003bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e029      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9c:	d111      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f81e 	bl	8003bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d0a0      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b095      	sub	sp, #84	@ 0x54
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e6      	bne.n	8003bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3308      	adds	r3, #8
 8003c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e3      	bne.n	8003c24 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d118      	bne.n	8003c96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 0310 	bic.w	r3, r3, #16
 8003c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e6      	bne.n	8003c64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003caa:	bf00      	nop
 8003cac:	3754      	adds	r7, #84	@ 0x54
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UARTEx_DisableFifoMode+0x16>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e027      	b.n	8003d1c <HAL_UARTEx_DisableFifoMode+0x66>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003cfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e02d      	b.n	8003d9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f84f 	bl	8003e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e02d      	b.n	8003e18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	@ 0x24
 8003dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f811 	bl	8003e20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e40:	e031      	b.n	8003ea6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e42:	2308      	movs	r3, #8
 8003e44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e46:	2308      	movs	r3, #8
 8003e48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	0e5b      	lsrs	r3, r3, #25
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	0f5b      	lsrs	r3, r3, #29
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	7b3a      	ldrb	r2, [r7, #12]
 8003e6e:	4911      	ldr	r1, [pc, #68]	@ (8003eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8003e70:	5c8a      	ldrb	r2, [r1, r2]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e76:	7b3a      	ldrb	r2, [r7, #12]
 8003e78:	490f      	ldr	r1, [pc, #60]	@ (8003eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8003e7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	7b7a      	ldrb	r2, [r7, #13]
 8003e8c:	4909      	ldr	r1, [pc, #36]	@ (8003eb4 <UARTEx_SetNbDataToProcess+0x94>)
 8003e8e:	5c8a      	ldrb	r2, [r1, r2]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e94:	7b7a      	ldrb	r2, [r7, #13]
 8003e96:	4908      	ldr	r1, [pc, #32]	@ (8003eb8 <UARTEx_SetNbDataToProcess+0x98>)
 8003e98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	08003f8c 	.word	0x08003f8c
 8003eb8:	08003f94 	.word	0x08003f94

08003ebc <memset>:
 8003ebc:	4402      	add	r2, r0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4d0d      	ldr	r5, [pc, #52]	@ (8003f04 <__libc_init_array+0x38>)
 8003ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8003f08 <__libc_init_array+0x3c>)
 8003ed2:	1b64      	subs	r4, r4, r5
 8003ed4:	10a4      	asrs	r4, r4, #2
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	4d0b      	ldr	r5, [pc, #44]	@ (8003f0c <__libc_init_array+0x40>)
 8003ede:	4c0c      	ldr	r4, [pc, #48]	@ (8003f10 <__libc_init_array+0x44>)
 8003ee0:	f000 f818 	bl	8003f14 <_init>
 8003ee4:	1b64      	subs	r4, r4, r5
 8003ee6:	10a4      	asrs	r4, r4, #2
 8003ee8:	2600      	movs	r6, #0
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	08003fa4 	.word	0x08003fa4
 8003f08:	08003fa4 	.word	0x08003fa4
 8003f0c:	08003fa4 	.word	0x08003fa4
 8003f10:	08003fa8 	.word	0x08003fa8

08003f14 <_init>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr

08003f20 <_fini>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr
