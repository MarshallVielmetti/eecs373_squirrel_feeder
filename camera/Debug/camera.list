
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005824  08005824  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  08005824  08005824  00006824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800582c  0800582c  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005830  08005830  00006830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20040000  08005834  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001886c  20040024  08005858  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20058890  08005858  00007890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100ad  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ee  00000000  00000000  00017101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000195f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a37  00000000  00000000  0001a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5df  00000000  00000000  0001ad77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c6f  00000000  00000000  00045356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff953  00000000  00000000  00056fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ec  00000000  00000000  0015695c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00159f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040024 	.word	0x20040024
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800579c 	.word	0x0800579c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040028 	.word	0x20040028
 80001f8:	0800579c 	.word	0x0800579c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <VC0706_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];
    buffer[0] = VC0706_CMD_PREFIX;
 80004fc:	2356      	movs	r3, #86	@ 0x56
 80004fe:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8000500:	2300      	movs	r3, #0
 8000502:	737b      	strb	r3, [r7, #13]
    buffer[2] = cmd;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < params_len; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	77fb      	strb	r3, [r7, #31]
 800050c:	e00c      	b.n	8000528 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 800050e:	7ffb      	ldrb	r3, [r7, #31]
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	441a      	add	r2, r3
 8000514:	7ffb      	ldrb	r3, [r7, #31]
 8000516:	3303      	adds	r3, #3
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	3320      	adds	r3, #32
 800051c:	443b      	add	r3, r7
 800051e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8000522:	7ffb      	ldrb	r3, [r7, #31]
 8000524:	3301      	adds	r3, #1
 8000526:	77fb      	strb	r3, [r7, #31]
 8000528:	7ffa      	ldrb	r2, [r7, #31]
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3ee      	bcc.n	800050e <VC0706_SendCommand+0x22>
//    for (uint8_t i = 0; i < params_len + 3; i++) {
//    	HAL_UART_Transmit(&huart3, buffer[i], 1, 1000);
//    }


    HAL_UART_Transmit(&huart3, buffer, 3 + params_len, HAL_MAX_DELAY);
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	b29b      	uxth	r3, r3
 8000534:	3303      	adds	r3, #3
 8000536:	b29a      	uxth	r2, r3
 8000538:	f107 010c 	add.w	r1, r7, #12
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <VC0706_SendCommand+0x64>)
 8000542:	f003 fbed 	bl	8003d20 <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200587d8 	.word	0x200587d8

08000554 <VC0706_TakePhoto>:

uint8_t VC0706_TakePhoto(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 800055a:	2301      	movs	r3, #1
 800055c:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2202      	movs	r2, #2
 8000564:	4619      	mov	r1, r3
 8000566:	2036      	movs	r0, #54	@ 0x36
 8000568:	f7ff ffc0 	bl	80004ec <VC0706_SendCommand>

    uint8_t response[5]={0};
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	2300      	movs	r3, #0
 8000572:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000); // 1-second timeout
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	2205      	movs	r2, #5
 800057c:	4810      	ldr	r0, [pc, #64]	@ (80005c0 <VC0706_TakePhoto+0x6c>)
 800057e:	f003 fc5d 	bl	8003e3c <HAL_UART_Receive>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 800058c:	2300      	movs	r3, #0
 800058e:	e012      	b.n	80005b6 <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8000590:	793b      	ldrb	r3, [r7, #4]
 8000592:	2b76      	cmp	r3, #118	@ 0x76
 8000594:	d10d      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10a      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 800059c:	79bb      	ldrb	r3, [r7, #6]
 800059e:	2b36      	cmp	r3, #54	@ 0x36
 80005a0:	d107      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d104      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 80005a8:	7a3b      	ldrb	r3, [r7, #8]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <VC0706_TakePhoto+0x5e>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <VC0706_TakePhoto+0x60>
 80005b2:	2300      	movs	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200587d8 	.word	0x200587d8

080005c4 <VC0706_ReadImageDataLength>:

uint16_t VC0706_ReadImageDataLength(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 80005ca:	2301      	movs	r3, #1
 80005cc:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2202      	movs	r2, #2
 80005d4:	4619      	mov	r1, r3
 80005d6:	2034      	movs	r0, #52	@ 0x34
 80005d8:	f7ff ff88 	bl	80004ec <VC0706_SendCommand>

	uint8_t response[9];
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	2209      	movs	r2, #9
 80005e4:	480b      	ldr	r0, [pc, #44]	@ (8000614 <VC0706_ReadImageDataLength+0x50>)
 80005e6:	f003 fc29 	bl	8003e3c <HAL_UART_Receive>
 80005ea:	4603      	mov	r3, r0
 80005ec:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <VC0706_ReadImageDataLength+0x34>
    	return 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	e008      	b.n	800060a <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	7b3b      	ldrb	r3, [r7, #12]
 8000600:	b21b      	sxth	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b21b      	sxth	r3, r3
 8000606:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8000608:	8abb      	ldrh	r3, [r7, #20]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200587d8 	.word	0x200587d8

08000618 <VC0706_ReadImage>:


uint8_t VC0706_ReadImage(uint8_t *imageBuffer, uint16_t start_address, uint16_t image_length) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
 8000624:	4613      	mov	r3, r2
 8000626:	803b      	strh	r3, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 8000628:	230c      	movs	r3, #12
 800062a:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 800062c:	2300      	movs	r3, #0
 800062e:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0D;
 8000630:	230d      	movs	r3, #13
 8000632:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8000634:	2300      	movs	r3, #0
 8000636:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 8000638:	2300      	movs	r3, #0
 800063a:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	0a1b      	lsrs	r3, r3, #8
 8000640:	b29b      	uxth	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8000650:	2300      	movs	r3, #0
 8000652:	743b      	strb	r3, [r7, #16]

    readCommand[9] = (image_length >> 8) & 0xFF;
 8000654:	883b      	ldrh	r3, [r7, #0]
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	b29b      	uxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	747b      	strb	r3, [r7, #17]
    readCommand[10] = image_length & 0xFF;
 800065e:	883b      	ldrh	r3, [r7, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 8000664:	2300      	movs	r3, #0
 8000666:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8000668:	23ff      	movs	r3, #255	@ 0xff
 800066a:	753b      	strb	r3, [r7, #20]

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	220d      	movs	r2, #13
 8000672:	4619      	mov	r1, r3
 8000674:	2032      	movs	r0, #50	@ 0x32
 8000676:	f7ff ff39 	bl	80004ec <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, imageBuffer, image_length + 14, 10000);
 800067a:	883b      	ldrh	r3, [r7, #0]
 800067c:	330e      	adds	r3, #14
 800067e:	b29a      	uxth	r2, r3
 8000680:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <VC0706_ReadImage+0x8c>)
 8000688:	f003 fbd8 	bl	8003e3c <HAL_UART_Receive>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) {
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <VC0706_ReadImage+0x82>
    	return 0;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <VC0706_ReadImage+0x84>
    }

    return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200587d8 	.word	0x200587d8

080006a8 <VC0706_StopCapture>:
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 10000);
    return (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x26 && response[3] == 0x00); // Check if reset was successful
//    return response[3] == 0x00;
}

uint8_t VC0706_StopCapture(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 80006ae:	f240 3301 	movw	r3, #769	@ 0x301
 80006b2:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	2300      	movs	r3, #0
 80006ba:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2202      	movs	r2, #2
 80006c2:	4619      	mov	r1, r3
 80006c4:	2036      	movs	r0, #54	@ 0x36
 80006c6:	f7ff ff11 	bl	80004ec <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, response, sizeof(response), 1000);
 80006ca:	1d39      	adds	r1, r7, #4
 80006cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d0:	2205      	movs	r2, #5
 80006d2:	4810      	ldr	r0, [pc, #64]	@ (8000714 <VC0706_StopCapture+0x6c>)
 80006d4:	f003 fbb2 	bl	8003e3c <HAL_UART_Receive>
 80006d8:	4603      	mov	r3, r0
 80006da:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <VC0706_StopCapture+0x3e>
        return 0; // Indicate failure
 80006e2:	2300      	movs	r3, #0
 80006e4:	e012      	b.n	800070c <VC0706_StopCapture+0x64>
    }

    // Check if the response is as expected
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 80006e6:	793b      	ldrb	r3, [r7, #4]
 80006e8:	2b76      	cmp	r3, #118	@ 0x76
 80006ea:	d10d      	bne.n	8000708 <VC0706_StopCapture+0x60>
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10a      	bne.n	8000708 <VC0706_StopCapture+0x60>
 80006f2:	79bb      	ldrb	r3, [r7, #6]
 80006f4:	2b36      	cmp	r3, #54	@ 0x36
 80006f6:	d107      	bne.n	8000708 <VC0706_StopCapture+0x60>
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d104      	bne.n	8000708 <VC0706_StopCapture+0x60>
 80006fe:	7a3b      	ldrb	r3, [r7, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <VC0706_StopCapture+0x60>
 8000704:	2301      	movs	r3, #1
 8000706:	e000      	b.n	800070a <VC0706_StopCapture+0x62>
 8000708:	2300      	movs	r3, #0
 800070a:	b2db      	uxtb	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200587d8 	.word	0x200587d8

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fd26 	bl	800116e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f831 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f94b 	bl	80009c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800072a:	f000 f8b1 	bl	8000890 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800072e:	f000 f8fb 	bl	8000928 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000732:	f000 f86f 	bl	8000814 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000736:	f004 fa69 	bl	8004c0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2500);
 800073a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800073e:	f000 fd8b 	bl	8001258 <HAL_Delay>
//  int reset = 0;
//  if (VC0706_Reset()){
//    reset = 1;
//  }

  int stop_the_cap = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  if (VC0706_StopCapture()) {
 8000746:	f7ff ffaf 	bl	80006a8 <VC0706_StopCapture>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <main+0x3c>
	  stop_the_cap = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
//  if (VC0706_SetResolution(0x00)) {
//	  set_resolution = 1;
//  }

//    HAL_Delay(1000);
  int photo = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  // Take a photo
  if (VC0706_TakePhoto()) {
 8000758:	f7ff fefc 	bl	8000554 <VC0706_TakePhoto>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00b      	beq.n	800077a <main+0x62>
	  photo = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
      // Capture the image into the buffer
	  uint16_t image_len = VC0706_ReadImageDataLength();
 8000766:	f7ff ff2d 	bl	80005c4 <VC0706_ReadImageDataLength>
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]

      VC0706_ReadImage(cameraBuffer, 0, image_len);
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	461a      	mov	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <main+0x6c>)
 8000776:	f7ff ff4f 	bl	8000618 <VC0706_ReadImage>
  }

  int r = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	603b      	str	r3, [r7, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <main+0x66>
 8000782:	bf00      	nop
 8000784:	20040040 	.word	0x20040040

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	@ 0x58
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2244      	movs	r2, #68	@ 0x44
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 ffd3 	bl	8005742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ae:	f001 f827 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b8:	f000 fb5c 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007bc:	2310      	movs	r3, #16
 80007be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c8:	2360      	movs	r3, #96	@ 0x60
 80007ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f8c7 	bl	8001968 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007e0:	f000 fb48 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fccd 	bl	800219c <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000808:	f000 fb34 	bl	8000e74 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	@ 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2218      	movs	r2, #24
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f002 fc68 	bl	8003148 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 faf9 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200586e0 	.word	0x200586e0
 800088c:	40013000 	.word	0x40013000

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_USART1_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008da:	f003 f9d1 	bl	8003c80 <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 fac6 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008ec:	f004 f8c4 	bl	8004a78 <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 fabd 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008fe:	f004 f8f9 	bl	8004af4 <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 fab4 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 800090e:	f004 f87a 	bl	8004a06 <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 faac 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20058744 	.word	0x20058744
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <MX_USART3_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000934:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000972:	f003 f985 	bl	8003c80 <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 fa7a 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000984:	f004 f878 	bl	8004a78 <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 fa71 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 8000996:	f004 f8ad 	bl	8004af4 <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 fa68 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f004 f82e 	bl	8004a06 <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 fa60 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200587d8 	.word	0x200587d8
 80009bc:	40004800 	.word	0x40004800

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	@ 0x38
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d6:	4bb3      	ldr	r3, [pc, #716]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4ab2      	ldr	r2, [pc, #712]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4bb0      	ldr	r3, [pc, #704]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4bad      	ldr	r3, [pc, #692]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4aac      	ldr	r2, [pc, #688]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4baa      	ldr	r3, [pc, #680]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	4ba7      	ldr	r3, [pc, #668]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4aa6      	ldr	r2, [pc, #664]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4ba4      	ldr	r3, [pc, #656]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4ba1      	ldr	r3, [pc, #644]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4aa0      	ldr	r2, [pc, #640]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b9b      	ldr	r3, [pc, #620]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a42:	4b98      	ldr	r3, [pc, #608]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b95      	ldr	r3, [pc, #596]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4a94      	ldr	r2, [pc, #592]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4b92      	ldr	r3, [pc, #584]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4a8e      	ldr	r2, [pc, #568]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a72:	4b8c      	ldr	r3, [pc, #560]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b89      	ldr	r3, [pc, #548]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	4a88      	ldr	r2, [pc, #544]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8a:	4b86      	ldr	r3, [pc, #536]	@ (8000ca4 <MX_GPIO_Init+0x2e4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a96:	f000 ff57 	bl	8001948 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f000 fe75 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ab6:	230d      	movs	r3, #13
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4879      	ldr	r0, [pc, #484]	@ (8000ca8 <MX_GPIO_Init+0x2e8>)
 8000ac2:	f000 fcd3 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	2312      	movs	r3, #18
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4872      	ldr	r0, [pc, #456]	@ (8000cac <MX_GPIO_Init+0x2ec>)
 8000ae2:	f000 fcc3 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ae6:	2380      	movs	r3, #128	@ 0x80
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000af6:	230d      	movs	r3, #13
 8000af8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	486a      	ldr	r0, [pc, #424]	@ (8000cac <MX_GPIO_Init+0x2ec>)
 8000b02:	f000 fcb3 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4865      	ldr	r0, [pc, #404]	@ (8000cb0 <MX_GPIO_Init+0x2f0>)
 8000b1a:	f000 fca7 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3c:	f000 fc96 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000b40:	230a      	movs	r3, #10
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f000 fc89 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f000 fc7a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4848      	ldr	r0, [pc, #288]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000b94:	f000 fc6a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4842      	ldr	r0, [pc, #264]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000bac:	f000 fc5e 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000bb0:	2344      	movs	r3, #68	@ 0x44
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	483c      	ldr	r0, [pc, #240]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000bc4:	f000 fc52 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000bc8:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4830      	ldr	r0, [pc, #192]	@ (8000ca8 <MX_GPIO_Init+0x2e8>)
 8000be6:	f000 fc41 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4828      	ldr	r0, [pc, #160]	@ (8000ca8 <MX_GPIO_Init+0x2e8>)
 8000c08:	f000 fc30 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4822      	ldr	r0, [pc, #136]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000c2a:	f000 fc1f 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000c2e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c40:	230d      	movs	r3, #13
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000c4c:	f000 fc0e 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000c62:	230e      	movs	r3, #14
 8000c64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_GPIO_Init+0x2f4>)
 8000c6e:	f000 fbfd 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c72:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c84:	2302      	movs	r3, #2
 8000c86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <MX_GPIO_Init+0x2f8>)
 8000c90:	f000 fbec 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e00c      	b.n	8000cbc <MX_GPIO_Init+0x2fc>
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48001000 	.word	0x48001000
 8000cac:	48001400 	.word	0x48001400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4864      	ldr	r0, [pc, #400]	@ (8000e60 <MX_GPIO_Init+0x4a0>)
 8000cce:	f000 fbcd 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cd2:	2340      	movs	r3, #64	@ 0x40
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ce2:	230d      	movs	r3, #13
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	485d      	ldr	r0, [pc, #372]	@ (8000e64 <MX_GPIO_Init+0x4a4>)
 8000cee:	f000 fbbd 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d02:	2302      	movs	r3, #2
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4855      	ldr	r0, [pc, #340]	@ (8000e64 <MX_GPIO_Init+0x4a4>)
 8000d0e:	f000 fbad 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8000d12:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d24:	230c      	movs	r3, #12
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	484d      	ldr	r0, [pc, #308]	@ (8000e64 <MX_GPIO_Init+0x4a4>)
 8000d30:	f000 fb9c 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000d34:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d46:	230a      	movs	r3, #10
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f000 fb8a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f000 fb7c 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d86:	2308      	movs	r3, #8
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4834      	ldr	r0, [pc, #208]	@ (8000e64 <MX_GPIO_Init+0x4a4>)
 8000d92:	f000 fb6b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000da6:	2309      	movs	r3, #9
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	482d      	ldr	r0, [pc, #180]	@ (8000e68 <MX_GPIO_Init+0x4a8>)
 8000db2:	f000 fb5b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000db6:	2304      	movs	r3, #4
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <MX_GPIO_Init+0x4a8>)
 8000dd2:	f000 fb4b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000dd6:	2378      	movs	r3, #120	@ 0x78
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de6:	2307      	movs	r3, #7
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	481d      	ldr	r0, [pc, #116]	@ (8000e68 <MX_GPIO_Init+0x4a8>)
 8000df2:	f000 fb3b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000df6:	2338      	movs	r3, #56	@ 0x38
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e06:	2306      	movs	r3, #6
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4816      	ldr	r0, [pc, #88]	@ (8000e6c <MX_GPIO_Init+0x4ac>)
 8000e12:	f000 fb2b 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1c:	2312      	movs	r3, #18
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <MX_GPIO_Init+0x4ac>)
 8000e34:	f000 fb1a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_GPIO_Init+0x4b0>)
 8000e54:	f000 fb0a 	bl	800146c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3738      	adds	r7, #56	@ 0x38
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	48001800 	.word	0x48001800
 8000e64:	48000800 	.word	0x48000800
 8000e68:	48000c00 	.word	0x48000c00
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	48001000 	.word	0x48001000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <HAL_SPI_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d128      	bne.n	8000f3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef6:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_SPI_MspInit+0x80>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f1a:	23e0      	movs	r3, #224	@ 0xe0
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f000 fa98 	bl	800146c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40013000 	.word	0x40013000
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b0      	sub	sp, #192	@ 0xc0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	2294      	movs	r2, #148	@ 0x94
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fbe8 	bl	8005742 <memset>
  if(huart->Instance==USART1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a43      	ldr	r2, [pc, #268]	@ (8001084 <HAL_UART_MspInit+0x138>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d13e      	bne.n	8000ffa <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f80:	2300      	movs	r3, #0
 8000f82:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fbc5 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f94:	f7ff ff6e 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f98:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa4:	4b38      	ldr	r3, [pc, #224]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb0:	4b35      	ldr	r3, [pc, #212]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbc:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fc8:	f000 fcbe 	bl	8001948 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fcc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4826      	ldr	r0, [pc, #152]	@ (800108c <HAL_UART_MspInit+0x140>)
 8000ff4:	f000 fa3a 	bl	800146c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff8:	e040      	b.n	800107c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a24      	ldr	r2, [pc, #144]	@ (8001090 <HAL_UART_MspInit+0x144>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d13b      	bne.n	800107c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001004:	2304      	movs	r3, #4
 8001006:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001008:	2300      	movs	r3, #0
 800100a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fb81 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800101c:	f7ff ff2a 	bl	8000e74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001024:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8001026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800102a:	6593      	str	r3, [r2, #88]	@ 0x58
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103c:	4a12      	ldr	r2, [pc, #72]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <HAL_UART_MspInit+0x13c>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001050:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106a:	2307      	movs	r3, #7
 800106c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <HAL_UART_MspInit+0x148>)
 8001078:	f000 f9f8 	bl	800146c <HAL_GPIO_Init>
}
 800107c:	bf00      	nop
 800107e:	37c0      	adds	r7, #192	@ 0xc0
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013800 	.word	0x40013800
 8001088:	40021000 	.word	0x40021000
 800108c:	48001800 	.word	0x48001800
 8001090:	40004800 	.word	0x40004800
 8001094:	48000c00 	.word	0x48000c00

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f000 f893 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001154 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff ffea 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 fb03 	bl	8005754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114e:	f7ff fae3 	bl	8000718 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001158:	20040000 	.word	0x20040000
  ldr r1, =_edata
 800115c:	20040024 	.word	0x20040024
  ldr r2, =_sidata
 8001160:	08005834 	.word	0x08005834
  ldr r2, =_sbss
 8001164:	20040024 	.word	0x20040024
  ldr r4, =_ebss
 8001168:	20058890 	.word	0x20058890

0800116c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_IRQHandler>

0800116e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f943 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f80e 	bl	80011a0 <HAL_InitTick>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	e001      	b.n	8001194 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001190:	f7ff fe76 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001194:	79fb      	ldrb	r3, [r7, #7]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_InitTick+0x70>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f941 	bl	8001452 <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d809      	bhi.n	80011f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f919 	bl	800141a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_InitTick+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e007      	b.n	8001200 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e004      	b.n	8001200 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e001      	b.n	8001200 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20040008 	.word	0x20040008
 8001210:	20040000 	.word	0x20040000
 8001214:	20040004 	.word	0x20040004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20040008 	.word	0x20040008
 800123c:	2005886c 	.word	0x2005886c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2005886c 	.word	0x2005886c

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20040008 	.word	0x20040008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	@ (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	@ (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff47 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff5c 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffb0 	bl	80013c0 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e166      	b.n	800174a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2101      	movs	r1, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8158 	beq.w	8001744 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d005      	beq.n	80014ac <HAL_GPIO_Init+0x40>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d130      	bne.n	800150e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e2:	2201      	movs	r2, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	f003 0201 	and.w	r2, r3, #1
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b03      	cmp	r3, #3
 8001518:	d017      	beq.n	800154a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d123      	bne.n	800159e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	08da      	lsrs	r2, r3, #3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3208      	adds	r2, #8
 8001598:	6939      	ldr	r1, [r7, #16]
 800159a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0203 	and.w	r2, r3, #3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80b2 	beq.w	8001744 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	4b61      	ldr	r3, [pc, #388]	@ (8001768 <HAL_GPIO_Init+0x2fc>)
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	4a60      	ldr	r2, [pc, #384]	@ (8001768 <HAL_GPIO_Init+0x2fc>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <HAL_GPIO_Init+0x2fc>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f8:	4a5c      	ldr	r2, [pc, #368]	@ (800176c <HAL_GPIO_Init+0x300>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001622:	d02b      	beq.n	800167c <HAL_GPIO_Init+0x210>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a52      	ldr	r2, [pc, #328]	@ (8001770 <HAL_GPIO_Init+0x304>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d025      	beq.n	8001678 <HAL_GPIO_Init+0x20c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a51      	ldr	r2, [pc, #324]	@ (8001774 <HAL_GPIO_Init+0x308>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01f      	beq.n	8001674 <HAL_GPIO_Init+0x208>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a50      	ldr	r2, [pc, #320]	@ (8001778 <HAL_GPIO_Init+0x30c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d019      	beq.n	8001670 <HAL_GPIO_Init+0x204>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a4f      	ldr	r2, [pc, #316]	@ (800177c <HAL_GPIO_Init+0x310>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x200>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4e      	ldr	r2, [pc, #312]	@ (8001780 <HAL_GPIO_Init+0x314>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1fc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4d      	ldr	r2, [pc, #308]	@ (8001784 <HAL_GPIO_Init+0x318>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1f8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4c      	ldr	r2, [pc, #304]	@ (8001788 <HAL_GPIO_Init+0x31c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1f4>
 800165c:	2307      	movs	r3, #7
 800165e:	e00e      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001660:	2308      	movs	r3, #8
 8001662:	e00c      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001664:	2306      	movs	r3, #6
 8001666:	e00a      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001668:	2305      	movs	r3, #5
 800166a:	e008      	b.n	800167e <HAL_GPIO_Init+0x212>
 800166c:	2304      	movs	r3, #4
 800166e:	e006      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001670:	2303      	movs	r3, #3
 8001672:	e004      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001674:	2302      	movs	r3, #2
 8001676:	e002      	b.n	800167e <HAL_GPIO_Init+0x212>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <HAL_GPIO_Init+0x212>
 800167c:	2300      	movs	r3, #0
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	f002 0203 	and.w	r2, r2, #3
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	4093      	lsls	r3, r2
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800168e:	4937      	ldr	r1, [pc, #220]	@ (800176c <HAL_GPIO_Init+0x300>)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800169c:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <HAL_GPIO_Init+0x320>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c0:	4a32      	ldr	r2, [pc, #200]	@ (800178c <HAL_GPIO_Init+0x320>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_GPIO_Init+0x320>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ea:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_GPIO_Init+0x320>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_GPIO_Init+0x320>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_GPIO_Init+0x320>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <HAL_GPIO_Init+0x320>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800173e:	4a13      	ldr	r2, [pc, #76]	@ (800178c <HAL_GPIO_Init+0x320>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f ae91 	bne.w	800147c <HAL_GPIO_Init+0x10>
  }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	48000400 	.word	0x48000400
 8001774:	48000800 	.word	0x48000800
 8001778:	48000c00 	.word	0x48000c00
 800177c:	48001000 	.word	0x48001000
 8001780:	48001400 	.word	0x48001400
 8001784:	48001800 	.word	0x48001800
 8001788:	48001c00 	.word	0x48001c00
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d0:	d102      	bne.n	80017d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80017d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d6:	e00b      	b.n	80017f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_PWREx_GetVoltageRange+0x3c>)
 80017da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e6:	d102      	bne.n	80017ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80017e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ec:	e000      	b.n	80017f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80017ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d141      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800180e:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181a:	d131      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001822:	4a46      	ldr	r2, [pc, #280]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001834:	4a41      	ldr	r2, [pc, #260]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800183c:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2232      	movs	r2, #50	@ 0x32
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a3f      	ldr	r2, [pc, #252]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	e002      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001866:	d102      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f2      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187a:	d158      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e057      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001886:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001890:	e04d      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001898:	d141      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800189a:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a6:	d131      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ae:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c0:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2232      	movs	r2, #50	@ 0x32
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018de:	e002      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d102      	bne.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d112      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e011      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800191c:	e007      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40007000 	.word	0x40007000
 8001940:	20040000 	.word	0x20040000
 8001944:	431bde83 	.word	0x431bde83

08001948 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_PWREx_EnableVddIO2+0x1c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6053      	str	r3, [r2, #4]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000

08001968 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	f000 bc08 	b.w	800218c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	4b96      	ldr	r3, [pc, #600]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001986:	4b94      	ldr	r3, [pc, #592]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80e4 	beq.w	8001b66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4c>
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	f040 808b 	bne.w	8001ac2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 8087 	bne.w	8001ac2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b4:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x64>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e3df      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	4b81      	ldr	r3, [pc, #516]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_RCC_OscConfig+0x7e>
 80019dc:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e4:	e005      	b.n	80019f2 <HAL_RCC_OscConfig+0x8a>
 80019e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d223      	bcs.n	8001a3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fdcc 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e3c0      	b.n	800218c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0a:	4b73      	ldr	r3, [pc, #460]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a72      	ldr	r2, [pc, #456]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b70      	ldr	r3, [pc, #448]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	496d      	ldr	r1, [pc, #436]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a28:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	4968      	ldr	r1, [pc, #416]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e025      	b.n	8001a8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	4b66      	ldr	r3, [pc, #408]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a65      	ldr	r2, [pc, #404]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4960      	ldr	r1, [pc, #384]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	495b      	ldr	r1, [pc, #364]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fd8c 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e380      	b.n	800218c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8a:	f000 fcc1 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	4950      	ldr	r1, [pc, #320]	@ (8001bdc <HAL_RCC_OscConfig+0x274>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8001be0 <HAL_RCC_OscConfig+0x278>)
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fb76 	bl	80011a0 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d052      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	e364      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d032      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aca:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a42      	ldr	r2, [pc, #264]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fbb3 	bl	8001240 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ade:	f7ff fbaf 	bl	8001240 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e34d      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afc:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a35      	ldr	r2, [pc, #212]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4930      	ldr	r1, [pc, #192]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	492b      	ldr	r1, [pc, #172]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e01a      	b.n	8001b66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b30:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a28      	ldr	r2, [pc, #160]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb80 	bl	8001240 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb7c 	bl	8001240 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e31a      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1dc>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d073      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_OscConfig+0x21c>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d10e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d10b      	bne.n	8001b9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d063      	beq.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d15f      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e2f7      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e025      	b.n	8001c00 <HAL_RCC_OscConfig+0x298>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bbc:	d114      	bne.n	8001be8 <HAL_RCC_OscConfig+0x280>
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a02      	ldr	r2, [pc, #8]	@ (8001bd8 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e013      	b.n	8001c00 <HAL_RCC_OscConfig+0x298>
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080057b4 	.word	0x080057b4
 8001be0:	20040000 	.word	0x20040000
 8001be4:	20040004 	.word	0x20040004
 8001be8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a9f      	ldr	r2, [pc, #636]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b9d      	ldr	r3, [pc, #628]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a9c      	ldr	r2, [pc, #624]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb1a 	bl	8001240 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fb16 	bl	8001240 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	@ 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e2b4      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c22:	4b92      	ldr	r3, [pc, #584]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2a8>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb06 	bl	8001240 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fb02 	bl	8001240 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	@ 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e2a0      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4a:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2d0>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d060      	beq.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_OscConfig+0x310>
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d119      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d116      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x328>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e27d      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b76      	ldr	r3, [pc, #472]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4973      	ldr	r1, [pc, #460]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca4:	e040      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d023      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cae:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fac1 	bl	8001240 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fabd 	bl	8001240 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e25b      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd4:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b62      	ldr	r3, [pc, #392]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	495f      	ldr	r1, [pc, #380]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e018      	b.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5c      	ldr	r2, [pc, #368]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fa9d 	bl	8001240 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa99 	bl	8001240 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e237      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d03c      	beq.n	8001dae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d42:	4a4a      	ldr	r2, [pc, #296]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fa78 	bl	8001240 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff fa74 	bl	8001240 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e212      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ef      	beq.n	8001d54 <HAL_RCC_OscConfig+0x3ec>
 8001d74:	e01b      	b.n	8001dae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff fa5b 	bl	8001240 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fa57 	bl	8001240 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1f5      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ef      	bne.n	8001d8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a6 	beq.w	8001f08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b27      	ldr	r3, [pc, #156]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	4a26      	ldr	r2, [pc, #152]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd8:	4b24      	ldr	r3, [pc, #144]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d118      	bne.n	8001e26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fa1e 	bl	8001240 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e08:	f7ff fa1a 	bl	8001240 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1b8      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_RCC_OscConfig+0x508>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4d8>
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e3e:	e029      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d115      	bne.n	8001e74 <HAL_RCC_OscConfig+0x50c>
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e58:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <HAL_RCC_OscConfig+0x504>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x52c>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	4b9d      	ldr	r3, [pc, #628]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	4a9c      	ldr	r2, [pc, #624]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e84:	4b99      	ldr	r3, [pc, #612]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	4a98      	ldr	r2, [pc, #608]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f9d0 	bl	8001240 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f9cc 	bl	8001240 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e168      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b8c      	ldr	r3, [pc, #560]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ed      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x53c>
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff f9b9 	bl	8001240 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f9b5 	bl	8001240 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e151      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	4b80      	ldr	r3, [pc, #512]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ed      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b7b      	ldr	r3, [pc, #492]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	4a7a      	ldr	r2, [pc, #488]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f1c:	4b73      	ldr	r3, [pc, #460]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f22:	4a72      	ldr	r2, [pc, #456]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f988 	bl	8001240 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f34:	f7ff f984 	bl	8001240 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e122      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f46:	4b69      	ldr	r3, [pc, #420]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x5cc>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f56:	4b65      	ldr	r3, [pc, #404]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5c:	4a63      	ldr	r2, [pc, #396]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f96b 	bl	8001240 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6e:	f7ff f967 	bl	8001240 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e105      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f80:	4b5a      	ldr	r3, [pc, #360]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80f9 	beq.w	800218a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	f040 80cf 	bne.w	8002140 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fa2:	4b52      	ldr	r3, [pc, #328]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0203 	and.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d12c      	bne.n	8002010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d123      	bne.n	8002010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d11b      	bne.n	8002010 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d113      	bne.n	8002010 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d109      	bne.n	8002010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d071      	beq.n	80020f4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d068      	beq.n	80020e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002016:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002022:	4b32      	ldr	r3, [pc, #200]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0ac      	b.n	800218c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002032:	4b2e      	ldr	r3, [pc, #184]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8002038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800203e:	f7ff f8ff 	bl	8001240 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff f8fb 	bl	8001240 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e099      	b.n	800218c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <HAL_RCC_OscConfig+0x788>)
 800206a:	4013      	ands	r3, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002074:	3a01      	subs	r2, #1
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800207e:	0212      	lsls	r2, r2, #8
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002086:	0852      	lsrs	r2, r2, #1
 8002088:	3a01      	subs	r2, #1
 800208a:	0552      	lsls	r2, r2, #21
 800208c:	4311      	orrs	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002092:	0852      	lsrs	r2, r2, #1
 8002094:	3a01      	subs	r2, #1
 8002096:	0652      	lsls	r2, r2, #25
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800209e:	06d2      	lsls	r2, r2, #27
 80020a0:	430a      	orrs	r2, r1
 80020a2:	4912      	ldr	r1, [pc, #72]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a8:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0f      	ldr	r2, [pc, #60]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c0:	f7ff f8be 	bl	8001240 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f8ba 	bl	8001240 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e058      	b.n	800218c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <HAL_RCC_OscConfig+0x784>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e6:	e050      	b.n	800218a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04f      	b.n	800218c <HAL_RCC_OscConfig+0x824>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d144      	bne.n	800218a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002100:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a20      	ldr	r2, [pc, #128]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002118:	f7ff f892 	bl	8001240 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f88e 	bl	8001240 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e02c      	b.n	800218c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x7b8>
 800213e:	e024      	b.n	800218a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d01f      	beq.n	8002186 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 800214c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff f875 	bl	8001240 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff f871 	bl	8001240 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e00f      	b.n	800218c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4905      	ldr	r1, [pc, #20]	@ (8002194 <HAL_RCC_OscConfig+0x82c>)
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_RCC_OscConfig+0x830>)
 8002180:	4013      	ands	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
 8002184:	e001      	b.n	800218a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	feeefffc 	.word	0xfeeefffc

0800219c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e11d      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b90      	ldr	r3, [pc, #576]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 020f 	bic.w	r2, r3, #15
 80021ca:	498b      	ldr	r1, [pc, #556]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e105      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	4b81      	ldr	r3, [pc, #516]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d908      	bls.n	8002212 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b7e      	ldr	r3, [pc, #504]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	497b      	ldr	r1, [pc, #492]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d079      	beq.n	8002312 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d11e      	bne.n	8002264 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	4b75      	ldr	r3, [pc, #468]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0dc      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002236:	f000 fa09 	bl	800264c <RCC_GetSysClockFreqFromPLLSource>
 800223a:	4603      	mov	r3, r0
 800223c:	4a70      	ldr	r2, [pc, #448]	@ (8002400 <HAL_RCC_ClockConfig+0x264>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d946      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002242:	4b6e      	ldr	r3, [pc, #440]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d140      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800224e:	4b6b      	ldr	r3, [pc, #428]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002256:	4a69      	ldr	r2, [pc, #420]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e035      	b.n	80022d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d107      	bne.n	800227c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226c:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d115      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b9      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002284:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0ad      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0a5      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022a4:	f000 f8b4 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a55      	ldr	r2, [pc, #340]	@ (8002400 <HAL_RCC_ClockConfig+0x264>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d90f      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022b0:	4b52      	ldr	r3, [pc, #328]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022bc:	4b4f      	ldr	r3, [pc, #316]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022c4:	4a4d      	ldr	r2, [pc, #308]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d0:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 0203 	bic.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4947      	ldr	r1, [pc, #284]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e2:	f7fe ffad 	bl	8001240 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ea:	f7fe ffa9 	bl	8001240 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e077      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002300:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 020c 	and.w	r2, r3, #12
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	429a      	cmp	r2, r3
 8002310:	d1eb      	bne.n	80022ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b80      	cmp	r3, #128	@ 0x80
 8002316:	d105      	bne.n	8002324 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002318:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a37      	ldr	r2, [pc, #220]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800231e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002322:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	429a      	cmp	r2, r3
 800233e:	d208      	bcs.n	8002352 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	492b      	ldr	r1, [pc, #172]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002352:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d210      	bcs.n	8002382 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002360:	4b25      	ldr	r3, [pc, #148]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 020f 	bic.w	r2, r3, #15
 8002368:	4923      	ldr	r1, [pc, #140]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_RCC_ClockConfig+0x25c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e036      	b.n	80023f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4918      	ldr	r1, [pc, #96]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4910      	ldr	r1, [pc, #64]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c0:	f000 f826 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCC_ClockConfig+0x260>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <HAL_RCC_ClockConfig+0x268>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
 80023dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <HAL_RCC_ClockConfig+0x26c>)
 80023de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_RCC_ClockConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fedb 	bl	80011a0 <HAL_InitTick>
 80023ea:	4603      	mov	r3, r0
 80023ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	04c4b400 	.word	0x04c4b400
 8002404:	080057b4 	.word	0x080057b4
 8002408:	20040000 	.word	0x20040000
 800240c:	20040004 	.word	0x20040004

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241e:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002428:	4b3b      	ldr	r3, [pc, #236]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x34>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d121      	bne.n	8002482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d11e      	bne.n	8002482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002450:	4b31      	ldr	r3, [pc, #196]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e005      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800246c:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <HAL_RCC_GetSysClockFreq+0x10c>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10d      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d102      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002488:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x110>)
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e004      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d101      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002494:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x114>)
 8002496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d134      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d003      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xac>
 80024b4:	e005      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_RCC_GetSysClockFreq+0x110>)
 80024b8:	617b      	str	r3, [r7, #20]
      break;
 80024ba:	e005      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x114>)
 80024be:	617b      	str	r3, [r7, #20]
      break;
 80024c0:	e002      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	617b      	str	r3, [r7, #20]
      break;
 80024c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3301      	adds	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	fb03 f202 	mul.w	r2, r3, r2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	0e5b      	lsrs	r3, r3, #25
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	3301      	adds	r3, #1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002508:	69bb      	ldr	r3, [r7, #24]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	@ 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	080057cc 	.word	0x080057cc
 8002520:	00f42400 	.word	0x00f42400
 8002524:	007a1200 	.word	0x007a1200

08002528 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20040000 	.word	0x20040000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4904      	ldr	r1, [pc, #16]	@ (8002568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	080057c4 	.word	0x080057c4

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002570:	f7ff ffda 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0adb      	lsrs	r3, r3, #11
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4904      	ldr	r1, [pc, #16]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	080057c4 	.word	0x080057c4

08002598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b0:	f7ff f906 	bl	80017c0 <HAL_PWREx_GetVoltageRange>
 80025b4:	6178      	str	r0, [r7, #20]
 80025b6:	e014      	b.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff f8f6 	bl	80017c0 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e8:	d10b      	bne.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	@ 0x80
 80025ee:	d913      	bls.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80025f4:	d902      	bls.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f6:	2302      	movs	r3, #2
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e00d      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e00a      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b7f      	cmp	r3, #127	@ 0x7f
 8002606:	d902      	bls.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002608:	2302      	movs	r3, #2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e004      	b.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b70      	cmp	r3, #112	@ 0x70
 8002612:	d101      	bne.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 020f 	bic.w	r2, r3, #15
 8002620:	4909      	ldr	r1, [pc, #36]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002628:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	40022000 	.word	0x40022000

0800264c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002652:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d00b      	beq.n	800267a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d825      	bhi.n	80026b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d008      	beq.n	8002680 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d11f      	bne.n	80026b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002674:	4b25      	ldr	r3, [pc, #148]	@ (800270c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002676:	613b      	str	r3, [r7, #16]
    break;
 8002678:	e01f      	b.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800267a:	4b25      	ldr	r3, [pc, #148]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800267c:	613b      	str	r3, [r7, #16]
    break;
 800267e:	e01c      	b.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002680:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800268c:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e005      	b.n	80026a8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80026a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
    break;
 80026b2:	e002      	b.n	80026ba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
    break;
 80026b8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	3301      	adds	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	fb03 f202 	mul.w	r2, r3, r2
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0e5b      	lsrs	r3, r3, #25
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	3301      	adds	r3, #1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026fa:	683b      	ldr	r3, [r7, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40021000 	.word	0x40021000
 800270c:	00f42400 	.word	0x00f42400
 8002710:	007a1200 	.word	0x007a1200
 8002714:	080057cc 	.word	0x080057cc

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002720:	2300      	movs	r3, #0
 8002722:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002724:	2300      	movs	r3, #0
 8002726:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	d040      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002738:	2b80      	cmp	r3, #128	@ 0x80
 800273a:	d02a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800273c:	2b80      	cmp	r3, #128	@ 0x80
 800273e:	d825      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002740:	2b60      	cmp	r3, #96	@ 0x60
 8002742:	d026      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002744:	2b60      	cmp	r3, #96	@ 0x60
 8002746:	d821      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d006      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d81d      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d010      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002758:	e018      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800275a:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a88      	ldr	r2, [pc, #544]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002766:	e015      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fb02 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002778:	e00c      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3320      	adds	r3, #32
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fbed 	bl	8002f60 <RCCEx_PLLSAI2_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800278a:	e003      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	74fb      	strb	r3, [r7, #19]
      break;
 8002790:	e000      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800279a:	4b79      	ldr	r3, [pc, #484]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800279c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027a0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a8:	4975      	ldr	r1, [pc, #468]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80027b0:	e001      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d047      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d030      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d0:	d82a      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027d6:	d02a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027dc:	d824      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d81e      	bhi.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f2:	d010      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027f4:	e018      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f6:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a61      	ldr	r2, [pc, #388]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002802:	e015      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fab4 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002814:	e00c      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3320      	adds	r3, #32
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fb9f 	bl	8002f60 <RCCEx_PLLSAI2_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002826:	e003      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	74fb      	strb	r3, [r7, #19]
      break;
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002836:	4b52      	ldr	r3, [pc, #328]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002838:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	494e      	ldr	r1, [pc, #312]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800284c:	e001      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 809f 	beq.w	800299e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002864:	4b46      	ldr	r3, [pc, #280]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	4a40      	ldr	r2, [pc, #256]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a3a      	ldr	r2, [pc, #232]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a2:	f7fe fccd 	bl	8001240 <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a8:	e009      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7fe fcc9 	bl	8001240 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d902      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	74fb      	strb	r3, [r7, #19]
        break;
 80028bc:	e005      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028be:	4b31      	ldr	r3, [pc, #196]	@ (8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ef      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d15b      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028da:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01f      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d019      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ee:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028fa:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800290a:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	4a1b      	ldr	r2, [pc, #108]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800291a:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fc88 	bl	8001240 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	e00b      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe fc84 	bl	8001240 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d902      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	74fb      	strb	r3, [r7, #19]
            break;
 800294a:	e006      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ec      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002960:	4b07      	ldr	r3, [pc, #28]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002966:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002970:	4903      	ldr	r1, [pc, #12]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002978:	e008      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	74bb      	strb	r3, [r7, #18]
 800297e:	e005      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298c:	7c7b      	ldrb	r3, [r7, #17]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4ba0      	ldr	r3, [pc, #640]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	4a9f      	ldr	r2, [pc, #636]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029aa:	4b9a      	ldr	r3, [pc, #616]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f023 0203 	bic.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	4996      	ldr	r1, [pc, #600]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029cc:	4b91      	ldr	r3, [pc, #580]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d2:	f023 020c 	bic.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	498e      	ldr	r1, [pc, #568]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ee:	4b89      	ldr	r3, [pc, #548]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	4985      	ldr	r1, [pc, #532]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a10:	4b80      	ldr	r3, [pc, #512]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a1e:	497d      	ldr	r1, [pc, #500]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a32:	4b78      	ldr	r3, [pc, #480]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	4974      	ldr	r1, [pc, #464]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a54:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a62:	496c      	ldr	r1, [pc, #432]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a76:	4b67      	ldr	r3, [pc, #412]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a84:	4963      	ldr	r1, [pc, #396]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a98:	4b5e      	ldr	r3, [pc, #376]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aa6:	495b      	ldr	r1, [pc, #364]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aba:	4b56      	ldr	r3, [pc, #344]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	4952      	ldr	r1, [pc, #328]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002adc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	494a      	ldr	r1, [pc, #296]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002afe:	4b45      	ldr	r3, [pc, #276]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0c:	4941      	ldr	r1, [pc, #260]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b20:	4b3c      	ldr	r3, [pc, #240]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	4939      	ldr	r1, [pc, #228]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d028      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b42:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b50:	4930      	ldr	r1, [pc, #192]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b60:	d106      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b62:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b6c:	60d3      	str	r3, [r2, #12]
 8002b6e:	e011      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f8f9 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d04d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bb0:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bba:	e012      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bc2:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bda:	490e      	ldr	r1, [pc, #56]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e020      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c02:	d109      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a02      	ldr	r2, [pc, #8]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0e:	60d3      	str	r3, [r2, #12]
 8002c10:	e014      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f8a5 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d028      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c48:	4b4a      	ldr	r3, [pc, #296]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c56:	4947      	ldr	r1, [pc, #284]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c68:	4b42      	ldr	r3, [pc, #264]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a41      	ldr	r2, [pc, #260]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c72:	60d3      	str	r3, [r2, #12]
 8002c74:	e011      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f876 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01e      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ca6:	4b33      	ldr	r3, [pc, #204]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb6:	492f      	ldr	r1, [pc, #188]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f851 	bl	8002d78 <RCCEx_PLLSAI1_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cf6:	f023 0204 	bic.w	r2, r3, #4
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d00:	491c      	ldr	r1, [pc, #112]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d14:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d1a:	f023 0218 	bic.w	r2, r3, #24
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d24:	4913      	ldr	r1, [pc, #76]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d38:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d48:	490a      	ldr	r1, [pc, #40]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d68:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d86:	4b72      	ldr	r3, [pc, #456]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00e      	beq.n	8002db0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d92:	4b6f      	ldr	r3, [pc, #444]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d103      	bne.n	8002daa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
       ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d142      	bne.n	8002e30 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e03f      	b.n	8002e30 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d018      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0x72>
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d825      	bhi.n	8002e08 <RCCEx_PLLSAI1_Config+0x90>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d002      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0x4e>
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d009      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x60>
 8002dc4:	e020      	b.n	8002e08 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc6:	4b62      	ldr	r3, [pc, #392]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd6:	e01a      	b.n	8002e0e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de8:	e013      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dea:	4b59      	ldr	r3, [pc, #356]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002df6:	4b56      	ldr	r3, [pc, #344]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e06:	e006      	b.n	8002e16 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e004      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 0203 	bic.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4949      	ldr	r1, [pc, #292]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8086 	bne.w	8002f44 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e38:	4b45      	ldr	r3, [pc, #276]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a44      	ldr	r2, [pc, #272]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe f9fc 	bl	8001240 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4a:	e009      	b.n	8002e60 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e4c:	f7fe f9f8 	bl	8001240 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d902      	bls.n	8002e60 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e5e:	e005      	b.n	8002e6c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ef      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d168      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d113      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e78:	4b35      	ldr	r3, [pc, #212]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	06d2      	lsls	r2, r2, #27
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6852      	ldr	r2, [r2, #4]
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	430a      	orrs	r2, r1
 8002e98:	492d      	ldr	r1, [pc, #180]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	610b      	str	r3, [r1, #16]
 8002e9e:	e02d      	b.n	8002efc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d115      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6892      	ldr	r2, [r2, #8]
 8002eb2:	0211      	lsls	r1, r2, #8
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6912      	ldr	r2, [r2, #16]
 8002eb8:	0852      	lsrs	r2, r2, #1
 8002eba:	3a01      	subs	r2, #1
 8002ebc:	0552      	lsls	r2, r2, #21
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6852      	ldr	r2, [r2, #4]
 8002ec4:	3a01      	subs	r2, #1
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4921      	ldr	r1, [pc, #132]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	610b      	str	r3, [r1, #16]
 8002ed0:	e014      	b.n	8002efc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	4b21      	ldr	r3, [pc, #132]	@ (8002f5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6892      	ldr	r2, [r2, #8]
 8002ede:	0211      	lsls	r1, r2, #8
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6952      	ldr	r2, [r2, #20]
 8002ee4:	0852      	lsrs	r2, r2, #1
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	0652      	lsls	r2, r2, #25
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6852      	ldr	r2, [r2, #4]
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	4916      	ldr	r1, [pc, #88]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002efc:	4b14      	ldr	r3, [pc, #80]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a13      	ldr	r2, [pc, #76]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe f99a 	bl	8001240 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f0e:	e009      	b.n	8002f24 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f10:	f7fe f996 	bl	8001240 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d902      	bls.n	8002f24 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	73fb      	strb	r3, [r7, #15]
          break;
 8002f22:	e005      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	4904      	ldr	r1, [pc, #16]	@ (8002f50 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	07ff800f 	.word	0x07ff800f
 8002f58:	ff9f800f 	.word	0xff9f800f
 8002f5c:	f9ff800f 	.word	0xf9ff800f

08002f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f6e:	4b72      	ldr	r3, [pc, #456]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0203 	and.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d103      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d142      	bne.n	8003018 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e03f      	b.n	8003018 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d018      	beq.n	8002fd2 <RCCEx_PLLSAI2_Config+0x72>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d825      	bhi.n	8002ff0 <RCCEx_PLLSAI2_Config+0x90>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <RCCEx_PLLSAI2_Config+0x4e>
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d009      	beq.n	8002fc0 <RCCEx_PLLSAI2_Config+0x60>
 8002fac:	e020      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fae:	4b62      	ldr	r3, [pc, #392]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11d      	bne.n	8002ff6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e01a      	b.n	8002ff6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd0:	e013      	b.n	8002ffa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd2:	4b59      	ldr	r3, [pc, #356]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fde:	4b56      	ldr	r3, [pc, #344]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fee:	e006      	b.n	8002ffe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e004      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003006:	4b4c      	ldr	r3, [pc, #304]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4949      	ldr	r1, [pc, #292]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 8086 	bne.w	800312c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003020:	4b45      	ldr	r3, [pc, #276]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a44      	ldr	r2, [pc, #272]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe f908 	bl	8001240 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003034:	f7fe f904 	bl	8001240 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	73fb      	strb	r3, [r7, #15]
        break;
 8003046:	e005      	b.n	8003054 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ef      	bne.n	8003034 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003060:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	4b35      	ldr	r3, [pc, #212]	@ (800313c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003066:	4013      	ands	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6892      	ldr	r2, [r2, #8]
 800306c:	0211      	lsls	r1, r2, #8
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	06d2      	lsls	r2, r2, #27
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6852      	ldr	r2, [r2, #4]
 800307a:	3a01      	subs	r2, #1
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	430a      	orrs	r2, r1
 8003080:	492d      	ldr	r1, [pc, #180]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	614b      	str	r3, [r1, #20]
 8003086:	e02d      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d115      	bne.n	80030ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800308e:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	4b2b      	ldr	r3, [pc, #172]	@ (8003140 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	0211      	lsls	r1, r2, #8
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6912      	ldr	r2, [r2, #16]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0552      	lsls	r2, r2, #21
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6852      	ldr	r2, [r2, #4]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	430a      	orrs	r2, r1
 80030b2:	4921      	ldr	r1, [pc, #132]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	614b      	str	r3, [r1, #20]
 80030b8:	e014      	b.n	80030e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	4b21      	ldr	r3, [pc, #132]	@ (8003144 <RCCEx_PLLSAI2_Config+0x1e4>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6892      	ldr	r2, [r2, #8]
 80030c6:	0211      	lsls	r1, r2, #8
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6952      	ldr	r2, [r2, #20]
 80030cc:	0852      	lsrs	r2, r2, #1
 80030ce:	3a01      	subs	r2, #1
 80030d0:	0652      	lsls	r2, r2, #25
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6852      	ldr	r2, [r2, #4]
 80030d8:	3a01      	subs	r2, #1
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	430a      	orrs	r2, r1
 80030de:	4916      	ldr	r1, [pc, #88]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f8a6 	bl	8001240 <HAL_GetTick>
 80030f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f6:	e009      	b.n	800310c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f8:	f7fe f8a2 	bl	8001240 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d902      	bls.n	800310c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	73fb      	strb	r3, [r7, #15]
          break;
 800310a:	e005      	b.n	8003118 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ef      	beq.n	80030f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4904      	ldr	r1, [pc, #16]	@ (8003138 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	07ff800f 	.word	0x07ff800f
 8003140:	ff9f800f 	.word	0xff9f800f
 8003144:	f9ff800f 	.word	0xf9ff800f

08003148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e095      	b.n	8003286 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800316a:	d009      	beq.n	8003180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
 8003172:	e005      	b.n	8003180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fe94 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031c0:	d902      	bls.n	80031c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e002      	b.n	80031ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031d6:	d007      	beq.n	80031e8 <HAL_SPI_Init+0xa0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	ea42 0103 	orr.w	r1, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	f003 0204 	and.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003264:	ea42 0103 	orr.w	r1, r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b088      	sub	sp, #32
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800329e:	f7fd ffcf 	bl	8001240 <HAL_GetTick>
 80032a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	e15c      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_Transmit+0x36>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e154      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_SPI_Transmit+0x48>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e14d      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	d10f      	bne.n	800334a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003348:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b40      	cmp	r3, #64	@ 0x40
 8003356:	d007      	beq.n	8003368 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003370:	d952      	bls.n	8003418 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_SPI_Transmit+0xf2>
 800337a:	8b7b      	ldrh	r3, [r7, #26]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d145      	bne.n	800340c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033a4:	e032      	b.n	800340c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d112      	bne.n	80033da <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033d8:	e018      	b.n	800340c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033da:	f7fd ff31 	bl	8001240 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d803      	bhi.n	80033f2 <HAL_SPI_Transmit+0x164>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d102      	bne.n	80033f8 <HAL_SPI_Transmit+0x16a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0b2      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1c7      	bne.n	80033a6 <HAL_SPI_Transmit+0x118>
 8003416:	e083      	b.n	8003520 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_SPI_Transmit+0x198>
 8003420:	8b7b      	ldrh	r3, [r7, #26]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d177      	bne.n	8003516 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d912      	bls.n	8003456 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b02      	subs	r3, #2
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003454:	e05f      	b.n	8003516 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800347c:	e04b      	b.n	8003516 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d12b      	bne.n	80034e4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d912      	bls.n	80034bc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b02      	subs	r3, #2
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034ba:	e02c      	b.n	8003516 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e2:	e018      	b.n	8003516 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e4:	f7fd feac 	bl	8001240 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d803      	bhi.n	80034fc <HAL_SPI_Transmit+0x26e>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_Transmit+0x274>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e02d      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ae      	bne.n	800347e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fb65 	bl	8003bf4 <SPI_EndRxTxTransaction>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	@ 0x28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003588:	2301      	movs	r3, #1
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358c:	f7fd fe58 	bl	8001240 <HAL_GetTick>
 8003590:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003598:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00c      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x4e>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035b4:	d106      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x4a>
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d001      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
 80035c6:	e1f3      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_SPI_TransmitReceive+0x60>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive+0x60>
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1e8      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_TransmitReceive+0x72>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e1e1      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d003      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2205      	movs	r2, #5
 8003604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	887a      	ldrh	r2, [r7, #2]
 800362e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	887a      	ldrh	r2, [r7, #2]
 8003634:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800364a:	d802      	bhi.n	8003652 <HAL_SPI_TransmitReceive+0xd8>
 800364c:	8abb      	ldrh	r3, [r7, #20]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d908      	bls.n	8003664 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	e007      	b.n	8003674 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d007      	beq.n	8003692 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800369a:	f240 8083 	bls.w	80037a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x132>
 80036a6:	8afb      	ldrh	r3, [r7, #22]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d16f      	bne.n	800378c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d0:	e05c      	b.n	800378c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d11b      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x19e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x19e>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d113      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	881a      	ldrh	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d11c      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x1e6>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	b292      	uxth	r2, r2
 800373e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800375c:	2301      	movs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003760:	f7fd fd6e 	bl	8001240 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376c:	429a      	cmp	r2, r3
 800376e:	d80d      	bhi.n	800378c <HAL_SPI_TransmitReceive+0x212>
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d009      	beq.n	800378c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e111      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d19d      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x158>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d197      	bne.n	80036d2 <HAL_SPI_TransmitReceive+0x158>
 80037a2:	e0e5      	b.n	8003970 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x23a>
 80037ac:	8afb      	ldrh	r3, [r7, #22]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 80d1 	bne.w	8003956 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d912      	bls.n	80037e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b02      	subs	r3, #2
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e2:	e0b8      	b.n	8003956 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380a:	e0a4      	b.n	8003956 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d134      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x30a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02f      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x30a>
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	2b01      	cmp	r3, #1
 8003828:	d12c      	bne.n	8003884 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d912      	bls.n	800385a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	881a      	ldrh	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	1c9a      	adds	r2, r3, #2
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b02      	subs	r3, #2
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003858:	e012      	b.n	8003880 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d148      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x3aa>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d042      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d923      	bls.n	80038f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b02      	subs	r3, #2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d81f      	bhi.n	8003920 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	e016      	b.n	8003920 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f103 020c 	add.w	r2, r3, #12
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003920:	2301      	movs	r3, #1
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003924:	f7fd fc8c 	bl	8001240 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003930:	429a      	cmp	r2, r3
 8003932:	d803      	bhi.n	800393c <HAL_SPI_TransmitReceive+0x3c2>
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d102      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x3c8>
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e02c      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f af55 	bne.w	800380c <HAL_SPI_TransmitReceive+0x292>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	f47f af4e 	bne.w	800380c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f93d 	bl	8003bf4 <SPI_EndRxTxTransaction>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00e      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fd fc3a 	bl	8001240 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fd fc32 	bl	8001240 <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fd fc22 	bl	8001240 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20040000 	.word	0x20040000

08003ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ada:	f7fd fbb1 	bl	8001240 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003aea:	f7fd fba9 	bl	8001240 <HAL_GetTick>
 8003aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003af8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00da      	lsls	r2, r3, #3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0d1b      	lsrs	r3, r3, #20
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b10:	e060      	b.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b18:	d107      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d050      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b32:	f7fd fb85 	bl	8001240 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13d      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b60:	d111      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6a:	d004      	beq.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b74:	d107      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8e:	d10f      	bne.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d196      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3728      	adds	r7, #40	@ 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20040000 	.word	0x20040000

08003bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff5b 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e027      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fec0 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e014      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff ff34 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e000      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e042      	b.n	8003d18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fd f951 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2224      	movs	r2, #36	@ 0x24
 8003cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fc7c 	bl	80045c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f97d 	bl	8003fd0 <UART_SetConfig>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01b      	b.n	8003d18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fcfb 	bl	800470c <UART_CheckIdleState>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d17b      	bne.n	8003e32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Transmit+0x26>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e074      	b.n	8003e34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2221      	movs	r2, #33	@ 0x21
 8003d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fa71 	bl	8001240 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d78:	d108      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e003      	b.n	8003d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d94:	e030      	b.n	8003df8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fd5d 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03d      	b.n	8003e34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e007      	b.n	8003de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1c8      	bne.n	8003d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2140      	movs	r1, #64	@ 0x40
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fd26 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e006      	b.n	8003e34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	@ 0x28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	f040 80b6 	bne.w	8003fc4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Receive+0x28>
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0ae      	b.n	8003fc6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2222      	movs	r2, #34	@ 0x22
 8003e74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd f9df 	bl	8001240 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9c:	d10e      	bne.n	8003ebc <HAL_UART_Receive+0x80>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_Receive+0x76>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003eac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003eb0:	e02d      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	22ff      	movs	r2, #255	@ 0xff
 8003eb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003eba:	e028      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_UART_Receive+0xa4>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <HAL_UART_Receive+0x9a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	22ff      	movs	r2, #255	@ 0xff
 8003ed0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ed4:	e01b      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	227f      	movs	r2, #127	@ 0x7f
 8003eda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ede:	e016      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ee8:	d10d      	bne.n	8003f06 <HAL_UART_Receive+0xca>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Receive+0xc0>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	227f      	movs	r2, #127	@ 0x7f
 8003ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003efa:	e008      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	223f      	movs	r2, #63	@ 0x3f
 8003f00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f04:	e003      	b.n	8003f0e <HAL_UART_Receive+0xd2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f14:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d108      	bne.n	8003f32 <HAL_UART_Receive+0xf6>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e003      	b.n	8003f3a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f3a:	e037      	b.n	8003fac <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2200      	movs	r2, #0
 8003f44:	2120      	movs	r1, #32
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fc8a 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e033      	b.n	8003fc6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10c      	bne.n	8003f7e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	8a7b      	ldrh	r3, [r7, #18]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e00d      	b.n	8003f9a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1c1      	bne.n	8003f3c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b08c      	sub	sp, #48	@ 0x30
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4baa      	ldr	r3, [pc, #680]	@ (80042a8 <UART_SetConfig+0x2d8>)
 8004000:	4013      	ands	r3, r2
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004008:	430b      	orrs	r3, r1
 800400a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9f      	ldr	r2, [pc, #636]	@ (80042ac <UART_SetConfig+0x2dc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004038:	4313      	orrs	r3, r2
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004046:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	f023 010f 	bic.w	r1, r3, #15
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a90      	ldr	r2, [pc, #576]	@ (80042b0 <UART_SetConfig+0x2e0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d125      	bne.n	80040c0 <UART_SetConfig+0xf0>
 8004074:	4b8f      	ldr	r3, [pc, #572]	@ (80042b4 <UART_SetConfig+0x2e4>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b03      	cmp	r3, #3
 8004080:	d81a      	bhi.n	80040b8 <UART_SetConfig+0xe8>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <UART_SetConfig+0xb8>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	080040a9 	.word	0x080040a9
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040b1 	.word	0x080040b1
 8004098:	2301      	movs	r3, #1
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409e:	e116      	b.n	80042ce <UART_SetConfig+0x2fe>
 80040a0:	2302      	movs	r3, #2
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a6:	e112      	b.n	80042ce <UART_SetConfig+0x2fe>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ae:	e10e      	b.n	80042ce <UART_SetConfig+0x2fe>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040b6:	e10a      	b.n	80042ce <UART_SetConfig+0x2fe>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040be:	e106      	b.n	80042ce <UART_SetConfig+0x2fe>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7c      	ldr	r2, [pc, #496]	@ (80042b8 <UART_SetConfig+0x2e8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d138      	bne.n	800413c <UART_SetConfig+0x16c>
 80040ca:	4b7a      	ldr	r3, [pc, #488]	@ (80042b4 <UART_SetConfig+0x2e4>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	d82d      	bhi.n	8004134 <UART_SetConfig+0x164>
 80040d8:	a201      	add	r2, pc, #4	@ (adr r2, 80040e0 <UART_SetConfig+0x110>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004135 	.word	0x08004135
 80040e8:	08004135 	.word	0x08004135
 80040ec:	08004135 	.word	0x08004135
 80040f0:	08004125 	.word	0x08004125
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
 8004100:	0800411d 	.word	0x0800411d
 8004104:	08004135 	.word	0x08004135
 8004108:	08004135 	.word	0x08004135
 800410c:	08004135 	.word	0x08004135
 8004110:	0800412d 	.word	0x0800412d
 8004114:	2300      	movs	r3, #0
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411a:	e0d8      	b.n	80042ce <UART_SetConfig+0x2fe>
 800411c:	2302      	movs	r3, #2
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004122:	e0d4      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004124:	2304      	movs	r3, #4
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412a:	e0d0      	b.n	80042ce <UART_SetConfig+0x2fe>
 800412c:	2308      	movs	r3, #8
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004132:	e0cc      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004134:	2310      	movs	r3, #16
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413a:	e0c8      	b.n	80042ce <UART_SetConfig+0x2fe>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5e      	ldr	r2, [pc, #376]	@ (80042bc <UART_SetConfig+0x2ec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d125      	bne.n	8004192 <UART_SetConfig+0x1c2>
 8004146:	4b5b      	ldr	r3, [pc, #364]	@ (80042b4 <UART_SetConfig+0x2e4>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004150:	2b30      	cmp	r3, #48	@ 0x30
 8004152:	d016      	beq.n	8004182 <UART_SetConfig+0x1b2>
 8004154:	2b30      	cmp	r3, #48	@ 0x30
 8004156:	d818      	bhi.n	800418a <UART_SetConfig+0x1ba>
 8004158:	2b20      	cmp	r3, #32
 800415a:	d00a      	beq.n	8004172 <UART_SetConfig+0x1a2>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d814      	bhi.n	800418a <UART_SetConfig+0x1ba>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <UART_SetConfig+0x19a>
 8004164:	2b10      	cmp	r3, #16
 8004166:	d008      	beq.n	800417a <UART_SetConfig+0x1aa>
 8004168:	e00f      	b.n	800418a <UART_SetConfig+0x1ba>
 800416a:	2300      	movs	r3, #0
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004170:	e0ad      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004172:	2302      	movs	r3, #2
 8004174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004178:	e0a9      	b.n	80042ce <UART_SetConfig+0x2fe>
 800417a:	2304      	movs	r3, #4
 800417c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004180:	e0a5      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004182:	2308      	movs	r3, #8
 8004184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004188:	e0a1      	b.n	80042ce <UART_SetConfig+0x2fe>
 800418a:	2310      	movs	r3, #16
 800418c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004190:	e09d      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4a      	ldr	r2, [pc, #296]	@ (80042c0 <UART_SetConfig+0x2f0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d125      	bne.n	80041e8 <UART_SetConfig+0x218>
 800419c:	4b45      	ldr	r3, [pc, #276]	@ (80042b4 <UART_SetConfig+0x2e4>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80041a8:	d016      	beq.n	80041d8 <UART_SetConfig+0x208>
 80041aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80041ac:	d818      	bhi.n	80041e0 <UART_SetConfig+0x210>
 80041ae:	2b80      	cmp	r3, #128	@ 0x80
 80041b0:	d00a      	beq.n	80041c8 <UART_SetConfig+0x1f8>
 80041b2:	2b80      	cmp	r3, #128	@ 0x80
 80041b4:	d814      	bhi.n	80041e0 <UART_SetConfig+0x210>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <UART_SetConfig+0x1f0>
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d008      	beq.n	80041d0 <UART_SetConfig+0x200>
 80041be:	e00f      	b.n	80041e0 <UART_SetConfig+0x210>
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c6:	e082      	b.n	80042ce <UART_SetConfig+0x2fe>
 80041c8:	2302      	movs	r3, #2
 80041ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ce:	e07e      	b.n	80042ce <UART_SetConfig+0x2fe>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d6:	e07a      	b.n	80042ce <UART_SetConfig+0x2fe>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041de:	e076      	b.n	80042ce <UART_SetConfig+0x2fe>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e6:	e072      	b.n	80042ce <UART_SetConfig+0x2fe>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a35      	ldr	r2, [pc, #212]	@ (80042c4 <UART_SetConfig+0x2f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d12a      	bne.n	8004248 <UART_SetConfig+0x278>
 80041f2:	4b30      	ldr	r3, [pc, #192]	@ (80042b4 <UART_SetConfig+0x2e4>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004200:	d01a      	beq.n	8004238 <UART_SetConfig+0x268>
 8004202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004206:	d81b      	bhi.n	8004240 <UART_SetConfig+0x270>
 8004208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420c:	d00c      	beq.n	8004228 <UART_SetConfig+0x258>
 800420e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004212:	d815      	bhi.n	8004240 <UART_SetConfig+0x270>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <UART_SetConfig+0x250>
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d008      	beq.n	8004230 <UART_SetConfig+0x260>
 800421e:	e00f      	b.n	8004240 <UART_SetConfig+0x270>
 8004220:	2300      	movs	r3, #0
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004226:	e052      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004228:	2302      	movs	r3, #2
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800422e:	e04e      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004230:	2304      	movs	r3, #4
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004236:	e04a      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004238:	2308      	movs	r3, #8
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800423e:	e046      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004240:	2310      	movs	r3, #16
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004246:	e042      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <UART_SetConfig+0x2dc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d13a      	bne.n	80042c8 <UART_SetConfig+0x2f8>
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <UART_SetConfig+0x2e4>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800425c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004260:	d01a      	beq.n	8004298 <UART_SetConfig+0x2c8>
 8004262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004266:	d81b      	bhi.n	80042a0 <UART_SetConfig+0x2d0>
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800426c:	d00c      	beq.n	8004288 <UART_SetConfig+0x2b8>
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004272:	d815      	bhi.n	80042a0 <UART_SetConfig+0x2d0>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <UART_SetConfig+0x2b0>
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427c:	d008      	beq.n	8004290 <UART_SetConfig+0x2c0>
 800427e:	e00f      	b.n	80042a0 <UART_SetConfig+0x2d0>
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e022      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e01e      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004296:	e01a      	b.n	80042ce <UART_SetConfig+0x2fe>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800429e:	e016      	b.n	80042ce <UART_SetConfig+0x2fe>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042a6:	e012      	b.n	80042ce <UART_SetConfig+0x2fe>
 80042a8:	cfff69f3 	.word	0xcfff69f3
 80042ac:	40008000 	.word	0x40008000
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40004400 	.word	0x40004400
 80042bc:	40004800 	.word	0x40004800
 80042c0:	40004c00 	.word	0x40004c00
 80042c4:	40005000 	.word	0x40005000
 80042c8:	2310      	movs	r3, #16
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4aae      	ldr	r2, [pc, #696]	@ (800458c <UART_SetConfig+0x5bc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f040 8097 	bne.w	8004408 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d823      	bhi.n	800432a <UART_SetConfig+0x35a>
 80042e2:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <UART_SetConfig+0x318>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	0800432b 	.word	0x0800432b
 80042f0:	08004315 	.word	0x08004315
 80042f4:	0800432b 	.word	0x0800432b
 80042f8:	0800431b 	.word	0x0800431b
 80042fc:	0800432b 	.word	0x0800432b
 8004300:	0800432b 	.word	0x0800432b
 8004304:	0800432b 	.word	0x0800432b
 8004308:	08004323 	.word	0x08004323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800430c:	f7fe f918 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8004310:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004312:	e010      	b.n	8004336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004314:	4b9e      	ldr	r3, [pc, #632]	@ (8004590 <UART_SetConfig+0x5c0>)
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004318:	e00d      	b.n	8004336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431a:	f7fe f879 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800431e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004320:	e009      	b.n	8004336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004328:	e005      	b.n	8004336 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8130 	beq.w	800459e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	4a94      	ldr	r2, [pc, #592]	@ (8004594 <UART_SetConfig+0x5c4>)
 8004344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004348:	461a      	mov	r2, r3
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004350:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	d305      	bcc.n	800436e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	429a      	cmp	r2, r3
 800436c:	d903      	bls.n	8004376 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004374:	e113      	b.n	800459e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2200      	movs	r2, #0
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	60fa      	str	r2, [r7, #12]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	4a84      	ldr	r2, [pc, #528]	@ (8004594 <UART_SetConfig+0x5c4>)
 8004384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004388:	b29b      	uxth	r3, r3
 800438a:	2200      	movs	r2, #0
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004398:	f7fb ff30 	bl	80001fc <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	020b      	lsls	r3, r1, #8
 80043ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043b2:	0202      	lsls	r2, r0, #8
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	6849      	ldr	r1, [r1, #4]
 80043b8:	0849      	lsrs	r1, r1, #1
 80043ba:	2000      	movs	r0, #0
 80043bc:	460c      	mov	r4, r1
 80043be:	4605      	mov	r5, r0
 80043c0:	eb12 0804 	adds.w	r8, r2, r4
 80043c4:	eb43 0905 	adc.w	r9, r3, r5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	469a      	mov	sl, r3
 80043d0:	4693      	mov	fp, r2
 80043d2:	4652      	mov	r2, sl
 80043d4:	465b      	mov	r3, fp
 80043d6:	4640      	mov	r0, r8
 80043d8:	4649      	mov	r1, r9
 80043da:	f7fb ff0f 	bl	80001fc <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4613      	mov	r3, r2
 80043e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ec:	d308      	bcc.n	8004400 <UART_SetConfig+0x430>
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f4:	d204      	bcs.n	8004400 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	e0ce      	b.n	800459e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004406:	e0ca      	b.n	800459e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004410:	d166      	bne.n	80044e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004412:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004416:	2b08      	cmp	r3, #8
 8004418:	d827      	bhi.n	800446a <UART_SetConfig+0x49a>
 800441a:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <UART_SetConfig+0x450>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	0800446b 	.word	0x0800446b
 8004430:	0800445b 	.word	0x0800445b
 8004434:	0800446b 	.word	0x0800446b
 8004438:	0800446b 	.word	0x0800446b
 800443c:	0800446b 	.word	0x0800446b
 8004440:	08004463 	.word	0x08004463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe f87c 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8004448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800444a:	e014      	b.n	8004476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7fe f88e 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004452:	e010      	b.n	8004476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004454:	4b4e      	ldr	r3, [pc, #312]	@ (8004590 <UART_SetConfig+0x5c0>)
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004458:	e00d      	b.n	8004476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7fd ffd9 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800445e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004460:	e009      	b.n	8004476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004468:	e005      	b.n	8004476 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8090 	beq.w	800459e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	4a44      	ldr	r2, [pc, #272]	@ (8004594 <UART_SetConfig+0x5c4>)
 8004484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004488:	461a      	mov	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004490:	005a      	lsls	r2, r3, #1
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	441a      	add	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d916      	bls.n	80044d8 <UART_SetConfig+0x508>
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b0:	d212      	bcs.n	80044d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f023 030f 	bic.w	r3, r3, #15
 80044ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	8bfb      	ldrh	r3, [r7, #30]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	8bfa      	ldrh	r2, [r7, #30]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e062      	b.n	800459e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044de:	e05e      	b.n	800459e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d828      	bhi.n	800453a <UART_SetConfig+0x56a>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <UART_SetConfig+0x520>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004525 	.word	0x08004525
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800453b 	.word	0x0800453b
 8004508:	0800453b 	.word	0x0800453b
 800450c:	0800453b 	.word	0x0800453b
 8004510:	08004533 	.word	0x08004533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe f814 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8004518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800451a:	e014      	b.n	8004546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800451c:	f7fe f826 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004522:	e010      	b.n	8004546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004524:	4b1a      	ldr	r3, [pc, #104]	@ (8004590 <UART_SetConfig+0x5c0>)
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004528:	e00d      	b.n	8004546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7fd ff71 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800452e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004530:	e009      	b.n	8004546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004538:	e005      	b.n	8004546 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004544:	bf00      	nop
    }

    if (pclk != 0U)
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d028      	beq.n	800459e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	4a10      	ldr	r2, [pc, #64]	@ (8004594 <UART_SetConfig+0x5c4>)
 8004552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004556:	461a      	mov	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	fbb3 f2f2 	udiv	r2, r3, r2
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	441a      	add	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d910      	bls.n	8004598 <UART_SetConfig+0x5c8>
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d20c      	bcs.n	8004598 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	b29a      	uxth	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e009      	b.n	800459e <UART_SetConfig+0x5ce>
 800458a:	bf00      	nop
 800458c:	40008000 	.word	0x40008000
 8004590:	00f42400 	.word	0x00f42400
 8004594:	080057fc 	.word	0x080057fc
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80045ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3730      	adds	r7, #48	@ 0x30
 80045c2:	46bd      	mov	sp, r7
 80045c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01a      	beq.n	80046de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c6:	d10a      	bne.n	80046de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b098      	sub	sp, #96	@ 0x60
 8004710:	af02      	add	r7, sp, #8
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800471c:	f7fc fd90 	bl	8001240 <HAL_GetTick>
 8004720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b08      	cmp	r3, #8
 800472e:	d12f      	bne.n	8004790 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004738:	2200      	movs	r2, #0
 800473a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f88e 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d022      	beq.n	8004790 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800476e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e063      	b.n	8004858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d149      	bne.n	8004832 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800479e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f857 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d03c      	beq.n	8004832 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	623b      	str	r3, [r7, #32]
   return(result);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e6      	bne.n	80047b8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800480a:	61fa      	str	r2, [r7, #28]
 800480c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	69b9      	ldr	r1, [r7, #24]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	617b      	str	r3, [r7, #20]
   return(result);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e5      	bne.n	80047ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e012      	b.n	8004858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3758      	adds	r7, #88	@ 0x58
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004870:	e04f      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d04b      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fc fce1 	bl	8001240 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <UART_WaitOnFlagUntilTimeout+0x30>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e04e      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d037      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b80      	cmp	r3, #128	@ 0x80
 80048a6:	d034      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b40      	cmp	r3, #64	@ 0x40
 80048ac:	d031      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d110      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2208      	movs	r2, #8
 80048c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f838 	bl	800493a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2208      	movs	r2, #8
 80048ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e029      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d111      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f81e 	bl	800493a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d0a0      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800493a:	b480      	push	{r7}
 800493c:	b095      	sub	sp, #84	@ 0x54
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004960:	643b      	str	r3, [r7, #64]	@ 0x40
 8004962:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004966:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e6      	bne.n	8004942 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	61fb      	str	r3, [r7, #28]
   return(result);
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800499a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800499e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e3      	bne.n	8004974 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d118      	bne.n	80049e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 0310 	bic.w	r3, r3, #16
 80049c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6979      	ldr	r1, [r7, #20]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	613b      	str	r3, [r7, #16]
   return(result);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e6      	bne.n	80049b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049fa:	bf00      	nop
 80049fc:	3754      	adds	r7, #84	@ 0x54
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_UARTEx_DisableFifoMode+0x16>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e027      	b.n	8004a6c <HAL_UARTEx_DisableFifoMode+0x66>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	@ 0x24
 8004a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e02d      	b.n	8004aec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	@ 0x24
 8004a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f84f 	bl	8004b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e02d      	b.n	8004b68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	@ 0x24
 8004b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f811 	bl	8004b70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b90:	e031      	b.n	8004bf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b92:	2308      	movs	r3, #8
 8004b94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b96:	2308      	movs	r3, #8
 8004b98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	0e5b      	lsrs	r3, r3, #25
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	0f5b      	lsrs	r3, r3, #29
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bba:	7bbb      	ldrb	r3, [r7, #14]
 8004bbc:	7b3a      	ldrb	r2, [r7, #12]
 8004bbe:	4911      	ldr	r1, [pc, #68]	@ (8004c04 <UARTEx_SetNbDataToProcess+0x94>)
 8004bc0:	5c8a      	ldrb	r2, [r1, r2]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bc6:	7b3a      	ldrb	r2, [r7, #12]
 8004bc8:	490f      	ldr	r1, [pc, #60]	@ (8004c08 <UARTEx_SetNbDataToProcess+0x98>)
 8004bca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	7b7a      	ldrb	r2, [r7, #13]
 8004bdc:	4909      	ldr	r1, [pc, #36]	@ (8004c04 <UARTEx_SetNbDataToProcess+0x94>)
 8004bde:	5c8a      	ldrb	r2, [r1, r2]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004be4:	7b7a      	ldrb	r2, [r7, #13]
 8004be6:	4908      	ldr	r1, [pc, #32]	@ (8004c08 <UARTEx_SetNbDataToProcess+0x98>)
 8004be8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	08005814 	.word	0x08005814
 8004c08:	0800581c 	.word	0x0800581c

08004c0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c10:	4904      	ldr	r1, [pc, #16]	@ (8004c24 <MX_FATFS_Init+0x18>)
 8004c12:	4805      	ldr	r0, [pc, #20]	@ (8004c28 <MX_FATFS_Init+0x1c>)
 8004c14:	f000 fd86 	bl	8005724 <FATFS_LinkDriver>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <MX_FATFS_Init+0x20>)
 8004c1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20058874 	.word	0x20058874
 8004c28:	2004000c 	.word	0x2004000c
 8004c2c:	20058870 	.word	0x20058870

08004c30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f9d1 	bl	8004fe4 <USER_SPI_initialize>
 8004c42:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 faaf 	bl	80051bc <USER_SPI_status>
 8004c5e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004c78:	7bf8      	ldrb	r0, [r7, #15]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	f000 fab2 	bl	80051e8 <USER_SPI_read>
 8004c84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004c9e:	7bf8      	ldrb	r0, [r7, #15]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	f000 fb05 	bl	80052b4 <USER_SPI_write>
 8004caa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	603a      	str	r2, [r7, #0]
 8004cbe:	71fb      	strb	r3, [r7, #7]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004cc4:	79b9      	ldrb	r1, [r7, #6]
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fb6e 	bl	80053ac <USER_SPI_ioctl>
 8004cd0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004ce4:	f7fc faac 	bl	8001240 <HAL_GetTick>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4a04      	ldr	r2, [pc, #16]	@ (8004cfc <SPI_Timer_On+0x20>)
 8004cec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004cee:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <SPI_Timer_On+0x24>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6013      	str	r3, [r2, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	2005887c 	.word	0x2005887c
 8004d00:	20058880 	.word	0x20058880

08004d04 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004d08:	f7fc fa9a 	bl	8001240 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <SPI_Timer_Status+0x24>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1ad2      	subs	r2, r2, r3
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <SPI_Timer_Status+0x28>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf34      	ite	cc
 8004d1c:	2301      	movcc	r3, #1
 8004d1e:	2300      	movcs	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2005887c 	.word	0x2005887c
 8004d2c:	20058880 	.word	0x20058880

08004d30 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004d3a:	f107 020f 	add.w	r2, r7, #15
 8004d3e:	1df9      	adds	r1, r7, #7
 8004d40:	2332      	movs	r3, #50	@ 0x32
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2301      	movs	r3, #1
 8004d46:	4804      	ldr	r0, [pc, #16]	@ (8004d58 <xchg_spi+0x28>)
 8004d48:	f7fe fc17 	bl	800357a <HAL_SPI_TransmitReceive>
    return rxDat;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200586e0 	.word	0x200586e0

08004d5c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e00a      	b.n	8004d82 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	18d4      	adds	r4, r2, r3
 8004d72:	20ff      	movs	r0, #255	@ 0xff
 8004d74:	f7ff ffdc 	bl	8004d30 <xchg_spi>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d3f0      	bcc.n	8004d6c <rcvr_spi_multi+0x10>
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}

08004d94 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4803      	ldr	r0, [pc, #12]	@ (8004db8 <xmit_spi_multi+0x24>)
 8004daa:	f7fe fa70 	bl	800328e <HAL_SPI_Transmit>
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200586e0 	.word	0x200586e0

08004dbc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004dc4:	f7fc fa3c 	bl	8001240 <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004dce:	20ff      	movs	r0, #255	@ 0xff
 8004dd0:	f7ff ffae 	bl	8004d30 <xchg_spi>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2bff      	cmp	r3, #255	@ 0xff
 8004ddc:	d007      	beq.n	8004dee <wait_ready+0x32>
 8004dde:	f7fc fa2f 	bl	8001240 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d8ef      	bhi.n	8004dce <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2bff      	cmp	r3, #255	@ 0xff
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004e06:	2201      	movs	r2, #1
 8004e08:	2110      	movs	r1, #16
 8004e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e0e:	f7fc fcbf 	bl	8001790 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004e12:	20ff      	movs	r0, #255	@ 0xff
 8004e14:	f7ff ff8c 	bl	8004d30 <xchg_spi>

}
 8004e18:	bf00      	nop
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004e20:	2200      	movs	r2, #0
 8004e22:	2110      	movs	r1, #16
 8004e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e28:	f7fc fcb2 	bl	8001790 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004e2c:	20ff      	movs	r0, #255	@ 0xff
 8004e2e:	f7ff ff7f 	bl	8004d30 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e36:	f7ff ffc1 	bl	8004dbc <wait_ready>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <spiselect+0x28>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e002      	b.n	8004e4a <spiselect+0x2e>

	despiselect();
 8004e44:	f7ff ffdd 	bl	8004e02 <despiselect>
	return 0;	/* Timeout */
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004e58:	20c8      	movs	r0, #200	@ 0xc8
 8004e5a:	f7ff ff3f 	bl	8004cdc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004e5e:	20ff      	movs	r0, #255	@ 0xff
 8004e60:	f7ff ff66 	bl	8004d30 <xchg_spi>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2bff      	cmp	r3, #255	@ 0xff
 8004e6c:	d104      	bne.n	8004e78 <rcvr_datablock+0x2a>
 8004e6e:	f7ff ff49 	bl	8004d04 <SPI_Timer_Status>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f2      	bne.n	8004e5e <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004e7c:	d001      	beq.n	8004e82 <rcvr_datablock+0x34>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e00a      	b.n	8004e98 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff69 	bl	8004d5c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004e8a:	20ff      	movs	r0, #255	@ 0xff
 8004e8c:	f7ff ff50 	bl	8004d30 <xchg_spi>
 8004e90:	20ff      	movs	r0, #255	@ 0xff
 8004e92:	f7ff ff4d 	bl	8004d30 <xchg_spi>

	return 1;						/* Function succeeded */
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004eb0:	f7ff ff84 	bl	8004dbc <wait_ready>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <xmit_datablock+0x1e>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e01e      	b.n	8004efc <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff35 	bl	8004d30 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	2bfd      	cmp	r3, #253	@ 0xfd
 8004eca:	d016      	beq.n	8004efa <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff5f 	bl	8004d94 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004ed6:	20ff      	movs	r0, #255	@ 0xff
 8004ed8:	f7ff ff2a 	bl	8004d30 <xchg_spi>
 8004edc:	20ff      	movs	r0, #255	@ 0xff
 8004ede:	f7ff ff27 	bl	8004d30 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004ee2:	20ff      	movs	r0, #255	@ 0xff
 8004ee4:	f7ff ff24 	bl	8004d30 <xchg_spi>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d001      	beq.n	8004efa <xmit_datablock+0x5a>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e000      	b.n	8004efc <xmit_datablock+0x5c>
	}
	return 1;
 8004efa:	2301      	movs	r3, #1
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da0e      	bge.n	8004f36 <send_cmd+0x32>
		cmd &= 0x7F;
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f1e:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004f20:	2100      	movs	r1, #0
 8004f22:	2037      	movs	r0, #55	@ 0x37
 8004f24:	f7ff ffee 	bl	8004f04 <send_cmd>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d901      	bls.n	8004f36 <send_cmd+0x32>
 8004f32:	7bbb      	ldrb	r3, [r7, #14]
 8004f34:	e051      	b.n	8004fda <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	d008      	beq.n	8004f4e <send_cmd+0x4a>
		despiselect();
 8004f3c:	f7ff ff61 	bl	8004e02 <despiselect>
		if (!spiselect()) return 0xFF;
 8004f40:	f7ff ff6c 	bl	8004e1c <spiselect>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <send_cmd+0x4a>
 8004f4a:	23ff      	movs	r3, #255	@ 0xff
 8004f4c:	e045      	b.n	8004fda <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff feea 	bl	8004d30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fee4 	bl	8004d30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fede 	bl	8004d30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fed8 	bl	8004d30 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff fed3 	bl	8004d30 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <send_cmd+0x94>
 8004f94:	2395      	movs	r3, #149	@ 0x95
 8004f96:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d101      	bne.n	8004fa2 <send_cmd+0x9e>
 8004f9e:	2387      	movs	r3, #135	@ 0x87
 8004fa0:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fec3 	bl	8004d30 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d102      	bne.n	8004fb6 <send_cmd+0xb2>
 8004fb0:	20ff      	movs	r0, #255	@ 0xff
 8004fb2:	f7ff febd 	bl	8004d30 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004fba:	20ff      	movs	r0, #255	@ 0xff
 8004fbc:	f7ff feb8 	bl	8004d30 <xchg_spi>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	da05      	bge.n	8004fd8 <send_cmd+0xd4>
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <send_cmd+0xb6>

	return res;							/* Return received response */
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <USER_SPI_initialize+0x14>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0d6      	b.n	80051a6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <USER_SPI_initialize+0x2a>
 8005006:	4b6a      	ldr	r3, [pc, #424]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e0cb      	b.n	80051a6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800500e:	4b69      	ldr	r3, [pc, #420]	@ (80051b4 <USER_SPI_initialize+0x1d0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005018:	4b66      	ldr	r3, [pc, #408]	@ (80051b4 <USER_SPI_initialize+0x1d0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8005020:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005022:	230a      	movs	r3, #10
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e005      	b.n	8005034 <USER_SPI_initialize+0x50>
 8005028:	20ff      	movs	r0, #255	@ 0xff
 800502a:	f7ff fe81 	bl	8004d30 <xchg_spi>
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	3b01      	subs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f6      	bne.n	8005028 <USER_SPI_initialize+0x44>

	ty = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800503e:	2100      	movs	r1, #0
 8005040:	2000      	movs	r0, #0
 8005042:	f7ff ff5f 	bl	8004f04 <send_cmd>
 8005046:	4603      	mov	r3, r0
 8005048:	2b01      	cmp	r3, #1
 800504a:	f040 808b 	bne.w	8005164 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800504e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005052:	f7ff fe43 	bl	8004cdc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005056:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800505a:	2008      	movs	r0, #8
 800505c:	f7ff ff52 	bl	8004f04 <send_cmd>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d151      	bne.n	800510a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	e00d      	b.n	8005088 <USER_SPI_initialize+0xa4>
 800506c:	7bfc      	ldrb	r4, [r7, #15]
 800506e:	20ff      	movs	r0, #255	@ 0xff
 8005070:	f7ff fe5e 	bl	8004d30 <xchg_spi>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	f104 0310 	add.w	r3, r4, #16
 800507c:	443b      	add	r3, r7
 800507e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	3301      	adds	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d9ee      	bls.n	800506c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800508e:	7abb      	ldrb	r3, [r7, #10]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d167      	bne.n	8005164 <USER_SPI_initialize+0x180>
 8005094:	7afb      	ldrb	r3, [r7, #11]
 8005096:	2baa      	cmp	r3, #170	@ 0xaa
 8005098:	d164      	bne.n	8005164 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800509a:	bf00      	nop
 800509c:	f7ff fe32 	bl	8004d04 <SPI_Timer_Status>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <USER_SPI_initialize+0xd2>
 80050a6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80050aa:	20a9      	movs	r0, #169	@ 0xa9
 80050ac:	f7ff ff2a 	bl	8004f04 <send_cmd>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f2      	bne.n	800509c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80050b6:	f7ff fe25 	bl	8004d04 <SPI_Timer_Status>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d051      	beq.n	8005164 <USER_SPI_initialize+0x180>
 80050c0:	2100      	movs	r1, #0
 80050c2:	203a      	movs	r0, #58	@ 0x3a
 80050c4:	f7ff ff1e 	bl	8004f04 <send_cmd>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d14a      	bne.n	8005164 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
 80050d2:	e00d      	b.n	80050f0 <USER_SPI_initialize+0x10c>
 80050d4:	7bfc      	ldrb	r4, [r7, #15]
 80050d6:	20ff      	movs	r0, #255	@ 0xff
 80050d8:	f7ff fe2a 	bl	8004d30 <xchg_spi>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	f104 0310 	add.w	r3, r4, #16
 80050e4:	443b      	add	r3, r7
 80050e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3301      	adds	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d9ee      	bls.n	80050d4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80050f6:	7a3b      	ldrb	r3, [r7, #8]
 80050f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USER_SPI_initialize+0x120>
 8005100:	230c      	movs	r3, #12
 8005102:	e000      	b.n	8005106 <USER_SPI_initialize+0x122>
 8005104:	2304      	movs	r3, #4
 8005106:	737b      	strb	r3, [r7, #13]
 8005108:	e02c      	b.n	8005164 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800510a:	2100      	movs	r1, #0
 800510c:	20a9      	movs	r0, #169	@ 0xa9
 800510e:	f7ff fef9 	bl	8004f04 <send_cmd>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d804      	bhi.n	8005122 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005118:	2302      	movs	r3, #2
 800511a:	737b      	strb	r3, [r7, #13]
 800511c:	23a9      	movs	r3, #169	@ 0xa9
 800511e:	73bb      	strb	r3, [r7, #14]
 8005120:	e003      	b.n	800512a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005122:	2301      	movs	r3, #1
 8005124:	737b      	strb	r3, [r7, #13]
 8005126:	2301      	movs	r3, #1
 8005128:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800512a:	bf00      	nop
 800512c:	f7ff fdea 	bl	8004d04 <SPI_Timer_Status>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <USER_SPI_initialize+0x162>
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fee2 	bl	8004f04 <send_cmd>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f2      	bne.n	800512c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005146:	f7ff fddd 	bl	8004d04 <SPI_Timer_Status>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <USER_SPI_initialize+0x17c>
 8005150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005154:	2010      	movs	r0, #16
 8005156:	f7ff fed5 	bl	8004f04 <send_cmd>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <USER_SPI_initialize+0x180>
				ty = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005164:	4a14      	ldr	r2, [pc, #80]	@ (80051b8 <USER_SPI_initialize+0x1d4>)
 8005166:	7b7b      	ldrb	r3, [r7, #13]
 8005168:	7013      	strb	r3, [r2, #0]
	despiselect();
 800516a:	f7ff fe4a 	bl	8004e02 <despiselect>

	if (ty) {			/* OK */
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d012      	beq.n	800519a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005174:	4b0f      	ldr	r3, [pc, #60]	@ (80051b4 <USER_SPI_initialize+0x1d0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <USER_SPI_initialize+0x1d0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0210 	orr.w	r2, r2, #16
 8005186:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005188:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e002      	b.n	80051a0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80051a0:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <USER_SPI_initialize+0x1cc>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20040020 	.word	0x20040020
 80051b4:	200586e0 	.word	0x200586e0
 80051b8:	20058878 	.word	0x20058878

080051bc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <USER_SPI_status+0x14>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e002      	b.n	80051d6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80051d0:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <USER_SPI_status+0x28>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20040020 	.word	0x20040020

080051e8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <USER_SPI_read+0x1c>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <USER_SPI_read+0x20>
 8005204:	2304      	movs	r3, #4
 8005206:	e04d      	b.n	80052a4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005208:	4b28      	ldr	r3, [pc, #160]	@ (80052ac <USER_SPI_read+0xc4>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <USER_SPI_read+0x32>
 8005216:	2303      	movs	r3, #3
 8005218:	e044      	b.n	80052a4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800521a:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <USER_SPI_read+0xc8>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <USER_SPI_read+0x44>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	025b      	lsls	r3, r3, #9
 800522a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d111      	bne.n	8005256 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	2011      	movs	r0, #17
 8005236:	f7ff fe65 	bl	8004f04 <send_cmd>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d129      	bne.n	8005294 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005240:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005244:	68b8      	ldr	r0, [r7, #8]
 8005246:	f7ff fe02 	bl	8004e4e <rcvr_datablock>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d021      	beq.n	8005294 <USER_SPI_read+0xac>
			count = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	e01e      	b.n	8005294 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	2012      	movs	r0, #18
 800525a:	f7ff fe53 	bl	8004f04 <send_cmd>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d117      	bne.n	8005294 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005264:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005268:	68b8      	ldr	r0, [r7, #8]
 800526a:	f7ff fdf0 	bl	8004e4e <rcvr_datablock>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <USER_SPI_read+0xa2>
				buff += 512;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800527a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	3b01      	subs	r3, #1
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ed      	bne.n	8005264 <USER_SPI_read+0x7c>
 8005288:	e000      	b.n	800528c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800528a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800528c:	2100      	movs	r1, #0
 800528e:	200c      	movs	r0, #12
 8005290:	f7ff fe38 	bl	8004f04 <send_cmd>
		}
	}
	despiselect();
 8005294:	f7ff fdb5 	bl	8004e02 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20040020 	.word	0x20040020
 80052b0:	20058878 	.word	0x20058878

080052b4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <USER_SPI_write+0x1c>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <USER_SPI_write+0x20>
 80052d0:	2304      	movs	r3, #4
 80052d2:	e063      	b.n	800539c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80052d4:	4b33      	ldr	r3, [pc, #204]	@ (80053a4 <USER_SPI_write+0xf0>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <USER_SPI_write+0x32>
 80052e2:	2303      	movs	r3, #3
 80052e4:	e05a      	b.n	800539c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80052e6:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <USER_SPI_write+0xf0>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <USER_SPI_write+0x44>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e051      	b.n	800539c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80052f8:	4b2b      	ldr	r3, [pc, #172]	@ (80053a8 <USER_SPI_write+0xf4>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <USER_SPI_write+0x56>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	025b      	lsls	r3, r3, #9
 8005308:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d110      	bne.n	8005332 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	2018      	movs	r0, #24
 8005314:	f7ff fdf6 	bl	8004f04 <send_cmd>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d136      	bne.n	800538c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800531e:	21fe      	movs	r1, #254	@ 0xfe
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f7ff fdbd 	bl	8004ea0 <xmit_datablock>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02f      	beq.n	800538c <USER_SPI_write+0xd8>
			count = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	e02c      	b.n	800538c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <USER_SPI_write+0xf4>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <USER_SPI_write+0x92>
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	2097      	movs	r0, #151	@ 0x97
 8005342:	f7ff fddf 	bl	8004f04 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	2019      	movs	r0, #25
 800534a:	f7ff fddb 	bl	8004f04 <send_cmd>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11b      	bne.n	800538c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005354:	21fc      	movs	r1, #252	@ 0xfc
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f7ff fda2 	bl	8004ea0 <xmit_datablock>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <USER_SPI_write+0xc4>
				buff += 512;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005368:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1ee      	bne.n	8005354 <USER_SPI_write+0xa0>
 8005376:	e000      	b.n	800537a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005378:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800537a:	21fd      	movs	r1, #253	@ 0xfd
 800537c:	2000      	movs	r0, #0
 800537e:	f7ff fd8f 	bl	8004ea0 <xmit_datablock>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <USER_SPI_write+0xd8>
 8005388:	2301      	movs	r3, #1
 800538a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800538c:	f7ff fd39 	bl	8004e02 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20040020 	.word	0x20040020
 80053a8:	20058878 	.word	0x20058878

080053ac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08c      	sub	sp, #48	@ 0x30
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	603a      	str	r2, [r7, #0]
 80053b6:	71fb      	strb	r3, [r7, #7]
 80053b8:	460b      	mov	r3, r1
 80053ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <USER_SPI_ioctl+0x1a>
 80053c2:	2304      	movs	r3, #4
 80053c4:	e15a      	b.n	800567c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80053c6:	4baf      	ldr	r3, [pc, #700]	@ (8005684 <USER_SPI_ioctl+0x2d8>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <USER_SPI_ioctl+0x2c>
 80053d4:	2303      	movs	r3, #3
 80053d6:	e151      	b.n	800567c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80053de:	79bb      	ldrb	r3, [r7, #6]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	f200 8136 	bhi.w	8005652 <USER_SPI_ioctl+0x2a6>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <USER_SPI_ioctl+0x40>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005415 	.word	0x08005415
 80053f4:	08005653 	.word	0x08005653
 80053f8:	080054c1 	.word	0x080054c1
 80053fc:	080055b7 	.word	0x080055b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005400:	f7ff fd0c 	bl	8004e1c <spiselect>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8127 	beq.w	800565a <USER_SPI_ioctl+0x2ae>
 800540c:	2300      	movs	r3, #0
 800540e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005412:	e122      	b.n	800565a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005414:	2100      	movs	r1, #0
 8005416:	2009      	movs	r0, #9
 8005418:	f7ff fd74 	bl	8004f04 <send_cmd>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 811d 	bne.w	800565e <USER_SPI_ioctl+0x2b2>
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	2110      	movs	r1, #16
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fd0f 	bl	8004e4e <rcvr_datablock>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8113 	beq.w	800565e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005438:	7b3b      	ldrb	r3, [r7, #12]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d111      	bne.n	8005466 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005442:	7d7b      	ldrb	r3, [r7, #21]
 8005444:	461a      	mov	r2, r3
 8005446:	7d3b      	ldrb	r3, [r7, #20]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	4413      	add	r3, r2
 800544c:	461a      	mov	r2, r3
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005456:	4413      	add	r3, r2
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	029a      	lsls	r2, r3, #10
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e028      	b.n	80054b8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005466:	7c7b      	ldrb	r3, [r7, #17]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	b2da      	uxtb	r2, r3
 800546e:	7dbb      	ldrb	r3, [r7, #22]
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4413      	add	r3, r2
 8005476:	b2da      	uxtb	r2, r3
 8005478:	7d7b      	ldrb	r3, [r7, #21]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4413      	add	r3, r2
 8005486:	b2db      	uxtb	r3, r3
 8005488:	3302      	adds	r3, #2
 800548a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800548e:	7d3b      	ldrb	r3, [r7, #20]
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	b2db      	uxtb	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	7cbb      	ldrb	r3, [r7, #18]
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054a4:	4413      	add	r3, r2
 80054a6:	3301      	adds	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80054aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054ae:	3b09      	subs	r3, #9
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	409a      	lsls	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80054be:	e0ce      	b.n	800565e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80054c0:	4b71      	ldr	r3, [pc, #452]	@ (8005688 <USER_SPI_ioctl+0x2dc>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d031      	beq.n	8005530 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80054cc:	2100      	movs	r1, #0
 80054ce:	208d      	movs	r0, #141	@ 0x8d
 80054d0:	f7ff fd18 	bl	8004f04 <send_cmd>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 80c3 	bne.w	8005662 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80054dc:	20ff      	movs	r0, #255	@ 0xff
 80054de:	f7ff fc27 	bl	8004d30 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80054e2:	f107 030c 	add.w	r3, r7, #12
 80054e6:	2110      	movs	r1, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fcb0 	bl	8004e4e <rcvr_datablock>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80b6 	beq.w	8005662 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80054f6:	2330      	movs	r3, #48	@ 0x30
 80054f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80054fc:	e007      	b.n	800550e <USER_SPI_ioctl+0x162>
 80054fe:	20ff      	movs	r0, #255	@ 0xff
 8005500:	f7ff fc16 	bl	8004d30 <xchg_spi>
 8005504:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005508:	3b01      	subs	r3, #1
 800550a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800550e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f3      	bne.n	80054fe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005516:	7dbb      	ldrb	r3, [r7, #22]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	2310      	movs	r3, #16
 8005520:	fa03 f202 	lsl.w	r2, r3, r2
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800552e:	e098      	b.n	8005662 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005530:	2100      	movs	r1, #0
 8005532:	2009      	movs	r0, #9
 8005534:	f7ff fce6 	bl	8004f04 <send_cmd>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 8091 	bne.w	8005662 <USER_SPI_ioctl+0x2b6>
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	2110      	movs	r1, #16
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fc81 	bl	8004e4e <rcvr_datablock>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8087 	beq.w	8005662 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005554:	4b4c      	ldr	r3, [pc, #304]	@ (8005688 <USER_SPI_ioctl+0x2dc>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005560:	7dbb      	ldrb	r3, [r7, #22]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005568:	7dfa      	ldrb	r2, [r7, #23]
 800556a:	09d2      	lsrs	r2, r2, #7
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	4413      	add	r3, r2
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	7e7b      	ldrb	r3, [r7, #25]
 8005574:	099b      	lsrs	r3, r3, #6
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	461a      	mov	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e013      	b.n	80055ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005586:	7dbb      	ldrb	r3, [r7, #22]
 8005588:	109b      	asrs	r3, r3, #2
 800558a:	b29b      	uxth	r3, r3
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	3301      	adds	r3, #1
 8005592:	7dfa      	ldrb	r2, [r7, #23]
 8005594:	00d2      	lsls	r2, r2, #3
 8005596:	f002 0218 	and.w	r2, r2, #24
 800559a:	7df9      	ldrb	r1, [r7, #23]
 800559c:	0949      	lsrs	r1, r1, #5
 800559e:	b2c9      	uxtb	r1, r1
 80055a0:	440a      	add	r2, r1
 80055a2:	3201      	adds	r2, #1
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80055b4:	e055      	b.n	8005662 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <USER_SPI_ioctl+0x2dc>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 0306 	and.w	r3, r3, #6
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d051      	beq.n	8005666 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80055c2:	f107 020c 	add.w	r2, r7, #12
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	210b      	movs	r1, #11
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff feee 	bl	80053ac <USER_SPI_ioctl>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d149      	bne.n	800566a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80055d6:	7b3b      	ldrb	r3, [r7, #12]
 80055d8:	099b      	lsrs	r3, r3, #6
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <USER_SPI_ioctl+0x23e>
 80055e0:	7dbb      	ldrb	r3, [r7, #22]
 80055e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d041      	beq.n	800566e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80055fa:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <USER_SPI_ioctl+0x2dc>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	025b      	lsls	r3, r3, #9
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	025b      	lsls	r3, r3, #9
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005614:	2020      	movs	r0, #32
 8005616:	f7ff fc75 	bl	8004f04 <send_cmd>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d128      	bne.n	8005672 <USER_SPI_ioctl+0x2c6>
 8005620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005622:	2021      	movs	r0, #33	@ 0x21
 8005624:	f7ff fc6e 	bl	8004f04 <send_cmd>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d121      	bne.n	8005672 <USER_SPI_ioctl+0x2c6>
 800562e:	2100      	movs	r1, #0
 8005630:	2026      	movs	r0, #38	@ 0x26
 8005632:	f7ff fc67 	bl	8004f04 <send_cmd>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11a      	bne.n	8005672 <USER_SPI_ioctl+0x2c6>
 800563c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005640:	f7ff fbbc 	bl	8004dbc <wait_ready>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800564a:	2300      	movs	r3, #0
 800564c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005650:	e00f      	b.n	8005672 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005652:	2304      	movs	r3, #4
 8005654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005658:	e00c      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		break;
 800565a:	bf00      	nop
 800565c:	e00a      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		break;
 800565e:	bf00      	nop
 8005660:	e008      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		break;
 8005662:	bf00      	nop
 8005664:	e006      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005666:	bf00      	nop
 8005668:	e004      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800566a:	bf00      	nop
 800566c:	e002      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <USER_SPI_ioctl+0x2c8>
		break;
 8005672:	bf00      	nop
	}

	despiselect();
 8005674:	f7ff fbc5 	bl	8004e02 <despiselect>

	return res;
 8005678:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800567c:	4618      	mov	r0, r3
 800567e:	3730      	adds	r7, #48	@ 0x30
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20040020 	.word	0x20040020
 8005688:	20058878 	.word	0x20058878

0800568c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800569a:	2301      	movs	r3, #1
 800569c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056a4:	7a5b      	ldrb	r3, [r3, #9]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d131      	bne.n	8005710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80056ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056ae:	7a5b      	ldrb	r3, [r3, #9]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056bc:	7a5b      	ldrb	r3, [r3, #9]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4a17      	ldr	r2, [pc, #92]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80056ca:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056cc:	7a5b      	ldrb	r3, [r3, #9]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056d4:	4413      	add	r3, r2
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056dc:	7a5b      	ldrb	r3, [r3, #9]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	b2d1      	uxtb	r1, r2
 80056e4:	4a0e      	ldr	r2, [pc, #56]	@ (8005720 <FATFS_LinkDriverEx+0x94>)
 80056e6:	7251      	strb	r1, [r2, #9]
 80056e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056ea:	7dbb      	ldrb	r3, [r7, #22]
 80056ec:	3330      	adds	r3, #48	@ 0x30
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3301      	adds	r3, #1
 80056f8:	223a      	movs	r2, #58	@ 0x3a
 80056fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3302      	adds	r3, #2
 8005700:	222f      	movs	r2, #47	@ 0x2f
 8005702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3303      	adds	r3, #3
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20058884 	.word	0x20058884

08005724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800572e:	2200      	movs	r2, #0
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffaa 	bl	800568c <FATFS_LinkDriverEx>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <memset>:
 8005742:	4402      	add	r2, r0
 8005744:	4603      	mov	r3, r0
 8005746:	4293      	cmp	r3, r2
 8005748:	d100      	bne.n	800574c <memset+0xa>
 800574a:	4770      	bx	lr
 800574c:	f803 1b01 	strb.w	r1, [r3], #1
 8005750:	e7f9      	b.n	8005746 <memset+0x4>
	...

08005754 <__libc_init_array>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4d0d      	ldr	r5, [pc, #52]	@ (800578c <__libc_init_array+0x38>)
 8005758:	4c0d      	ldr	r4, [pc, #52]	@ (8005790 <__libc_init_array+0x3c>)
 800575a:	1b64      	subs	r4, r4, r5
 800575c:	10a4      	asrs	r4, r4, #2
 800575e:	2600      	movs	r6, #0
 8005760:	42a6      	cmp	r6, r4
 8005762:	d109      	bne.n	8005778 <__libc_init_array+0x24>
 8005764:	4d0b      	ldr	r5, [pc, #44]	@ (8005794 <__libc_init_array+0x40>)
 8005766:	4c0c      	ldr	r4, [pc, #48]	@ (8005798 <__libc_init_array+0x44>)
 8005768:	f000 f818 	bl	800579c <_init>
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	2600      	movs	r6, #0
 8005772:	42a6      	cmp	r6, r4
 8005774:	d105      	bne.n	8005782 <__libc_init_array+0x2e>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	f855 3b04 	ldr.w	r3, [r5], #4
 800577c:	4798      	blx	r3
 800577e:	3601      	adds	r6, #1
 8005780:	e7ee      	b.n	8005760 <__libc_init_array+0xc>
 8005782:	f855 3b04 	ldr.w	r3, [r5], #4
 8005786:	4798      	blx	r3
 8005788:	3601      	adds	r6, #1
 800578a:	e7f2      	b.n	8005772 <__libc_init_array+0x1e>
 800578c:	0800582c 	.word	0x0800582c
 8005790:	0800582c 	.word	0x0800582c
 8005794:	0800582c 	.word	0x0800582c
 8005798:	08005830 	.word	0x08005830

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
