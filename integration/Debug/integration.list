
integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e60c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008ea2c  0800e7d0  0800e7d0  0000f7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0809d1fc  0809d1fc  0009f284  2**0
                  CONTENTS
  4 .ARM          00000008  0809d1fc  0809d1fc  0009e1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809d204  0809d204  0009f284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809d204  0809d204  0009e204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0809d208  0809d208  0009e208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20040000  0809d20c  0009f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20040284  0809d490  0009f284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040ad0  0809d490  0009fad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009f284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202c1  00000000  00000000  0009f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004778  00000000  00000000  000bf575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  000c3cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c2  00000000  00000000  000c57e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030928  00000000  00000000  000c6caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002449b  00000000  00000000  000f75d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f78b  00000000  00000000  0011ba6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023b1f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e0  00000000  00000000  0023b23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0024341c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040284 	.word	0x20040284
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e7b4 	.word	0x0800e7b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040288 	.word	0x20040288
 80001fc:	0800e7b4 	.word	0x0800e7b4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <camera_init>:

/*
 * PUBLIC CAMERA INTERFACE
 */

void camera_init(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	printf("Initializing Camera... ");
 8000f6c:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <camera_init+0x4c>)
 8000f6e:	f00b fae1 	bl	800c534 <iprintf>
	image_size = 0;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <camera_init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
	cur_image_idx = 0;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <camera_init+0x54>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]

	pic_index = 0;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <camera_init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]

	//  has to be mod 100 bcz file names have to be like 8 chars
	rand_seed = rand() % 100;
 8000f84:	f00a fd7e 	bl	800ba84 <rand>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <camera_init+0x5c>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1151      	asrs	r1, r2, #5
 8000f92:	17da      	asrs	r2, r3, #31
 8000f94:	1a8a      	subs	r2, r1, r2
 8000f96:	2164      	movs	r1, #100	@ 0x64
 8000f98:	fb01 f202 	mul.w	r2, r1, r2
 8000f9c:	1a9a      	subs	r2, r3, r2
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <camera_init+0x60>)
 8000fa2:	801a      	strh	r2, [r3, #0]
//	VC0706_SetResolution(CAMERA_RES);
//	HAL_Delay(1000);
//	VC0706_Reset();
//	HAL_Delay(2500);

	camera_ready = true;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <camera_init+0x64>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
	printf(" Successful!\n\r");
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <camera_init+0x68>)
 8000fac:	f00b fac2 	bl	800c534 <iprintf>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800e7d0 	.word	0x0800e7d0
 8000fb8:	200402a4 	.word	0x200402a4
 8000fbc:	200402a8 	.word	0x200402a8
 8000fc0:	200402ac 	.word	0x200402ac
 8000fc4:	51eb851f 	.word	0x51eb851f
 8000fc8:	200402ae 	.word	0x200402ae
 8000fcc:	200402a0 	.word	0x200402a0
 8000fd0:	0800e7e8 	.word	0x0800e7e8

08000fd4 <camera_take_photo>:

uint8_t camera_take_photo(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
	if (!camera_ready) {
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <camera_take_photo+0x9c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <camera_take_photo+0x18>
		return 0; // camera not ready, return failure
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e03c      	b.n	8001066 <camera_take_photo+0x92>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_StopCapture();
 8000fec:	f001 ff76 	bl	8002edc <VC0706_StopCapture>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]

	// Verify success and update state
	if (!success) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <camera_take_photo+0x2a>
		return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e033      	b.n	8001066 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	@ 0x64
 8001000:	f002 fb9e 	bl	8003740 <HAL_Delay>


	success = VC0706_TakePhoto();
 8001004:	f001 ff32 	bl	8002e6c <VC0706_TakePhoto>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]

	if (!success) {
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <camera_take_photo+0x42>
		return 0;
 8001012:	2300      	movs	r3, #0
 8001014:	e027      	b.n	8001066 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	@ 0x64
 8001018:	f002 fb92 	bl	8003740 <HAL_Delay>

	/*
	 * Read in the length of the image
	 */
	image_size = VC0706_ReadImageDataLength();
 800101c:	f001 ff94 	bl	8002f48 <VC0706_ReadImageDataLength>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <camera_take_photo+0xa0>)
 8001026:	601a      	str	r2, [r3, #0]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "%d%d.jpg", pic_index, rand_seed);
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <camera_take_photo+0xa4>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <camera_take_photo+0xa8>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	1d38      	adds	r0, r7, #4
 8001034:	4912      	ldr	r1, [pc, #72]	@ (8001080 <camera_take_photo+0xac>)
 8001036:	f00b fa8f 	bl	800c558 <siprintf>
//	FRESULT fres = f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	221a      	movs	r2, #26
 800103e:	4619      	mov	r1, r3
 8001040:	4810      	ldr	r0, [pc, #64]	@ (8001084 <camera_take_photo+0xb0>)
 8001042:	f00a f8eb 	bl	800b21c <f_open>

	pic_index++;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <camera_take_photo+0xa4>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <camera_take_photo+0xa4>)
 8001050:	801a      	strh	r2, [r3, #0]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	cur_image_idx = 0;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <camera_take_photo+0xb4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	camera_ready = 0; // no longer ready to take a new photo
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <camera_take_photo+0x9c>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]

	READY_TO_REQUEST = true;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <camera_take_photo+0xb8>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
//	__HAL_UART_ENABLE_IT(&CAM_UART_HANDLE, UART_IT_RXNE);

	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200402a0 	.word	0x200402a0
 8001074:	200402a4 	.word	0x200402a4
 8001078:	200402ac 	.word	0x200402ac
 800107c:	200402ae 	.word	0x200402ae
 8001080:	0800e7f8 	.word	0x0800e7f8
 8001084:	200402dc 	.word	0x200402dc
 8001088:	200402a8 	.word	0x200402a8
 800108c:	2004050c 	.word	0x2004050c

08001090 <finish_image>:

static void finish_image(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	e016      	b.n	80010ca <finish_image+0x3a>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <finish_image+0x64>)
 80010a2:	5cd3      	ldrb	r3, [r2, r3]
 80010a4:	2bff      	cmp	r3, #255	@ 0xff
 80010a6:	d10d      	bne.n	80010c4 <finish_image+0x34>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3305      	adds	r3, #5
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <finish_image+0x64>)
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
 80010b0:	2bd9      	cmp	r3, #217	@ 0xd9
 80010b2:	d107      	bne.n	80010c4 <finish_image+0x34>
			// found end sequence
			f_write(&file_writer, img_read_buf + 5, i + 1, &bytes_wrote);
 80010b4:	4910      	ldr	r1, [pc, #64]	@ (80010f8 <finish_image+0x68>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	463b      	mov	r3, r7
 80010bc:	480f      	ldr	r0, [pc, #60]	@ (80010fc <finish_image+0x6c>)
 80010be:	f00a fa67 	bl	800b590 <f_write>
			break;
 80010c2:	e005      	b.n	80010d0 <finish_image+0x40>
	for (uint32_t i = 1; i < 32; i++) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b1f      	cmp	r3, #31
 80010ce:	d9e5      	bls.n	800109c <finish_image+0xc>
		}
	}

	f_close(&file_writer);
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <finish_image+0x6c>)
 80010d2:	f00a fc50 	bl	800b976 <f_close>

	camera_ready = true; // ready to take a new image
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <finish_image+0x70>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
	get_feeder()->needs_to_process_picture = false;
 80010dc:	f000 f9cc 	bl	8001478 <get_feeder>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2200      	movs	r2, #0
 80010e4:	729a      	strb	r2, [r3, #10]

//	__HAL_UART_DISABLE_IT(&CAM_UART_HANDLE, UART_IT_RXNE);

	printf("Camera Processing Completed!\n\r");
 80010e6:	4807      	ldr	r0, [pc, #28]	@ (8001104 <finish_image+0x74>)
 80010e8:	f00b fa24 	bl	800c534 <iprintf>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200402b0 	.word	0x200402b0
 80010f8:	200402b5 	.word	0x200402b5
 80010fc:	200402dc 	.word	0x200402dc
 8001100:	200402a0 	.word	0x200402a0
 8001104:	0800e804 	.word	0x0800e804

08001108 <process_chunk>:

static uint8_t process_chunk(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	if (cur_image_idx >= image_size - CAMERA_READ_IMG_SIZE) {
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <process_chunk+0x58>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f1a3 0220 	sub.w	r2, r3, #32
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <process_chunk+0x5c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d803      	bhi.n	8001126 <process_chunk+0x1e>
		finish_image(); // needs to perform the final processing in this->finish_image
 800111e:	f7ff ffb7 	bl	8001090 <finish_image>
		return 1;
 8001122:	2301      	movs	r3, #1
 8001124:	e018      	b.n	8001158 <process_chunk+0x50>
	}

	uint8_t status = VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <process_chunk+0x5c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	480e      	ldr	r0, [pc, #56]	@ (8001168 <process_chunk+0x60>)
 800112e:	f001 ff35 	bl	8002f9c <VC0706_ReadImageBlock>
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]

	if (!status) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <process_chunk+0x38>
		return 0;
 800113c:	2300      	movs	r3, #0
 800113e:	e00b      	b.n	8001158 <process_chunk+0x50>
	}

	UINT bytes_wrote;
	f_write(&file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 8001140:	490a      	ldr	r1, [pc, #40]	@ (800116c <process_chunk+0x64>)
 8001142:	463b      	mov	r3, r7
 8001144:	2220      	movs	r2, #32
 8001146:	480a      	ldr	r0, [pc, #40]	@ (8001170 <process_chunk+0x68>)
 8001148:	f00a fa22 	bl	800b590 <f_write>

	cur_image_idx += 0x20;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <process_chunk+0x5c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3320      	adds	r3, #32
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <process_chunk+0x5c>)
 8001154:	6013      	str	r3, [r2, #0]

	return 0; //normal case
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200402a4 	.word	0x200402a4
 8001164:	200402a8 	.word	0x200402a8
 8001168:	200402b0 	.word	0x200402b0
 800116c:	200402b5 	.word	0x200402b5
 8001170:	200402dc 	.word	0x200402dc

08001174 <camera_get_percent_done>:

uint32_t camera_get_percent_done() {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	return (100 * cur_image_idx) / image_size;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <camera_get_percent_done+0x20>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2264      	movs	r2, #100	@ 0x64
 800117e:	fb03 f202 	mul.w	r2, r3, r2
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <camera_get_percent_done+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	200402a8 	.word	0x200402a8
 8001198:	200402a4 	.word	0x200402a4

0800119c <camera_process>:


uint8_t camera_process(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	printf("Camera Processing Image - %d%% Completed\n\r", camera_get_percent_done());
 80011a2:	f7ff ffe7 	bl	8001174 <camera_get_percent_done>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	@ (80011dc <camera_process+0x40>)
 80011ac:	f00b f9c2 	bl	800c534 <iprintf>
	uint8_t end_flag = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
	uint8_t num_chunks_processed = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	71bb      	strb	r3, [r7, #6]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80011b8:	e003      	b.n	80011c2 <camera_process+0x26>
		end_flag = process_chunk();
 80011ba:	f7ff ffa5 	bl	8001108 <process_chunk>
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <camera_process+0x36>
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	71ba      	strb	r2, [r7, #6]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d9f3      	bls.n	80011ba <camera_process+0x1e>
	}

	return end_flag; // 1 means the last chunk was read
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800e824 	.word	0x0800e824

080011e0 <camera_get_ready>:


uint8_t camera_get_ready() {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return camera_ready;
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <camera_get_ready+0x14>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200402a0 	.word	0x200402a0

080011f8 <init_peripherals>:

#define MIN_DISPENSE_ITERATIONS 5
#define MAX_DISPENSE_ITERATIONS 10


void init_peripherals() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_Delay(2500);
 80011fc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001200:	f002 fa9e 	bl	8003740 <HAL_Delay>

	camera_init();
 8001204:	f7ff feb0 	bl	8000f68 <camera_init>

	ir_sensor_init();
 8001208:	f000 f940 	bl	800148c <ir_sensor_init>
	ps_init();
 800120c:	f000 fc46 	bl	8001a9c <ps_init>

	// shared between the IR sensor and pressure sensor
	HAL_TIM_Base_Start_IT(&IR_SENSOR_TIMER_HANDLE);
 8001210:	480b      	ldr	r0, [pc, #44]	@ (8001240 <init_peripherals+0x48>)
 8001212:	f006 f8e7 	bl	80073e4 <HAL_TIM_Base_Start_IT>

	lcd_init(&feeder);
 8001216:	480b      	ldr	r0, [pc, #44]	@ (8001244 <init_peripherals+0x4c>)
 8001218:	f000 f9ea 	bl	80015f0 <lcd_init>

	feeder.state = WAITING_FOR_SQUIRREL;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <init_peripherals+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
	feeder.squirrel_count = 0;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <init_peripherals+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
	feeder.out_of_food = false;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <init_peripherals+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	721a      	strb	r2, [r3, #8]

	// start main timer
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <init_peripherals+0x50>)
 8001230:	f006 f8d8 	bl	80073e4 <HAL_TIM_Base_Start_IT>

	// start LCD timer
	HAL_TIM_Base_Start_IT(&LCD_TIMER_HANDLE);
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <init_peripherals+0x54>)
 8001236:	f006 f8d5 	bl	80073e4 <HAL_TIM_Base_Start_IT>

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20040848 	.word	0x20040848
 8001244:	20040510 	.word	0x20040510
 8001248:	200408e0 	.word	0x200408e0
 800124c:	20040894 	.word	0x20040894

08001250 <main_isr>:
static void dispensing_isr();
static void cooldown_isr();
static void out_of_food_isr();

// main program logic interrupt routine
void main_isr() {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	printf("#### Main Service Routine ###\n\r");
 8001254:	4819      	ldr	r0, [pc, #100]	@ (80012bc <main_isr+0x6c>)
 8001256:	f00b f96d 	bl	800c534 <iprintf>

	// send the feeder state to the lcd and update it
	switch (feeder.state) {
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <main_isr+0x70>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d82a      	bhi.n	80012b8 <main_isr+0x68>
 8001262:	a201      	add	r2, pc, #4	@ (adr r2, 8001268 <main_isr+0x18>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001289 	.word	0x08001289
 8001270:	08001295 	.word	0x08001295
 8001274:	080012a1 	.word	0x080012a1
 8001278:	080012ad 	.word	0x080012ad
	case WAITING_FOR_SQUIRREL:
		printf("state -- waiting for squirrel\n\r");
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <main_isr+0x74>)
 800127e:	f00b f959 	bl	800c534 <iprintf>
		waiting_for_squirrel_isr();
 8001282:	f000 f829 	bl	80012d8 <waiting_for_squirrel_isr>
		break;
 8001286:	e017      	b.n	80012b8 <main_isr+0x68>
	case DETECTED_SQUIRREL:
		printf("state -- detected squirrel\n\r");
 8001288:	480f      	ldr	r0, [pc, #60]	@ (80012c8 <main_isr+0x78>)
 800128a:	f00b f953 	bl	800c534 <iprintf>
		detected_squirrel_isr();
 800128e:	f000 f84b 	bl	8001328 <detected_squirrel_isr>
		break;
 8001292:	e011      	b.n	80012b8 <main_isr+0x68>
	case DISPENSING:
		printf("state -- dispensing\n\r");
 8001294:	480d      	ldr	r0, [pc, #52]	@ (80012cc <main_isr+0x7c>)
 8001296:	f00b f94d 	bl	800c534 <iprintf>
		dispensing_isr();
 800129a:	f000 f859 	bl	8001350 <dispensing_isr>
		break;
 800129e:	e00b      	b.n	80012b8 <main_isr+0x68>
	case COOLDOWN:
		printf("state -- cooldown\n\r");
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <main_isr+0x80>)
 80012a2:	f00b f947 	bl	800c534 <iprintf>
		cooldown_isr();
 80012a6:	f000 f8a7 	bl	80013f8 <cooldown_isr>
		break;
 80012aa:	e005      	b.n	80012b8 <main_isr+0x68>
	case OUT_OF_FOOD:
		printf("state -- out of food\n\r");
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <main_isr+0x84>)
 80012ae:	f00b f941 	bl	800c534 <iprintf>
		out_of_food_isr();
 80012b2:	f000 f8c1 	bl	8001438 <out_of_food_isr>
		break;
 80012b6:	bf00      	nop
	}
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800e864 	.word	0x0800e864
 80012c0:	20040510 	.word	0x20040510
 80012c4:	0800e884 	.word	0x0800e884
 80012c8:	0800e8a4 	.word	0x0800e8a4
 80012cc:	0800e8c4 	.word	0x0800e8c4
 80012d0:	0800e8dc 	.word	0x0800e8dc
 80012d4:	0800e8f0 	.word	0x0800e8f0

080012d8 <waiting_for_squirrel_isr>:

static void waiting_for_squirrel_isr() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	printf("Current Distance Reading: %f", get_cur_distance_average());
 80012dc:	f000 f95c 	bl	8001598 <get_cur_distance_average>
 80012e0:	ee10 3a10 	vmov	r3, s0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f947 	bl	8000578 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <waiting_for_squirrel_isr+0x44>)
 80012f0:	f00b f920 	bl	800c534 <iprintf>

	if(get_cur_distance_average() > IR_DISTANCE_THRESHOLD) {
 80012f4:	f000 f950 	bl	8001598 <get_cur_distance_average>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	dc00      	bgt.n	800130c <waiting_for_squirrel_isr+0x34>
		printf("DETECTED SQUIRREL!\n\r");
		feeder.state = DETECTED_SQUIRREL;
	}
}
 800130a:	e005      	b.n	8001318 <waiting_for_squirrel_isr+0x40>
		printf("DETECTED SQUIRREL!\n\r");
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <waiting_for_squirrel_isr+0x48>)
 800130e:	f00b f911 	bl	800c534 <iprintf>
		feeder.state = DETECTED_SQUIRREL;
 8001312:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <waiting_for_squirrel_isr+0x4c>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0800e908 	.word	0x0800e908
 8001320:	0800e928 	.word	0x0800e928
 8001324:	20040510 	.word	0x20040510

08001328 <detected_squirrel_isr>:

static void detected_squirrel_isr() {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	feeder.squirrel_count++;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <detected_squirrel_isr+0x24>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	3301      	adds	r3, #1
 8001332:	4a06      	ldr	r2, [pc, #24]	@ (800134c <detected_squirrel_isr+0x24>)
 8001334:	6053      	str	r3, [r2, #4]

	feeder.needs_to_take_picture = true;
 8001336:	4b05      	ldr	r3, [pc, #20]	@ (800134c <detected_squirrel_isr+0x24>)
 8001338:	2201      	movs	r2, #1
 800133a:	725a      	strb	r2, [r3, #9]

	motor_start();
 800133c:	f001 f94c 	bl	80025d8 <motor_start>

	feeder.state = DISPENSING;
 8001340:	4b02      	ldr	r3, [pc, #8]	@ (800134c <detected_squirrel_isr+0x24>)
 8001342:	2202      	movs	r2, #2
 8001344:	701a      	strb	r2, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20040510 	.word	0x20040510

08001350 <dispensing_isr>:

static uint32_t times_dispensed = 0;
static void dispensing_isr() {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	printf("Times Dispensed: %d\n\r", times_dispensed);
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <dispensing_isr+0x90>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <dispensing_isr+0x94>)
 800135c:	f00b f8ea 	bl	800c534 <iprintf>
	printf("PS reading: %d,  Threshold: %d\n\r", ps_get_reading(), PS_FOOD_THRESHOLD);
 8001360:	f000 fbb4 	bl	8001acc <ps_get_reading>
 8001364:	4603      	mov	r3, r0
 8001366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136a:	4619      	mov	r1, r3
 800136c:	481e      	ldr	r0, [pc, #120]	@ (80013e8 <dispensing_isr+0x98>)
 800136e:	f00b f8e1 	bl	800c534 <iprintf>

	if (ps_get_reading() >= PS_FOOD_THRESHOLD && times_dispensed >= MIN_DISPENSE_ITERATIONS) {
 8001372:	f000 fbab 	bl	8001acc <ps_get_reading>
 8001376:	4603      	mov	r3, r0
 8001378:	f241 3287 	movw	r2, #4999	@ 0x1387
 800137c:	4293      	cmp	r3, r2
 800137e:	dd12      	ble.n	80013a6 <dispensing_isr+0x56>
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <dispensing_isr+0x90>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b04      	cmp	r3, #4
 8001386:	d90e      	bls.n	80013a6 <dispensing_isr+0x56>
		printf("Transitioning to COOLDOWN\n\r");
 8001388:	4818      	ldr	r0, [pc, #96]	@ (80013ec <dispensing_isr+0x9c>)
 800138a:	f00b f8d3 	bl	800c534 <iprintf>
		// Must have dispensed enough food
		motor_stop();
 800138e:	f001 f937 	bl	8002600 <motor_stop>
		feeder.needs_to_process_picture = true;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <dispensing_isr+0xa0>)
 8001394:	2201      	movs	r2, #1
 8001396:	729a      	strb	r2, [r3, #10]

		feeder.state = COOLDOWN;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <dispensing_isr+0xa0>)
 800139a:	2203      	movs	r2, #3
 800139c:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <dispensing_isr+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

		return;
 80013a4:	e01a      	b.n	80013dc <dispensing_isr+0x8c>
	}

	if (times_dispensed >= MAX_DISPENSE_ITERATIONS) {
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <dispensing_isr+0x90>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b09      	cmp	r3, #9
 80013ac:	d90e      	bls.n	80013cc <dispensing_isr+0x7c>
		printf("Transitioning to out_of_food state\n\r");
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <dispensing_isr+0xa4>)
 80013b0:	f00b f8c0 	bl	800c534 <iprintf>
		// has dispensed 5 times on this iteration already -- out of food
		motor_stop();
 80013b4:	f001 f924 	bl	8002600 <motor_stop>
		feeder.needs_to_process_picture = true;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <dispensing_isr+0xa0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	729a      	strb	r2, [r3, #10]

		feeder.state = OUT_OF_FOOD;
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <dispensing_isr+0xa0>)
 80013c0:	2204      	movs	r2, #4
 80013c2:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <dispensing_isr+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

		return;
 80013ca:	e007      	b.n	80013dc <dispensing_isr+0x8c>
	}

	// Down here is "average" use case -- needs to continue dispensing
	++times_dispensed;
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <dispensing_isr+0x90>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a03      	ldr	r2, [pc, #12]	@ (80013e0 <dispensing_isr+0x90>)
 80013d4:	6013      	str	r3, [r2, #0]

	// Stay in the same state
	feeder.state = DISPENSING;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <dispensing_isr+0xa0>)
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
}
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2004051c 	.word	0x2004051c
 80013e4:	0800e940 	.word	0x0800e940
 80013e8:	0800e958 	.word	0x0800e958
 80013ec:	0800e97c 	.word	0x0800e97c
 80013f0:	20040510 	.word	0x20040510
 80013f4:	0800e998 	.word	0x0800e998

080013f8 <cooldown_isr>:

/*
 * Prevents the system from dispensing food over and over again
 */
static uint32_t cooldown_cur_iteration = 0;
static void cooldown_isr(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	cooldown_cur_iteration += 1;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <cooldown_isr+0x34>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <cooldown_isr+0x34>)
 8001404:	6013      	str	r3, [r2, #0]

	printf("Current cooldown iteration: %d\n\r", cooldown_cur_iteration);
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <cooldown_isr+0x34>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <cooldown_isr+0x38>)
 800140e:	f00b f891 	bl	800c534 <iprintf>

	if (cooldown_cur_iteration == COOLDOWN_ISR_ITERATIONS) {
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <cooldown_isr+0x34>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b14      	cmp	r3, #20
 8001418:	d105      	bne.n	8001426 <cooldown_isr+0x2e>
		cooldown_cur_iteration = 0;
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <cooldown_isr+0x34>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
		feeder.state = WAITING_FOR_SQUIRREL;
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <cooldown_isr+0x3c>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	}
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20040520 	.word	0x20040520
 8001430:	0800e9c0 	.word	0x0800e9c0
 8001434:	20040510 	.word	0x20040510

08001438 <out_of_food_isr>:

// In order to reset the feeder, just put your hand on the pressure sensor
static void out_of_food_isr() {	// We don't have a great way to determine when food is added back
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	feeder.out_of_food = true;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <out_of_food_isr+0x38>)
 800143e:	2201      	movs	r2, #1
 8001440:	721a      	strb	r2, [r3, #8]

	printf("Current PS Reading: %d\n\r", ps_get_reading());
 8001442:	f000 fb43 	bl	8001acc <ps_get_reading>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	480a      	ldr	r0, [pc, #40]	@ (8001474 <out_of_food_isr+0x3c>)
 800144c:	f00b f872 	bl	800c534 <iprintf>

	if (ps_get_reading() > PS_RESET_THRESHOLD) {
 8001450:	f000 fb3c 	bl	8001acc <ps_get_reading>
 8001454:	4603      	mov	r3, r0
 8001456:	f242 7210 	movw	r2, #10000	@ 0x2710
 800145a:	4293      	cmp	r3, r2
 800145c:	dd05      	ble.n	800146a <out_of_food_isr+0x32>
		feeder.out_of_food = false;
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <out_of_food_isr+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	721a      	strb	r2, [r3, #8]
		feeder.state = WAITING_FOR_SQUIRREL;
 8001464:	4b02      	ldr	r3, [pc, #8]	@ (8001470 <out_of_food_isr+0x38>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
	}
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20040510 	.word	0x20040510
 8001474:	0800e9e4 	.word	0x0800e9e4

08001478 <get_feeder>:

Feeder *get_feeder() {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return &feeder;
 800147c:	4b02      	ldr	r3, [pc, #8]	@ (8001488 <get_feeder+0x10>)
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20040510 	.word	0x20040510

0800148c <ir_sensor_init>:

static float distance_measurements[NUM_MEASUREMENTS_TO_AVG];
static uint8_t distance_idx = 0;


void ir_sensor_init() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	printf("Initializing IR Sensor...");
 8001492:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <ir_sensor_init+0x38>)
 8001494:	f00b f84e 	bl	800c534 <iprintf>
	// make sure doesn't auto trigger without readings
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	e008      	b.n	80014b0 <ir_sensor_init+0x24>
		distance_measurements[i] = 1000;
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <ir_sensor_init+0x3c>)
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <ir_sensor_init+0x40>)
 80014a8:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3301      	adds	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d9f3      	bls.n	800149e <ir_sensor_init+0x12>
	}
	printf(" Successful!\n\r");
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <ir_sensor_init+0x44>)
 80014b8:	f00b f83c 	bl	800c534 <iprintf>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	0800ea00 	.word	0x0800ea00
 80014c8:	20040524 	.word	0x20040524
 80014cc:	447a0000 	.word	0x447a0000
 80014d0:	0800ea1c 	.word	0x0800ea1c
 80014d4:	00000000 	.word	0x00000000

080014d8 <read_distance>:

static float read_distance() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	 uint32_t ADC_VAL = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]

	 HAL_ADC_Start(&IR_ADC_HANDLE);//start conversion
 80014e2:	481b      	ldr	r0, [pc, #108]	@ (8001550 <read_distance+0x78>)
 80014e4:	f002 fc70 	bl	8003dc8 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&IR_ADC_HANDLE, 0xFFFFFFFF);//wait for conversion to finish
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	4818      	ldr	r0, [pc, #96]	@ (8001550 <read_distance+0x78>)
 80014ee:	f002 fcce 	bl	8003e8e <HAL_ADC_PollForConversion>
	 ADC_VAL = HAL_ADC_GetValue(&IR_ADC_HANDLE);//retrieve value
 80014f2:	4817      	ldr	r0, [pc, #92]	@ (8001550 <read_distance+0x78>)
 80014f4:	f002 fd5a 	bl	8003fac <HAL_ADC_GetValue>
 80014f8:	60f8      	str	r0, [r7, #12]

	 float voltage = (3.3* ADC_VAL)/4025.0;
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_ui2d>
 8001500:	a30f      	add	r3, pc, #60	@ (adr r3, 8001540 <read_distance+0x68>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f88f 	bl	8000628 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	a30d      	add	r3, pc, #52	@ (adr r3, 8001548 <read_distance+0x70>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f9b0 	bl	800087c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb58 	bl	8000bd8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	60bb      	str	r3, [r7, #8]

	 // TODO  - special conversion if we need to
	 float distance = voltage;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	607b      	str	r3, [r7, #4]

	 return distance;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	66666666 	.word	0x66666666
 8001544:	400a6666 	.word	0x400a6666
 8001548:	00000000 	.word	0x00000000
 800154c:	40af7200 	.word	0x40af7200
 8001550:	20040558 	.word	0x20040558

08001554 <ir_sensor_interrupt_routine>:

void ir_sensor_interrupt_routine() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
	float curr = read_distance();
 800155a:	f7ff ffbd 	bl	80014d8 <read_distance>
 800155e:	ed87 0a01 	vstr	s0, [r7, #4]

	distance_measurements[distance_idx++] = curr;
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <ir_sensor_interrupt_routine+0x3c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	b2d1      	uxtb	r1, r2
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <ir_sensor_interrupt_routine+0x3c>)
 800156c:	7011      	strb	r1, [r2, #0]
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <ir_sensor_interrupt_routine+0x40>)
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	601a      	str	r2, [r3, #0]
	distance_idx %= NUM_MEASUREMENTS_TO_AVG;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <ir_sensor_interrupt_routine+0x3c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <ir_sensor_interrupt_routine+0x3c>)
 8001584:	701a      	strb	r2, [r3, #0]
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20040544 	.word	0x20040544
 8001594:	20040524 	.word	0x20040524

08001598 <get_cur_distance_average>:

float get_cur_distance_average() {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
	float ttl = 0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	e00e      	b.n	80015c8 <get_cur_distance_average+0x30>
		ttl += distance_measurements[i];
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <get_cur_distance_average+0x54>)
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	edc7 7a01 	vstr	s15, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	3301      	adds	r3, #1
 80015c6:	70fb      	strb	r3, [r7, #3]
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b07      	cmp	r3, #7
 80015cc:	d9ed      	bls.n	80015aa <get_cur_distance_average+0x12>
	}

	return ttl / NUM_MEASUREMENTS_TO_AVG;
 80015ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80015d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015da:	eef0 7a66 	vmov.f32	s15, s13
}
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20040524 	.word	0x20040524

080015f0 <lcd_init>:
	SQUIRREL_CLIP,
	SQUIRREL_HD,
	M_LOGO,
} LcdState;

void lcd_init(const Feeder* feeder) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	ILI9341_Unselect();
 80015f8:	f001 fd48 	bl	800308c <ILI9341_Unselect>
	ILI9341_Init();
 80015fc:	f001 fdf8 	bl	80031f0 <ILI9341_Init>

	lcd_feeder_ref = feeder;
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <lcd_init+0x24>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
	LcdState = SQUIRREL_CLIP;
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <lcd_init+0x28>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20040548 	.word	0x20040548
 8001618:	2004054d 	.word	0x2004054d

0800161c <lcd_between>:

static void lcd_between(){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af02      	add	r7, sp, #8
//	HAL_Delay(1000);
//	ILI9341_FillScreen(ILI9341_WHITE);
	ILI9341_DrawImage(0,0,320,240,(const uint16_t*)white_screen_map);
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <lcd_between+0x20>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	23f0      	movs	r3, #240	@ 0xf0
 8001628:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f001 ffc9 	bl	80035c6 <ILI9341_DrawImage>
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	0807549c 	.word	0x0807549c

08001640 <squirrel_clip>:




void squirrel_clip() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-240)/2,320,240,(const uint16_t*)squirrelclip);
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <squirrel_clip+0x24>)
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	23f0      	movs	r3, #240	@ 0xf0
 800164c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f001 ffb7 	bl	80035c6 <ILI9341_DrawImage>
	LcdState = SQUIRREL_HD;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <squirrel_clip+0x28>)
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0803011c 	.word	0x0803011c
 8001668:	2004054d 	.word	0x2004054d

0800166c <squirrel_res>:

void squirrel_res() {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-213)/2,320,213,(const uint16_t*)squirrelres);
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <squirrel_res+0x24>)
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	23d5      	movs	r3, #213	@ 0xd5
 8001678:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800167c:	210d      	movs	r1, #13
 800167e:	2000      	movs	r0, #0
 8001680:	f001 ffa1 	bl	80035c6 <ILI9341_DrawImage>
	LcdState = M_LOGO;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <squirrel_res+0x28>)
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0800ec9c 	.word	0x0800ec9c
 8001694:	2004054d 	.word	0x2004054d

08001698 <m_logo>:

void m_logo() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-203)/2,320,203,(const uint16_t*)MLogo);
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <m_logo+0x24>)
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	23cb      	movs	r3, #203	@ 0xcb
 80016a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016a8:	2112      	movs	r1, #18
 80016aa:	2000      	movs	r0, #0
 80016ac:	f001 ff8b 	bl	80035c6 <ILI9341_DrawImage>
	LcdState = SQUIRREL_CLIP;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <m_logo+0x28>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	0805591c 	.word	0x0805591c
 80016c0:	2004054d 	.word	0x2004054d

080016c4 <display_stats>:

void display_stats() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b098      	sub	sp, #96	@ 0x60
 80016c8:	af04      	add	r7, sp, #16
	const char* team1 = "FEED";
 80016ca:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <display_stats+0x124>)
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const char* team2 = "THE";
 80016ce:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <display_stats+0x128>)
 80016d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	const char* team3 = "SQUIRRELS";
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <display_stats+0x12c>)
 80016d4:	647b      	str	r3, [r7, #68]	@ 0x44
	const char* class = "FROM EECS 373";
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <display_stats+0x130>)
 80016d8:	643b      	str	r3, [r7, #64]	@ 0x40
	const char* linebrk = "-*-*-*-*-*-";
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <display_stats+0x134>)
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Needs help
	char str_squirrels_fed[20];
	sprintf(str_squirrels_fed, "Squirrels Fed: %lu", lcd_feeder_ref->squirrel_count);
 80016de:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <display_stats+0x138>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e8:	4945      	ldr	r1, [pc, #276]	@ (8001800 <display_stats+0x13c>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00a ff34 	bl	800c558 <siprintf>

//	const char* squcount = strcat("Squirrels Fed: ", strSquirrels);
//	const char* flevels = strcat("Food Dispensed: ", strWeight);

	// FEED THE SQUIRRELS FROM EECS 383 -*-*-*-*-*
	ILI9341_WriteString(10, 10, team1, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 80016f0:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <display_stats+0x140>)
 80016f2:	221f      	movs	r2, #31
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001704:	210a      	movs	r1, #10
 8001706:	200a      	movs	r0, #10
 8001708:	f001 ff12 	bl	8003530 <ILI9341_WriteString>
	ILI9341_WriteString(10, 40, team2, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 800170c:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <display_stats+0x140>)
 800170e:	221f      	movs	r2, #31
 8001710:	9202      	str	r2, [sp, #8]
 8001712:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001720:	2128      	movs	r1, #40	@ 0x28
 8001722:	200a      	movs	r0, #10
 8001724:	f001 ff04 	bl	8003530 <ILI9341_WriteString>
	ILI9341_WriteString(10, 70, team3, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <display_stats+0x140>)
 800172a:	221f      	movs	r2, #31
 800172c:	9202      	str	r2, [sp, #8]
 800172e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001732:	9201      	str	r2, [sp, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800173c:	2146      	movs	r1, #70	@ 0x46
 800173e:	200a      	movs	r0, #10
 8001740:	f001 fef6 	bl	8003530 <ILI9341_WriteString>
	ILI9341_WriteString(10, 100, class, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <display_stats+0x144>)
 8001746:	221f      	movs	r2, #31
 8001748:	9202      	str	r2, [sp, #8]
 800174a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001758:	2164      	movs	r1, #100	@ 0x64
 800175a:	200a      	movs	r0, #10
 800175c:	f001 fee8 	bl	8003530 <ILI9341_WriteString>
	ILI9341_WriteString(10, 130, linebrk, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 8001760:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <display_stats+0x144>)
 8001762:	221f      	movs	r2, #31
 8001764:	9202      	str	r2, [sp, #8]
 8001766:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800176a:	9201      	str	r2, [sp, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001774:	2182      	movs	r1, #130	@ 0x82
 8001776:	200a      	movs	r0, #10
 8001778:	f001 feda 	bl	8003530 <ILI9341_WriteString>

	// Squirrels Fed: squcount
	// Food Dispensed: strWeight
	ILI9341_WriteString(10, 160, str_squirrels_fed, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <display_stats+0x144>)
 800177e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001782:	221f      	movs	r2, #31
 8001784:	9202      	str	r2, [sp, #8]
 8001786:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800178a:	9201      	str	r2, [sp, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	9200      	str	r2, [sp, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	460a      	mov	r2, r1
 8001794:	21a0      	movs	r1, #160	@ 0xa0
 8001796:	200a      	movs	r0, #10
 8001798:	f001 feca 	bl	8003530 <ILI9341_WriteString>
//	ILI9341_WriteString(10, 190, flevels, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);

	// DISPLAY CAMERA STATUS
	char camera_ready[40];
	if (camera_get_ready()) {
 800179c:	f7ff fd20 	bl	80011e0 <camera_get_ready>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <display_stats+0xee>
		sprintf(camera_ready, "Camera: Ready");
 80017a6:	463b      	mov	r3, r7
 80017a8:	4918      	ldr	r1, [pc, #96]	@ (800180c <display_stats+0x148>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a fed4 	bl	800c558 <siprintf>
 80017b0:	e007      	b.n	80017c2 <display_stats+0xfe>
	} else {
		sprintf(camera_ready, "Camera: %lu%% Done", camera_get_percent_done());
 80017b2:	f7ff fcdf 	bl	8001174 <camera_get_percent_done>
 80017b6:	4602      	mov	r2, r0
 80017b8:	463b      	mov	r3, r7
 80017ba:	4915      	ldr	r1, [pc, #84]	@ (8001810 <display_stats+0x14c>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f00a fecb 	bl	800c558 <siprintf>
	}

	ILI9341_WriteString(10, 190, camera_ready, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <display_stats+0x144>)
 80017c4:	4639      	mov	r1, r7
 80017c6:	221f      	movs	r2, #31
 80017c8:	9202      	str	r2, [sp, #8]
 80017ca:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80017ce:	9201      	str	r2, [sp, #4]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	460a      	mov	r2, r1
 80017d8:	21be      	movs	r1, #190	@ 0xbe
 80017da:	200a      	movs	r0, #10
 80017dc:	f001 fea8 	bl	8003530 <ILI9341_WriteString>
}
 80017e0:	bf00      	nop
 80017e2:	3750      	adds	r7, #80	@ 0x50
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0800ea2c 	.word	0x0800ea2c
 80017ec:	0800ea34 	.word	0x0800ea34
 80017f0:	0800ea38 	.word	0x0800ea38
 80017f4:	0800ea44 	.word	0x0800ea44
 80017f8:	0800ea54 	.word	0x0800ea54
 80017fc:	20040548 	.word	0x20040548
 8001800:	0800ea60 	.word	0x0800ea60
 8001804:	20040094 	.word	0x20040094
 8001808:	2004008c 	.word	0x2004008c
 800180c:	0800ea74 	.word	0x0800ea74
 8001810:	0800ea84 	.word	0x0800ea84

08001814 <display_out_of_food>:

// DISPLAY OUT OF FOOD WARNING
void display_out_of_food() {
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af04      	add	r7, sp, #16
	const char* out_of_food_str = "!! OUT OF FOOD !!";
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <display_out_of_food+0x30>)
 800181c:	607b      	str	r3, [r7, #4]
	ILI9341_WriteString(10, 70, out_of_food_str, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <display_out_of_food+0x34>)
 8001820:	221f      	movs	r2, #31
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001828:	9201      	str	r2, [sp, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	2146      	movs	r1, #70	@ 0x46
 8001834:	200a      	movs	r0, #10
 8001836:	f001 fe7b 	bl	8003530 <ILI9341_WriteString>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0800ea98 	.word	0x0800ea98
 8001848:	20040094 	.word	0x20040094

0800184c <lcd_update>:

static bool LCD_UPDATE = false;

// MAIN LCD SERVICE ROUTINE
void lcd_update() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	IS_STATS = !IS_STATS;
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <lcd_update+0x94>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f083 0301 	eor.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <lcd_update+0x94>)
 800186c:	701a      	strb	r2, [r3, #0]

	lcd_between();
 800186e:	f7ff fed5 	bl	800161c <lcd_between>

	if (IS_STATS) {
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <lcd_update+0x94>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <lcd_update+0x3a>
		printf("lcd - transition to statistics\n\r");
 800187a:	481a      	ldr	r0, [pc, #104]	@ (80018e4 <lcd_update+0x98>)
 800187c:	f00a fe5a 	bl	800c534 <iprintf>
		display_stats();
 8001880:	f7ff ff20 	bl	80016c4 <display_stats>
 8001884:	e027      	b.n	80018d6 <lcd_update+0x8a>
	} else if (lcd_feeder_ref->state == OUT_OF_FOOD) {
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <lcd_update+0x9c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d105      	bne.n	800189c <lcd_update+0x50>
		printf("lcd - transition to no food warning\n\r");
 8001890:	4816      	ldr	r0, [pc, #88]	@ (80018ec <lcd_update+0xa0>)
 8001892:	f00a fe4f 	bl	800c534 <iprintf>
		display_out_of_food();
 8001896:	f7ff ffbd 	bl	8001814 <display_out_of_food>
 800189a:	e01c      	b.n	80018d6 <lcd_update+0x8a>
	} else {
		switch(LcdState) {
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <lcd_update+0xa4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d012      	beq.n	80018ca <lcd_update+0x7e>
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	dc16      	bgt.n	80018d6 <lcd_update+0x8a>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <lcd_update+0x66>
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d006      	beq.n	80018be <lcd_update+0x72>
 80018b0:	e011      	b.n	80018d6 <lcd_update+0x8a>
		case SQUIRREL_CLIP:
			printf("lcd - transition to squirrel clip\n\r");
 80018b2:	4810      	ldr	r0, [pc, #64]	@ (80018f4 <lcd_update+0xa8>)
 80018b4:	f00a fe3e 	bl	800c534 <iprintf>
			squirrel_clip();
 80018b8:	f7ff fec2 	bl	8001640 <squirrel_clip>
			break;
 80018bc:	e00b      	b.n	80018d6 <lcd_update+0x8a>
		case SQUIRREL_HD:
			printf("lcd - transition to squirrel res\n\r");
 80018be:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <lcd_update+0xac>)
 80018c0:	f00a fe38 	bl	800c534 <iprintf>
			squirrel_res();
 80018c4:	f7ff fed2 	bl	800166c <squirrel_res>
			break;
 80018c8:	e005      	b.n	80018d6 <lcd_update+0x8a>
		case M_LOGO:
			printf("lcd - transition to M logo\n\r");
 80018ca:	480c      	ldr	r0, [pc, #48]	@ (80018fc <lcd_update+0xb0>)
 80018cc:	f00a fe32 	bl	800c534 <iprintf>
			m_logo();
 80018d0:	f7ff fee2 	bl	8001698 <m_logo>
			break;
 80018d4:	bf00      	nop
		}
	}

	LCD_UPDATE = false;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <lcd_update+0xb4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2004054c 	.word	0x2004054c
 80018e4:	0800eaac 	.word	0x0800eaac
 80018e8:	20040548 	.word	0x20040548
 80018ec:	0800ead0 	.word	0x0800ead0
 80018f0:	2004054d 	.word	0x2004054d
 80018f4:	0800eaf8 	.word	0x0800eaf8
 80018f8:	0800eb1c 	.word	0x0800eb1c
 80018fc:	0800eb40 	.word	0x0800eb40
 8001900:	2004054e 	.word	0x2004054e

08001904 <lcd_trigger_update>:

void lcd_trigger_update() {
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	LCD_UPDATE = true;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <lcd_trigger_update+0x14>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	2004054e 	.word	0x2004054e

0800191c <lcd_needs_update>:

bool lcd_needs_update() {
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	return LCD_UPDATE;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <lcd_needs_update+0x14>)
 8001922:	781b      	ldrb	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2004054e 	.word	0x2004054e

08001934 <microDelay>:

/*
 * Really short delay function
 */
static void microDelay(uint16_t delay)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
	return;
 800193e:	bf00      	nop
  __HAL_TIM_SET_COUNTER(&PS_TIMER_HANDLE, 0);
  while (__HAL_TIM_GET_COUNTER(&PS_TIMER_HANDLE) < delay);
}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <getHX711>:

/*
 * reads in data value from HX711
 */
static int32_t getHX711(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001952:	b672      	cpsid	i
}
 8001954:	bf00      	nop
	__disable_irq(); // ENTER CRITICAL SECTION
  uint32_t data = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800195a:	f001 fee5 	bl	8003728 <HAL_GetTick>
 800195e:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 8001960:	e00a      	b.n	8001978 <getHX711+0x2c>
  {
	// weird
    if(HAL_GetTick() - startTime > 200) {
 8001962:	f001 fee1 	bl	8003728 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2bc8      	cmp	r3, #200	@ 0xc8
 800196e:	d903      	bls.n	8001978 <getHX711+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001970:	b662      	cpsie	i
}
 8001972:	bf00      	nop
      __enable_irq();
      return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e047      	b.n	8001a08 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 8001978:	2108      	movs	r1, #8
 800197a:	4825      	ldr	r0, [pc, #148]	@ (8001a10 <getHX711+0xc4>)
 800197c:	f003 fa4a 	bl	8004e14 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d0ed      	beq.n	8001962 <getHX711+0x16>
    }
  }

  for(int8_t len=0; len<24 ; len++)
 8001986:	2300      	movs	r3, #0
 8001988:	72fb      	strb	r3, [r7, #11]
 800198a:	e022      	b.n	80019d2 <getHX711+0x86>
  {
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2102      	movs	r1, #2
 8001990:	481f      	ldr	r0, [pc, #124]	@ (8001a10 <getHX711+0xc4>)
 8001992:	f003 fa57 	bl	8004e44 <HAL_GPIO_WritePin>
    microDelay(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff ffcc 	bl	8001934 <microDelay>
    data = data << 1;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2102      	movs	r1, #2
 80019a6:	481a      	ldr	r0, [pc, #104]	@ (8001a10 <getHX711+0xc4>)
 80019a8:	f003 fa4c 	bl	8004e44 <HAL_GPIO_WritePin>
    microDelay(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff ffc1 	bl	8001934 <microDelay>
    if(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80019b2:	2108      	movs	r1, #8
 80019b4:	4816      	ldr	r0, [pc, #88]	@ (8001a10 <getHX711+0xc4>)
 80019b6:	f003 fa2d 	bl	8004e14 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d102      	bne.n	80019c6 <getHX711+0x7a>
      data ++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3301      	adds	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80019c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	72fb      	strb	r3, [r7, #11]
 80019d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80019d6:	2b17      	cmp	r3, #23
 80019d8:	ddd8      	ble.n	800198c <getHX711+0x40>
  }

  data = data ^ 0x800000;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80019e0:	60fb      	str	r3, [r7, #12]

  /*
   * END BIT
   */
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2102      	movs	r1, #2
 80019e6:	480a      	ldr	r0, [pc, #40]	@ (8001a10 <getHX711+0xc4>)
 80019e8:	f003 fa2c 	bl	8004e44 <HAL_GPIO_WritePin>
  microDelay(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffa1 	bl	8001934 <microDelay>
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2102      	movs	r1, #2
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <getHX711+0xc4>)
 80019f8:	f003 fa24 	bl	8004e44 <HAL_GPIO_WritePin>
  microDelay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff ff99 	bl	8001934 <microDelay>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a02:	b662      	cpsie	i
}
 8001a04:	bf00      	nop

  __enable_irq();

  return data;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	48000800 	.word	0x48000800

08001a14 <weigh>:


static int weigh()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  int milligram;
  float coefficient;

  // average out NUM_PS_SAMPLES
  for(uint16_t i=0 ; i<NUM_PS_SAMPLES ; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	827b      	strh	r3, [r7, #18]
 8001a22:	e008      	b.n	8001a36 <weigh+0x22>
  {
      total += getHX711();
 8001a24:	f7ff ff92 	bl	800194c <getHX711>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<NUM_PS_SAMPLES ; i++)
 8001a30:	8a7b      	ldrh	r3, [r7, #18]
 8001a32:	3301      	adds	r3, #1
 8001a34:	827b      	strh	r3, [r7, #18]
 8001a36:	8a7b      	ldrh	r3, [r7, #18]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d9f3      	bls.n	8001a24 <weigh+0x10>
  }

  int32_t average = (int32_t)(total / NUM_PS_SAMPLES);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	4a13      	ldr	r2, [pc, #76]	@ (8001a8c <weigh+0x78>)
 8001a40:	fb82 1203 	smull	r1, r2, r2, r3
 8001a44:	1052      	asrs	r2, r2, #1
 8001a46:	17db      	asrs	r3, r3, #31
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
  coefficient = knownOriginal / knownHX711;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <weigh+0x7c>)
 8001a4e:	edd3 6a00 	vldr	s13, [r3]
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <weigh+0x80>)
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5c:	edc7 7a02 	vstr	s15, [r7, #8]
  milligram = (int)(average-PS0_TARE)*coefficient;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <weigh+0x84>)
 8001a64:	4413      	add	r3, r2
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	607b      	str	r3, [r7, #4]
  return milligram;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	66666667 	.word	0x66666667
 8001a90:	20040000 	.word	0x20040000
 8001a94:	20040004 	.word	0x20040004
 8001a98:	ff7e8f5e 	.word	0xff7e8f5e

08001a9c <ps_init>:


void ps_init() {};
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <ps_take_reading>:

static bool NEEDS_READING = false;

void ps_take_reading() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	NEEDS_READING = false;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <ps_take_reading+0x18>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	CURRENT_READING = weigh();
 8001ab6:	f7ff ffad 	bl	8001a14 <weigh>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a02      	ldr	r2, [pc, #8]	@ (8001ac8 <ps_take_reading+0x1c>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20040554 	.word	0x20040554
 8001ac8:	20040550 	.word	0x20040550

08001acc <ps_get_reading>:

int ps_get_reading() {
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return CURRENT_READING;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <ps_get_reading+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20040550 	.word	0x20040550

08001ae4 <ps_set_needs_reading>:


// sets whether or not the pressure sensor needs to take a reading
void ps_set_needs_reading(bool val) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	NEEDS_READING = val;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <ps_set_needs_reading+0x1c>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	7013      	strb	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	20040554 	.word	0x20040554

08001b04 <ps_needs_reading>:

// returns whether or not the pressure sensor needs to take a reading
bool ps_needs_reading() {
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	return NEEDS_READING;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <ps_needs_reading+0x14>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20040554 	.word	0x20040554

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f001 fd97 	bl	8003656 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f880 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f000 fb9e 	bl	800226c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b30:	f000 f972 	bl	8001e18 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001b34:	f000 f9bc 	bl	8001eb0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001b38:	f007 f8a2 	bl	8008c80 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001b3c:	f000 f9f6 	bl	8001f2c <MX_SPI3_Init>
  MX_ADC1_Init();
 8001b40:	f000 f8ba 	bl	8001cb8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b44:	f000 fa30 	bl	8001fa8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b48:	f000 fa7c 	bl	8002044 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b4c:	f000 fac8 	bl	80020e0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001b50:	f000 fb14 	bl	800217c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001b54:	f000 fb64 	bl	8002220 <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 8001b58:	f000 f912 	bl	8001d80 <MX_LPUART1_UART_Init>

  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  printf("\n\r#########################################################\n\r");
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <main+0xfc>)
 8001b5e:	f00a fce9 	bl	800c534 <iprintf>
  printf("                INITIALIZING SQURREL FEEDER . . .        \n\r");
 8001b62:	482e      	ldr	r0, [pc, #184]	@ (8001c1c <main+0x100>)
 8001b64:	f00a fce6 	bl	800c534 <iprintf>
  printf("#########################################################\n\r");
 8001b68:	482d      	ldr	r0, [pc, #180]	@ (8001c20 <main+0x104>)
 8001b6a:	f00a fce3 	bl	800c534 <iprintf>
  printf("\n\r\n\r");
 8001b6e:	482d      	ldr	r0, [pc, #180]	@ (8001c24 <main+0x108>)
 8001b70:	f00a fce0 	bl	800c534 <iprintf>

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001b74:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001b78:	2201      	movs	r2, #1
 8001b7a:	492b      	ldr	r1, [pc, #172]	@ (8001c28 <main+0x10c>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f009 fb07 	bl	800b190 <f_mount>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
  while (fres != FR_OK);
 8001b88:	bf00      	nop
 8001b8a:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1fb      	bne.n	8001b8a <main+0x6e>

  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 3, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2103      	movs	r1, #3
 8001b96:	2018      	movs	r0, #24
 8001b98:	f002 ff73 	bl	8004a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 3, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	2019      	movs	r0, #25
 8001ba2:	f002 ff6e 	bl	8004a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2103      	movs	r1, #3
 8001baa:	201e      	movs	r0, #30
 8001bac:	f002 ff69 	bl	8004a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	2032      	movs	r0, #50	@ 0x32
 8001bb6:	f002 ff64 	bl	8004a82 <HAL_NVIC_SetPriority>

  init_peripherals();
 8001bba:	f7ff fb1d 	bl	80011f8 <init_peripherals>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (get_feeder()->needs_to_take_picture) {
 8001bbe:	f7ff fc5b 	bl	8001478 <get_feeder>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	7a5b      	ldrb	r3, [r3, #9]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <main+0xc2>
		if (camera_take_photo()) {
 8001bca:	f7ff fa03 	bl	8000fd4 <camera_take_photo>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <main+0xc2>
			get_feeder()->needs_to_take_picture = false;
 8001bd4:	f7ff fc50 	bl	8001478 <get_feeder>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	725a      	strb	r2, [r3, #9]

//	if (!camera_get_ready() && camera_is_ready_to_request()) {
//		camera_request_chunk();
//	}

	if (!camera_get_ready() && get_feeder()->needs_to_process_picture) {
 8001bde:	f7ff faff 	bl	80011e0 <camera_get_ready>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <main+0xdc>
 8001be8:	f7ff fc46 	bl	8001478 <get_feeder>
 8001bec:	4603      	mov	r3, r0
 8001bee:	7a9b      	ldrb	r3, [r3, #10]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <main+0xdc>
		camera_process();
 8001bf4:	f7ff fad2 	bl	800119c <camera_process>
	}

	if (ps_needs_reading()) {
 8001bf8:	f7ff ff84 	bl	8001b04 <ps_needs_reading>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <main+0xea>
		ps_take_reading();
 8001c02:	f7ff ff53 	bl	8001aac <ps_take_reading>
	}

	if (lcd_needs_update()) {
 8001c06:	f7ff fe89 	bl	800191c <lcd_needs_update>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0d6      	beq.n	8001bbe <main+0xa2>
		lcd_update();
 8001c10:	f7ff fe1c 	bl	800184c <lcd_update>
	if (get_feeder()->needs_to_take_picture) {
 8001c14:	e7d3      	b.n	8001bbe <main+0xa2>
 8001c16:	bf00      	nop
 8001c18:	0800eb60 	.word	0x0800eb60
 8001c1c:	0800eba0 	.word	0x0800eba0
 8001c20:	0800ebdc 	.word	0x0800ebdc
 8001c24:	0800ec18 	.word	0x0800ec18
 8001c28:	0800ec20 	.word	0x0800ec20

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b096      	sub	sp, #88	@ 0x58
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2244      	movs	r2, #68	@ 0x44
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00a fcef 	bl	800c61e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c52:	f003 f92f 	bl	8004eb4 <HAL_PWREx_ControlVoltageScaling>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c5c:	f000 fc68 	bl	8002530 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c60:	2310      	movs	r3, #16
 8001c62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c64:	2301      	movs	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c6c:	2360      	movs	r3, #96	@ 0x60
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 f9cf 	bl	800501c <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001c84:	f000 fc54 	bl	8002530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fdd5 	bl	8005850 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001cac:	f000 fc40 	bl	8002530 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3758      	adds	r7, #88	@ 0x58
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cce:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cd0:	4a29      	ldr	r2, [pc, #164]	@ (8001d78 <MX_ADC1_Init+0xc0>)
 8001cd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cda:	4b26      	ldr	r3, [pc, #152]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cee:	2204      	movs	r2, #4
 8001cf0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d12:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d18:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d26:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d2e:	4811      	ldr	r0, [pc, #68]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d30:	f001 ff04 	bl	8003b3c <HAL_ADC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001d3a:	f000 fbf9 	bl	8002530 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <MX_ADC1_Init+0xc4>)
 8001d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d42:	2306      	movs	r3, #6
 8001d44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d4a:	237f      	movs	r3, #127	@ 0x7f
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <MX_ADC1_Init+0xbc>)
 8001d5c:	f002 f934 	bl	8003fc8 <HAL_ADC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001d66:	f000 fbe3 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20040558 	.word	0x20040558
 8001d78:	50040000 	.word	0x50040000
 8001d7c:	36902000 	.word	0x36902000

08001d80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <MX_LPUART1_UART_Init+0x94>)
 8001d88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001d8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001dc8:	4811      	ldr	r0, [pc, #68]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dca:	f005 ff93 	bl	8007cf4 <HAL_UART_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f000 fbac 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001ddc:	f006 fe86 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001de6:	f000 fba3 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dea:	2100      	movs	r1, #0
 8001dec:	4808      	ldr	r0, [pc, #32]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dee:	f006 febb 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001df8:	f000 fb9a 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dfc:	4804      	ldr	r0, [pc, #16]	@ (8001e10 <MX_LPUART1_UART_Init+0x90>)
 8001dfe:	f006 fe3c 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e08:	f000 fb92 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200405c0 	.word	0x200405c0
 8001e14:	40008000 	.word	0x40008000

08001e18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e1e:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <MX_USART3_UART_Init+0x94>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001e22:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e24:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e60:	4811      	ldr	r0, [pc, #68]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e62:	f005 ff47 	bl	8007cf4 <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e6c:	f000 fb60 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e74:	f006 fe3a 	bl	8008aec <HAL_UARTEx_SetTxFifoThreshold>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7e:	f000 fb57 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e86:	f006 fe6f 	bl	8008b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f000 fb4e 	bl	8002530 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_USART3_UART_Init+0x90>)
 8001e96:	f006 fdf0 	bl	8008a7a <HAL_UARTEx_DisableFifoMode>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea0:	f000 fb46 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20040654 	.word	0x20040654
 8001eac:	40004800 	.word	0x40004800

08001eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <MX_SPI1_Init+0x78>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ebc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec8:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001eca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001efe:	2207      	movs	r2, #7
 8001f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_SPI1_Init+0x74>)
 8001f10:	f004 fc74 	bl	80067fc <HAL_SPI_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f1a:	f000 fb09 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200406e8 	.word	0x200406e8
 8001f28:	40013000 	.word	0x40013000

08001f2c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <MX_SPI3_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f86:	2208      	movs	r2, #8
 8001f88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <MX_SPI3_Init+0x74>)
 8001f8c:	f004 fc36 	bl	80067fc <HAL_SPI_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001f96:	f000 facb 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2004074c 	.word	0x2004074c
 8001fa4:	40003c00 	.word	0x40003c00

08001fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fd0:	2247      	movs	r2, #71	@ 0x47
 8001fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	4814      	ldr	r0, [pc, #80]	@ (8002040 <MX_TIM2_Init+0x98>)
 8001ff0:	f005 f9a0 	bl	8007334 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ffa:	f000 fa99 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	@ (8002040 <MX_TIM2_Init+0x98>)
 800200c:	f005 fb90 	bl	8007730 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002016:	f000 fa8b 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	@ (8002040 <MX_TIM2_Init+0x98>)
 8002028:	f005 fdbe 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002032:	f000 fa7d 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200407b0 	.word	0x200407b0

08002044 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <MX_TIM4_Init+0x94>)
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <MX_TIM4_Init+0x98>)
 8002066:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <MX_TIM4_Init+0x94>)
 800206a:	227f      	movs	r2, #127	@ 0x7f
 800206c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_TIM4_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62;
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_TIM4_Init+0x94>)
 8002076:	223e      	movs	r2, #62	@ 0x3e
 8002078:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <MX_TIM4_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <MX_TIM4_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002086:	4814      	ldr	r0, [pc, #80]	@ (80020d8 <MX_TIM4_Init+0x94>)
 8002088:	f005 f954 	bl	8007334 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002092:	f000 fa4d 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800209a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <MX_TIM4_Init+0x94>)
 80020a4:	f005 fb44 	bl	8007730 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80020ae:	f000 fa3f 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <MX_TIM4_Init+0x94>)
 80020c0:	f005 fd72 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80020ca:	f000 fa31 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200407fc 	.word	0x200407fc
 80020dc:	40000800 	.word	0x40000800

080020e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002100:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <MX_TIM5_Init+0x98>)
 8002102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002106:	220f      	movs	r2, #15
 8002108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_TIM5_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <MX_TIM5_Init+0x94>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002124:	4813      	ldr	r0, [pc, #76]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002126:	f005 f905 	bl	8007334 <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002130:	f000 f9fe 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <MX_TIM5_Init+0x94>)
 8002142:	f005 faf5 	bl	8007730 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800214c:	f000 f9f0 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_TIM5_Init+0x94>)
 800215e:	f005 fd23 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002168:	f000 f9e2 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20040848 	.word	0x20040848
 8002178:	40000c00 	.word	0x40000c00

0800217c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <MX_TIM15_Init+0x9c>)
 800219c:	4a1f      	ldr	r2, [pc, #124]	@ (800221c <MX_TIM15_Init+0xa0>)
 800219e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 255;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021a2:	22ff      	movs	r2, #255	@ 0xff
 80021a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80021c6:	4814      	ldr	r0, [pc, #80]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021c8:	f005 f8b4 	bl	8007334 <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80021d2:	f000 f9ad 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	480d      	ldr	r0, [pc, #52]	@ (8002218 <MX_TIM15_Init+0x9c>)
 80021e4:	f005 faa4 	bl	8007730 <HAL_TIM_ConfigClockSource>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80021ee:	f000 f99f 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	@ (8002218 <MX_TIM15_Init+0x9c>)
 8002200:	f005 fcd2 	bl	8007ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800220a:	f000 f991 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20040894 	.word	0x20040894
 800221c:	40014000 	.word	0x40014000

08002220 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002226:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <MX_TIM16_Init+0x48>)
 8002228:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 128;
 800222a:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_TIM16_Init+0x44>)
 800222c:	2280      	movs	r2, #128	@ 0x80
 800222e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800223c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <MX_TIM16_Init+0x44>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002250:	4804      	ldr	r0, [pc, #16]	@ (8002264 <MX_TIM16_Init+0x44>)
 8002252:	f005 f86f 	bl	8007334 <HAL_TIM_Base_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800225c:	f000 f968 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200408e0 	.word	0x200408e0
 8002268:	40014400 	.word	0x40014400

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002282:	4b9c      	ldr	r3, [pc, #624]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	4a9b      	ldr	r2, [pc, #620]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228e:	4b99      	ldr	r3, [pc, #612]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b96      	ldr	r3, [pc, #600]	@ (80024f4 <MX_GPIO_Init+0x288>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	4a95      	ldr	r2, [pc, #596]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a6:	4b93      	ldr	r3, [pc, #588]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b90      	ldr	r3, [pc, #576]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	4a8f      	ldr	r2, [pc, #572]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022be:	4b8d      	ldr	r3, [pc, #564]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ca:	4b8a      	ldr	r3, [pc, #552]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	4a89      	ldr	r2, [pc, #548]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d6:	4b87      	ldr	r3, [pc, #540]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b84      	ldr	r3, [pc, #528]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a83      	ldr	r2, [pc, #524]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ee:	4b81      	ldr	r3, [pc, #516]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	4b7e      	ldr	r3, [pc, #504]	@ (80024f4 <MX_GPIO_Init+0x288>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	4a7d      	ldr	r2, [pc, #500]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002306:	4b7b      	ldr	r3, [pc, #492]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002312:	4b78      	ldr	r3, [pc, #480]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	4a77      	ldr	r2, [pc, #476]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800231c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231e:	4b75      	ldr	r3, [pc, #468]	@ (80024f4 <MX_GPIO_Init+0x288>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800232a:	f002 fe67 	bl	8004ffc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|ILI9341_CS_Pin
 800232e:	2200      	movs	r2, #0
 8002330:	f24c 0129 	movw	r1, #49193	@ 0xc029
 8002334:	4870      	ldr	r0, [pc, #448]	@ (80024f8 <MX_GPIO_Init+0x28c>)
 8002336:	f002 fd85 	bl	8004e44 <HAL_GPIO_WritePin>
                          |ILI9341_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 800233a:	2200      	movs	r2, #0
 800233c:	f641 7102 	movw	r1, #7938	@ 0x1f02
 8002340:	486e      	ldr	r0, [pc, #440]	@ (80024fc <MX_GPIO_Init+0x290>)
 8002342:	f002 fd7f 	bl	8004e44 <HAL_GPIO_WritePin>
                          |M0_3_Pin|M1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800234c:	486c      	ldr	r0, [pc, #432]	@ (8002500 <MX_GPIO_Init+0x294>)
 800234e:	f002 fd79 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|M1_1_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f244 0104 	movw	r1, #16388	@ 0x4004
 8002358:	486a      	ldr	r0, [pc, #424]	@ (8002504 <MX_GPIO_Init+0x298>)
 800235a:	f002 fd73 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS1_CLK_Pin M1_2_Pin M1_3_Pin ILI9341_CS_Pin
                           ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|ILI9341_CS_Pin
 800235e:	f24c 0329 	movw	r3, #49193	@ 0xc029
 8002362:	61fb      	str	r3, [r7, #28]
                          |ILI9341_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	4860      	ldr	r0, [pc, #384]	@ (80024f8 <MX_GPIO_Init+0x28c>)
 8002378:	f002 fbba 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin;
 800237c:	2302      	movs	r3, #2
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS1_DATA_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	485a      	ldr	r0, [pc, #360]	@ (80024f8 <MX_GPIO_Init+0x28c>)
 8002390:	f002 fbae 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS0_CLK_Pin M0_0_Pin M0_1_Pin M0_2_Pin
                           M0_3_Pin M1_0_Pin */
  GPIO_InitStruct.Pin = PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 8002394:	f641 7302 	movw	r3, #7938	@ 0x1f02
 8002398:	61fb      	str	r3, [r7, #28]
                          |M0_3_Pin|M1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4853      	ldr	r0, [pc, #332]	@ (80024fc <MX_GPIO_Init+0x290>)
 80023ae:	f002 fb9f 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS0_DATA_Pin;
 80023b2:	2308      	movs	r3, #8
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS0_DATA_GPIO_Port, &GPIO_InitStruct);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	484d      	ldr	r0, [pc, #308]	@ (80024fc <MX_GPIO_Init+0x290>)
 80023c6:	f002 fb93 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023ca:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 80023ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023dc:	2301      	movs	r3, #1
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4846      	ldr	r0, [pc, #280]	@ (8002500 <MX_GPIO_Init+0x294>)
 80023e8:	f002 fb82 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_RES_Pin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin;
 80023ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_RES_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4619      	mov	r1, r3
 8002404:	483e      	ldr	r0, [pc, #248]	@ (8002500 <MX_GPIO_Init+0x294>)
 8002406:	f002 fb73 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800240a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800240e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800241c:	2303      	movs	r3, #3
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4836      	ldr	r0, [pc, #216]	@ (8002500 <MX_GPIO_Init+0x294>)
 8002428:	f002 fb62 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800242c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800243e:	230d      	movs	r3, #13
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	482f      	ldr	r0, [pc, #188]	@ (8002508 <MX_GPIO_Init+0x29c>)
 800244a:	f002 fb51 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin M1_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|M1_1_Pin;
 800244e:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4827      	ldr	r0, [pc, #156]	@ (8002504 <MX_GPIO_Init+0x298>)
 8002468:	f002 fb42 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800246c:	2340      	movs	r3, #64	@ 0x40
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800247c:	230d      	movs	r3, #13
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	481d      	ldr	r0, [pc, #116]	@ (80024fc <MX_GPIO_Init+0x290>)
 8002488:	f002 fb32 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800249c:	2302      	movs	r3, #2
 800249e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	4815      	ldr	r0, [pc, #84]	@ (80024fc <MX_GPIO_Init+0x290>)
 80024a8:	f002 fb22 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80024ac:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80024b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024be:	230a      	movs	r3, #10
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024cc:	f002 fb10 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e8:	f002 fb02 	bl	8004af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024ec:	bf00      	nop
 80024ee:	3730      	adds	r7, #48	@ 0x30
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48001400 	.word	0x48001400
 80024fc:	48000800 	.word	0x48000800
 8002500:	48001000 	.word	0x48001000
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48000400 	.word	0x48000400

0800250c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002514:	1d39      	adds	r1, r7, #4
 8002516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800251a:	2201      	movs	r2, #1
 800251c:	4803      	ldr	r0, [pc, #12]	@ (800252c <__io_putchar+0x20>)
 800251e:	f005 fc39 	bl	8007d94 <HAL_UART_Transmit>
  return ch;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200405c0 	.word	0x200405c0

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <Error_Handler+0x8>

0800253c <stepper_rotate_clockwise_ir>:
	{1, 0, 0, 1} };

static bool motor_running = false;
static uint32_t cur_rotation_idx = 0;

void stepper_rotate_clockwise_ir() {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(M0_0_GPIO_Port, M0_0_Pin, steps[cur_rotation_idx][0]);
 8002540:	4b22      	ldr	r3, [pc, #136]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	@ (80025d0 <stepper_rotate_clockwise_ir+0x94>)
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002554:	481f      	ldr	r0, [pc, #124]	@ (80025d4 <stepper_rotate_clockwise_ir+0x98>)
 8002556:	f002 fc75 	bl	8004e44 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_1_GPIO_Port, M0_1_Pin, steps[cur_rotation_idx][1]);
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <stepper_rotate_clockwise_ir+0x94>)
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002570:	4818      	ldr	r0, [pc, #96]	@ (80025d4 <stepper_rotate_clockwise_ir+0x98>)
 8002572:	f002 fc67 	bl	8004e44 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_2_GPIO_Port, M0_2_Pin, steps[cur_rotation_idx][2]);
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <stepper_rotate_clockwise_ir+0x94>)
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	3308      	adds	r3, #8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800258c:	4811      	ldr	r0, [pc, #68]	@ (80025d4 <stepper_rotate_clockwise_ir+0x98>)
 800258e:	f002 fc59 	bl	8004e44 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[cur_rotation_idx][3]);
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <stepper_rotate_clockwise_ir+0x94>)
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	330c      	adds	r3, #12
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025a8:	480a      	ldr	r0, [pc, #40]	@ (80025d4 <stepper_rotate_clockwise_ir+0x98>)
 80025aa:	f002 fc4b 	bl	8004e44 <HAL_GPIO_WritePin>

	 // ALSO M1 TODO

	 cur_rotation_idx++;
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 80025b6:	6013      	str	r3, [r2, #0]
	 if (cur_rotation_idx == 8) {
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d102      	bne.n	80025c6 <stepper_rotate_clockwise_ir+0x8a>
		 cur_rotation_idx = 0;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <stepper_rotate_clockwise_ir+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
	 }
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20040930 	.word	0x20040930
 80025d0:	20040008 	.word	0x20040008
 80025d4:	48000800 	.word	0x48000800

080025d8 <motor_start>:
//
//	// enable motor timer interrupt
//	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
//}

void motor_start() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	if (motor_running) {
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <motor_start+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <motor_start+0x1a>
		return;
	}

	motor_running = true;
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <motor_start+0x20>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
 80025ea:	4804      	ldr	r0, [pc, #16]	@ (80025fc <motor_start+0x24>)
 80025ec:	f004 fefa 	bl	80073e4 <HAL_TIM_Base_Start_IT>
 80025f0:	e000      	b.n	80025f4 <motor_start+0x1c>
		return;
 80025f2:	bf00      	nop
}
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2004092c 	.word	0x2004092c
 80025fc:	200407fc 	.word	0x200407fc

08002600 <motor_stop>:

void motor_stop() {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	if (!motor_running) {
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <motor_stop+0x24>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f083 0301 	eor.w	r3, r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <motor_stop+0x20>
		return;
	}

	motor_running = false;
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <motor_stop+0x24>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&MOTOR_TIMER_HANDLE);
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <motor_stop+0x28>)
 800261a:	f004 ff53 	bl	80074c4 <HAL_TIM_Base_Stop_IT>
 800261e:	e000      	b.n	8002622 <motor_stop+0x22>
		return;
 8002620:	bf00      	nop
}
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2004092c 	.word	0x2004092c
 8002628:	200407fc 	.word	0x200407fc

0800262c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_MspInit+0x44>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	4a0e      	ldr	r2, [pc, #56]	@ (8002670 <HAL_MspInit+0x44>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6613      	str	r3, [r2, #96]	@ 0x60
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_MspInit+0x44>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_MspInit+0x44>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_MspInit+0x44>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_MspInit+0x44>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0b0      	sub	sp, #192	@ 0xc0
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	2294      	movs	r2, #148	@ 0x94
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f009 ffc2 	bl	800c61e <memset>
  if(hadc->Instance==ADC1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a35      	ldr	r2, [pc, #212]	@ (8002774 <HAL_ADC_MspInit+0x100>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d162      	bne.n	800276a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80026aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80026ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80026ba:	2310      	movs	r3, #16
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80026c2:	2302      	movs	r3, #2
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80026ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d0:	f107 0318 	add.w	r3, r7, #24
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fb79 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80026e0:	f7ff ff26 	bl	8002530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80026e4:	4b24      	ldr	r3, [pc, #144]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 80026ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f0:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002714:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002720:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_ADC_MspInit+0x104>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800272c:	2308      	movs	r3, #8
 800272e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002732:	230b      	movs	r3, #11
 8002734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002748:	f002 f9d2 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR0_ADC_Pin|IR1_ADC_Pin;
 800274c:	2330      	movs	r3, #48	@ 0x30
 800274e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002752:	230b      	movs	r3, #11
 8002754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	@ (800277c <HAL_ADC_MspInit+0x108>)
 8002766:	f002 f9c3 	bl	8004af0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800276a:	bf00      	nop
 800276c:	37c0      	adds	r7, #192	@ 0xc0
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	50040000 	.word	0x50040000
 8002778:	40021000 	.word	0x40021000
 800277c:	48000800 	.word	0x48000800

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0b0      	sub	sp, #192	@ 0xc0
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	2294      	movs	r2, #148	@ 0x94
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f009 ff3c 	bl	800c61e <memset>
  if(huart->Instance==LPUART1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a43      	ldr	r2, [pc, #268]	@ (80028b8 <HAL_UART_MspInit+0x138>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d13e      	bne.n	800282e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027b0:	2320      	movs	r3, #32
 80027b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 fb05 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027c8:	f7ff feb2 	bl	8002530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027cc:	4b3b      	ldr	r3, [pc, #236]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	4a3a      	ldr	r2, [pc, #232]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80027d8:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e4:	4b35      	ldr	r3, [pc, #212]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	4a34      	ldr	r2, [pc, #208]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f0:	4b32      	ldr	r3, [pc, #200]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80027fc:	f002 fbfe 	bl	8004ffc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002800:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800281a:	2308      	movs	r3, #8
 800281c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002820:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002824:	4619      	mov	r1, r3
 8002826:	4826      	ldr	r0, [pc, #152]	@ (80028c0 <HAL_UART_MspInit+0x140>)
 8002828:	f002 f962 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800282c:	e040      	b.n	80028b0 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <HAL_UART_MspInit+0x144>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d13b      	bne.n	80028b0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002838:	2304      	movs	r3, #4
 800283a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800283c:	2300      	movs	r3, #0
 800283e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fac1 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002850:	f7ff fe6e 	bl	8002530 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002854:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 800285a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002860:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <HAL_UART_MspInit+0x13c>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8002884:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002898:	2303      	movs	r3, #3
 800289a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800289e:	2307      	movs	r3, #7
 80028a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80028a8:	4619      	mov	r1, r3
 80028aa:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <HAL_UART_MspInit+0x148>)
 80028ac:	f002 f920 	bl	8004af0 <HAL_GPIO_Init>
}
 80028b0:	bf00      	nop
 80028b2:	37c0      	adds	r7, #192	@ 0xc0
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40008000 	.word	0x40008000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48001800 	.word	0x48001800
 80028c4:	40004800 	.word	0x40004800
 80028c8:	48000c00 	.word	0x48000c00

080028cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	@ 0x30
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <HAL_SPI_MspInit+0xd8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d129      	bne.n	8002942 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ee:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 80028f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 80028fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800291e:	23e0      	movs	r3, #224	@ 0xe0
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800292e:	2305      	movs	r3, #5
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293c:	f002 f8d8 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002940:	e02c      	b.n	800299c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a19      	ldr	r2, [pc, #100]	@ (80029ac <HAL_SPI_MspInit+0xe0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d127      	bne.n	800299c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	6593      	str	r3, [r2, #88]	@ 0x58
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002970:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_SPI_MspInit+0xdc>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800297c:	2328      	movs	r3, #40	@ 0x28
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800298c:	2306      	movs	r3, #6
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4806      	ldr	r0, [pc, #24]	@ (80029b0 <HAL_SPI_MspInit+0xe4>)
 8002998:	f002 f8aa 	bl	8004af0 <HAL_GPIO_Init>
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	@ 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013000 	.word	0x40013000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40003c00 	.word	0x40003c00
 80029b0:	48000400 	.word	0x48000400

080029b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	@ 0x40
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d4:	d129      	bne.n	8002a2a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029d6:	4b67      	ldr	r3, [pc, #412]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	4a66      	ldr	r2, [pc, #408]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e2:	4b64      	ldr	r3, [pc, #400]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	4a60      	ldr	r2, [pc, #384]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a20:	4619      	mov	r1, r3
 8002a22:	4855      	ldr	r0, [pc, #340]	@ (8002b78 <HAL_TIM_Base_MspInit+0x1c4>)
 8002a24:	f002 f864 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002a28:	e0a0      	b.n	8002b6c <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a53      	ldr	r2, [pc, #332]	@ (8002b7c <HAL_TIM_Base_MspInit+0x1c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d131      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	4a4e      	ldr	r2, [pc, #312]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a40:	4b4c      	ldr	r3, [pc, #304]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	623b      	str	r3, [r7, #32]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4c:	4b49      	ldr	r3, [pc, #292]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a50:	4a48      	ldr	r2, [pc, #288]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a52:	f043 0308 	orr.w	r3, r3, #8
 8002a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a58:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a76:	2302      	movs	r3, #2
 8002a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	483f      	ldr	r0, [pc, #252]	@ (8002b80 <HAL_TIM_Base_MspInit+0x1cc>)
 8002a82:	f002 f835 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	201e      	movs	r0, #30
 8002a8c:	f001 fff9 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a90:	201e      	movs	r0, #30
 8002a92:	f002 f812 	bl	8004aba <HAL_NVIC_EnableIRQ>
}
 8002a96:	e069      	b.n	8002b6c <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM5)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a39      	ldr	r2, [pc, #228]	@ (8002b84 <HAL_TIM_Base_MspInit+0x1d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d114      	bne.n	8002acc <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aa2:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	4a33      	ldr	r2, [pc, #204]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2032      	movs	r0, #50	@ 0x32
 8002ac0:	f001 ffdf 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ac4:	2032      	movs	r0, #50	@ 0x32
 8002ac6:	f001 fff8 	bl	8004aba <HAL_NVIC_EnableIRQ>
}
 8002aca:	e04f      	b.n	8002b6c <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM15)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d131      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ad6:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ada:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ae2:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002b18:	230e      	movs	r3, #14
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b20:	4619      	mov	r1, r3
 8002b22:	4815      	ldr	r0, [pc, #84]	@ (8002b78 <HAL_TIM_Base_MspInit+0x1c4>)
 8002b24:	f001 ffe4 	bl	8004af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2018      	movs	r0, #24
 8002b2e:	f001 ffa8 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b32:	2018      	movs	r0, #24
 8002b34:	f001 ffc1 	bl	8004aba <HAL_NVIC_EnableIRQ>
}
 8002b38:	e018      	b.n	8002b6c <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM16)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	@ (8002b8c <HAL_TIM_Base_MspInit+0x1d8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d113      	bne.n	8002b6c <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_TIM_Base_MspInit+0x1c0>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2019      	movs	r0, #25
 8002b62:	f001 ff8e 	bl	8004a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b66:	2019      	movs	r0, #25
 8002b68:	f001 ffa7 	bl	8004aba <HAL_NVIC_EnableIRQ>
}
 8002b6c:	bf00      	nop
 8002b6e:	3740      	adds	r7, #64	@ 0x40
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	40000800 	.word	0x40000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	40000c00 	.word	0x40000c00
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <NMI_Handler+0x4>

08002b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <HardFault_Handler+0x4>

08002ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <MemManage_Handler+0x4>

08002ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be6:	f000 fd8b 	bl	8003700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002bf4:	4803      	ldr	r0, [pc, #12]	@ (8002c04 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002bf6:	f004 fc94 	bl	8007522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  lcd_trigger_update();
 8002bfa:	f7fe fe83 	bl	8001904 <lcd_trigger_update>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20040894 	.word	0x20040894

08002c08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002c0c:	4803      	ldr	r0, [pc, #12]	@ (8002c1c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002c0e:	f004 fc88 	bl	8007522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  main_isr();
 8002c12:	f7fe fb1d 	bl	8001250 <main_isr>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200408e0 	.word	0x200408e0

08002c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c24:	4803      	ldr	r0, [pc, #12]	@ (8002c34 <TIM4_IRQHandler+0x14>)
 8002c26:	f004 fc7c 	bl	8007522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  stepper_rotate_clockwise_ir();
 8002c2a:	f7ff fc87 	bl	800253c <stepper_rotate_clockwise_ir>

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200407fc 	.word	0x200407fc

08002c38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c3c:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <TIM5_IRQHandler+0x18>)
 8002c3e:	f004 fc70 	bl	8007522 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  ir_sensor_interrupt_routine();
 8002c42:	f7fe fc87 	bl	8001554 <ir_sensor_interrupt_routine>
  ps_set_needs_reading(true);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7fe ff4c 	bl	8001ae4 <ps_set_needs_reading>
//  ps_isr();

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20040848 	.word	0x20040848

08002c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return 1;
 8002c58:	2301      	movs	r3, #1
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_kill>:

int _kill(int pid, int sig)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c6e:	f009 fd29 	bl	800c6c4 <__errno>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2216      	movs	r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
  return -1;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_exit>:

void _exit (int status)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ffe7 	bl	8002c64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <_exit+0x12>

08002c9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e00a      	b.n	8002cc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cac:	f3af 8000 	nop.w
 8002cb0:	4601      	mov	r1, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	60ba      	str	r2, [r7, #8]
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	dbf0      	blt.n	8002cac <_read+0x12>
  }

  return len;
 8002cca:	687b      	ldr	r3, [r7, #4]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e009      	b.n	8002cfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	60ba      	str	r2, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fc0c 	bl	800250c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	dbf1      	blt.n	8002ce6 <_write+0x12>
  }
  return len;
 8002d02:	687b      	ldr	r3, [r7, #4]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_close>:

int _close(int file)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d34:	605a      	str	r2, [r3, #4]
  return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_isatty>:

int _isatty(int file)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f009 fc8e 	bl	800c6c4 <__errno>
 8002da8:	4603      	mov	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a05      	ldr	r2, [pc, #20]	@ (8002dd8 <_sbrk+0x64>)
 8002dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200a0000 	.word	0x200a0000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	20040934 	.word	0x20040934
 8002ddc:	20040ad0 	.word	0x20040ad0

08002de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <SystemInit+0x20>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dea:	4a05      	ldr	r2, [pc, #20]	@ (8002e00 <SystemInit+0x20>)
 8002dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <VC0706_SendCommand>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 8002e14:	2356      	movs	r3, #86	@ 0x56
 8002e16:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e00c      	b.n	8002e40 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	3303      	adds	r3, #3
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	3320      	adds	r3, #32
 8002e34:	443b      	add	r3, r7
 8002e36:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8002e3a:	7ffb      	ldrb	r3, [r7, #31]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	7ffa      	ldrb	r2, [r7, #31]
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3ee      	bcc.n	8002e26 <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3303      	adds	r3, #3
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	f107 010c 	add.w	r1, r7, #12
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <VC0706_SendCommand+0x64>)
 8002e5a:	f004 ff9b 	bl	8007d94 <HAL_UART_Transmit>
}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20040654 	.word	0x20040654

08002e6c <VC0706_TakePhoto>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 8002e72:	2301      	movs	r3, #1
 8002e74:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2036      	movs	r0, #54	@ 0x36
 8002e80:	f7ff ffc0 	bl	8002e04 <VC0706_SendCommand>

    // response array
    uint8_t response[5]={0};
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8002e8c:	1d39      	adds	r1, r7, #4
 8002e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e92:	2205      	movs	r2, #5
 8002e94:	4810      	ldr	r0, [pc, #64]	@ (8002ed8 <VC0706_TakePhoto+0x6c>)
 8002e96:	f005 f80b 	bl	8007eb0 <HAL_UART_Receive>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e012      	b.n	8002ece <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8002ea8:	793b      	ldrb	r3, [r7, #4]
 8002eaa:	2b76      	cmp	r3, #118	@ 0x76
 8002eac:	d10d      	bne.n	8002eca <VC0706_TakePhoto+0x5e>
 8002eae:	797b      	ldrb	r3, [r7, #5]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <VC0706_TakePhoto+0x5e>
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	2b36      	cmp	r3, #54	@ 0x36
 8002eb8:	d107      	bne.n	8002eca <VC0706_TakePhoto+0x5e>
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <VC0706_TakePhoto+0x5e>
 8002ec0:	7a3b      	ldrb	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <VC0706_TakePhoto+0x5e>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <VC0706_TakePhoto+0x60>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20040654 	.word	0x20040654

08002edc <VC0706_StopCapture>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8002ee2:	f240 3301 	movw	r3, #769	@ 0x301
 8002ee6:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 8002ee8:	2300      	movs	r3, #0
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	2300      	movs	r3, #0
 8002eee:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2036      	movs	r0, #54	@ 0x36
 8002efa:	f7ff ff83 	bl	8002e04 <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002efe:	1d39      	adds	r1, r7, #4
 8002f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f04:	2205      	movs	r2, #5
 8002f06:	480f      	ldr	r0, [pc, #60]	@ (8002f44 <VC0706_StopCapture+0x68>)
 8002f08:	f004 ffd2 	bl	8007eb0 <HAL_UART_Receive>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d110      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f16:	793b      	ldrb	r3, [r7, #4]
 8002f18:	2b76      	cmp	r3, #118	@ 0x76
 8002f1a:	d10d      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f1c:	797b      	ldrb	r3, [r7, #5]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f22:	79bb      	ldrb	r3, [r7, #6]
 8002f24:	2b36      	cmp	r3, #54	@ 0x36
 8002f26:	d107      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <VC0706_StopCapture+0x5c>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <VC0706_StopCapture+0x5e>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20040654 	.word	0x20040654

08002f48 <VC0706_ReadImageDataLength>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 8002f4e:	2301      	movs	r3, #1
 8002f50:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	2202      	movs	r2, #2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	2034      	movs	r0, #52	@ 0x34
 8002f5c:	f7ff ff52 	bl	8002e04 <VC0706_SendCommand>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002f60:	1d39      	adds	r1, r7, #4
 8002f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f66:	2209      	movs	r2, #9
 8002f68:	480b      	ldr	r0, [pc, #44]	@ (8002f98 <VC0706_ReadImageDataLength+0x50>)
 8002f6a:	f004 ffa1 	bl	8007eb0 <HAL_UART_Receive>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <VC0706_ReadImageDataLength+0x34>
    	return 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e008      	b.n	8002f8e <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	b21a      	sxth	r2, r3
 8002f82:	7b3b      	ldrb	r3, [r7, #12]
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8002f8c:	8abb      	ldrh	r3, [r7, #20]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20040654 	.word	0x20040654

08002f9c <VC0706_ReadImageBlock>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8002fae:	230a      	movs	r3, #10
 8002fb0:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8002fdc:	23ff      	movs	r3, #255	@ 0xff
 8002fde:	753b      	strb	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop

    __disable_irq();

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	220d      	movs	r2, #13
 8002fea:	4619      	mov	r1, r3
 8002fec:	2032      	movs	r0, #50	@ 0x32
 8002fee:	f7ff ff09 	bl	8002e04 <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8002ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff6:	222a      	movs	r2, #42	@ 0x2a
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4808      	ldr	r0, [pc, #32]	@ (800301c <VC0706_ReadImageBlock+0x80>)
 8002ffc:	f004 ff58 	bl	8007eb0 <HAL_UART_Receive>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8003004:	b662      	cpsie	i
}
 8003006:	bf00      	nop

    __enable_irq();

    return status == HAL_OK;
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20040654 	.word	0x20040654

08003020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003024:	f7ff fedc 	bl	8002de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003028:	480c      	ldr	r0, [pc, #48]	@ (800305c <LoopForever+0x6>)
  ldr r1, =_edata
 800302a:	490d      	ldr	r1, [pc, #52]	@ (8003060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <LoopForever+0xe>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0a      	ldr	r2, [pc, #40]	@ (8003068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003040:	4c0a      	ldr	r4, [pc, #40]	@ (800306c <LoopForever+0x16>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800304e:	f009 fb3f 	bl	800c6d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003052:	f7fe fd63 	bl	8001b1c <main>

08003056 <LoopForever>:

LoopForever:
    b LoopForever
 8003056:	e7fe      	b.n	8003056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003058:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800305c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8003060:	20040284 	.word	0x20040284
  ldr r2, =_sidata
 8003064:	0809d20c 	.word	0x0809d20c
  ldr r2, =_sbss
 8003068:	20040284 	.word	0x20040284
  ldr r4, =_ebss
 800306c:	20040ad0 	.word	0x20040ad0

08003070 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC1_IRQHandler>
	...

08003074 <ILI9341_Select>:
 */

#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800307e:	4802      	ldr	r0, [pc, #8]	@ (8003088 <ILI9341_Select+0x14>)
 8003080:	f001 fee0 	bl	8004e44 <HAL_GPIO_WritePin>
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	48001400 	.word	0x48001400

0800308c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003096:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <ILI9341_Unselect+0x14>)
 8003098:	f001 fed4 	bl	8004e44 <HAL_GPIO_WritePin>
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	48001400 	.word	0x48001400

080030a4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030ae:	4807      	ldr	r0, [pc, #28]	@ (80030cc <ILI9341_Reset+0x28>)
 80030b0:	f001 fec8 	bl	8004e44 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80030b4:	2005      	movs	r0, #5
 80030b6:	f000 fb43 	bl	8003740 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80030ba:	2201      	movs	r2, #1
 80030bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030c0:	4802      	ldr	r0, [pc, #8]	@ (80030cc <ILI9341_Reset+0x28>)
 80030c2:	f001 febf 	bl	8004e44 <HAL_GPIO_WritePin>
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	48001000 	.word	0x48001000

080030d0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e0:	4806      	ldr	r0, [pc, #24]	@ (80030fc <ILI9341_WriteCommand+0x2c>)
 80030e2:	f001 feaf 	bl	8004e44 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80030e6:	1df9      	adds	r1, r7, #7
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	2201      	movs	r2, #1
 80030ee:	4804      	ldr	r0, [pc, #16]	@ (8003100 <ILI9341_WriteCommand+0x30>)
 80030f0:	f003 fc27 	bl	8006942 <HAL_SPI_Transmit>

}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	48001400 	.word	0x48001400
 8003100:	2004074c 	.word	0x2004074c

08003104 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003114:	4810      	ldr	r0, [pc, #64]	@ (8003158 <ILI9341_WriteData+0x54>)
 8003116:	f001 fe95 	bl	8004e44 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800311a:	e015      	b.n	8003148 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003122:	bf28      	it	cs
 8003124:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8003128:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800312a:	89fa      	ldrh	r2, [r7, #14]
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	480a      	ldr	r0, [pc, #40]	@ (800315c <ILI9341_WriteData+0x58>)
 8003134:	f003 fc05 	bl	8006942 <HAL_SPI_Transmit>

        buff += chunk_size;
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e6      	bne.n	800311c <ILI9341_WriteData+0x18>
    }
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	48001400 	.word	0x48001400
 800315c:	2004074c 	.word	0x2004074c

08003160 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4604      	mov	r4, r0
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	80fb      	strh	r3, [r7, #6]
 8003172:	4603      	mov	r3, r0
 8003174:	80bb      	strh	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
 800317a:	4613      	mov	r3, r2
 800317c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800317e:	202a      	movs	r0, #42	@ 0x2a
 8003180:	f7ff ffa6 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	b29b      	uxth	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	733b      	strb	r3, [r7, #12]
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	737b      	strb	r3, [r7, #13]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	73bb      	strb	r3, [r7, #14]
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2104      	movs	r1, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ffaa 	bl	8003104 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80031b0:	202b      	movs	r0, #43	@ 0x2b
 80031b2:	f7ff ff8d 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80031b6:	88bb      	ldrh	r3, [r7, #4]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	723b      	strb	r3, [r7, #8]
 80031c0:	88bb      	ldrh	r3, [r7, #4]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	727b      	strb	r3, [r7, #9]
 80031c6:	883b      	ldrh	r3, [r7, #0]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	72bb      	strb	r3, [r7, #10]
 80031d0:	883b      	ldrh	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	2104      	movs	r1, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff91 	bl	8003104 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80031e2:	202c      	movs	r0, #44	@ 0x2c
 80031e4:	f7ff ff74 	bl	80030d0 <ILI9341_WriteCommand>
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}

080031f0 <ILI9341_Init>:

void ILI9341_Init() {
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b09b      	sub	sp, #108	@ 0x6c
 80031f4:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80031f6:	f7ff ff3d 	bl	8003074 <ILI9341_Select>
    ILI9341_Reset();
 80031fa:	f7ff ff53 	bl	80030a4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80031fe:	2001      	movs	r0, #1
 8003200:	f7ff ff66 	bl	80030d0 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8003204:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003208:	f000 fa9a 	bl	8003740 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800320c:	20cb      	movs	r0, #203	@ 0xcb
 800320e:	f7ff ff5f 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8003212:	4a87      	ldr	r2, [pc, #540]	@ (8003430 <ILI9341_Init+0x240>)
 8003214:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321c:	6018      	str	r0, [r3, #0]
 800321e:	3304      	adds	r3, #4
 8003220:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003222:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003226:	2105      	movs	r1, #5
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff6b 	bl	8003104 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800322e:	20cf      	movs	r0, #207	@ 0xcf
 8003230:	f7ff ff4e 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8003234:	4a7f      	ldr	r2, [pc, #508]	@ (8003434 <ILI9341_Init+0x244>)
 8003236:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	4611      	mov	r1, r2
 800323e:	8019      	strh	r1, [r3, #0]
 8003240:	3302      	adds	r3, #2
 8003242:	0c12      	lsrs	r2, r2, #16
 8003244:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003246:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800324a:	2103      	movs	r1, #3
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff59 	bl	8003104 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8003252:	20e8      	movs	r0, #232	@ 0xe8
 8003254:	f7ff ff3c 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003258:	4a77      	ldr	r2, [pc, #476]	@ (8003438 <ILI9341_Init+0x248>)
 800325a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	4611      	mov	r1, r2
 8003262:	8019      	strh	r1, [r3, #0]
 8003264:	3302      	adds	r3, #2
 8003266:	0c12      	lsrs	r2, r2, #16
 8003268:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800326a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800326e:	2103      	movs	r1, #3
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff47 	bl	8003104 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8003276:	20ea      	movs	r0, #234	@ 0xea
 8003278:	f7ff ff2a 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800327c:	2300      	movs	r3, #0
 800327e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8003282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003286:	2102      	movs	r1, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff3b 	bl	8003104 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800328e:	20ed      	movs	r0, #237	@ 0xed
 8003290:	f7ff ff1e 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8003294:	4b69      	ldr	r3, [pc, #420]	@ (800343c <ILI9341_Init+0x24c>)
 8003296:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8003298:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800329c:	2104      	movs	r1, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff30 	bl	8003104 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80032a4:	20f7      	movs	r0, #247	@ 0xf7
 80032a6:	f7ff ff13 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80032aa:	2320      	movs	r3, #32
 80032ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80032b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff24 	bl	8003104 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80032bc:	20c0      	movs	r0, #192	@ 0xc0
 80032be:	f7ff ff07 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80032c2:	2323      	movs	r3, #35	@ 0x23
 80032c4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80032c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff18 	bl	8003104 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80032d4:	20c1      	movs	r0, #193	@ 0xc1
 80032d6:	f7ff fefb 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80032da:	2310      	movs	r3, #16
 80032dc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80032e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff0c 	bl	8003104 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80032ec:	20c5      	movs	r0, #197	@ 0xc5
 80032ee:	f7ff feef 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80032f2:	f642 033e 	movw	r3, #10302	@ 0x283e
 80032f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80032fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff feff 	bl	8003104 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8003306:	20c7      	movs	r0, #199	@ 0xc7
 8003308:	f7ff fee2 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800330c:	2386      	movs	r3, #134	@ 0x86
 800330e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8003312:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fef3 	bl	8003104 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800331e:	2036      	movs	r0, #54	@ 0x36
 8003320:	f7ff fed6 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8003324:	2348      	movs	r3, #72	@ 0x48
 8003326:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 800332a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fee7 	bl	8003104 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8003336:	203a      	movs	r0, #58	@ 0x3a
 8003338:	f7ff feca 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800333c:	2355      	movs	r3, #85	@ 0x55
 800333e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8003342:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fedb 	bl	8003104 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800334e:	20b1      	movs	r0, #177	@ 0xb1
 8003350:	f7ff febe 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8003354:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003358:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800335a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fecf 	bl	8003104 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8003366:	20b6      	movs	r0, #182	@ 0xb6
 8003368:	f7ff feb2 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800336c:	4a34      	ldr	r2, [pc, #208]	@ (8003440 <ILI9341_Init+0x250>)
 800336e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4611      	mov	r1, r2
 8003376:	8019      	strh	r1, [r3, #0]
 8003378:	3302      	adds	r3, #2
 800337a:	0c12      	lsrs	r2, r2, #16
 800337c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800337e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003382:	2103      	movs	r1, #3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff febd 	bl	8003104 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800338a:	20f2      	movs	r0, #242	@ 0xf2
 800338c:	f7ff fea0 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8003396:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff feb1 	bl	8003104 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80033a2:	2026      	movs	r0, #38	@ 0x26
 80033a4:	f7ff fe94 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 80033ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fea5 	bl	8003104 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80033ba:	20e0      	movs	r0, #224	@ 0xe0
 80033bc:	f7ff fe88 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80033c0:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <ILI9341_Init+0x254>)
 80033c2:	f107 0414 	add.w	r4, r7, #20
 80033c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c8:	c407      	stmia	r4!, {r0, r1, r2}
 80033ca:	8023      	strh	r3, [r4, #0]
 80033cc:	3402      	adds	r4, #2
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	210f      	movs	r1, #15
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe93 	bl	8003104 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80033de:	20e1      	movs	r0, #225	@ 0xe1
 80033e0:	f7ff fe76 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <ILI9341_Init+0x258>)
 80033e6:	1d3c      	adds	r4, r7, #4
 80033e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033ea:	c407      	stmia	r4!, {r0, r1, r2}
 80033ec:	8023      	strh	r3, [r4, #0]
 80033ee:	3402      	adds	r4, #2
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	210f      	movs	r1, #15
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe83 	bl	8003104 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80033fe:	2011      	movs	r0, #17
 8003400:	f7ff fe66 	bl	80030d0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8003404:	2078      	movs	r0, #120	@ 0x78
 8003406:	f000 f99b 	bl	8003740 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800340a:	2029      	movs	r0, #41	@ 0x29
 800340c:	f7ff fe60 	bl	80030d0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8003410:	2036      	movs	r0, #54	@ 0x36
 8003412:	f7ff fe5d 	bl	80030d0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8003416:	23e8      	movs	r3, #232	@ 0xe8
 8003418:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800341a:	463b      	mov	r3, r7
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fe70 	bl	8003104 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8003424:	f7ff fe32 	bl	800308c <ILI9341_Unselect>
}
 8003428:	bf00      	nop
 800342a:	376c      	adds	r7, #108	@ 0x6c
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}
 8003430:	0800ec24 	.word	0x0800ec24
 8003434:	0800ec2c 	.word	0x0800ec2c
 8003438:	0800ec30 	.word	0x0800ec30
 800343c:	81120364 	.word	0x81120364
 8003440:	0800ec34 	.word	0x0800ec34
 8003444:	0800ec38 	.word	0x0800ec38
 8003448:	0800ec48 	.word	0x0800ec48

0800344c <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800344c:	b082      	sub	sp, #8
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
 800345a:	460b      	mov	r3, r1
 800345c:	80bb      	strh	r3, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003462:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003466:	461a      	mov	r2, r3
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4413      	add	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003476:	4619      	mov	r1, r3
 8003478:	88bb      	ldrh	r3, [r7, #4]
 800347a:	440b      	add	r3, r1
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29b      	uxth	r3, r3
 8003482:	88b9      	ldrh	r1, [r7, #4]
 8003484:	88f8      	ldrh	r0, [r7, #6]
 8003486:	f7ff fe6b 	bl	8003160 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e041      	b.n	8003514 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8003490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	3b20      	subs	r3, #32
 8003496:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4619      	mov	r1, r3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	440b      	add	r3, r1
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	e027      	b.n	8003502 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00e      	beq.n	80034e0 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80034c2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	743b      	strb	r3, [r7, #16]
 80034cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 80034d2:	f107 0310 	add.w	r3, r7, #16
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fe13 	bl	8003104 <ILI9341_WriteData>
 80034de:	e00d      	b.n	80034fc <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80034e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	733b      	strb	r3, [r7, #12]
 80034ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fe04 	bl	8003104 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	3301      	adds	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003506:	461a      	mov	r2, r3
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4293      	cmp	r3, r2
 800350c:	d3d1      	bcc.n	80034b2 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003518:	461a      	mov	r2, r3
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4293      	cmp	r3, r2
 800351e:	d3b7      	bcc.n	8003490 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800352c:	b002      	add	sp, #8
 800352e:	4770      	bx	lr

08003530 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003530:	b082      	sub	sp, #8
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af04      	add	r7, sp, #16
 8003538:	603a      	str	r2, [r7, #0]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	4603      	mov	r3, r0
 800353e:	80fb      	strh	r3, [r7, #6]
 8003540:	460b      	mov	r3, r1
 8003542:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8003544:	f7ff fd96 	bl	8003074 <ILI9341_Select>

    while(*str) {
 8003548:	e02e      	b.n	80035a8 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	7d3a      	ldrb	r2, [r7, #20]
 800354e:	4413      	add	r3, r2
 8003550:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003554:	db13      	blt.n	800357e <ILI9341_WriteString+0x4e>
            x = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800355a:	7d7b      	ldrb	r3, [r7, #21]
 800355c:	461a      	mov	r2, r3
 800355e:	88bb      	ldrh	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8003564:	88bb      	ldrh	r3, [r7, #4]
 8003566:	7d7a      	ldrb	r2, [r7, #21]
 8003568:	4413      	add	r3, r2
 800356a:	2bef      	cmp	r3, #239	@ 0xef
 800356c:	dc21      	bgt.n	80035b2 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b20      	cmp	r3, #32
 8003574:	d103      	bne.n	800357e <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	603b      	str	r3, [r7, #0]
                continue;
 800357c:	e014      	b.n	80035a8 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	88b9      	ldrh	r1, [r7, #4]
 8003584:	88f8      	ldrh	r0, [r7, #6]
 8003586:	8c3b      	ldrh	r3, [r7, #32]
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	8bbb      	ldrh	r3, [r7, #28]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f7ff ff5a 	bl	800344c <ILI9341_WriteChar>
        x += font.width;
 8003598:	7d3b      	ldrb	r3, [r7, #20]
 800359a:	461a      	mov	r2, r3
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4413      	add	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
        str++;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1cc      	bne.n	800354a <ILI9341_WriteString+0x1a>
 80035b0:	e000      	b.n	80035b4 <ILI9341_WriteString+0x84>
                break;
 80035b2:	bf00      	nop
    }

    ILI9341_Unselect();
 80035b4:	f7ff fd6a 	bl	800308c <ILI9341_Unselect>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c2:	b002      	add	sp, #8
 80035c4:	4770      	bx	lr

080035c6 <ILI9341_DrawImage>:

void ILI9341_FillScreen(uint16_t color) {
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80035c6:	b590      	push	{r4, r7, lr}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4604      	mov	r4, r0
 80035ce:	4608      	mov	r0, r1
 80035d0:	4611      	mov	r1, r2
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	80fb      	strh	r3, [r7, #6]
 80035d8:	4603      	mov	r3, r0
 80035da:	80bb      	strh	r3, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	807b      	strh	r3, [r7, #2]
 80035e0:	4613      	mov	r3, r2
 80035e2:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035ea:	d22c      	bcs.n	8003646 <ILI9341_DrawImage+0x80>
 80035ec:	88bb      	ldrh	r3, [r7, #4]
 80035ee:	2bef      	cmp	r3, #239	@ 0xef
 80035f0:	d829      	bhi.n	8003646 <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80035f2:	88fa      	ldrh	r2, [r7, #6]
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	4413      	add	r3, r2
 80035f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035fc:	dc25      	bgt.n	800364a <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80035fe:	88ba      	ldrh	r2, [r7, #4]
 8003600:	883b      	ldrh	r3, [r7, #0]
 8003602:	4413      	add	r3, r2
 8003604:	2bf0      	cmp	r3, #240	@ 0xf0
 8003606:	dc22      	bgt.n	800364e <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 8003608:	f7ff fd34 	bl	8003074 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	4413      	add	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29c      	uxth	r4, r3
 8003618:	88ba      	ldrh	r2, [r7, #4]
 800361a:	883b      	ldrh	r3, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29b      	uxth	r3, r3
 8003624:	88b9      	ldrh	r1, [r7, #4]
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	4622      	mov	r2, r4
 800362a:	f7ff fd99 	bl	8003160 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	883a      	ldrh	r2, [r7, #0]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4619      	mov	r1, r3
 800363a:	69b8      	ldr	r0, [r7, #24]
 800363c:	f7ff fd62 	bl	8003104 <ILI9341_WriteData>
    ILI9341_Unselect();
 8003640:	f7ff fd24 	bl	800308c <ILI9341_Unselect>
 8003644:	e004      	b.n	8003650 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 800364e:	bf00      	nop
}
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}

08003656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003660:	2003      	movs	r0, #3
 8003662:	f001 fa03 	bl	8004a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003666:	2000      	movs	r0, #0
 8003668:	f000 f80e 	bl	8003688 <HAL_InitTick>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	71fb      	strb	r3, [r7, #7]
 8003676:	e001      	b.n	800367c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003678:	f7fe ffd8 	bl	800262c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800367c:	79fb      	ldrb	r3, [r7, #7]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <HAL_InitTick+0x6c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d023      	beq.n	80036e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_InitTick+0x70>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <HAL_InitTick+0x6c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fa0f 	bl	8004ad6 <HAL_SYSTICK_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d809      	bhi.n	80036d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c4:	2200      	movs	r2, #0
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f001 f9d9 	bl	8004a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_InitTick+0x74>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e007      	b.n	80036e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e004      	b.n	80036e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e001      	b.n	80036e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200400a0 	.word	0x200400a0
 80036f8:	20040088 	.word	0x20040088
 80036fc:	2004009c 	.word	0x2004009c

08003700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003704:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_IncTick+0x20>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_IncTick+0x24>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4413      	add	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <HAL_IncTick+0x24>)
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	200400a0 	.word	0x200400a0
 8003724:	20040938 	.word	0x20040938

08003728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return uwTick;
 800372c:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_GetTick+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20040938 	.word	0x20040938

08003740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7ff ffee 	bl	8003728 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d005      	beq.n	8003766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800375a:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <HAL_Delay+0x44>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003766:	bf00      	nop
 8003768:	f7ff ffde 	bl	8003728 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	429a      	cmp	r2, r3
 8003776:	d8f7      	bhi.n	8003768 <HAL_Delay+0x28>
  {
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200400a0 	.word	0x200400a0

08003788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3360      	adds	r3, #96	@ 0x60
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <LL_ADC_SetOffset+0x44>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	03fff000 	.word	0x03fff000

08003838 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3360      	adds	r3, #96	@ 0x60
 8003846:	461a      	mov	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3360      	adds	r3, #96	@ 0x60
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	615a      	str	r2, [r3, #20]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3330      	adds	r3, #48	@ 0x30
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	211f      	movs	r1, #31
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	401a      	ands	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 011f 	and.w	r1, r3, #31
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3314      	adds	r3, #20
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0e5b      	lsrs	r3, r3, #25
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	4413      	add	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0d1b      	lsrs	r3, r3, #20
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2107      	movs	r1, #7
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	0d1b      	lsrs	r3, r3, #20
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	431a      	orrs	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0318 	and.w	r3, r3, #24
 80039b6:	4908      	ldr	r1, [pc, #32]	@ (80039d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80039b8:	40d9      	lsrs	r1, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	400b      	ands	r3, r1
 80039be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c2:	431a      	orrs	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	0007ffff 	.word	0x0007ffff

080039dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80039ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6093      	str	r3, [r2, #8]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a14:	d101      	bne.n	8003a1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a64:	d101      	bne.n	8003a6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_IsEnabled+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_IsEnabled+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ada:	f043 0204 	orr.w	r2, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e129      	b.n	8003daa <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe fd85 	bl	8002674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff3f 	bl	8003a00 <LL_ADC_IsDeepPowerDownEnabled>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff25 	bl	80039dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff5a 	bl	8003a50 <LL_ADC_IsInternalRegulatorEnabled>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d115      	bne.n	8003bce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff3e 	bl	8003a28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bac:	4b81      	ldr	r3, [pc, #516]	@ (8003db4 <HAL_ADC_Init+0x278>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	4a81      	ldr	r2, [pc, #516]	@ (8003db8 <HAL_ADC_Init+0x27c>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bc0:	e002      	b.n	8003bc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f9      	bne.n	8003bc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff3c 	bl	8003a50 <LL_ADC_IsInternalRegulatorEnabled>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	f043 0210 	orr.w	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff75 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003c04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 80c2 	bne.w	8003d98 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 80be 	bne.w	8003d98 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff35 	bl	8003aa0 <LL_ADC_IsEnabled>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3c:	485f      	ldr	r0, [pc, #380]	@ (8003dbc <HAL_ADC_Init+0x280>)
 8003c3e:	f7ff ff2f 	bl	8003aa0 <LL_ADC_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	485c      	ldr	r0, [pc, #368]	@ (8003dc0 <HAL_ADC_Init+0x284>)
 8003c50:	f7ff fd9a 	bl	8003788 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7e5b      	ldrb	r3, [r3, #25]
 8003c58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d106      	bne.n	8003c90 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	3b01      	subs	r3, #1
 8003c88:	045b      	lsls	r3, r3, #17
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	4b44      	ldr	r3, [pc, #272]	@ (8003dc4 <HAL_ADC_Init+0x288>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	69b9      	ldr	r1, [r7, #24]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff25 	bl	8003b14 <LL_ADC_INJ_IsConversionOngoing>
 8003cca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d140      	bne.n	8003d54 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d13d      	bne.n	8003d54 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e1b      	ldrb	r3, [r3, #24]
 8003ce0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ce2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cfa:	f023 0306 	bic.w	r3, r3, #6
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	69b9      	ldr	r1, [r7, #24]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d118      	bne.n	8003d44 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d34:	430a      	orrs	r2, r1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	611a      	str	r2, [r3, #16]
 8003d42:	e007      	b.n	8003d54 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10c      	bne.n	8003d76 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	f023 010f 	bic.w	r1, r3, #15
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	1e5a      	subs	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d74:	e007      	b.n	8003d86 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 020f 	bic.w	r2, r2, #15
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d96:	e007      	b.n	8003da8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	f043 0210 	orr.w	r2, r3, #16
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20040088 	.word	0x20040088
 8003db8:	053e2d63 	.word	0x053e2d63
 8003dbc:	50040000 	.word	0x50040000
 8003dc0:	50040300 	.word	0x50040300
 8003dc4:	fff0c007 	.word	0xfff0c007

08003dc8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fe8a 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d14f      	bne.n	8003e80 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_Start+0x26>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e04b      	b.n	8003e86 <HAL_ADC_Start+0xbe>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fce2 	bl	80047c0 <ADC_Enable>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d137      	bne.n	8003e76 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e26:	d106      	bne.n	8003e36 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f023 0206 	bic.w	r2, r3, #6
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e34:	e002      	b.n	8003e3c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	221c      	movs	r2, #28
 8003e42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fe29 	bl	8003ac6 <LL_ADC_REG_StartConversion>
 8003e74:	e006      	b.n	8003e84 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e7e:	e001      	b.n	8003e84 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
 8003e82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d102      	bne.n	8003ea6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e010      	b.n	8003ec8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e06f      	b.n	8003fa4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ec8:	f7ff fc2e 	bl	8003728 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ece:	e021      	b.n	8003f14 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed6:	d01d      	beq.n	8003f14 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ed8:	f7ff fc26 	bl	8003728 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <HAL_ADC_PollForConversion+0x60>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d112      	bne.n	8003f14 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	f043 0204 	orr.w	r2, r3, #4
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e047      	b.n	8003fa4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0d6      	beq.n	8003ed0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fcc4 	bl	80038c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01c      	beq.n	8003f78 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7e5b      	ldrb	r3, [r3, #25]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d111      	bne.n	8003f78 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d104      	bne.n	8003f90 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e008      	b.n	8003fa2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0b6      	sub	sp, #216	@ 0xd8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x22>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e3d5      	b.n	8004796 <HAL_ADC_ConfigChannel+0x7ce>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fd79 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 83ba 	bne.w	8004778 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d824      	bhi.n	800405e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	3b02      	subs	r3, #2
 800401a:	2b03      	cmp	r3, #3
 800401c:	d81b      	bhi.n	8004056 <HAL_ADC_ConfigChannel+0x8e>
 800401e:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <HAL_ADC_ConfigChannel+0x5c>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004035 	.word	0x08004035
 8004028:	0800403d 	.word	0x0800403d
 800402c:	08004045 	.word	0x08004045
 8004030:	0800404d 	.word	0x0800404d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004034:	230c      	movs	r3, #12
 8004036:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800403a:	e010      	b.n	800405e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800403c:	2312      	movs	r3, #18
 800403e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004042:	e00c      	b.n	800405e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004044:	2318      	movs	r3, #24
 8004046:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800404a:	e008      	b.n	800405e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800404c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004054:	e003      	b.n	800405e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004056:	2306      	movs	r3, #6
 8004058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800405c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800406c:	f7ff fc3b 	bl	80038e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fd3a 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 800407a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fd46 	bl	8003b14 <LL_ADC_INJ_IsConversionOngoing>
 8004088:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 81bf 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 81ba 	bne.w	8004414 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040a8:	d10f      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	4619      	mov	r1, r3
 80040b6:	f7ff fc42 	bl	800393e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fbe9 	bl	800389a <LL_ADC_SetSamplingTimeCommonConfig>
 80040c8:	e00e      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7ff fc31 	bl	800393e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fbd9 	bl	800389a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	08db      	lsrs	r3, r3, #3
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d00a      	beq.n	8004120 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800411a:	f7ff fb69 	bl	80037f0 <LL_ADC_SetOffset>
 800411e:	e179      	b.n	8004414 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fb86 	bl	8003838 <LL_ADC_GetOffsetChannel>
 800412c:	4603      	mov	r3, r0
 800412e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <HAL_ADC_ConfigChannel+0x184>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fb7b 	bl	8003838 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	f003 021f 	and.w	r2, r3, #31
 800414a:	e01e      	b.n	800418a <HAL_ADC_ConfigChannel+0x1c2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fb70 	bl	8003838 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800416a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800416e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004172:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800417a:	2320      	movs	r3, #32
 800417c:	e004      	b.n	8004188 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800417e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004182:	fab3 f383 	clz	r3, r3
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x1da>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0e9b      	lsrs	r3, r3, #26
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	e018      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x20c>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80041b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80041be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80041c6:	2320      	movs	r3, #32
 80041c8:	e004      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80041ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb3f 	bl	8003864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fb23 	bl	8003838 <LL_ADC_GetOffsetChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x24a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fb18 	bl	8003838 <LL_ADC_GetOffsetChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	0e9b      	lsrs	r3, r3, #26
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	e01e      	b.n	8004250 <HAL_ADC_ConfigChannel+0x288>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fb0d 	bl	8003838 <LL_ADC_GetOffsetChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004228:	fa93 f3a3 	rbit	r3, r3
 800422c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004240:	2320      	movs	r3, #32
 8004242:	e004      	b.n	800424e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x2a0>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	e018      	b.n	800429a <HAL_ADC_ConfigChannel+0x2d2>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800427c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800428c:	2320      	movs	r3, #32
 800428e:	e004      	b.n	800429a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800429a:	429a      	cmp	r2, r3
 800429c:	d106      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fadc 	bl	8003864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fac0 	bl	8003838 <LL_ADC_GetOffsetChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x310>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fab5 	bl	8003838 <LL_ADC_GetOffsetChannel>
 80042ce:	4603      	mov	r3, r0
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	f003 021f 	and.w	r2, r3, #31
 80042d6:	e01e      	b.n	8004316 <HAL_ADC_ConfigChannel+0x34e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff faaa 	bl	8003838 <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80042f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80042fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004306:	2320      	movs	r3, #32
 8004308:	e004      	b.n	8004314 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800430a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_ADC_ConfigChannel+0x366>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	e014      	b.n	8004358 <HAL_ADC_ConfigChannel+0x390>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800433c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800434e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004358:	429a      	cmp	r2, r3
 800435a:	d106      	bne.n	800436a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fa7d 	bl	8003864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2103      	movs	r1, #3
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fa61 	bl	8003838 <LL_ADC_GetOffsetChannel>
 8004376:	4603      	mov	r3, r0
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x3ce>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2103      	movs	r1, #3
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fa56 	bl	8003838 <LL_ADC_GetOffsetChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	0e9b      	lsrs	r3, r3, #26
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	e017      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x3fe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2103      	movs	r1, #3
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fa4b 	bl	8003838 <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80043ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80043b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80043bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_ADC_ConfigChannel+0x416>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	0e9b      	lsrs	r3, r3, #26
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	e011      	b.n	8004402 <HAL_ADC_ConfigChannel+0x43a>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80043ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80043f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e003      	b.n	8004402 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80043fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2103      	movs	r1, #3
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fa28 	bl	8003864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fb41 	bl	8003aa0 <LL_ADC_IsEnabled>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 813f 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f7ff faae 	bl	8003994 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a8e      	ldr	r2, [pc, #568]	@ (8004678 <HAL_ADC_ConfigChannel+0x6b0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	f040 8130 	bne.w	80046a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_ADC_ConfigChannel+0x4a4>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	3301      	adds	r3, #1
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2b09      	cmp	r3, #9
 8004462:	bf94      	ite	ls
 8004464:	2301      	movls	r3, #1
 8004466:	2300      	movhi	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e019      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x4d8>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800447e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e003      	b.n	8004490 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004488:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3301      	adds	r3, #1
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2b09      	cmp	r3, #9
 8004498:	bf94      	ite	ls
 800449a:	2301      	movls	r3, #1
 800449c:	2300      	movhi	r3, #0
 800449e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d079      	beq.n	8004598 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x4f8>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0e9b      	lsrs	r3, r3, #26
 80044b6:	3301      	adds	r3, #1
 80044b8:	069b      	lsls	r3, r3, #26
 80044ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044be:	e015      	b.n	80044ec <HAL_ADC_ConfigChannel+0x524>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80044ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80044d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80044d8:	2320      	movs	r3, #32
 80044da:	e003      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80044dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	069b      	lsls	r3, r3, #26
 80044e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_ADC_ConfigChannel+0x544>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	3301      	adds	r3, #1
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	e017      	b.n	800453c <HAL_ADC_ConfigChannel+0x574>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800451a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800451e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004524:	2320      	movs	r3, #32
 8004526:	e003      	b.n	8004530 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3301      	adds	r3, #1
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	ea42 0103 	orr.w	r1, r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x59a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	3301      	adds	r3, #1
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	051b      	lsls	r3, r3, #20
 8004560:	e018      	b.n	8004594 <HAL_ADC_ConfigChannel+0x5cc>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e003      	b.n	8004586 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3301      	adds	r3, #1
 8004588:	f003 021f 	and.w	r2, r3, #31
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004594:	430b      	orrs	r3, r1
 8004596:	e080      	b.n	800469a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x5ec>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	069b      	lsls	r3, r3, #26
 80045ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045b2:	e015      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x618>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	069b      	lsls	r3, r3, #26
 80045dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x638>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	3301      	adds	r3, #1
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	e017      	b.n	8004630 <HAL_ADC_ConfigChannel+0x668>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	61bb      	str	r3, [r7, #24]
  return result;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	ea42 0103 	orr.w	r1, r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10d      	bne.n	800465c <HAL_ADC_ConfigChannel+0x694>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	0e9b      	lsrs	r3, r3, #26
 8004646:	3301      	adds	r3, #1
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	3b1e      	subs	r3, #30
 8004654:	051b      	lsls	r3, r3, #20
 8004656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800465a:	e01d      	b.n	8004698 <HAL_ADC_ConfigChannel+0x6d0>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	60fb      	str	r3, [r7, #12]
  return result;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e005      	b.n	8004684 <HAL_ADC_ConfigChannel+0x6bc>
 8004678:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f003 021f 	and.w	r2, r3, #31
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	3b1e      	subs	r3, #30
 8004692:	051b      	lsls	r3, r3, #20
 8004694:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004698:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800469e:	4619      	mov	r1, r3
 80046a0:	f7ff f94d 	bl	800393e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b3d      	ldr	r3, [pc, #244]	@ (80047a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d06c      	beq.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046b0:	483c      	ldr	r0, [pc, #240]	@ (80047a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80046b2:	f7ff f88f 	bl	80037d4 <LL_ADC_GetCommonPathInternalCh>
 80046b6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3a      	ldr	r2, [pc, #232]	@ (80047a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d127      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d121      	bne.n	8004714 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a35      	ldr	r2, [pc, #212]	@ (80047ac <HAL_ADC_ConfigChannel+0x7e4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d157      	bne.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e2:	4619      	mov	r1, r3
 80046e4:	482f      	ldr	r0, [pc, #188]	@ (80047a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80046e6:	f7ff f862 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	099b      	lsrs	r3, r3, #6
 80046f0:	4a30      	ldr	r2, [pc, #192]	@ (80047b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004704:	e002      	b.n	800470c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004712:	e03a      	b.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a27      	ldr	r2, [pc, #156]	@ (80047b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d113      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800471e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10d      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1f      	ldr	r2, [pc, #124]	@ (80047ac <HAL_ADC_ConfigChannel+0x7e4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d12a      	bne.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004738:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473c:	4619      	mov	r1, r3
 800473e:	4819      	ldr	r0, [pc, #100]	@ (80047a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004740:	f7ff f835 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004744:	e021      	b.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <HAL_ADC_ConfigChannel+0x7f4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d11c      	bne.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <HAL_ADC_ConfigChannel+0x7e4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800476a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800476e:	4619      	mov	r1, r3
 8004770:	480c      	ldr	r0, [pc, #48]	@ (80047a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004772:	f7ff f81c 	bl	80037ae <LL_ADC_SetCommonPathInternalCh>
 8004776:	e008      	b.n	800478a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004792:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004796:	4618      	mov	r0, r3
 8004798:	37d8      	adds	r7, #216	@ 0xd8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	80080000 	.word	0x80080000
 80047a4:	50040300 	.word	0x50040300
 80047a8:	c7520000 	.word	0xc7520000
 80047ac:	50040000 	.word	0x50040000
 80047b0:	20040088 	.word	0x20040088
 80047b4:	053e2d63 	.word	0x053e2d63
 80047b8:	cb840000 	.word	0xcb840000
 80047bc:	80000001 	.word	0x80000001

080047c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f965 	bl	8003aa0 <LL_ADC_IsEnabled>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d169      	bne.n	80048b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <ADC_Enable+0xfc>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fa:	f043 0201 	orr.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e055      	b.n	80048b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f934 	bl	8003a78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004810:	482b      	ldr	r0, [pc, #172]	@ (80048c0 <ADC_Enable+0x100>)
 8004812:	f7fe ffdf 	bl	80037d4 <LL_ADC_GetCommonPathInternalCh>
 8004816:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004820:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <ADC_Enable+0x104>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	099b      	lsrs	r3, r3, #6
 8004826:	4a28      	ldr	r2, [pc, #160]	@ (80048c8 <ADC_Enable+0x108>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800483a:	e002      	b.n	8004842 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f9      	bne.n	800483c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004848:	f7fe ff6e 	bl	8003728 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800484e:	e028      	b.n	80048a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff f923 	bl	8003aa0 <LL_ADC_IsEnabled>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f907 	bl	8003a78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800486a:	f7fe ff5d 	bl	8003728 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d914      	bls.n	80048a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d00d      	beq.n	80048a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004896:	f043 0201 	orr.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d1cf      	bne.n	8004850 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	8000003f 	.word	0x8000003f
 80048c0:	50040300 	.word	0x50040300
 80048c4:	20040088 	.word	0x20040088
 80048c8:	053e2d63 	.word	0x053e2d63

080048cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048e8:	4013      	ands	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fe:	4a04      	ldr	r2, [pc, #16]	@ (8004910 <__NVIC_SetPriorityGrouping+0x44>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	60d3      	str	r3, [r2, #12]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004918:	4b04      	ldr	r3, [pc, #16]	@ (800492c <__NVIC_GetPriorityGrouping+0x18>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 0307 	and.w	r3, r3, #7
}
 8004922:	4618      	mov	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db0b      	blt.n	800495a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	4907      	ldr	r1, [pc, #28]	@ (8004968 <__NVIC_EnableIRQ+0x38>)
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2001      	movs	r0, #1
 8004952:	fa00 f202 	lsl.w	r2, r0, r2
 8004956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e100 	.word	0xe000e100

0800496c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	2b00      	cmp	r3, #0
 800497e:	db0a      	blt.n	8004996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	490c      	ldr	r1, [pc, #48]	@ (80049b8 <__NVIC_SetPriority+0x4c>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	440b      	add	r3, r1
 8004990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004994:	e00a      	b.n	80049ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	4908      	ldr	r1, [pc, #32]	@ (80049bc <__NVIC_SetPriority+0x50>)
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	3b04      	subs	r3, #4
 80049a4:	0112      	lsls	r2, r2, #4
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	440b      	add	r3, r1
 80049aa:	761a      	strb	r2, [r3, #24]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000e100 	.word	0xe000e100
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	@ 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f1c3 0307 	rsb	r3, r3, #7
 80049da:	2b04      	cmp	r3, #4
 80049dc:	bf28      	it	cs
 80049de:	2304      	movcs	r3, #4
 80049e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2b06      	cmp	r3, #6
 80049e8:	d902      	bls.n	80049f0 <NVIC_EncodePriority+0x30>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3b03      	subs	r3, #3
 80049ee:	e000      	b.n	80049f2 <NVIC_EncodePriority+0x32>
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	f04f 32ff 	mov.w	r2, #4294967295
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	401a      	ands	r2, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a18:	4313      	orrs	r3, r2
         );
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a38:	d301      	bcc.n	8004a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e00f      	b.n	8004a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a68 <SysTick_Config+0x40>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a46:	210f      	movs	r1, #15
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	f7ff ff8e 	bl	800496c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <SysTick_Config+0x40>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a56:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <SysTick_Config+0x40>)
 8004a58:	2207      	movs	r2, #7
 8004a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	e000e010 	.word	0xe000e010

08004a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff ff29 	bl	80048cc <__NVIC_SetPriorityGrouping>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a94:	f7ff ff3e 	bl	8004914 <__NVIC_GetPriorityGrouping>
 8004a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	6978      	ldr	r0, [r7, #20]
 8004aa0:	f7ff ff8e 	bl	80049c0 <NVIC_EncodePriority>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff5d 	bl	800496c <__NVIC_SetPriority>
}
 8004ab2:	bf00      	nop
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff31 	bl	8004930 <__NVIC_EnableIRQ>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ffa2 	bl	8004a28 <SysTick_Config>
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afe:	e166      	b.n	8004dce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2101      	movs	r1, #1
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8158 	beq.w	8004dc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d005      	beq.n	8004b30 <HAL_GPIO_Init+0x40>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d130      	bne.n	8004b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b66:	2201      	movs	r2, #1
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	091b      	lsrs	r3, r3, #4
 8004b7c:	f003 0201 	and.w	r2, r3, #1
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d017      	beq.n	8004bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d123      	bne.n	8004c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	08da      	lsrs	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3208      	adds	r2, #8
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	08da      	lsrs	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3208      	adds	r2, #8
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80b2 	beq.w	8004dc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c64:	4b61      	ldr	r3, [pc, #388]	@ (8004dec <HAL_GPIO_Init+0x2fc>)
 8004c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c68:	4a60      	ldr	r2, [pc, #384]	@ (8004dec <HAL_GPIO_Init+0x2fc>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c70:	4b5e      	ldr	r3, [pc, #376]	@ (8004dec <HAL_GPIO_Init+0x2fc>)
 8004c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	3302      	adds	r3, #2
 8004c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ca6:	d02b      	beq.n	8004d00 <HAL_GPIO_Init+0x210>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a52      	ldr	r2, [pc, #328]	@ (8004df4 <HAL_GPIO_Init+0x304>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d025      	beq.n	8004cfc <HAL_GPIO_Init+0x20c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a51      	ldr	r2, [pc, #324]	@ (8004df8 <HAL_GPIO_Init+0x308>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01f      	beq.n	8004cf8 <HAL_GPIO_Init+0x208>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a50      	ldr	r2, [pc, #320]	@ (8004dfc <HAL_GPIO_Init+0x30c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d019      	beq.n	8004cf4 <HAL_GPIO_Init+0x204>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8004e00 <HAL_GPIO_Init+0x310>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_GPIO_Init+0x200>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a4e      	ldr	r2, [pc, #312]	@ (8004e04 <HAL_GPIO_Init+0x314>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00d      	beq.n	8004cec <HAL_GPIO_Init+0x1fc>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8004e08 <HAL_GPIO_Init+0x318>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <HAL_GPIO_Init+0x1f8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a4c      	ldr	r2, [pc, #304]	@ (8004e0c <HAL_GPIO_Init+0x31c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_GPIO_Init+0x1f4>
 8004ce0:	2307      	movs	r3, #7
 8004ce2:	e00e      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	e00c      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004ce8:	2306      	movs	r3, #6
 8004cea:	e00a      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cec:	2305      	movs	r3, #5
 8004cee:	e008      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	e006      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e004      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e002      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_GPIO_Init+0x212>
 8004d00:	2300      	movs	r3, #0
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	f002 0203 	and.w	r2, r2, #3
 8004d08:	0092      	lsls	r2, r2, #2
 8004d0a:	4093      	lsls	r3, r2
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d12:	4937      	ldr	r1, [pc, #220]	@ (8004df0 <HAL_GPIO_Init+0x300>)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d20:	4b3b      	ldr	r3, [pc, #236]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d44:	4a32      	ldr	r2, [pc, #200]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d4a:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d6e:	4a28      	ldr	r2, [pc, #160]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d74:	4b26      	ldr	r3, [pc, #152]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d98:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dc2:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <HAL_GPIO_Init+0x320>)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f47f ae91 	bne.w	8004b00 <HAL_GPIO_Init+0x10>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40010000 	.word	0x40010000
 8004df4:	48000400 	.word	0x48000400
 8004df8:	48000800 	.word	0x48000800
 8004dfc:	48000c00 	.word	0x48000c00
 8004e00:	48001000 	.word	0x48001000
 8004e04:	48001400 	.word	0x48001400
 8004e08:	48001800 	.word	0x48001800
 8004e0c:	48001c00 	.word	0x48001c00
 8004e10:	40010400 	.word	0x40010400

08004e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
 8004e30:	e001      	b.n	8004e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
 8004e50:	4613      	mov	r3, r2
 8004e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e78:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e84:	d102      	bne.n	8004e8c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e8a:	e00b      	b.n	8004ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9a:	d102      	bne.n	8004ea2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ea0:	e000      	b.n	8004ea4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004ea2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40007000 	.word	0x40007000

08004eb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d141      	bne.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ece:	d131      	bne.n	8004f34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed0:	4b47      	ldr	r3, [pc, #284]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed6:	4a46      	ldr	r2, [pc, #280]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ee0:	4b43      	ldr	r3, [pc, #268]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee8:	4a41      	ldr	r2, [pc, #260]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ef0:	4b40      	ldr	r3, [pc, #256]	@ (8004ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2232      	movs	r2, #50	@ 0x32
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a3f      	ldr	r2, [pc, #252]	@ (8004ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	0c9b      	lsrs	r3, r3, #18
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f06:	e002      	b.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0e:	4b38      	ldr	r3, [pc, #224]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f1a:	d102      	bne.n	8004f22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f2      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f22:	4b33      	ldr	r3, [pc, #204]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d158      	bne.n	8004fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e057      	b.n	8004fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f34:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f44:	e04d      	b.n	8004fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d141      	bne.n	8004fd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f5a:	d131      	bne.n	8004fc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f5c:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f62:	4a23      	ldr	r2, [pc, #140]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f6c:	4b20      	ldr	r3, [pc, #128]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f74:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2232      	movs	r2, #50	@ 0x32
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	0c9b      	lsrs	r3, r3, #18
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f92:	e002      	b.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa6:	d102      	bne.n	8004fae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f2      	bne.n	8004f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fae:	4b10      	ldr	r3, [pc, #64]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d112      	bne.n	8004fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e011      	b.n	8004fe4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fd0:	e007      	b.n	8004fe2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fd2:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fda:	4a05      	ldr	r2, [pc, #20]	@ (8004ff0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fe0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	20040088 	.word	0x20040088
 8004ff8:	431bde83 	.word	0x431bde83

08004ffc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500a:	6053      	str	r3, [r2, #4]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40007000 	.word	0x40007000

0800501c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f000 bc08 	b.w	8005840 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005030:	4b96      	ldr	r3, [pc, #600]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503a:	4b94      	ldr	r3, [pc, #592]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80e4 	beq.w	800521a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_RCC_OscConfig+0x4c>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	f040 808b 	bne.w	8005176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	f040 8087 	bne.w	8005176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005068:	4b88      	ldr	r3, [pc, #544]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_OscConfig+0x64>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e3df      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	4b81      	ldr	r3, [pc, #516]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_RCC_OscConfig+0x7e>
 8005090:	4b7e      	ldr	r3, [pc, #504]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005098:	e005      	b.n	80050a6 <HAL_RCC_OscConfig+0x8a>
 800509a:	4b7c      	ldr	r3, [pc, #496]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d223      	bcs.n	80050f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fdcc 	bl	8005c4c <RCC_SetFlashLatencyFromMSIRange>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e3c0      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050be:	4b73      	ldr	r3, [pc, #460]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	4b70      	ldr	r3, [pc, #448]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	496d      	ldr	r1, [pc, #436]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050dc:	4b6b      	ldr	r3, [pc, #428]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	4968      	ldr	r1, [pc, #416]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	e025      	b.n	800513e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050f2:	4b66      	ldr	r3, [pc, #408]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80050f8:	f043 0308 	orr.w	r3, r3, #8
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b63      	ldr	r3, [pc, #396]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4960      	ldr	r1, [pc, #384]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005110:	4b5e      	ldr	r3, [pc, #376]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	495b      	ldr	r1, [pc, #364]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fd8c 	bl	8005c4c <RCC_SetFlashLatencyFromMSIRange>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e380      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800513e:	f000 fcc1 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b51      	ldr	r3, [pc, #324]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	4950      	ldr	r1, [pc, #320]	@ (8005290 <HAL_RCC_OscConfig+0x274>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a4e      	ldr	r2, [pc, #312]	@ (8005294 <HAL_RCC_OscConfig+0x278>)
 800515c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800515e:	4b4e      	ldr	r3, [pc, #312]	@ (8005298 <HAL_RCC_OscConfig+0x27c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fa90 	bl	8003688 <HAL_InitTick>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d052      	beq.n	8005218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	e364      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d032      	beq.n	80051e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800517e:	4b43      	ldr	r3, [pc, #268]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a42      	ldr	r2, [pc, #264]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800518a:	f7fe facd 	bl	8003728 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005192:	f7fe fac9 	bl	8003728 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e34d      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a4:	4b39      	ldr	r3, [pc, #228]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b0:	4b36      	ldr	r3, [pc, #216]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051b6:	f043 0308 	orr.w	r3, r3, #8
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b33      	ldr	r3, [pc, #204]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	4930      	ldr	r1, [pc, #192]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ce:	4b2f      	ldr	r3, [pc, #188]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	492b      	ldr	r1, [pc, #172]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
 80051e2:	e01a      	b.n	800521a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051e4:	4b29      	ldr	r3, [pc, #164]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a28      	ldr	r2, [pc, #160]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051f0:	f7fe fa9a 	bl	8003728 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f8:	f7fe fa96 	bl	8003728 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e31a      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800520a:	4b20      	ldr	r3, [pc, #128]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1dc>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d073      	beq.n	800530e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d005      	beq.n	8005238 <HAL_RCC_OscConfig+0x21c>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d10e      	bne.n	8005250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d10b      	bne.n	8005250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	4b14      	ldr	r3, [pc, #80]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d063      	beq.n	800530c <HAL_RCC_OscConfig+0x2f0>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15f      	bne.n	800530c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e2f7      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005258:	d106      	bne.n	8005268 <HAL_RCC_OscConfig+0x24c>
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0b      	ldr	r2, [pc, #44]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e025      	b.n	80052b4 <HAL_RCC_OscConfig+0x298>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005270:	d114      	bne.n	800529c <HAL_RCC_OscConfig+0x280>
 8005272:	4b06      	ldr	r3, [pc, #24]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a05      	ldr	r2, [pc, #20]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b03      	ldr	r3, [pc, #12]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a02      	ldr	r2, [pc, #8]	@ (800528c <HAL_RCC_OscConfig+0x270>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e013      	b.n	80052b4 <HAL_RCC_OscConfig+0x298>
 800528c:	40021000 	.word	0x40021000
 8005290:	0809ac9c 	.word	0x0809ac9c
 8005294:	20040088 	.word	0x20040088
 8005298:	2004009c 	.word	0x2004009c
 800529c:	4ba0      	ldr	r3, [pc, #640]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fe fa34 	bl	8003728 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fe fa30 	bl	8003728 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	@ 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e2b4      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	4b92      	ldr	r3, [pc, #584]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x2a8>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fa20 	bl	8003728 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fe fa1c 	bl	8003728 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	@ 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e2a0      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052fe:	4b88      	ldr	r3, [pc, #544]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x2d0>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d060      	beq.n	80053dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x310>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d119      	bne.n	800535a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d116      	bne.n	800535a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800532c:	4b7c      	ldr	r3, [pc, #496]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x328>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e27d      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4b76      	ldr	r3, [pc, #472]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	4973      	ldr	r1, [pc, #460]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005354:	4313      	orrs	r3, r2
 8005356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005358:	e040      	b.n	80053dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d023      	beq.n	80053aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005362:	4b6f      	ldr	r3, [pc, #444]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6e      	ldr	r2, [pc, #440]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fe f9db 	bl	8003728 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fe f9d7 	bl	8003728 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e25b      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005388:	4b65      	ldr	r3, [pc, #404]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b62      	ldr	r3, [pc, #392]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	495f      	ldr	r1, [pc, #380]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	e018      	b.n	80053dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fe f9b7 	bl	8003728 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053be:	f7fe f9b3 	bl	8003728 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e237      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d0:	4b53      	ldr	r3, [pc, #332]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03c      	beq.n	8005462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fe f992 	bl	8003728 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005408:	f7fe f98e 	bl	8003728 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e212      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800541a:	4b41      	ldr	r3, [pc, #260]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ef      	beq.n	8005408 <HAL_RCC_OscConfig+0x3ec>
 8005428:	e01b      	b.n	8005462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542a:	4b3d      	ldr	r3, [pc, #244]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800542c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005430:	4a3b      	ldr	r2, [pc, #236]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fe f975 	bl	8003728 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fe f971 	bl	8003728 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1f5      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005454:	4b32      	ldr	r3, [pc, #200]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ef      	bne.n	8005442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a6 	beq.w	80055bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005470:	2300      	movs	r3, #0
 8005472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005474:	4b2a      	ldr	r3, [pc, #168]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b27      	ldr	r3, [pc, #156]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005484:	4a26      	ldr	r2, [pc, #152]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548a:	6593      	str	r3, [r2, #88]	@ 0x58
 800548c:	4b24      	ldr	r3, [pc, #144]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005498:	2301      	movs	r3, #1
 800549a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4b21      	ldr	r3, [pc, #132]	@ (8005524 <HAL_RCC_OscConfig+0x508>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d118      	bne.n	80054da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <HAL_RCC_OscConfig+0x508>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005524 <HAL_RCC_OscConfig+0x508>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b4:	f7fe f938 	bl	8003728 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fe f934 	bl	8003728 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1b8      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ce:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <HAL_RCC_OscConfig+0x508>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d108      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4d8>
 80054e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054f2:	e029      	b.n	8005548 <HAL_RCC_OscConfig+0x52c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d115      	bne.n	8005528 <HAL_RCC_OscConfig+0x50c>
 80054fc:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005502:	4a07      	ldr	r2, [pc, #28]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005504:	f043 0304 	orr.w	r3, r3, #4
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800550c:	4b04      	ldr	r3, [pc, #16]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005512:	4a03      	ldr	r2, [pc, #12]	@ (8005520 <HAL_RCC_OscConfig+0x504>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800551c:	e014      	b.n	8005548 <HAL_RCC_OscConfig+0x52c>
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000
 8005524:	40007000 	.word	0x40007000
 8005528:	4b9d      	ldr	r3, [pc, #628]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	4a9c      	ldr	r2, [pc, #624]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005538:	4b99      	ldr	r3, [pc, #612]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553e:	4a98      	ldr	r2, [pc, #608]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fe f8ea 	bl	8003728 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005556:	e00a      	b.n	800556e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fe f8e6 	bl	8003728 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e168      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	4b8c      	ldr	r3, [pc, #560]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ed      	beq.n	8005558 <HAL_RCC_OscConfig+0x53c>
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fe f8d3 	bl	8003728 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fe f8cf 	bl	8003728 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e151      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800559c:	4b80      	ldr	r3, [pc, #512]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ed      	bne.n	8005586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b0:	4b7b      	ldr	r3, [pc, #492]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	4a7a      	ldr	r2, [pc, #488]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d03c      	beq.n	8005642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01c      	beq.n	800560a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d0:	4b73      	ldr	r3, [pc, #460]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d6:	4a72      	ldr	r2, [pc, #456]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fe f8a2 	bl	8003728 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e8:	f7fe f89e 	bl	8003728 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e122      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fa:	4b69      	ldr	r3, [pc, #420]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <HAL_RCC_OscConfig+0x5cc>
 8005608:	e01b      	b.n	8005642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800560a:	4b65      	ldr	r3, [pc, #404]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800560c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005610:	4a63      	ldr	r2, [pc, #396]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fe f885 	bl	8003728 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005622:	f7fe f881 	bl	8003728 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e105      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005634:	4b5a      	ldr	r3, [pc, #360]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ef      	bne.n	8005622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80f9 	beq.w	800583e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	2b02      	cmp	r3, #2
 8005652:	f040 80cf 	bne.w	80057f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005656:	4b52      	ldr	r3, [pc, #328]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	429a      	cmp	r2, r3
 8005668:	d12c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	3b01      	subs	r3, #1
 8005676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d123      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d11b      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d113      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	3b01      	subs	r3, #1
 80056aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d109      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d071      	beq.n	80057a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d068      	beq.n	800579c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056ca:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056d6:	4b32      	ldr	r3, [pc, #200]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0ac      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056e6:	4b2e      	ldr	r3, [pc, #184]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2d      	ldr	r2, [pc, #180]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056f2:	f7fe f819 	bl	8003728 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fa:	f7fe f815 	bl	8003728 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e099      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570c:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005718:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <HAL_RCC_OscConfig+0x788>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005728:	3a01      	subs	r2, #1
 800572a:	0112      	lsls	r2, r2, #4
 800572c:	4311      	orrs	r1, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005732:	0212      	lsls	r2, r2, #8
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800573a:	0852      	lsrs	r2, r2, #1
 800573c:	3a01      	subs	r2, #1
 800573e:	0552      	lsls	r2, r2, #21
 8005740:	4311      	orrs	r1, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005746:	0852      	lsrs	r2, r2, #1
 8005748:	3a01      	subs	r2, #1
 800574a:	0652      	lsls	r2, r2, #25
 800574c:	4311      	orrs	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005752:	06d2      	lsls	r2, r2, #27
 8005754:	430a      	orrs	r2, r1
 8005756:	4912      	ldr	r1, [pc, #72]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800575c:	4b10      	ldr	r3, [pc, #64]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005768:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 800576e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005774:	f7fd ffd8 	bl	8003728 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577c:	f7fd ffd4 	bl	8003728 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e058      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578e:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800579a:	e050      	b.n	800583e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e04f      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
 80057a0:	40021000 	.word	0x40021000
 80057a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a8:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d144      	bne.n	800583e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057b4:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a23      	ldr	r2, [pc, #140]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c0:	4b21      	ldr	r3, [pc, #132]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a20      	ldr	r2, [pc, #128]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057cc:	f7fd ffac 	bl	8003728 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd ffa8 	bl	8003728 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e02c      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	4b18      	ldr	r3, [pc, #96]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x7b8>
 80057f2:	e024      	b.n	800583e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d01f      	beq.n	800583a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b13      	ldr	r3, [pc, #76]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a12      	ldr	r2, [pc, #72]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fd ff8f 	bl	8003728 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fd ff8b 	bl	8003728 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e00f      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f0      	bne.n	800580e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	4905      	ldr	r1, [pc, #20]	@ (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_RCC_OscConfig+0x830>)
 8005834:	4013      	ands	r3, r2
 8005836:	60cb      	str	r3, [r1, #12]
 8005838:	e001      	b.n	800583e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	feeefffc 	.word	0xfeeefffc

08005850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e11d      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b90      	ldr	r3, [pc, #576]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b8d      	ldr	r3, [pc, #564]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	498b      	ldr	r1, [pc, #556]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b89      	ldr	r3, [pc, #548]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e105      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	4b81      	ldr	r3, [pc, #516]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d908      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	497b      	ldr	r1, [pc, #492]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d079      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d11e      	bne.n	8005918 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058da:	4b75      	ldr	r3, [pc, #468]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0dc      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80058ea:	f000 fa09 	bl	8005d00 <RCC_GetSysClockFreqFromPLLSource>
 80058ee:	4603      	mov	r3, r0
 80058f0:	4a70      	ldr	r2, [pc, #448]	@ (8005ab4 <HAL_RCC_ClockConfig+0x264>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d946      	bls.n	8005984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058f6:	4b6e      	ldr	r3, [pc, #440]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d140      	bne.n	8005984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005902:	4b6b      	ldr	r3, [pc, #428]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800590a:	4a69      	ldr	r2, [pc, #420]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800590c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e035      	b.n	8005984 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d107      	bne.n	8005930 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005920:	4b63      	ldr	r3, [pc, #396]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d115      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0b9      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	4b5d      	ldr	r3, [pc, #372]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0ad      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005948:	4b59      	ldr	r3, [pc, #356]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0a5      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005958:	f000 f8b4 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 800595c:	4603      	mov	r3, r0
 800595e:	4a55      	ldr	r2, [pc, #340]	@ (8005ab4 <HAL_RCC_ClockConfig+0x264>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d90f      	bls.n	8005984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005964:	4b52      	ldr	r3, [pc, #328]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005970:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005978:	4a4d      	ldr	r2, [pc, #308]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800597a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005980:	2380      	movs	r3, #128	@ 0x80
 8005982:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005984:	4b4a      	ldr	r3, [pc, #296]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 0203 	bic.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4947      	ldr	r1, [pc, #284]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005996:	f7fd fec7 	bl	8003728 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599c:	e00a      	b.n	80059b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599e:	f7fd fec3 	bl	8003728 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e077      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 020c 	and.w	r2, r3, #12
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d1eb      	bne.n	800599e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b80      	cmp	r3, #128	@ 0x80
 80059ca:	d105      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059cc:	4b38      	ldr	r3, [pc, #224]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4b31      	ldr	r3, [pc, #196]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	492b      	ldr	r1, [pc, #172]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a06:	4b29      	ldr	r3, [pc, #164]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d210      	bcs.n	8005a36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a14:	4b25      	ldr	r3, [pc, #148]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 020f 	bic.w	r2, r3, #15
 8005a1c:	4923      	ldr	r1, [pc, #140]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a24:	4b21      	ldr	r3, [pc, #132]	@ (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e036      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a42:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4918      	ldr	r1, [pc, #96]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a60:	4b13      	ldr	r3, [pc, #76]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4910      	ldr	r1, [pc, #64]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a74:	f000 f826 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	490c      	ldr	r1, [pc, #48]	@ (8005ab8 <HAL_RCC_ClockConfig+0x268>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <HAL_RCC_ClockConfig+0x26c>)
 8005a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac0 <HAL_RCC_ClockConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fd fdf5 	bl	8003688 <HAL_InitTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	04c4b400 	.word	0x04c4b400
 8005ab8:	0809ac9c 	.word	0x0809ac9c
 8005abc:	20040088 	.word	0x20040088
 8005ac0:	2004009c 	.word	0x2004009c

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005adc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x34>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b0c      	cmp	r3, #12
 8005af0:	d121      	bne.n	8005b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d11e      	bne.n	8005b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005af8:	4b34      	ldr	r3, [pc, #208]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b04:	4b31      	ldr	r3, [pc, #196]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e005      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b14:	4b2d      	ldr	r3, [pc, #180]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b20:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10d      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d102      	bne.n	8005b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b3c:	4b25      	ldr	r3, [pc, #148]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e004      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b48:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d134      	bne.n	8005bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b52:	4b1e      	ldr	r3, [pc, #120]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d003      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0xac>
 8005b68:	e005      	b.n	8005b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b6c:	617b      	str	r3, [r7, #20]
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b70:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b72:	617b      	str	r3, [r7, #20]
      break;
 8005b74:	e002      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	617b      	str	r3, [r7, #20]
      break;
 8005b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b7c:	4b13      	ldr	r3, [pc, #76]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3301      	adds	r3, #1
 8005b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	fb03 f202 	mul.w	r2, r3, r2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	0e5b      	lsrs	r3, r3, #25
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	3301      	adds	r3, #1
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	@ 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	0809acb4 	.word	0x0809acb4
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	007a1200 	.word	0x007a1200

08005bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be0:	4b03      	ldr	r3, [pc, #12]	@ (8005bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20040088 	.word	0x20040088

08005bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bf8:	f7ff fff0 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0809acac 	.word	0x0809acac

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c24:	f7ff ffda 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0adb      	lsrs	r3, r3, #11
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	@ (8005c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0809acac 	.word	0x0809acac

08005c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c58:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c64:	f7ff f906 	bl	8004e74 <HAL_PWREx_GetVoltageRange>
 8005c68:	6178      	str	r0, [r7, #20]
 8005c6a:	e014      	b.n	8005c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c6c:	4b22      	ldr	r3, [pc, #136]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c70:	4a21      	ldr	r2, [pc, #132]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c78:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c84:	f7ff f8f6 	bl	8004e74 <HAL_PWREx_GetVoltageRange>
 8005c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c9c:	d10b      	bne.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b80      	cmp	r3, #128	@ 0x80
 8005ca2:	d913      	bls.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ca8:	d902      	bls.n	8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005caa:	2302      	movs	r3, #2
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e00d      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e00a      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cba:	d902      	bls.n	8005cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e004      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b70      	cmp	r3, #112	@ 0x70
 8005cc6:	d101      	bne.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cc8:	2301      	movs	r3, #1
 8005cca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 020f 	bic.w	r2, r3, #15
 8005cd4:	4909      	ldr	r1, [pc, #36]	@ (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cdc:	4b07      	ldr	r3, [pc, #28]	@ (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d001      	beq.n	8005cee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40022000 	.word	0x40022000

08005d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d06:	4b2d      	ldr	r3, [pc, #180]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d00b      	beq.n	8005d2e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d825      	bhi.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d008      	beq.n	8005d34 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d11f      	bne.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005d28:	4b25      	ldr	r3, [pc, #148]	@ (8005dc0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d2a:	613b      	str	r3, [r7, #16]
    break;
 8005d2c:	e01f      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005d30:	613b      	str	r3, [r7, #16]
    break;
 8005d32:	e01c      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e005      	b.n	8005d5c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d50:	4b1a      	ldr	r3, [pc, #104]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	613b      	str	r3, [r7, #16]
    break;
 8005d66:	e002      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
    break;
 8005d6c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	fb03 f202 	mul.w	r2, r3, r2
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0e5b      	lsrs	r3, r3, #25
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005dae:	683b      	ldr	r3, [r7, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	0809acb4 	.word	0x0809acb4

08005dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dd8:	2300      	movs	r3, #0
 8005dda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d040      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dec:	2b80      	cmp	r3, #128	@ 0x80
 8005dee:	d02a      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005df0:	2b80      	cmp	r3, #128	@ 0x80
 8005df2:	d825      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005df4:	2b60      	cmp	r3, #96	@ 0x60
 8005df6:	d026      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005df8:	2b60      	cmp	r3, #96	@ 0x60
 8005dfa:	d821      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dfc:	2b40      	cmp	r3, #64	@ 0x40
 8005dfe:	d006      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005e00:	2b40      	cmp	r3, #64	@ 0x40
 8005e02:	d81d      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d010      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005e0c:	e018      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e0e:	4b89      	ldr	r3, [pc, #548]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4a88      	ldr	r2, [pc, #544]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e18:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e1a:	e015      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb02 	bl	800642c <RCCEx_PLLSAI1_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3320      	adds	r3, #32
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fbed 	bl	8006614 <RCCEx_PLLSAI2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	74fb      	strb	r3, [r7, #19]
      break;
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e4e:	4b79      	ldr	r3, [pc, #484]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e54:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5c:	4975      	ldr	r1, [pc, #468]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d047      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d030      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e84:	d82a      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e8a:	d02a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e90:	d824      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9c:	d81e      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea6:	d010      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ea8:	e018      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005eaa:	4b62      	ldr	r3, [pc, #392]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4a61      	ldr	r2, [pc, #388]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fab4 	bl	800642c <RCCEx_PLLSAI1_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ec8:	e00c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3320      	adds	r3, #32
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fb9f 	bl	8006614 <RCCEx_PLLSAI2_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eda:	e003      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	74fb      	strb	r3, [r7, #19]
      break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005eea:	4b52      	ldr	r3, [pc, #328]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	494e      	ldr	r1, [pc, #312]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005f00:	e001      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 809f 	beq.w	8006052 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f18:	4b46      	ldr	r3, [pc, #280]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	4b41      	ldr	r3, [pc, #260]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	4a40      	ldr	r2, [pc, #256]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f56:	f7fd fbe7 	bl	8003728 <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f5c:	e009      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fd fbe3 	bl	8003728 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d902      	bls.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	74fb      	strb	r3, [r7, #19]
        break;
 8005f70:	e005      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f72:	4b31      	ldr	r3, [pc, #196]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ef      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d15b      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f84:	4b2b      	ldr	r3, [pc, #172]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01f      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d019      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fa2:	4b24      	ldr	r3, [pc, #144]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fae:	4b21      	ldr	r3, [pc, #132]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fce:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fd fba2 	bl	8003728 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe6:	e00b      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fd fb9e 	bl	8003728 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d902      	bls.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	74fb      	strb	r3, [r7, #19]
            break;
 8005ffe:	e006      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006000:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0ec      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006014:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006024:	4903      	ldr	r1, [pc, #12]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800602c:	e008      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800602e:	7cfb      	ldrb	r3, [r7, #19]
 8006030:	74bb      	strb	r3, [r7, #18]
 8006032:	e005      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006034:	40021000 	.word	0x40021000
 8006038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006040:	7c7b      	ldrb	r3, [r7, #17]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d105      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4ba0      	ldr	r3, [pc, #640]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	4a9f      	ldr	r2, [pc, #636]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800605e:	4b9a      	ldr	r3, [pc, #616]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006064:	f023 0203 	bic.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	4996      	ldr	r1, [pc, #600]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006080:	4b91      	ldr	r3, [pc, #580]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006086:	f023 020c 	bic.w	r2, r3, #12
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	498e      	ldr	r1, [pc, #568]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060a2:	4b89      	ldr	r3, [pc, #548]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b0:	4985      	ldr	r1, [pc, #532]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c4:	4b80      	ldr	r3, [pc, #512]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d2:	497d      	ldr	r1, [pc, #500]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060e6:	4b78      	ldr	r3, [pc, #480]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	4974      	ldr	r1, [pc, #464]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006108:	4b6f      	ldr	r3, [pc, #444]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006116:	496c      	ldr	r1, [pc, #432]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612a:	4b67      	ldr	r3, [pc, #412]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006138:	4963      	ldr	r1, [pc, #396]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800614c:	4b5e      	ldr	r3, [pc, #376]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800615a:	495b      	ldr	r1, [pc, #364]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800616e:	4b56      	ldr	r3, [pc, #344]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617c:	4952      	ldr	r1, [pc, #328]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006190:	4b4d      	ldr	r3, [pc, #308]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619e:	494a      	ldr	r1, [pc, #296]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061b2:	4b45      	ldr	r3, [pc, #276]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c0:	4941      	ldr	r1, [pc, #260]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061d4:	4b3c      	ldr	r3, [pc, #240]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061da:	f023 0203 	bic.w	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e2:	4939      	ldr	r1, [pc, #228]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d028      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f6:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006204:	4930      	ldr	r1, [pc, #192]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006214:	d106      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006216:	4b2c      	ldr	r3, [pc, #176]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	4a2b      	ldr	r2, [pc, #172]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006220:	60d3      	str	r3, [r2, #12]
 8006222:	e011      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800622c:	d10c      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3304      	adds	r3, #4
 8006232:	2101      	movs	r1, #1
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f8f9 	bl	800642c <RCCEx_PLLSAI1_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800623e:	7cfb      	ldrb	r3, [r7, #19]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d04d      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625c:	d108      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800625e:	4b1a      	ldr	r3, [pc, #104]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006260:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006264:	4a18      	ldr	r2, [pc, #96]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800626a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800626e:	e012      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006270:	4b15      	ldr	r3, [pc, #84]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006276:	4a14      	ldr	r2, [pc, #80]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006278:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800627c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006280:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800628e:	490e      	ldr	r1, [pc, #56]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800629a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800629e:	d106      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a0:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a08      	ldr	r2, [pc, #32]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062aa:	60d3      	str	r3, [r2, #12]
 80062ac:	e020      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b6:	d109      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062b8:	4b03      	ldr	r3, [pc, #12]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4a02      	ldr	r2, [pc, #8]	@ (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c2:	60d3      	str	r3, [r2, #12]
 80062c4:	e014      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f8a5 	bl	800642c <RCCEx_PLLSAI1_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e6:	7cfb      	ldrb	r3, [r7, #19]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d028      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800630a:	4947      	ldr	r1, [pc, #284]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800631c:	4b42      	ldr	r3, [pc, #264]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a41      	ldr	r2, [pc, #260]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006326:	60d3      	str	r3, [r2, #12]
 8006328:	e011      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800632e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006332:	d10c      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f876 	bl	800642c <RCCEx_PLLSAI1_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006344:	7cfb      	ldrb	r3, [r7, #19]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01e      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800635a:	4b33      	ldr	r3, [pc, #204]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006360:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800636a:	492f      	ldr	r1, [pc, #188]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800637c:	d10c      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f851 	bl	800642c <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063a4:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063aa:	f023 0204 	bic.w	r2, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063b4:	491c      	ldr	r1, [pc, #112]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063c8:	4b17      	ldr	r3, [pc, #92]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ce:	f023 0218 	bic.w	r2, r3, #24
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d8:	4913      	ldr	r1, [pc, #76]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063fc:	490a      	ldr	r1, [pc, #40]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800640a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800640e:	d105      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006410:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a04      	ldr	r2, [pc, #16]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800641a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800641c:	7cbb      	ldrb	r3, [r7, #18]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000

0800642c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800643a:	4b72      	ldr	r3, [pc, #456]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006446:	4b6f      	ldr	r3, [pc, #444]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0203 	and.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d103      	bne.n	800645e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
       ||
 800645a:	2b00      	cmp	r3, #0
 800645c:	d142      	bne.n	80064e4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	e03f      	b.n	80064e4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b03      	cmp	r3, #3
 800646a:	d018      	beq.n	800649e <RCCEx_PLLSAI1_Config+0x72>
 800646c:	2b03      	cmp	r3, #3
 800646e:	d825      	bhi.n	80064bc <RCCEx_PLLSAI1_Config+0x90>
 8006470:	2b01      	cmp	r3, #1
 8006472:	d002      	beq.n	800647a <RCCEx_PLLSAI1_Config+0x4e>
 8006474:	2b02      	cmp	r3, #2
 8006476:	d009      	beq.n	800648c <RCCEx_PLLSAI1_Config+0x60>
 8006478:	e020      	b.n	80064bc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800647a:	4b62      	ldr	r3, [pc, #392]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11d      	bne.n	80064c2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800648a:	e01a      	b.n	80064c2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800648c:	4b5d      	ldr	r3, [pc, #372]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800649c:	e013      	b.n	80064c6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800649e:	4b59      	ldr	r3, [pc, #356]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064aa:	4b56      	ldr	r3, [pc, #344]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ba:	e006      	b.n	80064ca <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
      break;
 80064c0:	e004      	b.n	80064cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80064d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f023 0203 	bic.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4949      	ldr	r1, [pc, #292]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 8086 	bne.w	80065f8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064ec:	4b45      	ldr	r3, [pc, #276]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a44      	ldr	r2, [pc, #272]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f8:	f7fd f916 	bl	8003728 <HAL_GetTick>
 80064fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064fe:	e009      	b.n	8006514 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006500:	f7fd f912 	bl	8003728 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d902      	bls.n	8006514 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	73fb      	strb	r3, [r7, #15]
        break;
 8006512:	e005      	b.n	8006520 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006514:	4b3b      	ldr	r3, [pc, #236]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1ef      	bne.n	8006500 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d168      	bne.n	80065f8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d113      	bne.n	8006554 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800652c:	4b35      	ldr	r3, [pc, #212]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	4b35      	ldr	r3, [pc, #212]	@ (8006608 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006532:	4013      	ands	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6892      	ldr	r2, [r2, #8]
 8006538:	0211      	lsls	r1, r2, #8
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68d2      	ldr	r2, [r2, #12]
 800653e:	06d2      	lsls	r2, r2, #27
 8006540:	4311      	orrs	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6852      	ldr	r2, [r2, #4]
 8006546:	3a01      	subs	r2, #1
 8006548:	0112      	lsls	r2, r2, #4
 800654a:	430a      	orrs	r2, r1
 800654c:	492d      	ldr	r1, [pc, #180]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800654e:	4313      	orrs	r3, r2
 8006550:	610b      	str	r3, [r1, #16]
 8006552:	e02d      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d115      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800655a:	4b2a      	ldr	r3, [pc, #168]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	4b2b      	ldr	r3, [pc, #172]	@ (800660c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6892      	ldr	r2, [r2, #8]
 8006566:	0211      	lsls	r1, r2, #8
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6912      	ldr	r2, [r2, #16]
 800656c:	0852      	lsrs	r2, r2, #1
 800656e:	3a01      	subs	r2, #1
 8006570:	0552      	lsls	r2, r2, #21
 8006572:	4311      	orrs	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6852      	ldr	r2, [r2, #4]
 8006578:	3a01      	subs	r2, #1
 800657a:	0112      	lsls	r2, r2, #4
 800657c:	430a      	orrs	r2, r1
 800657e:	4921      	ldr	r1, [pc, #132]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006580:	4313      	orrs	r3, r2
 8006582:	610b      	str	r3, [r1, #16]
 8006584:	e014      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006586:	4b1f      	ldr	r3, [pc, #124]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6892      	ldr	r2, [r2, #8]
 8006592:	0211      	lsls	r1, r2, #8
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6952      	ldr	r2, [r2, #20]
 8006598:	0852      	lsrs	r2, r2, #1
 800659a:	3a01      	subs	r2, #1
 800659c:	0652      	lsls	r2, r2, #25
 800659e:	4311      	orrs	r1, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6852      	ldr	r2, [r2, #4]
 80065a4:	3a01      	subs	r2, #1
 80065a6:	0112      	lsls	r2, r2, #4
 80065a8:	430a      	orrs	r2, r1
 80065aa:	4916      	ldr	r1, [pc, #88]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065b0:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065bc:	f7fd f8b4 	bl	8003728 <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065c2:	e009      	b.n	80065d8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065c4:	f7fd f8b0 	bl	8003728 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d902      	bls.n	80065d8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	73fb      	strb	r3, [r7, #15]
          break;
 80065d6:	e005      	b.n	80065e4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0ef      	beq.n	80065c4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065ea:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	4904      	ldr	r1, [pc, #16]	@ (8006604 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40021000 	.word	0x40021000
 8006608:	07ff800f 	.word	0x07ff800f
 800660c:	ff9f800f 	.word	0xff9f800f
 8006610:	f9ff800f 	.word	0xf9ff800f

08006614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006622:	4b72      	ldr	r3, [pc, #456]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800662e:	4b6f      	ldr	r3, [pc, #444]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0203 	and.w	r2, r3, #3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d103      	bne.n	8006646 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
       ||
 8006642:	2b00      	cmp	r3, #0
 8006644:	d142      	bne.n	80066cc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	e03f      	b.n	80066cc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d018      	beq.n	8006686 <RCCEx_PLLSAI2_Config+0x72>
 8006654:	2b03      	cmp	r3, #3
 8006656:	d825      	bhi.n	80066a4 <RCCEx_PLLSAI2_Config+0x90>
 8006658:	2b01      	cmp	r3, #1
 800665a:	d002      	beq.n	8006662 <RCCEx_PLLSAI2_Config+0x4e>
 800665c:	2b02      	cmp	r3, #2
 800665e:	d009      	beq.n	8006674 <RCCEx_PLLSAI2_Config+0x60>
 8006660:	e020      	b.n	80066a4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006662:	4b62      	ldr	r3, [pc, #392]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d11d      	bne.n	80066aa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006672:	e01a      	b.n	80066aa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006674:	4b5d      	ldr	r3, [pc, #372]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800667c:	2b00      	cmp	r3, #0
 800667e:	d116      	bne.n	80066ae <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006684:	e013      	b.n	80066ae <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006686:	4b59      	ldr	r3, [pc, #356]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10f      	bne.n	80066b2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006692:	4b56      	ldr	r3, [pc, #344]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066a2:	e006      	b.n	80066b2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
      break;
 80066a8:	e004      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d108      	bne.n	80066cc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80066ba:	4b4c      	ldr	r3, [pc, #304]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4949      	ldr	r1, [pc, #292]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 8086 	bne.w	80067e0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066d4:	4b45      	ldr	r3, [pc, #276]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a44      	ldr	r2, [pc, #272]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80066da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e0:	f7fd f822 	bl	8003728 <HAL_GetTick>
 80066e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066e6:	e009      	b.n	80066fc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066e8:	f7fd f81e 	bl	8003728 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d902      	bls.n	80066fc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	73fb      	strb	r3, [r7, #15]
        break;
 80066fa:	e005      	b.n	8006708 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066fc:	4b3b      	ldr	r3, [pc, #236]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ef      	bne.n	80066e8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d168      	bne.n	80067e0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d113      	bne.n	800673c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006714:	4b35      	ldr	r3, [pc, #212]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	4b35      	ldr	r3, [pc, #212]	@ (80067f0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800671a:	4013      	ands	r3, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6892      	ldr	r2, [r2, #8]
 8006720:	0211      	lsls	r1, r2, #8
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	06d2      	lsls	r2, r2, #27
 8006728:	4311      	orrs	r1, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6852      	ldr	r2, [r2, #4]
 800672e:	3a01      	subs	r2, #1
 8006730:	0112      	lsls	r2, r2, #4
 8006732:	430a      	orrs	r2, r1
 8006734:	492d      	ldr	r1, [pc, #180]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006736:	4313      	orrs	r3, r2
 8006738:	614b      	str	r3, [r1, #20]
 800673a:	e02d      	b.n	8006798 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d115      	bne.n	800676e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006742:	4b2a      	ldr	r3, [pc, #168]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	4b2b      	ldr	r3, [pc, #172]	@ (80067f4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6892      	ldr	r2, [r2, #8]
 800674e:	0211      	lsls	r1, r2, #8
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6912      	ldr	r2, [r2, #16]
 8006754:	0852      	lsrs	r2, r2, #1
 8006756:	3a01      	subs	r2, #1
 8006758:	0552      	lsls	r2, r2, #21
 800675a:	4311      	orrs	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6852      	ldr	r2, [r2, #4]
 8006760:	3a01      	subs	r2, #1
 8006762:	0112      	lsls	r2, r2, #4
 8006764:	430a      	orrs	r2, r1
 8006766:	4921      	ldr	r1, [pc, #132]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006768:	4313      	orrs	r3, r2
 800676a:	614b      	str	r3, [r1, #20]
 800676c:	e014      	b.n	8006798 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800676e:	4b1f      	ldr	r3, [pc, #124]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006770:	695a      	ldr	r2, [r3, #20]
 8006772:	4b21      	ldr	r3, [pc, #132]	@ (80067f8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006774:	4013      	ands	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6892      	ldr	r2, [r2, #8]
 800677a:	0211      	lsls	r1, r2, #8
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6952      	ldr	r2, [r2, #20]
 8006780:	0852      	lsrs	r2, r2, #1
 8006782:	3a01      	subs	r2, #1
 8006784:	0652      	lsls	r2, r2, #25
 8006786:	4311      	orrs	r1, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6852      	ldr	r2, [r2, #4]
 800678c:	3a01      	subs	r2, #1
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	430a      	orrs	r2, r1
 8006792:	4916      	ldr	r1, [pc, #88]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8006794:	4313      	orrs	r3, r2
 8006796:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006798:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a13      	ldr	r2, [pc, #76]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800679e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fc ffc0 	bl	8003728 <HAL_GetTick>
 80067a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067aa:	e009      	b.n	80067c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067ac:	f7fc ffbc 	bl	8003728 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d902      	bls.n	80067c0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
          break;
 80067be:	e005      	b.n	80067cc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ef      	beq.n	80067ac <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80067d2:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	4904      	ldr	r1, [pc, #16]	@ (80067ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40021000 	.word	0x40021000
 80067f0:	07ff800f 	.word	0x07ff800f
 80067f4:	ff9f800f 	.word	0xff9f800f
 80067f8:	f9ff800f 	.word	0xf9ff800f

080067fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e095      	b.n	800693a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	d108      	bne.n	8006828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800681e:	d009      	beq.n	8006834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
 8006826:	e005      	b.n	8006834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc f83c 	bl	80028cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006874:	d902      	bls.n	800687c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e002      	b.n	8006882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800687c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800688a:	d007      	beq.n	800689c <HAL_SPI_Init+0xa0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006894:	d002      	beq.n	800689c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068de:	ea42 0103 	orr.w	r1, r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	f003 0204 	and.w	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006918:	ea42 0103 	orr.w	r1, r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b088      	sub	sp, #32
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	4613      	mov	r3, r2
 8006950:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006952:	f7fc fee9 	bl	8003728 <HAL_GetTick>
 8006956:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b01      	cmp	r3, #1
 8006966:	d001      	beq.n	800696c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006968:	2302      	movs	r3, #2
 800696a:	e15c      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_SPI_Transmit+0x36>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e154      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_SPI_Transmit+0x48>
 8006986:	2302      	movs	r3, #2
 8006988:	e14d      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069dc:	d10f      	bne.n	80069fe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a08:	2b40      	cmp	r3, #64	@ 0x40
 8006a0a:	d007      	beq.n	8006a1c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a24:	d952      	bls.n	8006acc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_SPI_Transmit+0xf2>
 8006a2e:	8b7b      	ldrh	r3, [r7, #26]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d145      	bne.n	8006ac0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	881a      	ldrh	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	1c9a      	adds	r2, r3, #2
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a58:	e032      	b.n	8006ac0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d112      	bne.n	8006a8e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a8c:	e018      	b.n	8006ac0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8e:	f7fc fe4b 	bl	8003728 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d803      	bhi.n	8006aa6 <HAL_SPI_Transmit+0x164>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d102      	bne.n	8006aac <HAL_SPI_Transmit+0x16a>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0b2      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1c7      	bne.n	8006a5a <HAL_SPI_Transmit+0x118>
 8006aca:	e083      	b.n	8006bd4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_Transmit+0x198>
 8006ad4:	8b7b      	ldrh	r3, [r7, #26]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d177      	bne.n	8006bca <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d912      	bls.n	8006b0a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	1c9a      	adds	r2, r3, #2
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b02      	subs	r3, #2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b08:	e05f      	b.n	8006bca <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	7812      	ldrb	r2, [r2, #0]
 8006b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b30:	e04b      	b.n	8006bca <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d12b      	bne.n	8006b98 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d912      	bls.n	8006b70 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b02      	subs	r3, #2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b6e:	e02c      	b.n	8006bca <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b96:	e018      	b.n	8006bca <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b98:	f7fc fdc6 	bl	8003728 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d803      	bhi.n	8006bb0 <HAL_SPI_Transmit+0x26e>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d102      	bne.n	8006bb6 <HAL_SPI_Transmit+0x274>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e02d      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1ae      	bne.n	8006b32 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fb65 	bl	80072a8 <SPI_EndRxTxTransaction>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b08a      	sub	sp, #40	@ 0x28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c40:	f7fc fd72 	bl	8003728 <HAL_GetTick>
 8006c44:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c4c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c54:	887b      	ldrh	r3, [r7, #2]
 8006c56:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006c58:	887b      	ldrh	r3, [r7, #2]
 8006c5a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c5c:	7ffb      	ldrb	r3, [r7, #31]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d00c      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x4e>
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c68:	d106      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x4a>
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d001      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e1f3      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x60>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x60>
 8006c88:	887b      	ldrh	r3, [r7, #2]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e1e8      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x72>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e1e1      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d003      	beq.n	8006cbc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2205      	movs	r2, #5
 8006cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	887a      	ldrh	r2, [r7, #2]
 8006ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	887a      	ldrh	r2, [r7, #2]
 8006cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	887a      	ldrh	r2, [r7, #2]
 8006ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cfe:	d802      	bhi.n	8006d06 <HAL_SPI_TransmitReceive+0xd8>
 8006d00:	8abb      	ldrh	r3, [r7, #20]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d908      	bls.n	8006d18 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e007      	b.n	8006d28 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	d007      	beq.n	8006d46 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d4e:	f240 8083 	bls.w	8006e58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x132>
 8006d5a:	8afb      	ldrh	r3, [r7, #22]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d16f      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d64:	881a      	ldrh	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	1c9a      	adds	r2, r3, #2
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d84:	e05c      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d11b      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x19e>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x19e>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d113      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da8:	881a      	ldrh	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	1c9a      	adds	r2, r3, #2
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d11c      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x1e6>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d016      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	b292      	uxth	r2, r2
 8006df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e10:	2301      	movs	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e14:	f7fc fc88 	bl	8003728 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d80d      	bhi.n	8006e40 <HAL_SPI_TransmitReceive+0x212>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d009      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e111      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d19d      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x158>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d197      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x158>
 8006e56:	e0e5      	b.n	8007024 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_SPI_TransmitReceive+0x23a>
 8006e60:	8afb      	ldrh	r3, [r7, #22]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	f040 80d1 	bne.w	800700a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d912      	bls.n	8006e98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e96:	e0b8      	b.n	800700a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebe:	e0a4      	b.n	800700a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d134      	bne.n	8006f38 <HAL_SPI_TransmitReceive+0x30a>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d02f      	beq.n	8006f38 <HAL_SPI_TransmitReceive+0x30a>
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d12c      	bne.n	8006f38 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d912      	bls.n	8006f0e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b02      	subs	r3, #2
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f0c:	e012      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	330c      	adds	r3, #12
 8006f18:	7812      	ldrb	r2, [r2, #0]
 8006f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d148      	bne.n	8006fd8 <HAL_SPI_TransmitReceive+0x3aa>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d042      	beq.n	8006fd8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d923      	bls.n	8006fa6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	1c9a      	adds	r2, r3, #2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b02      	subs	r3, #2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d81f      	bhi.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	e016      	b.n	8006fd4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f103 020c 	add.w	r2, r3, #12
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fd8:	f7fc fba6 	bl	8003728 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d803      	bhi.n	8006ff0 <HAL_SPI_TransmitReceive+0x3c2>
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d102      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x3c8>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e02c      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af55 	bne.w	8006ec0 <HAL_SPI_TransmitReceive+0x292>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	f47f af4e 	bne.w	8006ec0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f93d 	bl	80072a8 <SPI_EndRxTxTransaction>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e00e      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007062:	2300      	movs	r3, #0
  }
}
 8007064:	4618      	mov	r0, r3
 8007066:	3728      	adds	r7, #40	@ 0x28
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800707c:	f7fc fb54 	bl	8003728 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4413      	add	r3, r2
 800708a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800708c:	f7fc fb4c 	bl	8003728 <HAL_GetTick>
 8007090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007092:	4b39      	ldr	r3, [pc, #228]	@ (8007178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	015b      	lsls	r3, r3, #5
 8007098:	0d1b      	lsrs	r3, r3, #20
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a2:	e054      	b.n	800714e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d050      	beq.n	800714e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ac:	f7fc fb3c 	bl	8003728 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d902      	bls.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d13d      	bne.n	800713e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070da:	d111      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e4:	d004      	beq.n	80070f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ee:	d107      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007108:	d10f      	bne.n	800712a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e017      	b.n	800716e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3b01      	subs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4013      	ands	r3, r2
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	429a      	cmp	r2, r3
 800716a:	d19b      	bne.n	80070a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20040088 	.word	0x20040088

0800717c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	@ 0x28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800718e:	f7fc facb 	bl	8003728 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	4413      	add	r3, r2
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800719e:	f7fc fac3 	bl	8003728 <HAL_GetTick>
 80071a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071ac:	4b3d      	ldr	r3, [pc, #244]	@ (80072a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	00da      	lsls	r2, r3, #3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	0d1b      	lsrs	r3, r3, #20
 80071bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071c4:	e060      	b.n	8007288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80071cc:	d107      	bne.n	80071de <SPI_WaitFifoStateUntilTimeout+0x62>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d050      	beq.n	8007288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e6:	f7fc fa9f 	bl	8003728 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d902      	bls.n	80071fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d13d      	bne.n	8007278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800720a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007214:	d111      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800721e:	d004      	beq.n	800722a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007228:	d107      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007242:	d10f      	bne.n	8007264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e010      	b.n	800729a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	3b01      	subs	r3, #1
 8007286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4013      	ands	r3, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d196      	bne.n	80071c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3728      	adds	r7, #40	@ 0x28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20040088 	.word	0x20040088

080072a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f7ff ff5b 	bl	800717c <SPI_WaitFifoStateUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e027      	b.n	800732c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2200      	movs	r2, #0
 80072e4:	2180      	movs	r1, #128	@ 0x80
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7ff fec0 	bl	800706c <SPI_WaitFlagStateUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f6:	f043 0220 	orr.w	r2, r3, #32
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e014      	b.n	800732c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff34 	bl	800717c <SPI_WaitFifoStateUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e000      	b.n	800732c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e049      	b.n	80073da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fb fb2a 	bl	80029b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f000 fad8 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d001      	beq.n	80073fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e04f      	b.n	800749c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a23      	ldr	r2, [pc, #140]	@ (80074a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d01d      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007426:	d018      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1f      	ldr	r2, [pc, #124]	@ (80074ac <HAL_TIM_Base_Start_IT+0xc8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1e      	ldr	r2, [pc, #120]	@ (80074b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1c      	ldr	r2, [pc, #112]	@ (80074b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d009      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1b      	ldr	r2, [pc, #108]	@ (80074b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d004      	beq.n	800745a <HAL_TIM_Base_Start_IT+0x76>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a19      	ldr	r2, [pc, #100]	@ (80074bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d115      	bne.n	8007486 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	4b17      	ldr	r3, [pc, #92]	@ (80074c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007462:	4013      	ands	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b06      	cmp	r3, #6
 800746a:	d015      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xb4>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007472:	d011      	beq.n	8007498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007484:	e008      	b.n	8007498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e000      	b.n	800749a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800
 80074b4:	40000c00 	.word	0x40000c00
 80074b8:	40013400 	.word	0x40013400
 80074bc:	40014000 	.word	0x40014000
 80074c0:	00010007 	.word	0x00010007

080074c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10f      	bne.n	800750c <HAL_TIM_Base_Stop_IT+0x48>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <HAL_TIM_Base_Stop_IT+0x48>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d020      	beq.n	8007586 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01b      	beq.n	8007586 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f06f 0202 	mvn.w	r2, #2
 8007556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9bc 	bl	80078ea <HAL_TIM_IC_CaptureCallback>
 8007572:	e005      	b.n	8007580 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f9ae 	bl	80078d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9bf 	bl	80078fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d020      	beq.n	80075d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01b      	beq.n	80075d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f06f 0204 	mvn.w	r2, #4
 80075a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f996 	bl	80078ea <HAL_TIM_IC_CaptureCallback>
 80075be:	e005      	b.n	80075cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f988 	bl	80078d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f999 	bl	80078fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01b      	beq.n	800761e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f06f 0208 	mvn.w	r2, #8
 80075ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2204      	movs	r2, #4
 80075f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f970 	bl	80078ea <HAL_TIM_IC_CaptureCallback>
 800760a:	e005      	b.n	8007618 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f962 	bl	80078d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f973 	bl	80078fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d020      	beq.n	800766a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01b      	beq.n	800766a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f06f 0210 	mvn.w	r2, #16
 800763a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2208      	movs	r2, #8
 8007640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f94a 	bl	80078ea <HAL_TIM_IC_CaptureCallback>
 8007656:	e005      	b.n	8007664 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f93c 	bl	80078d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f94d 	bl	80078fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d007      	beq.n	800768e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f06f 0201 	mvn.w	r2, #1
 8007686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f91a 	bl	80078c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d007      	beq.n	80076bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80076b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb08 	bl	8007ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00c      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fb00 	bl	8007ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f907 	bl	8007912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00c      	beq.n	8007728 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0220 	mvn.w	r2, #32
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fac8 	bl	8007cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIM_ConfigClockSource+0x1c>
 8007748:	2302      	movs	r3, #2
 800774a:	e0b6      	b.n	80078ba <HAL_TIM_ConfigClockSource+0x18a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800776a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800776e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007788:	d03e      	beq.n	8007808 <HAL_TIM_ConfigClockSource+0xd8>
 800778a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800778e:	f200 8087 	bhi.w	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007796:	f000 8086 	beq.w	80078a6 <HAL_TIM_ConfigClockSource+0x176>
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779e:	d87f      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077a0:	2b70      	cmp	r3, #112	@ 0x70
 80077a2:	d01a      	beq.n	80077da <HAL_TIM_ConfigClockSource+0xaa>
 80077a4:	2b70      	cmp	r3, #112	@ 0x70
 80077a6:	d87b      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077a8:	2b60      	cmp	r3, #96	@ 0x60
 80077aa:	d050      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x11e>
 80077ac:	2b60      	cmp	r3, #96	@ 0x60
 80077ae:	d877      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077b0:	2b50      	cmp	r3, #80	@ 0x50
 80077b2:	d03c      	beq.n	800782e <HAL_TIM_ConfigClockSource+0xfe>
 80077b4:	2b50      	cmp	r3, #80	@ 0x50
 80077b6:	d873      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077b8:	2b40      	cmp	r3, #64	@ 0x40
 80077ba:	d058      	beq.n	800786e <HAL_TIM_ConfigClockSource+0x13e>
 80077bc:	2b40      	cmp	r3, #64	@ 0x40
 80077be:	d86f      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077c0:	2b30      	cmp	r3, #48	@ 0x30
 80077c2:	d064      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x15e>
 80077c4:	2b30      	cmp	r3, #48	@ 0x30
 80077c6:	d86b      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	d060      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x15e>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d867      	bhi.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d05c      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x15e>
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d05a      	beq.n	800788e <HAL_TIM_ConfigClockSource+0x15e>
 80077d8:	e062      	b.n	80078a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077ea:	f000 f9bd 	bl	8007b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	609a      	str	r2, [r3, #8]
      break;
 8007806:	e04f      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007818:	f000 f9a6 	bl	8007b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800782a:	609a      	str	r2, [r3, #8]
      break;
 800782c:	e03c      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783a:	461a      	mov	r2, r3
 800783c:	f000 f91a 	bl	8007a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2150      	movs	r1, #80	@ 0x50
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f973 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 800784c:	e02c      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800785a:	461a      	mov	r2, r3
 800785c:	f000 f939 	bl	8007ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2160      	movs	r1, #96	@ 0x60
 8007866:	4618      	mov	r0, r3
 8007868:	f000 f963 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 800786c:	e01c      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800787a:	461a      	mov	r2, r3
 800787c:	f000 f8fa 	bl	8007a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2140      	movs	r1, #64	@ 0x40
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f953 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 800788c:	e00c      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f000 f94a 	bl	8007b32 <TIM_ITRx_SetConfig>
      break;
 800789e:	e003      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
      break;
 80078a4:	e000      	b.n	80078a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80078a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
	...

08007928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a46      	ldr	r2, [pc, #280]	@ (8007a54 <TIM_Base_SetConfig+0x12c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <TIM_Base_SetConfig+0x40>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007946:	d00f      	beq.n	8007968 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a43      	ldr	r2, [pc, #268]	@ (8007a58 <TIM_Base_SetConfig+0x130>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_Base_SetConfig+0x40>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a42      	ldr	r2, [pc, #264]	@ (8007a5c <TIM_Base_SetConfig+0x134>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_Base_SetConfig+0x40>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a41      	ldr	r2, [pc, #260]	@ (8007a60 <TIM_Base_SetConfig+0x138>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0x40>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a40      	ldr	r2, [pc, #256]	@ (8007a64 <TIM_Base_SetConfig+0x13c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d108      	bne.n	800797a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a35      	ldr	r2, [pc, #212]	@ (8007a54 <TIM_Base_SetConfig+0x12c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01f      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007988:	d01b      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a32      	ldr	r2, [pc, #200]	@ (8007a58 <TIM_Base_SetConfig+0x130>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d017      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a31      	ldr	r2, [pc, #196]	@ (8007a5c <TIM_Base_SetConfig+0x134>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a30      	ldr	r2, [pc, #192]	@ (8007a60 <TIM_Base_SetConfig+0x138>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00f      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007a64 <TIM_Base_SetConfig+0x13c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007a68 <TIM_Base_SetConfig+0x140>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a2d      	ldr	r2, [pc, #180]	@ (8007a6c <TIM_Base_SetConfig+0x144>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_Base_SetConfig+0x9a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007a70 <TIM_Base_SetConfig+0x148>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d108      	bne.n	80079d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a16      	ldr	r2, [pc, #88]	@ (8007a54 <TIM_Base_SetConfig+0x12c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00f      	beq.n	8007a20 <TIM_Base_SetConfig+0xf8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a18      	ldr	r2, [pc, #96]	@ (8007a64 <TIM_Base_SetConfig+0x13c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <TIM_Base_SetConfig+0xf8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	@ (8007a68 <TIM_Base_SetConfig+0x140>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d007      	beq.n	8007a20 <TIM_Base_SetConfig+0xf8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a16      	ldr	r2, [pc, #88]	@ (8007a6c <TIM_Base_SetConfig+0x144>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_Base_SetConfig+0xf8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a15      	ldr	r2, [pc, #84]	@ (8007a70 <TIM_Base_SetConfig+0x148>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d103      	bne.n	8007a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d105      	bne.n	8007a46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f023 0201 	bic.w	r2, r3, #1
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]
  }
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40014400 	.word	0x40014400
 8007a70:	40014800 	.word	0x40014800

08007a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f023 030a 	bic.w	r3, r3, #10
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f023 0210 	bic.w	r2, r3, #16
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f043 0307 	orr.w	r3, r3, #7
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	609a      	str	r2, [r3, #8]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	021a      	lsls	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e068      	b.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a2e      	ldr	r2, [pc, #184]	@ (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a1e      	ldr	r2, [pc, #120]	@ (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c32:	d018      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1a      	ldr	r2, [pc, #104]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a18      	ldr	r2, [pc, #96]	@ (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a13      	ldr	r2, [pc, #76]	@ (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a14      	ldr	r2, [pc, #80]	@ (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10c      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40012c00 	.word	0x40012c00
 8007ca4:	40013400 	.word	0x40013400
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00
 8007cb4:	40014000 	.word	0x40014000

08007cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e042      	b.n	8007d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fa fd31 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2224      	movs	r2, #36	@ 0x24
 8007d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0201 	bic.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fc7c 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f97d 	bl	8008044 <UART_SetConfig>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e01b      	b.n	8007d8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fcfb 	bl	8008780 <UART_CheckIdleState>
 8007d8a:	4603      	mov	r3, r0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	@ 0x28
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d17b      	bne.n	8007ea6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_UART_Transmit+0x26>
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e074      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2221      	movs	r2, #33	@ 0x21
 8007dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dce:	f7fb fcab 	bl	8003728 <HAL_GetTick>
 8007dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	88fa      	ldrh	r2, [r7, #6]
 8007dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dec:	d108      	bne.n	8007e00 <HAL_UART_Transmit+0x6c>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e003      	b.n	8007e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e08:	e030      	b.n	8007e6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2180      	movs	r1, #128	@ 0x80
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fd5d 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e03d      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10b      	bne.n	8007e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	881a      	ldrh	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e3e:	b292      	uxth	r2, r2
 8007e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	3302      	adds	r3, #2
 8007e46:	61bb      	str	r3, [r7, #24]
 8007e48:	e007      	b.n	8007e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	3301      	adds	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1c8      	bne.n	8007e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2140      	movs	r1, #64	@ 0x40
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fd26 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e006      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	@ 0x28
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	f040 80b6 	bne.w	8008038 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_UART_Receive+0x28>
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0ae      	b.n	800803a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2222      	movs	r2, #34	@ 0x22
 8007ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ef2:	f7fb fc19 	bl	8003728 <HAL_GetTick>
 8007ef6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f10:	d10e      	bne.n	8007f30 <HAL_UART_Receive+0x80>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <HAL_UART_Receive+0x76>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007f20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f24:	e02d      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	22ff      	movs	r2, #255	@ 0xff
 8007f2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f2e:	e028      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10d      	bne.n	8007f54 <HAL_UART_Receive+0xa4>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <HAL_UART_Receive+0x9a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	22ff      	movs	r2, #255	@ 0xff
 8007f44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f48:	e01b      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	227f      	movs	r2, #127	@ 0x7f
 8007f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f52:	e016      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f5c:	d10d      	bne.n	8007f7a <HAL_UART_Receive+0xca>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <HAL_UART_Receive+0xc0>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	227f      	movs	r2, #127	@ 0x7f
 8007f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f6e:	e008      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	223f      	movs	r2, #63	@ 0x3f
 8007f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f78:	e003      	b.n	8007f82 <HAL_UART_Receive+0xd2>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f88:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f92:	d108      	bne.n	8007fa6 <HAL_UART_Receive+0xf6>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e003      	b.n	8007fae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007fae:	e037      	b.n	8008020 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2120      	movs	r1, #32
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 fc8a 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e033      	b.n	800803a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10c      	bne.n	8007ff2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	8a7b      	ldrh	r3, [r7, #18]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	3302      	adds	r3, #2
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	e00d      	b.n	800800e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	8a7b      	ldrh	r3, [r7, #18]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	4013      	ands	r3, r2
 8008002:	b2da      	uxtb	r2, r3
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008026:	b29b      	uxth	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1c1      	bne.n	8007fb0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e000      	b.n	800803a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008038:	2302      	movs	r3, #2
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008048:	b08c      	sub	sp, #48	@ 0x30
 800804a:	af00      	add	r7, sp, #0
 800804c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	431a      	orrs	r2, r3
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	431a      	orrs	r2, r3
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	4313      	orrs	r3, r2
 800806a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4baa      	ldr	r3, [pc, #680]	@ (800831c <UART_SetConfig+0x2d8>)
 8008074:	4013      	ands	r3, r2
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800807c:	430b      	orrs	r3, r1
 800807e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a9f      	ldr	r2, [pc, #636]	@ (8008320 <UART_SetConfig+0x2dc>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d004      	beq.n	80080b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ac:	4313      	orrs	r3, r2
 80080ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80080ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	f023 010f 	bic.w	r1, r3, #15
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a90      	ldr	r2, [pc, #576]	@ (8008324 <UART_SetConfig+0x2e0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d125      	bne.n	8008134 <UART_SetConfig+0xf0>
 80080e8:	4b8f      	ldr	r3, [pc, #572]	@ (8008328 <UART_SetConfig+0x2e4>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d81a      	bhi.n	800812c <UART_SetConfig+0xe8>
 80080f6:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <UART_SetConfig+0xb8>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800810d 	.word	0x0800810d
 8008100:	0800811d 	.word	0x0800811d
 8008104:	08008115 	.word	0x08008115
 8008108:	08008125 	.word	0x08008125
 800810c:	2301      	movs	r3, #1
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e116      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008114:	2302      	movs	r3, #2
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e112      	b.n	8008342 <UART_SetConfig+0x2fe>
 800811c:	2304      	movs	r3, #4
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e10e      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008124:	2308      	movs	r3, #8
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e10a      	b.n	8008342 <UART_SetConfig+0x2fe>
 800812c:	2310      	movs	r3, #16
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e106      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a7c      	ldr	r2, [pc, #496]	@ (800832c <UART_SetConfig+0x2e8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d138      	bne.n	80081b0 <UART_SetConfig+0x16c>
 800813e:	4b7a      	ldr	r3, [pc, #488]	@ (8008328 <UART_SetConfig+0x2e4>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008144:	f003 030c 	and.w	r3, r3, #12
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d82d      	bhi.n	80081a8 <UART_SetConfig+0x164>
 800814c:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <UART_SetConfig+0x110>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008189 	.word	0x08008189
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080081a9 	.word	0x080081a9
 8008160:	080081a9 	.word	0x080081a9
 8008164:	08008199 	.word	0x08008199
 8008168:	080081a9 	.word	0x080081a9
 800816c:	080081a9 	.word	0x080081a9
 8008170:	080081a9 	.word	0x080081a9
 8008174:	08008191 	.word	0x08008191
 8008178:	080081a9 	.word	0x080081a9
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081a1 	.word	0x080081a1
 8008188:	2300      	movs	r3, #0
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e0d8      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008190:	2302      	movs	r3, #2
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e0d4      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008198:	2304      	movs	r3, #4
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e0d0      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081a0:	2308      	movs	r3, #8
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e0cc      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ae:	e0c8      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008330 <UART_SetConfig+0x2ec>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d125      	bne.n	8008206 <UART_SetConfig+0x1c2>
 80081ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008328 <UART_SetConfig+0x2e4>)
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80081c4:	2b30      	cmp	r3, #48	@ 0x30
 80081c6:	d016      	beq.n	80081f6 <UART_SetConfig+0x1b2>
 80081c8:	2b30      	cmp	r3, #48	@ 0x30
 80081ca:	d818      	bhi.n	80081fe <UART_SetConfig+0x1ba>
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d00a      	beq.n	80081e6 <UART_SetConfig+0x1a2>
 80081d0:	2b20      	cmp	r3, #32
 80081d2:	d814      	bhi.n	80081fe <UART_SetConfig+0x1ba>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <UART_SetConfig+0x19a>
 80081d8:	2b10      	cmp	r3, #16
 80081da:	d008      	beq.n	80081ee <UART_SetConfig+0x1aa>
 80081dc:	e00f      	b.n	80081fe <UART_SetConfig+0x1ba>
 80081de:	2300      	movs	r3, #0
 80081e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e4:	e0ad      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081e6:	2302      	movs	r3, #2
 80081e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ec:	e0a9      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081ee:	2304      	movs	r3, #4
 80081f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f4:	e0a5      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081f6:	2308      	movs	r3, #8
 80081f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fc:	e0a1      	b.n	8008342 <UART_SetConfig+0x2fe>
 80081fe:	2310      	movs	r3, #16
 8008200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008204:	e09d      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a4a      	ldr	r2, [pc, #296]	@ (8008334 <UART_SetConfig+0x2f0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d125      	bne.n	800825c <UART_SetConfig+0x218>
 8008210:	4b45      	ldr	r3, [pc, #276]	@ (8008328 <UART_SetConfig+0x2e4>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008216:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800821a:	2bc0      	cmp	r3, #192	@ 0xc0
 800821c:	d016      	beq.n	800824c <UART_SetConfig+0x208>
 800821e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008220:	d818      	bhi.n	8008254 <UART_SetConfig+0x210>
 8008222:	2b80      	cmp	r3, #128	@ 0x80
 8008224:	d00a      	beq.n	800823c <UART_SetConfig+0x1f8>
 8008226:	2b80      	cmp	r3, #128	@ 0x80
 8008228:	d814      	bhi.n	8008254 <UART_SetConfig+0x210>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <UART_SetConfig+0x1f0>
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d008      	beq.n	8008244 <UART_SetConfig+0x200>
 8008232:	e00f      	b.n	8008254 <UART_SetConfig+0x210>
 8008234:	2300      	movs	r3, #0
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823a:	e082      	b.n	8008342 <UART_SetConfig+0x2fe>
 800823c:	2302      	movs	r3, #2
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008242:	e07e      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824a:	e07a      	b.n	8008342 <UART_SetConfig+0x2fe>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008252:	e076      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825a:	e072      	b.n	8008342 <UART_SetConfig+0x2fe>
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a35      	ldr	r2, [pc, #212]	@ (8008338 <UART_SetConfig+0x2f4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d12a      	bne.n	80082bc <UART_SetConfig+0x278>
 8008266:	4b30      	ldr	r3, [pc, #192]	@ (8008328 <UART_SetConfig+0x2e4>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008274:	d01a      	beq.n	80082ac <UART_SetConfig+0x268>
 8008276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800827a:	d81b      	bhi.n	80082b4 <UART_SetConfig+0x270>
 800827c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008280:	d00c      	beq.n	800829c <UART_SetConfig+0x258>
 8008282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008286:	d815      	bhi.n	80082b4 <UART_SetConfig+0x270>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <UART_SetConfig+0x250>
 800828c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008290:	d008      	beq.n	80082a4 <UART_SetConfig+0x260>
 8008292:	e00f      	b.n	80082b4 <UART_SetConfig+0x270>
 8008294:	2300      	movs	r3, #0
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829a:	e052      	b.n	8008342 <UART_SetConfig+0x2fe>
 800829c:	2302      	movs	r3, #2
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a2:	e04e      	b.n	8008342 <UART_SetConfig+0x2fe>
 80082a4:	2304      	movs	r3, #4
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082aa:	e04a      	b.n	8008342 <UART_SetConfig+0x2fe>
 80082ac:	2308      	movs	r3, #8
 80082ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b2:	e046      	b.n	8008342 <UART_SetConfig+0x2fe>
 80082b4:	2310      	movs	r3, #16
 80082b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ba:	e042      	b.n	8008342 <UART_SetConfig+0x2fe>
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a17      	ldr	r2, [pc, #92]	@ (8008320 <UART_SetConfig+0x2dc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d13a      	bne.n	800833c <UART_SetConfig+0x2f8>
 80082c6:	4b18      	ldr	r3, [pc, #96]	@ (8008328 <UART_SetConfig+0x2e4>)
 80082c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082d4:	d01a      	beq.n	800830c <UART_SetConfig+0x2c8>
 80082d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082da:	d81b      	bhi.n	8008314 <UART_SetConfig+0x2d0>
 80082dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082e0:	d00c      	beq.n	80082fc <UART_SetConfig+0x2b8>
 80082e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082e6:	d815      	bhi.n	8008314 <UART_SetConfig+0x2d0>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <UART_SetConfig+0x2b0>
 80082ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f0:	d008      	beq.n	8008304 <UART_SetConfig+0x2c0>
 80082f2:	e00f      	b.n	8008314 <UART_SetConfig+0x2d0>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fa:	e022      	b.n	8008342 <UART_SetConfig+0x2fe>
 80082fc:	2302      	movs	r3, #2
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008302:	e01e      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008304:	2304      	movs	r3, #4
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830a:	e01a      	b.n	8008342 <UART_SetConfig+0x2fe>
 800830c:	2308      	movs	r3, #8
 800830e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008312:	e016      	b.n	8008342 <UART_SetConfig+0x2fe>
 8008314:	2310      	movs	r3, #16
 8008316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831a:	e012      	b.n	8008342 <UART_SetConfig+0x2fe>
 800831c:	cfff69f3 	.word	0xcfff69f3
 8008320:	40008000 	.word	0x40008000
 8008324:	40013800 	.word	0x40013800
 8008328:	40021000 	.word	0x40021000
 800832c:	40004400 	.word	0x40004400
 8008330:	40004800 	.word	0x40004800
 8008334:	40004c00 	.word	0x40004c00
 8008338:	40005000 	.word	0x40005000
 800833c:	2310      	movs	r3, #16
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4aae      	ldr	r2, [pc, #696]	@ (8008600 <UART_SetConfig+0x5bc>)
 8008348:	4293      	cmp	r3, r2
 800834a:	f040 8097 	bne.w	800847c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800834e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008352:	2b08      	cmp	r3, #8
 8008354:	d823      	bhi.n	800839e <UART_SetConfig+0x35a>
 8008356:	a201      	add	r2, pc, #4	@ (adr r2, 800835c <UART_SetConfig+0x318>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008381 	.word	0x08008381
 8008360:	0800839f 	.word	0x0800839f
 8008364:	08008389 	.word	0x08008389
 8008368:	0800839f 	.word	0x0800839f
 800836c:	0800838f 	.word	0x0800838f
 8008370:	0800839f 	.word	0x0800839f
 8008374:	0800839f 	.word	0x0800839f
 8008378:	0800839f 	.word	0x0800839f
 800837c:	08008397 	.word	0x08008397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008380:	f7fd fc38 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8008384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008386:	e010      	b.n	80083aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008388:	4b9e      	ldr	r3, [pc, #632]	@ (8008604 <UART_SetConfig+0x5c0>)
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800838c:	e00d      	b.n	80083aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800838e:	f7fd fb99 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8008392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008394:	e009      	b.n	80083aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800839a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800839c:	e005      	b.n	80083aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8130 	beq.w	8008612 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b6:	4a94      	ldr	r2, [pc, #592]	@ (8008608 <UART_SetConfig+0x5c4>)
 80083b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083bc:	461a      	mov	r2, r3
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d305      	bcc.n	80083e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d903      	bls.n	80083ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083e8:	e113      	b.n	8008612 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	2200      	movs	r2, #0
 80083ee:	60bb      	str	r3, [r7, #8]
 80083f0:	60fa      	str	r2, [r7, #12]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	4a84      	ldr	r2, [pc, #528]	@ (8008608 <UART_SetConfig+0x5c4>)
 80083f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2200      	movs	r2, #0
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800840c:	f7f8 fc34 	bl	8000c78 <__aeabi_uldivmod>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	020b      	lsls	r3, r1, #8
 8008422:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008426:	0202      	lsls	r2, r0, #8
 8008428:	6979      	ldr	r1, [r7, #20]
 800842a:	6849      	ldr	r1, [r1, #4]
 800842c:	0849      	lsrs	r1, r1, #1
 800842e:	2000      	movs	r0, #0
 8008430:	460c      	mov	r4, r1
 8008432:	4605      	mov	r5, r0
 8008434:	eb12 0804 	adds.w	r8, r2, r4
 8008438:	eb43 0905 	adc.w	r9, r3, r5
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	469a      	mov	sl, r3
 8008444:	4693      	mov	fp, r2
 8008446:	4652      	mov	r2, sl
 8008448:	465b      	mov	r3, fp
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f8 fc13 	bl	8000c78 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4613      	mov	r3, r2
 8008458:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008460:	d308      	bcc.n	8008474 <UART_SetConfig+0x430>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008468:	d204      	bcs.n	8008474 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6a3a      	ldr	r2, [r7, #32]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	e0ce      	b.n	8008612 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800847a:	e0ca      	b.n	8008612 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008484:	d166      	bne.n	8008554 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800848a:	2b08      	cmp	r3, #8
 800848c:	d827      	bhi.n	80084de <UART_SetConfig+0x49a>
 800848e:	a201      	add	r2, pc, #4	@ (adr r2, 8008494 <UART_SetConfig+0x450>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084b9 	.word	0x080084b9
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084df 	.word	0x080084df
 80084a4:	080084cf 	.word	0x080084cf
 80084a8:	080084df 	.word	0x080084df
 80084ac:	080084df 	.word	0x080084df
 80084b0:	080084df 	.word	0x080084df
 80084b4:	080084d7 	.word	0x080084d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b8:	f7fd fb9c 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 80084bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084be:	e014      	b.n	80084ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084c0:	f7fd fbae 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 80084c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084c6:	e010      	b.n	80084ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008604 <UART_SetConfig+0x5c0>)
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084cc:	e00d      	b.n	80084ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ce:	f7fd faf9 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 80084d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084d4:	e009      	b.n	80084ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084dc:	e005      	b.n	80084ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8090 	beq.w	8008612 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f6:	4a44      	ldr	r2, [pc, #272]	@ (8008608 <UART_SetConfig+0x5c4>)
 80084f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fc:	461a      	mov	r2, r3
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	fbb3 f3f2 	udiv	r3, r3, r2
 8008504:	005a      	lsls	r2, r3, #1
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	085b      	lsrs	r3, r3, #1
 800850c:	441a      	add	r2, r3
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d916      	bls.n	800854c <UART_SetConfig+0x508>
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008524:	d212      	bcs.n	800854c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f023 030f 	bic.w	r3, r3, #15
 800852e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	b29b      	uxth	r3, r3
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	b29a      	uxth	r2, r3
 800853c:	8bfb      	ldrh	r3, [r7, #30]
 800853e:	4313      	orrs	r3, r2
 8008540:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	8bfa      	ldrh	r2, [r7, #30]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	e062      	b.n	8008612 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008552:	e05e      	b.n	8008612 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008554:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008558:	2b08      	cmp	r3, #8
 800855a:	d828      	bhi.n	80085ae <UART_SetConfig+0x56a>
 800855c:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <UART_SetConfig+0x520>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008589 	.word	0x08008589
 8008568:	08008591 	.word	0x08008591
 800856c:	08008599 	.word	0x08008599
 8008570:	080085af 	.word	0x080085af
 8008574:	0800859f 	.word	0x0800859f
 8008578:	080085af 	.word	0x080085af
 800857c:	080085af 	.word	0x080085af
 8008580:	080085af 	.word	0x080085af
 8008584:	080085a7 	.word	0x080085a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008588:	f7fd fb34 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 800858c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800858e:	e014      	b.n	80085ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008590:	f7fd fb46 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8008594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008596:	e010      	b.n	80085ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008598:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <UART_SetConfig+0x5c0>)
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800859c:	e00d      	b.n	80085ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859e:	f7fd fa91 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 80085a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a4:	e009      	b.n	80085ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ac:	e005      	b.n	80085ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085b8:	bf00      	nop
    }

    if (pclk != 0U)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d028      	beq.n	8008612 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c4:	4a10      	ldr	r2, [pc, #64]	@ (8008608 <UART_SetConfig+0x5c4>)
 80085c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	441a      	add	r2, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d910      	bls.n	800860c <UART_SetConfig+0x5c8>
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f0:	d20c      	bcs.n	800860c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60da      	str	r2, [r3, #12]
 80085fc:	e009      	b.n	8008612 <UART_SetConfig+0x5ce>
 80085fe:	bf00      	nop
 8008600:	40008000 	.word	0x40008000
 8008604:	00f42400 	.word	0x00f42400
 8008608:	0809cd8c 	.word	0x0809cd8c
      }
      else
      {
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2201      	movs	r2, #1
 8008616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2201      	movs	r2, #1
 800861e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2200      	movs	r2, #0
 800862c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800862e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008632:	4618      	mov	r0, r3
 8008634:	3730      	adds	r7, #48	@ 0x30
 8008636:	46bd      	mov	sp, r7
 8008638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b098      	sub	sp, #96	@ 0x60
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008790:	f7fa ffca 	bl	8003728 <HAL_GetTick>
 8008794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d12f      	bne.n	8008804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087ac:	2200      	movs	r2, #0
 80087ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f88e 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d022      	beq.n	8008804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80087de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e063      	b.n	80088cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0304 	and.w	r3, r3, #4
 800880e:	2b04      	cmp	r3, #4
 8008810:	d149      	bne.n	80088a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800881a:	2200      	movs	r2, #0
 800881c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f857 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d03c      	beq.n	80088a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	623b      	str	r3, [r7, #32]
   return(result);
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800884a:	633b      	str	r3, [r7, #48]	@ 0x30
 800884c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e6      	bne.n	800882c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	60fb      	str	r3, [r7, #12]
   return(result);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800887e:	61fa      	str	r2, [r7, #28]
 8008880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	617b      	str	r3, [r7, #20]
   return(result);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e012      	b.n	80088cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3758      	adds	r7, #88	@ 0x58
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e4:	e04f      	b.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d04b      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ee:	f7fa ff1b 	bl	8003728 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <UART_WaitOnFlagUntilTimeout+0x30>
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e04e      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d037      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b80      	cmp	r3, #128	@ 0x80
 800891a:	d034      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b40      	cmp	r3, #64	@ 0x40
 8008920:	d031      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b08      	cmp	r3, #8
 800892e:	d110      	bne.n	8008952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 f838 	bl	80089ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2208      	movs	r2, #8
 8008942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e029      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008960:	d111      	bne.n	8008986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800896a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f81e 	bl	80089ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e00f      	b.n	80089a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	bf0c      	ite	eq
 8008996:	2301      	moveq	r3, #1
 8008998:	2300      	movne	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d0a0      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b095      	sub	sp, #84	@ 0x54
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e3      	bne.n	80089e8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d118      	bne.n	8008a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f023 0310 	bic.w	r3, r3, #16
 8008a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	613b      	str	r3, [r7, #16]
   return(result);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e6      	bne.n	8008a28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2220      	movs	r2, #32
 8008a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a6e:	bf00      	nop
 8008a70:	3754      	adds	r7, #84	@ 0x54
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e027      	b.n	8008ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	@ 0x24
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e02d      	b.n	8008b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2224      	movs	r2, #36	@ 0x24
 8008b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f84f 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d101      	bne.n	8008b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e02d      	b.n	8008bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2224      	movs	r2, #36	@ 0x24
 8008b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f811 	bl	8008be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d108      	bne.n	8008c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c04:	e031      	b.n	8008c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c06:	2308      	movs	r3, #8
 8008c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	0e5b      	lsrs	r3, r3, #25
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	0f5b      	lsrs	r3, r3, #29
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	7b3a      	ldrb	r2, [r7, #12]
 8008c32:	4911      	ldr	r1, [pc, #68]	@ (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c34:	5c8a      	ldrb	r2, [r1, r2]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c3a:	7b3a      	ldrb	r2, [r7, #12]
 8008c3c:	490f      	ldr	r1, [pc, #60]	@ (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	7b7a      	ldrb	r2, [r7, #13]
 8008c50:	4909      	ldr	r1, [pc, #36]	@ (8008c78 <UARTEx_SetNbDataToProcess+0x94>)
 8008c52:	5c8a      	ldrb	r2, [r1, r2]
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c58:	7b7a      	ldrb	r2, [r7, #13]
 8008c5a:	4908      	ldr	r1, [pc, #32]	@ (8008c7c <UARTEx_SetNbDataToProcess+0x98>)
 8008c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	0809cda4 	.word	0x0809cda4
 8008c7c:	0809cdac 	.word	0x0809cdac

08008c80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008c84:	4904      	ldr	r1, [pc, #16]	@ (8008c98 <MX_FATFS_Init+0x18>)
 8008c86:	4805      	ldr	r0, [pc, #20]	@ (8008c9c <MX_FATFS_Init+0x1c>)
 8008c88:	f002 feec 	bl	800ba64 <FATFS_LinkDriver>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4b03      	ldr	r3, [pc, #12]	@ (8008ca0 <MX_FATFS_Init+0x20>)
 8008c92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c94:	bf00      	nop
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20040940 	.word	0x20040940
 8008c9c:	200400a4 	.word	0x200400a4
 8008ca0:	2004093c 	.word	0x2004093c

08008ca4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008ca8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f9d7 	bl	8009074 <USER_SPI_initialize>
 8008cc6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fab5 	bl	800924c <USER_SPI_status>
 8008ce2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008cfc:	7bf8      	ldrb	r0, [r7, #15]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	f000 fab8 	bl	8009278 <USER_SPI_read>
 8008d08:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	603b      	str	r3, [r7, #0]
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008d22:	7bf8      	ldrb	r0, [r7, #15]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	f000 fb0b 	bl	8009344 <USER_SPI_write>
 8008d2e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	603a      	str	r2, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
 8008d44:	460b      	mov	r3, r1
 8008d46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008d48:	79b9      	ldrb	r1, [r7, #6]
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fb74 	bl	800943c <USER_SPI_ioctl>
 8008d54:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008d68:	f7fa fcde 	bl	8003728 <HAL_GetTick>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	4a04      	ldr	r2, [pc, #16]	@ (8008d80 <SPI_Timer_On+0x20>)
 8008d70:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008d72:	4a04      	ldr	r2, [pc, #16]	@ (8008d84 <SPI_Timer_On+0x24>)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6013      	str	r3, [r2, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20040948 	.word	0x20040948
 8008d84:	2004094c 	.word	0x2004094c

08008d88 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008d8c:	f7fa fccc 	bl	8003728 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	4b06      	ldr	r3, [pc, #24]	@ (8008dac <SPI_Timer_Status+0x24>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	4b05      	ldr	r3, [pc, #20]	@ (8008db0 <SPI_Timer_Status+0x28>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	bf34      	ite	cc
 8008da0:	2301      	movcc	r3, #1
 8008da2:	2300      	movcs	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20040948 	.word	0x20040948
 8008db0:	2004094c 	.word	0x2004094c

08008db4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	4603      	mov	r3, r0
 8008dbc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008dbe:	f107 020f 	add.w	r2, r7, #15
 8008dc2:	1df9      	adds	r1, r7, #7
 8008dc4:	2332      	movs	r3, #50	@ 0x32
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4804      	ldr	r0, [pc, #16]	@ (8008ddc <xchg_spi+0x28>)
 8008dcc:	f7fd ff2f 	bl	8006c2e <HAL_SPI_TransmitReceive>
    return rxDat;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200406e8 	.word	0x200406e8

08008de0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e00a      	b.n	8008e06 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	18d4      	adds	r4, r2, r3
 8008df6:	20ff      	movs	r0, #255	@ 0xff
 8008df8:	f7ff ffdc 	bl	8008db4 <xchg_spi>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3301      	adds	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d3f0      	bcc.n	8008df0 <rcvr_spi_multi+0x10>
	}
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd90      	pop	{r4, r7, pc}

08008e18 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	4803      	ldr	r0, [pc, #12]	@ (8008e3c <xmit_spi_multi+0x24>)
 8008e2e:	f7fd fd88 	bl	8006942 <HAL_SPI_Transmit>
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	200406e8 	.word	0x200406e8

08008e40 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008e48:	f7fa fc6e 	bl	8003728 <HAL_GetTick>
 8008e4c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008e52:	20ff      	movs	r0, #255	@ 0xff
 8008e54:	f7ff ffae 	bl	8008db4 <xchg_spi>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2bff      	cmp	r3, #255	@ 0xff
 8008e60:	d007      	beq.n	8008e72 <wait_ready+0x32>
 8008e62:	f7fa fc61 	bl	8003728 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d8ef      	bhi.n	8008e52 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
 8008e74:	2bff      	cmp	r3, #255	@ 0xff
 8008e76:	bf0c      	ite	eq
 8008e78:	2301      	moveq	r3, #1
 8008e7a:	2300      	movne	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008e92:	4804      	ldr	r0, [pc, #16]	@ (8008ea4 <despiselect+0x1c>)
 8008e94:	f7fb ffd6 	bl	8004e44 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008e98:	20ff      	movs	r0, #255	@ 0xff
 8008e9a:	f7ff ff8b 	bl	8008db4 <xchg_spi>

}
 8008e9e:	bf00      	nop
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	48000c00 	.word	0x48000c00

08008ea8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008eac:	2200      	movs	r2, #0
 8008eae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008eb2:	480a      	ldr	r0, [pc, #40]	@ (8008edc <spiselect+0x34>)
 8008eb4:	f7fb ffc6 	bl	8004e44 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008eb8:	20ff      	movs	r0, #255	@ 0xff
 8008eba:	f7ff ff7b 	bl	8008db4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008ebe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008ec2:	f7ff ffbd 	bl	8008e40 <wait_ready>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <spiselect+0x28>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e002      	b.n	8008ed6 <spiselect+0x2e>

	despiselect();
 8008ed0:	f7ff ffda 	bl	8008e88 <despiselect>
	return 0;	/* Timeout */
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	48000c00 	.word	0x48000c00

08008ee0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008eea:	20c8      	movs	r0, #200	@ 0xc8
 8008eec:	f7ff ff38 	bl	8008d60 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008ef0:	20ff      	movs	r0, #255	@ 0xff
 8008ef2:	f7ff ff5f 	bl	8008db4 <xchg_spi>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2bff      	cmp	r3, #255	@ 0xff
 8008efe:	d104      	bne.n	8008f0a <rcvr_datablock+0x2a>
 8008f00:	f7ff ff42 	bl	8008d88 <SPI_Timer_Status>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f2      	bne.n	8008ef0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f0e:	d001      	beq.n	8008f14 <rcvr_datablock+0x34>
 8008f10:	2300      	movs	r3, #0
 8008f12:	e00a      	b.n	8008f2a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff ff62 	bl	8008de0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008f1c:	20ff      	movs	r0, #255	@ 0xff
 8008f1e:	f7ff ff49 	bl	8008db4 <xchg_spi>
 8008f22:	20ff      	movs	r0, #255	@ 0xff
 8008f24:	f7ff ff46 	bl	8008db4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008f28:	2301      	movs	r3, #1
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f42:	f7ff ff7d 	bl	8008e40 <wait_ready>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <xmit_datablock+0x1e>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e01e      	b.n	8008f8e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ff2e 	bl	8008db4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	2bfd      	cmp	r3, #253	@ 0xfd
 8008f5c:	d016      	beq.n	8008f8c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ff58 	bl	8008e18 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f68:	20ff      	movs	r0, #255	@ 0xff
 8008f6a:	f7ff ff23 	bl	8008db4 <xchg_spi>
 8008f6e:	20ff      	movs	r0, #255	@ 0xff
 8008f70:	f7ff ff20 	bl	8008db4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f74:	20ff      	movs	r0, #255	@ 0xff
 8008f76:	f7ff ff1d 	bl	8008db4 <xchg_spi>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	d001      	beq.n	8008f8c <xmit_datablock+0x5a>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e000      	b.n	8008f8e <xmit_datablock+0x5c>
	}
	return 1;
 8008f8c:	2301      	movs	r3, #1
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	6039      	str	r1, [r7, #0]
 8008fa0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da0e      	bge.n	8008fc8 <send_cmd+0x32>
		cmd &= 0x7F;
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2037      	movs	r0, #55	@ 0x37
 8008fb6:	f7ff ffee 	bl	8008f96 <send_cmd>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d901      	bls.n	8008fc8 <send_cmd+0x32>
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	e051      	b.n	800906c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b0c      	cmp	r3, #12
 8008fcc:	d008      	beq.n	8008fe0 <send_cmd+0x4a>
		despiselect();
 8008fce:	f7ff ff5b 	bl	8008e88 <despiselect>
		if (!spiselect()) return 0xFF;
 8008fd2:	f7ff ff69 	bl	8008ea8 <spiselect>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <send_cmd+0x4a>
 8008fdc:	23ff      	movs	r3, #255	@ 0xff
 8008fde:	e045      	b.n	800906c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff fee3 	bl	8008db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	0e1b      	lsrs	r3, r3, #24
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fedd 	bl	8008db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fed7 	bl	8008db4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	0a1b      	lsrs	r3, r3, #8
 800900a:	b2db      	uxtb	r3, r3
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff fed1 	bl	8008db4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fecc 	bl	8008db4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <send_cmd+0x94>
 8009026:	2395      	movs	r3, #149	@ 0x95
 8009028:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b08      	cmp	r3, #8
 800902e:	d101      	bne.n	8009034 <send_cmd+0x9e>
 8009030:	2387      	movs	r3, #135	@ 0x87
 8009032:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff febc 	bl	8008db4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d102      	bne.n	8009048 <send_cmd+0xb2>
 8009042:	20ff      	movs	r0, #255	@ 0xff
 8009044:	f7ff feb6 	bl	8008db4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009048:	230a      	movs	r3, #10
 800904a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800904c:	20ff      	movs	r0, #255	@ 0xff
 800904e:	f7ff feb1 	bl	8008db4 <xchg_spi>
 8009052:	4603      	mov	r3, r0
 8009054:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800905a:	2b00      	cmp	r3, #0
 800905c:	da05      	bge.n	800906a <send_cmd+0xd4>
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	3b01      	subs	r3, #1
 8009062:	73fb      	strb	r3, [r7, #15]
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f0      	bne.n	800904c <send_cmd+0xb6>

	return res;							/* Return received response */
 800906a:	7bbb      	ldrb	r3, [r7, #14]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <USER_SPI_initialize+0x14>
 8009084:	2301      	movs	r3, #1
 8009086:	e0d6      	b.n	8009236 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009088:	4b6d      	ldr	r3, [pc, #436]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d003      	beq.n	800909e <USER_SPI_initialize+0x2a>
 8009096:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	e0cb      	b.n	8009236 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800909e:	4b69      	ldr	r3, [pc, #420]	@ (8009244 <USER_SPI_initialize+0x1d0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80090a8:	4b66      	ldr	r3, [pc, #408]	@ (8009244 <USER_SPI_initialize+0x1d0>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0218 	orr.w	r2, r2, #24
 80090b0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80090b2:	230a      	movs	r3, #10
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	e005      	b.n	80090c4 <USER_SPI_initialize+0x50>
 80090b8:	20ff      	movs	r0, #255	@ 0xff
 80090ba:	f7ff fe7b 	bl	8008db4 <xchg_spi>
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f6      	bne.n	80090b8 <USER_SPI_initialize+0x44>

	ty = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80090ce:	2100      	movs	r1, #0
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7ff ff60 	bl	8008f96 <send_cmd>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f040 808b 	bne.w	80091f4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80090de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80090e2:	f7ff fe3d 	bl	8008d60 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80090e6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80090ea:	2008      	movs	r0, #8
 80090ec:	f7ff ff53 	bl	8008f96 <send_cmd>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d151      	bne.n	800919a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]
 80090fa:	e00d      	b.n	8009118 <USER_SPI_initialize+0xa4>
 80090fc:	7bfc      	ldrb	r4, [r7, #15]
 80090fe:	20ff      	movs	r0, #255	@ 0xff
 8009100:	f7ff fe58 	bl	8008db4 <xchg_spi>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	f104 0310 	add.w	r3, r4, #16
 800910c:	443b      	add	r3, r7
 800910e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	3301      	adds	r3, #1
 8009116:	73fb      	strb	r3, [r7, #15]
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b03      	cmp	r3, #3
 800911c:	d9ee      	bls.n	80090fc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800911e:	7abb      	ldrb	r3, [r7, #10]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d167      	bne.n	80091f4 <USER_SPI_initialize+0x180>
 8009124:	7afb      	ldrb	r3, [r7, #11]
 8009126:	2baa      	cmp	r3, #170	@ 0xaa
 8009128:	d164      	bne.n	80091f4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800912a:	bf00      	nop
 800912c:	f7ff fe2c 	bl	8008d88 <SPI_Timer_Status>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <USER_SPI_initialize+0xd2>
 8009136:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800913a:	20a9      	movs	r0, #169	@ 0xa9
 800913c:	f7ff ff2b 	bl	8008f96 <send_cmd>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f2      	bne.n	800912c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009146:	f7ff fe1f 	bl	8008d88 <SPI_Timer_Status>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d051      	beq.n	80091f4 <USER_SPI_initialize+0x180>
 8009150:	2100      	movs	r1, #0
 8009152:	203a      	movs	r0, #58	@ 0x3a
 8009154:	f7ff ff1f 	bl	8008f96 <send_cmd>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d14a      	bne.n	80091f4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
 8009162:	e00d      	b.n	8009180 <USER_SPI_initialize+0x10c>
 8009164:	7bfc      	ldrb	r4, [r7, #15]
 8009166:	20ff      	movs	r0, #255	@ 0xff
 8009168:	f7ff fe24 	bl	8008db4 <xchg_spi>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	f104 0310 	add.w	r3, r4, #16
 8009174:	443b      	add	r3, r7
 8009176:	f803 2c08 	strb.w	r2, [r3, #-8]
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	3301      	adds	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b03      	cmp	r3, #3
 8009184:	d9ee      	bls.n	8009164 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009186:	7a3b      	ldrb	r3, [r7, #8]
 8009188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <USER_SPI_initialize+0x120>
 8009190:	230c      	movs	r3, #12
 8009192:	e000      	b.n	8009196 <USER_SPI_initialize+0x122>
 8009194:	2304      	movs	r3, #4
 8009196:	737b      	strb	r3, [r7, #13]
 8009198:	e02c      	b.n	80091f4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800919a:	2100      	movs	r1, #0
 800919c:	20a9      	movs	r0, #169	@ 0xa9
 800919e:	f7ff fefa 	bl	8008f96 <send_cmd>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d804      	bhi.n	80091b2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80091a8:	2302      	movs	r3, #2
 80091aa:	737b      	strb	r3, [r7, #13]
 80091ac:	23a9      	movs	r3, #169	@ 0xa9
 80091ae:	73bb      	strb	r3, [r7, #14]
 80091b0:	e003      	b.n	80091ba <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80091b2:	2301      	movs	r3, #1
 80091b4:	737b      	strb	r3, [r7, #13]
 80091b6:	2301      	movs	r3, #1
 80091b8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80091ba:	bf00      	nop
 80091bc:	f7ff fde4 	bl	8008d88 <SPI_Timer_Status>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d007      	beq.n	80091d6 <USER_SPI_initialize+0x162>
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fee3 	bl	8008f96 <send_cmd>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f2      	bne.n	80091bc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80091d6:	f7ff fdd7 	bl	8008d88 <SPI_Timer_Status>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <USER_SPI_initialize+0x17c>
 80091e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80091e4:	2010      	movs	r0, #16
 80091e6:	f7ff fed6 	bl	8008f96 <send_cmd>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <USER_SPI_initialize+0x180>
				ty = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80091f4:	4a14      	ldr	r2, [pc, #80]	@ (8009248 <USER_SPI_initialize+0x1d4>)
 80091f6:	7b7b      	ldrb	r3, [r7, #13]
 80091f8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80091fa:	f7ff fe45 	bl	8008e88 <despiselect>

	if (ty) {			/* OK */
 80091fe:	7b7b      	ldrb	r3, [r7, #13]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d012      	beq.n	800922a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009204:	4b0f      	ldr	r3, [pc, #60]	@ (8009244 <USER_SPI_initialize+0x1d0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <USER_SPI_initialize+0x1d0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0210 	orr.w	r2, r2, #16
 8009216:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f023 0301 	bic.w	r3, r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e002      	b.n	8009230 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800922a:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009230:	4b03      	ldr	r3, [pc, #12]	@ (8009240 <USER_SPI_initialize+0x1cc>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b2db      	uxtb	r3, r3
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	bd90      	pop	{r4, r7, pc}
 800923e:	bf00      	nop
 8009240:	200400b8 	.word	0x200400b8
 8009244:	200406e8 	.word	0x200406e8
 8009248:	20040944 	.word	0x20040944

0800924c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <USER_SPI_status+0x14>
 800925c:	2301      	movs	r3, #1
 800925e:	e002      	b.n	8009266 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009260:	4b04      	ldr	r3, [pc, #16]	@ (8009274 <USER_SPI_status+0x28>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b2db      	uxtb	r3, r3
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	200400b8 	.word	0x200400b8

08009278 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d102      	bne.n	8009294 <USER_SPI_read+0x1c>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <USER_SPI_read+0x20>
 8009294:	2304      	movs	r3, #4
 8009296:	e04d      	b.n	8009334 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009298:	4b28      	ldr	r3, [pc, #160]	@ (800933c <USER_SPI_read+0xc4>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <USER_SPI_read+0x32>
 80092a6:	2303      	movs	r3, #3
 80092a8:	e044      	b.n	8009334 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80092aa:	4b25      	ldr	r3, [pc, #148]	@ (8009340 <USER_SPI_read+0xc8>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <USER_SPI_read+0x44>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	025b      	lsls	r3, r3, #9
 80092ba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d111      	bne.n	80092e6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	2011      	movs	r0, #17
 80092c6:	f7ff fe66 	bl	8008f96 <send_cmd>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d129      	bne.n	8009324 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80092d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092d4:	68b8      	ldr	r0, [r7, #8]
 80092d6:	f7ff fe03 	bl	8008ee0 <rcvr_datablock>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d021      	beq.n	8009324 <USER_SPI_read+0xac>
			count = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	e01e      	b.n	8009324 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	2012      	movs	r0, #18
 80092ea:	f7ff fe54 	bl	8008f96 <send_cmd>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d117      	bne.n	8009324 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80092f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092f8:	68b8      	ldr	r0, [r7, #8]
 80092fa:	f7ff fdf1 	bl	8008ee0 <rcvr_datablock>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <USER_SPI_read+0xa2>
				buff += 512;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800930a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	3b01      	subs	r3, #1
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1ed      	bne.n	80092f4 <USER_SPI_read+0x7c>
 8009318:	e000      	b.n	800931c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800931a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800931c:	2100      	movs	r1, #0
 800931e:	200c      	movs	r0, #12
 8009320:	f7ff fe39 	bl	8008f96 <send_cmd>
		}
	}
	despiselect();
 8009324:	f7ff fdb0 	bl	8008e88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bf14      	ite	ne
 800932e:	2301      	movne	r3, #1
 8009330:	2300      	moveq	r3, #0
 8009332:	b2db      	uxtb	r3, r3
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200400b8 	.word	0x200400b8
 8009340:	20040944 	.word	0x20040944

08009344 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <USER_SPI_write+0x1c>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USER_SPI_write+0x20>
 8009360:	2304      	movs	r3, #4
 8009362:	e063      	b.n	800942c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009364:	4b33      	ldr	r3, [pc, #204]	@ (8009434 <USER_SPI_write+0xf0>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <USER_SPI_write+0x32>
 8009372:	2303      	movs	r3, #3
 8009374:	e05a      	b.n	800942c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009376:	4b2f      	ldr	r3, [pc, #188]	@ (8009434 <USER_SPI_write+0xf0>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USER_SPI_write+0x44>
 8009384:	2302      	movs	r3, #2
 8009386:	e051      	b.n	800942c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009388:	4b2b      	ldr	r3, [pc, #172]	@ (8009438 <USER_SPI_write+0xf4>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <USER_SPI_write+0x56>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	025b      	lsls	r3, r3, #9
 8009398:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d110      	bne.n	80093c2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	2018      	movs	r0, #24
 80093a4:	f7ff fdf7 	bl	8008f96 <send_cmd>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d136      	bne.n	800941c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80093ae:	21fe      	movs	r1, #254	@ 0xfe
 80093b0:	68b8      	ldr	r0, [r7, #8]
 80093b2:	f7ff fdbe 	bl	8008f32 <xmit_datablock>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d02f      	beq.n	800941c <USER_SPI_write+0xd8>
			count = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	e02c      	b.n	800941c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80093c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009438 <USER_SPI_write+0xf4>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 0306 	and.w	r3, r3, #6
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <USER_SPI_write+0x92>
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	2097      	movs	r0, #151	@ 0x97
 80093d2:	f7ff fde0 	bl	8008f96 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	2019      	movs	r0, #25
 80093da:	f7ff fddc 	bl	8008f96 <send_cmd>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d11b      	bne.n	800941c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80093e4:	21fc      	movs	r1, #252	@ 0xfc
 80093e6:	68b8      	ldr	r0, [r7, #8]
 80093e8:	f7ff fda3 	bl	8008f32 <xmit_datablock>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <USER_SPI_write+0xc4>
				buff += 512;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80093f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1ee      	bne.n	80093e4 <USER_SPI_write+0xa0>
 8009406:	e000      	b.n	800940a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009408:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800940a:	21fd      	movs	r1, #253	@ 0xfd
 800940c:	2000      	movs	r0, #0
 800940e:	f7ff fd90 	bl	8008f32 <xmit_datablock>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <USER_SPI_write+0xd8>
 8009418:	2301      	movs	r3, #1
 800941a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800941c:	f7ff fd34 	bl	8008e88 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	bf14      	ite	ne
 8009426:	2301      	movne	r3, #1
 8009428:	2300      	moveq	r3, #0
 800942a:	b2db      	uxtb	r3, r3
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200400b8 	.word	0x200400b8
 8009438:	20040944 	.word	0x20040944

0800943c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	@ 0x30
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	603a      	str	r2, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	460b      	mov	r3, r1
 800944a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <USER_SPI_ioctl+0x1a>
 8009452:	2304      	movs	r3, #4
 8009454:	e15a      	b.n	800970c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009456:	4baf      	ldr	r3, [pc, #700]	@ (8009714 <USER_SPI_ioctl+0x2d8>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <USER_SPI_ioctl+0x2c>
 8009464:	2303      	movs	r3, #3
 8009466:	e151      	b.n	800970c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800946e:	79bb      	ldrb	r3, [r7, #6]
 8009470:	2b04      	cmp	r3, #4
 8009472:	f200 8136 	bhi.w	80096e2 <USER_SPI_ioctl+0x2a6>
 8009476:	a201      	add	r2, pc, #4	@ (adr r2, 800947c <USER_SPI_ioctl+0x40>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	08009491 	.word	0x08009491
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080096e3 	.word	0x080096e3
 8009488:	08009551 	.word	0x08009551
 800948c:	08009647 	.word	0x08009647
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009490:	f7ff fd0a 	bl	8008ea8 <spiselect>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8127 	beq.w	80096ea <USER_SPI_ioctl+0x2ae>
 800949c:	2300      	movs	r3, #0
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80094a2:	e122      	b.n	80096ea <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80094a4:	2100      	movs	r1, #0
 80094a6:	2009      	movs	r0, #9
 80094a8:	f7ff fd75 	bl	8008f96 <send_cmd>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f040 811d 	bne.w	80096ee <USER_SPI_ioctl+0x2b2>
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	2110      	movs	r1, #16
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fd10 	bl	8008ee0 <rcvr_datablock>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 8113 	beq.w	80096ee <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80094c8:	7b3b      	ldrb	r3, [r7, #12]
 80094ca:	099b      	lsrs	r3, r3, #6
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d111      	bne.n	80094f6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80094d2:	7d7b      	ldrb	r3, [r7, #21]
 80094d4:	461a      	mov	r2, r3
 80094d6:	7d3b      	ldrb	r3, [r7, #20]
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	4413      	add	r3, r2
 80094dc:	461a      	mov	r2, r3
 80094de:	7cfb      	ldrb	r3, [r7, #19]
 80094e0:	041b      	lsls	r3, r3, #16
 80094e2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80094e6:	4413      	add	r3, r2
 80094e8:	3301      	adds	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	029a      	lsls	r2, r3, #10
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e028      	b.n	8009548 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80094f6:	7c7b      	ldrb	r3, [r7, #17]
 80094f8:	f003 030f 	and.w	r3, r3, #15
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	7dbb      	ldrb	r3, [r7, #22]
 8009500:	09db      	lsrs	r3, r3, #7
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4413      	add	r3, r2
 8009506:	b2da      	uxtb	r2, r3
 8009508:	7d7b      	ldrb	r3, [r7, #21]
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f003 0306 	and.w	r3, r3, #6
 8009512:	b2db      	uxtb	r3, r3
 8009514:	4413      	add	r3, r2
 8009516:	b2db      	uxtb	r3, r3
 8009518:	3302      	adds	r3, #2
 800951a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800951e:	7d3b      	ldrb	r3, [r7, #20]
 8009520:	099b      	lsrs	r3, r3, #6
 8009522:	b2db      	uxtb	r3, r3
 8009524:	461a      	mov	r2, r3
 8009526:	7cfb      	ldrb	r3, [r7, #19]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	441a      	add	r2, r3
 800952c:	7cbb      	ldrb	r3, [r7, #18]
 800952e:	029b      	lsls	r3, r3, #10
 8009530:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009534:	4413      	add	r3, r2
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800953a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800953e:	3b09      	subs	r3, #9
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	409a      	lsls	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800954e:	e0ce      	b.n	80096ee <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009550:	4b71      	ldr	r3, [pc, #452]	@ (8009718 <USER_SPI_ioctl+0x2dc>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d031      	beq.n	80095c0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800955c:	2100      	movs	r1, #0
 800955e:	208d      	movs	r0, #141	@ 0x8d
 8009560:	f7ff fd19 	bl	8008f96 <send_cmd>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	f040 80c3 	bne.w	80096f2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800956c:	20ff      	movs	r0, #255	@ 0xff
 800956e:	f7ff fc21 	bl	8008db4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	2110      	movs	r1, #16
 8009578:	4618      	mov	r0, r3
 800957a:	f7ff fcb1 	bl	8008ee0 <rcvr_datablock>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 80b6 	beq.w	80096f2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009586:	2330      	movs	r3, #48	@ 0x30
 8009588:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800958c:	e007      	b.n	800959e <USER_SPI_ioctl+0x162>
 800958e:	20ff      	movs	r0, #255	@ 0xff
 8009590:	f7ff fc10 	bl	8008db4 <xchg_spi>
 8009594:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009598:	3b01      	subs	r3, #1
 800959a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800959e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1f3      	bne.n	800958e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80095a6:	7dbb      	ldrb	r3, [r7, #22]
 80095a8:	091b      	lsrs	r3, r3, #4
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	2310      	movs	r3, #16
 80095b0:	fa03 f202 	lsl.w	r2, r3, r2
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80095be:	e098      	b.n	80096f2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80095c0:	2100      	movs	r1, #0
 80095c2:	2009      	movs	r0, #9
 80095c4:	f7ff fce7 	bl	8008f96 <send_cmd>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 8091 	bne.w	80096f2 <USER_SPI_ioctl+0x2b6>
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	2110      	movs	r1, #16
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fc82 	bl	8008ee0 <rcvr_datablock>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8087 	beq.w	80096f2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80095e4:	4b4c      	ldr	r3, [pc, #304]	@ (8009718 <USER_SPI_ioctl+0x2dc>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d012      	beq.n	8009616 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80095f0:	7dbb      	ldrb	r3, [r7, #22]
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80095f8:	7dfa      	ldrb	r2, [r7, #23]
 80095fa:	09d2      	lsrs	r2, r2, #7
 80095fc:	b2d2      	uxtb	r2, r2
 80095fe:	4413      	add	r3, r2
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	7e7b      	ldrb	r3, [r7, #25]
 8009604:	099b      	lsrs	r3, r3, #6
 8009606:	b2db      	uxtb	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	fa02 f303 	lsl.w	r3, r2, r3
 800960e:	461a      	mov	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e013      	b.n	800963e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009616:	7dbb      	ldrb	r3, [r7, #22]
 8009618:	109b      	asrs	r3, r3, #2
 800961a:	b29b      	uxth	r3, r3
 800961c:	f003 031f 	and.w	r3, r3, #31
 8009620:	3301      	adds	r3, #1
 8009622:	7dfa      	ldrb	r2, [r7, #23]
 8009624:	00d2      	lsls	r2, r2, #3
 8009626:	f002 0218 	and.w	r2, r2, #24
 800962a:	7df9      	ldrb	r1, [r7, #23]
 800962c:	0949      	lsrs	r1, r1, #5
 800962e:	b2c9      	uxtb	r1, r1
 8009630:	440a      	add	r2, r1
 8009632:	3201      	adds	r2, #1
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	461a      	mov	r2, r3
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009644:	e055      	b.n	80096f2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009646:	4b34      	ldr	r3, [pc, #208]	@ (8009718 <USER_SPI_ioctl+0x2dc>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 0306 	and.w	r3, r3, #6
 800964e:	2b00      	cmp	r3, #0
 8009650:	d051      	beq.n	80096f6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009652:	f107 020c 	add.w	r2, r7, #12
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	210b      	movs	r1, #11
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff feee 	bl	800943c <USER_SPI_ioctl>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d149      	bne.n	80096fa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009666:	7b3b      	ldrb	r3, [r7, #12]
 8009668:	099b      	lsrs	r3, r3, #6
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <USER_SPI_ioctl+0x23e>
 8009670:	7dbb      	ldrb	r3, [r7, #22]
 8009672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d041      	beq.n	80096fe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800968a:	4b23      	ldr	r3, [pc, #140]	@ (8009718 <USER_SPI_ioctl+0x2dc>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009698:	025b      	lsls	r3, r3, #9
 800969a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	025b      	lsls	r3, r3, #9
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80096a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096a4:	2020      	movs	r0, #32
 80096a6:	f7ff fc76 	bl	8008f96 <send_cmd>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d128      	bne.n	8009702 <USER_SPI_ioctl+0x2c6>
 80096b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096b2:	2021      	movs	r0, #33	@ 0x21
 80096b4:	f7ff fc6f 	bl	8008f96 <send_cmd>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d121      	bne.n	8009702 <USER_SPI_ioctl+0x2c6>
 80096be:	2100      	movs	r1, #0
 80096c0:	2026      	movs	r0, #38	@ 0x26
 80096c2:	f7ff fc68 	bl	8008f96 <send_cmd>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d11a      	bne.n	8009702 <USER_SPI_ioctl+0x2c6>
 80096cc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80096d0:	f7ff fbb6 	bl	8008e40 <wait_ready>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d013      	beq.n	8009702 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80096da:	2300      	movs	r3, #0
 80096dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80096e0:	e00f      	b.n	8009702 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80096e2:	2304      	movs	r3, #4
 80096e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80096e8:	e00c      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		break;
 80096ea:	bf00      	nop
 80096ec:	e00a      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		break;
 80096ee:	bf00      	nop
 80096f0:	e008      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		break;
 80096f2:	bf00      	nop
 80096f4:	e006      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80096f6:	bf00      	nop
 80096f8:	e004      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80096fa:	bf00      	nop
 80096fc:	e002      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80096fe:	bf00      	nop
 8009700:	e000      	b.n	8009704 <USER_SPI_ioctl+0x2c8>
		break;
 8009702:	bf00      	nop
	}

	despiselect();
 8009704:	f7ff fbc0 	bl	8008e88 <despiselect>

	return res;
 8009708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800970c:	4618      	mov	r0, r3
 800970e:	3730      	adds	r7, #48	@ 0x30
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200400b8 	.word	0x200400b8
 8009718:	20040944 	.word	0x20040944

0800971c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	4a08      	ldr	r2, [pc, #32]	@ (800974c <disk_status+0x30>)
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	79fa      	ldrb	r2, [r7, #7]
 8009734:	4905      	ldr	r1, [pc, #20]	@ (800974c <disk_status+0x30>)
 8009736:	440a      	add	r2, r1
 8009738:	7a12      	ldrb	r2, [r2, #8]
 800973a:	4610      	mov	r0, r2
 800973c:	4798      	blx	r3
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20040978 	.word	0x20040978

08009750 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	4a0d      	ldr	r2, [pc, #52]	@ (8009798 <disk_initialize+0x48>)
 8009762:	5cd3      	ldrb	r3, [r2, r3]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d111      	bne.n	800978c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	4a0b      	ldr	r2, [pc, #44]	@ (8009798 <disk_initialize+0x48>)
 800976c:	2101      	movs	r1, #1
 800976e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	4a09      	ldr	r2, [pc, #36]	@ (8009798 <disk_initialize+0x48>)
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	79fa      	ldrb	r2, [r7, #7]
 800977e:	4906      	ldr	r1, [pc, #24]	@ (8009798 <disk_initialize+0x48>)
 8009780:	440a      	add	r2, r1
 8009782:	7a12      	ldrb	r2, [r2, #8]
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20040978 	.word	0x20040978

0800979c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	4a0a      	ldr	r2, [pc, #40]	@ (80097d8 <disk_read+0x3c>)
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	689c      	ldr	r4, [r3, #8]
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4a07      	ldr	r2, [pc, #28]	@ (80097d8 <disk_read+0x3c>)
 80097bc:	4413      	add	r3, r2
 80097be:	7a18      	ldrb	r0, [r3, #8]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	47a0      	blx	r4
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd90      	pop	{r4, r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20040978 	.word	0x20040978

080097dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009818 <disk_write+0x3c>)
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68dc      	ldr	r4, [r3, #12]
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4a07      	ldr	r2, [pc, #28]	@ (8009818 <disk_write+0x3c>)
 80097fc:	4413      	add	r3, r2
 80097fe:	7a18      	ldrb	r0, [r3, #8]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	68b9      	ldr	r1, [r7, #8]
 8009806:	47a0      	blx	r4
 8009808:	4603      	mov	r3, r0
 800980a:	75fb      	strb	r3, [r7, #23]
  return res;
 800980c:	7dfb      	ldrb	r3, [r7, #23]
}
 800980e:	4618      	mov	r0, r3
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	bd90      	pop	{r4, r7, pc}
 8009816:	bf00      	nop
 8009818:	20040978 	.word	0x20040978

0800981c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	603a      	str	r2, [r7, #0]
 8009826:	71fb      	strb	r3, [r7, #7]
 8009828:	460b      	mov	r3, r1
 800982a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	4a09      	ldr	r2, [pc, #36]	@ (8009854 <disk_ioctl+0x38>)
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	79fa      	ldrb	r2, [r7, #7]
 800983a:	4906      	ldr	r1, [pc, #24]	@ (8009854 <disk_ioctl+0x38>)
 800983c:	440a      	add	r2, r1
 800983e:	7a10      	ldrb	r0, [r2, #8]
 8009840:	79b9      	ldrb	r1, [r7, #6]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4798      	blx	r3
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
  return res;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20040978 	.word	0x20040978

08009858 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009868:	89fb      	ldrh	r3, [r7, #14]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	b21a      	sxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	b21b      	sxth	r3, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	b21b      	sxth	r3, r3
 8009878:	81fb      	strh	r3, [r7, #14]
	return rv;
 800987a:	89fb      	ldrh	r3, [r7, #14]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3303      	adds	r3, #3
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	3202      	adds	r2, #2
 80098a0:	7812      	ldrb	r2, [r2, #0]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	3201      	adds	r2, #1
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
	return rv;
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	887a      	ldrh	r2, [r7, #2]
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	0a1b      	lsrs	r3, r3, #8
 80098ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	607a      	str	r2, [r7, #4]
 80098f2:	887a      	ldrh	r2, [r7, #2]
 80098f4:	b2d2      	uxtb	r2, r2
 80098f6:	701a      	strb	r2, [r3, #0]
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	0a1b      	lsrs	r3, r3, #8
 800991e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	607a      	str	r2, [r7, #4]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	b2d2      	uxtb	r2, r2
 800992a:	701a      	strb	r2, [r3, #0]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	b2d2      	uxtb	r2, r2
 800994e:	701a      	strb	r2, [r3, #0]
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	1c53      	adds	r3, r2, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	6179      	str	r1, [r7, #20]
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	607b      	str	r3, [r7, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f1      	bne.n	8009976 <mem_cpy+0x1a>
	}
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800999e:	b480      	push	{r7}
 80099a0:	b087      	sub	sp, #28
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	617a      	str	r2, [r7, #20]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3b01      	subs	r3, #1
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f3      	bne.n	80099ae <mem_set+0x10>
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80099d4:	b480      	push	{r7}
 80099d6:	b089      	sub	sp, #36	@ 0x24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	61fa      	str	r2, [r7, #28]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	4619      	mov	r1, r3
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	61ba      	str	r2, [r7, #24]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	1acb      	subs	r3, r1, r3
 8009a00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d002      	beq.n	8009a14 <mem_cmp+0x40>
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d0eb      	beq.n	80099ec <mem_cmp+0x18>

	return r;
 8009a14:	697b      	ldr	r3, [r7, #20]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3724      	adds	r7, #36	@ 0x24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009a2c:	e002      	b.n	8009a34 <chk_chr+0x12>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3301      	adds	r3, #1
 8009a32:	607b      	str	r3, [r7, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <chk_chr+0x26>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d1f2      	bne.n	8009a2e <chk_chr+0xc>
	return *str;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e029      	b.n	8009ac0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a6c:	4a27      	ldr	r2, [pc, #156]	@ (8009b0c <chk_lock+0xb4>)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	011b      	lsls	r3, r3, #4
 8009a72:	4413      	add	r3, r2
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01d      	beq.n	8009ab6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a7a:	4a24      	ldr	r2, [pc, #144]	@ (8009b0c <chk_lock+0xb4>)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	011b      	lsls	r3, r3, #4
 8009a80:	4413      	add	r3, r2
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d116      	bne.n	8009aba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8009b0c <chk_lock+0xb4>)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	4413      	add	r3, r2
 8009a94:	3304      	adds	r3, #4
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d10c      	bne.n	8009aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8009b0c <chk_lock+0xb4>)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	4413      	add	r3, r2
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d102      	bne.n	8009aba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ab4:	e007      	b.n	8009ac6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3301      	adds	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d9d2      	bls.n	8009a6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d109      	bne.n	8009ae0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <chk_lock+0x80>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d101      	bne.n	8009adc <chk_lock+0x84>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e010      	b.n	8009afe <chk_lock+0xa6>
 8009adc:	2312      	movs	r3, #18
 8009ade:	e00e      	b.n	8009afe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d108      	bne.n	8009af8 <chk_lock+0xa0>
 8009ae6:	4a09      	ldr	r2, [pc, #36]	@ (8009b0c <chk_lock+0xb4>)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	4413      	add	r3, r2
 8009aee:	330c      	adds	r3, #12
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af6:	d101      	bne.n	8009afc <chk_lock+0xa4>
 8009af8:	2310      	movs	r3, #16
 8009afa:	e000      	b.n	8009afe <chk_lock+0xa6>
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20040958 	.word	0x20040958

08009b10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b16:	2300      	movs	r3, #0
 8009b18:	607b      	str	r3, [r7, #4]
 8009b1a:	e002      	b.n	8009b22 <enq_lock+0x12>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	607b      	str	r3, [r7, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d806      	bhi.n	8009b36 <enq_lock+0x26>
 8009b28:	4a09      	ldr	r2, [pc, #36]	@ (8009b50 <enq_lock+0x40>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	011b      	lsls	r3, r3, #4
 8009b2e:	4413      	add	r3, r2
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1f2      	bne.n	8009b1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	bf14      	ite	ne
 8009b3c:	2301      	movne	r3, #1
 8009b3e:	2300      	moveq	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20040958 	.word	0x20040958

08009b54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e01f      	b.n	8009ba4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b64:	4a41      	ldr	r2, [pc, #260]	@ (8009c6c <inc_lock+0x118>)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	4413      	add	r3, r2
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d113      	bne.n	8009b9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b76:	4a3d      	ldr	r2, [pc, #244]	@ (8009c6c <inc_lock+0x118>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3304      	adds	r3, #4
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d109      	bne.n	8009b9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b8a:	4a38      	ldr	r2, [pc, #224]	@ (8009c6c <inc_lock+0x118>)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	4413      	add	r3, r2
 8009b92:	3308      	adds	r3, #8
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d006      	beq.n	8009bac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d9dc      	bls.n	8009b64 <inc_lock+0x10>
 8009baa:	e000      	b.n	8009bae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009bac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d132      	bne.n	8009c1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	e002      	b.n	8009bc0 <inc_lock+0x6c>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d806      	bhi.n	8009bd4 <inc_lock+0x80>
 8009bc6:	4a29      	ldr	r2, [pc, #164]	@ (8009c6c <inc_lock+0x118>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	4413      	add	r3, r2
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f2      	bne.n	8009bba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d101      	bne.n	8009bde <inc_lock+0x8a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e040      	b.n	8009c60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4922      	ldr	r1, [pc, #136]	@ (8009c6c <inc_lock+0x118>)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	440b      	add	r3, r1
 8009bea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	491e      	ldr	r1, [pc, #120]	@ (8009c6c <inc_lock+0x118>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	491a      	ldr	r1, [pc, #104]	@ (8009c6c <inc_lock+0x118>)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	011b      	lsls	r3, r3, #4
 8009c06:	440b      	add	r3, r1
 8009c08:	3308      	adds	r3, #8
 8009c0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009c0c:	4a17      	ldr	r2, [pc, #92]	@ (8009c6c <inc_lock+0x118>)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	011b      	lsls	r3, r3, #4
 8009c12:	4413      	add	r3, r2
 8009c14:	330c      	adds	r3, #12
 8009c16:	2200      	movs	r2, #0
 8009c18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d009      	beq.n	8009c34 <inc_lock+0xe0>
 8009c20:	4a12      	ldr	r2, [pc, #72]	@ (8009c6c <inc_lock+0x118>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	4413      	add	r3, r2
 8009c28:	330c      	adds	r3, #12
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <inc_lock+0xe0>
 8009c30:	2300      	movs	r3, #0
 8009c32:	e015      	b.n	8009c60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d108      	bne.n	8009c4c <inc_lock+0xf8>
 8009c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009c6c <inc_lock+0x118>)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	4413      	add	r3, r2
 8009c42:	330c      	adds	r3, #12
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	3301      	adds	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	e001      	b.n	8009c50 <inc_lock+0xfc>
 8009c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c50:	4906      	ldr	r1, [pc, #24]	@ (8009c6c <inc_lock+0x118>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	440b      	add	r3, r1
 8009c58:	330c      	adds	r3, #12
 8009c5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	20040958 	.word	0x20040958

08009c70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d825      	bhi.n	8009cd0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c84:	4a17      	ldr	r2, [pc, #92]	@ (8009ce4 <dec_lock+0x74>)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	4413      	add	r3, r2
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c92:	89fb      	ldrh	r3, [r7, #14]
 8009c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c98:	d101      	bne.n	8009c9e <dec_lock+0x2e>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c9e:	89fb      	ldrh	r3, [r7, #14]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <dec_lock+0x3a>
 8009ca4:	89fb      	ldrh	r3, [r7, #14]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009caa:	4a0e      	ldr	r2, [pc, #56]	@ (8009ce4 <dec_lock+0x74>)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	4413      	add	r3, r2
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	89fa      	ldrh	r2, [r7, #14]
 8009cb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009cb8:	89fb      	ldrh	r3, [r7, #14]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <dec_lock+0x5a>
 8009cbe:	4a09      	ldr	r2, [pc, #36]	@ (8009ce4 <dec_lock+0x74>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	737b      	strb	r3, [r7, #13]
 8009cce:	e001      	b.n	8009cd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009cd4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20040958 	.word	0x20040958

08009ce8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e010      	b.n	8009d18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8009d2c <clear_lock+0x44>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	4413      	add	r3, r2
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d105      	bne.n	8009d12 <clear_lock+0x2a>
 8009d06:	4a09      	ldr	r2, [pc, #36]	@ (8009d2c <clear_lock+0x44>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d9eb      	bls.n	8009cf6 <clear_lock+0xe>
	}
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	20040958 	.word	0x20040958

08009d30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	78db      	ldrb	r3, [r3, #3]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d034      	beq.n	8009dae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7858      	ldrb	r0, [r3, #1]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d54:	2301      	movs	r3, #1
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	f7ff fd40 	bl	80097dc <disk_write>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	73fb      	strb	r3, [r7, #15]
 8009d66:	e022      	b.n	8009dae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	1ad2      	subs	r2, r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d217      	bcs.n	8009dae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	789b      	ldrb	r3, [r3, #2]
 8009d82:	613b      	str	r3, [r7, #16]
 8009d84:	e010      	b.n	8009da8 <sync_window+0x78>
					wsect += fs->fsize;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7858      	ldrb	r0, [r3, #1]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	f7ff fd1d 	bl	80097dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	613b      	str	r3, [r7, #16]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d8eb      	bhi.n	8009d86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d01b      	beq.n	8009e08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ffad 	bl	8009d30 <sync_window>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d113      	bne.n	8009e08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7858      	ldrb	r0, [r3, #1]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dea:	2301      	movs	r3, #1
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	f7ff fcd5 	bl	800979c <disk_read>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ff87 	bl	8009d30 <sync_window>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d158      	bne.n	8009ede <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d148      	bne.n	8009ec6 <sync_fs+0xb2>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	791b      	ldrb	r3, [r3, #4]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d144      	bne.n	8009ec6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3330      	adds	r3, #48	@ 0x30
 8009e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fda9 	bl	800999e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3330      	adds	r3, #48	@ 0x30
 8009e50:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009e54:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff fd38 	bl	80098ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3330      	adds	r3, #48	@ 0x30
 8009e62:	4921      	ldr	r1, [pc, #132]	@ (8009ee8 <sync_fs+0xd4>)
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff fd4d 	bl	8009904 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3330      	adds	r3, #48	@ 0x30
 8009e6e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009e72:	491e      	ldr	r1, [pc, #120]	@ (8009eec <sync_fs+0xd8>)
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7ff fd45 	bl	8009904 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3330      	adds	r3, #48	@ 0x30
 8009e7e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f7ff fd3b 	bl	8009904 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	3330      	adds	r3, #48	@ 0x30
 8009e92:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7ff fd31 	bl	8009904 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7858      	ldrb	r0, [r3, #1]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f7ff fc8e 	bl	80097dc <disk_write>
			fs->fsi_flag = 0;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff fca4 	bl	800981c <disk_ioctl>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <sync_fs+0xca>
 8009eda:	2301      	movs	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	41615252 	.word	0x41615252
 8009eec:	61417272 	.word	0x61417272

08009ef0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	3b02      	subs	r3, #2
 8009efe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	3b02      	subs	r3, #2
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d301      	bcc.n	8009f10 <clust2sect+0x20>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e008      	b.n	8009f22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	895b      	ldrh	r3, [r3, #10]
 8009f14:	461a      	mov	r2, r3
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	fb03 f202 	mul.w	r2, r3, r2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f20:	4413      	add	r3, r2
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b086      	sub	sp, #24
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d904      	bls.n	8009f4e <get_fat+0x20>
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d302      	bcc.n	8009f54 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f4e:	2301      	movs	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	e08e      	b.n	800a072 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f54:	f04f 33ff 	mov.w	r3, #4294967295
 8009f58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d061      	beq.n	800a026 <get_fat+0xf8>
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	dc7b      	bgt.n	800a05e <get_fat+0x130>
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d002      	beq.n	8009f70 <get_fat+0x42>
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d041      	beq.n	8009ff2 <get_fat+0xc4>
 8009f6e:	e076      	b.n	800a05e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	085b      	lsrs	r3, r3, #1
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6a1a      	ldr	r2, [r3, #32]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	0a5b      	lsrs	r3, r3, #9
 8009f86:	4413      	add	r3, r2
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6938      	ldr	r0, [r7, #16]
 8009f8c:	f7ff ff14 	bl	8009db8 <move_window>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d166      	bne.n	800a064 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	60fa      	str	r2, [r7, #12]
 8009f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009fa8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6a1a      	ldr	r2, [r3, #32]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	0a5b      	lsrs	r3, r3, #9
 8009fb2:	4413      	add	r3, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6938      	ldr	r0, [r7, #16]
 8009fb8:	f7ff fefe 	bl	8009db8 <move_window>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d152      	bne.n	800a068 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009fd0:	021b      	lsls	r3, r3, #8
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <get_fat+0xba>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	091b      	lsrs	r3, r3, #4
 8009fe6:	e002      	b.n	8009fee <get_fat+0xc0>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fee:	617b      	str	r3, [r7, #20]
			break;
 8009ff0:	e03f      	b.n	800a072 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	6a1a      	ldr	r2, [r3, #32]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	0a1b      	lsrs	r3, r3, #8
 8009ffa:	4413      	add	r3, r2
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6938      	ldr	r0, [r7, #16]
 800a000:	f7ff feda 	bl	8009db8 <move_window>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d130      	bne.n	800a06c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a018:	4413      	add	r3, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff fc1c 	bl	8009858 <ld_word>
 800a020:	4603      	mov	r3, r0
 800a022:	617b      	str	r3, [r7, #20]
			break;
 800a024:	e025      	b.n	800a072 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6a1a      	ldr	r2, [r3, #32]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	09db      	lsrs	r3, r3, #7
 800a02e:	4413      	add	r3, r2
 800a030:	4619      	mov	r1, r3
 800a032:	6938      	ldr	r0, [r7, #16]
 800a034:	f7ff fec0 	bl	8009db8 <move_window>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d118      	bne.n	800a070 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a04c:	4413      	add	r3, r2
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff fc1a 	bl	8009888 <ld_dword>
 800a054:	4603      	mov	r3, r0
 800a056:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a05a:	617b      	str	r3, [r7, #20]
			break;
 800a05c:	e009      	b.n	800a072 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a05e:	2301      	movs	r3, #1
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e006      	b.n	800a072 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a064:	bf00      	nop
 800a066:	e004      	b.n	800a072 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a070:	bf00      	nop
		}
	}

	return val;
 800a072:	697b      	ldr	r3, [r7, #20]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b089      	sub	sp, #36	@ 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a088:	2302      	movs	r3, #2
 800a08a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	f240 80d9 	bls.w	800a246 <put_fat+0x1ca>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	f080 80d3 	bcs.w	800a246 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	f000 8096 	beq.w	800a1d6 <put_fat+0x15a>
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	f300 80cb 	bgt.w	800a246 <put_fat+0x1ca>
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d002      	beq.n	800a0ba <put_fat+0x3e>
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d06e      	beq.n	800a196 <put_fat+0x11a>
 800a0b8:	e0c5      	b.n	800a246 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	085b      	lsrs	r3, r3, #1
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1a      	ldr	r2, [r3, #32]
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	0a5b      	lsrs	r3, r3, #9
 800a0d0:	4413      	add	r3, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff fe6f 	bl	8009db8 <move_window>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0de:	7ffb      	ldrb	r3, [r7, #31]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 80a9 	bne.w	800a238 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	1c59      	adds	r1, r3, #1
 800a0f0:	61b9      	str	r1, [r7, #24]
 800a0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f6:	4413      	add	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00d      	beq.n	800a120 <put_fat+0xa4>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	b25a      	sxtb	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	011b      	lsls	r3, r3, #4
 800a116:	b25b      	sxtb	r3, r3
 800a118:	4313      	orrs	r3, r2
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e001      	b.n	800a124 <put_fat+0xa8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a1a      	ldr	r2, [r3, #32]
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	0a5b      	lsrs	r3, r3, #9
 800a136:	4413      	add	r3, r2
 800a138:	4619      	mov	r1, r3
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f7ff fe3c 	bl	8009db8 <move_window>
 800a140:	4603      	mov	r3, r0
 800a142:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a144:	7ffb      	ldrb	r3, [r7, #31]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d178      	bne.n	800a23c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	4413      	add	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d003      	beq.n	800a16c <put_fat+0xf0>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	091b      	lsrs	r3, r3, #4
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	e00e      	b.n	800a18a <put_fat+0x10e>
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b25b      	sxtb	r3, r3
 800a172:	f023 030f 	bic.w	r3, r3, #15
 800a176:	b25a      	sxtb	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	0a1b      	lsrs	r3, r3, #8
 800a17c:	b25b      	sxtb	r3, r3
 800a17e:	f003 030f 	and.w	r3, r3, #15
 800a182:	b25b      	sxtb	r3, r3
 800a184:	4313      	orrs	r3, r2
 800a186:	b25b      	sxtb	r3, r3
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	70da      	strb	r2, [r3, #3]
			break;
 800a194:	e057      	b.n	800a246 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1a      	ldr	r2, [r3, #32]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	0a1b      	lsrs	r3, r3, #8
 800a19e:	4413      	add	r3, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff fe08 	bl	8009db8 <move_window>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1ac:	7ffb      	ldrb	r3, [r7, #31]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d146      	bne.n	800a240 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a1c0:	4413      	add	r3, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fb80 	bl	80098ce <st_word>
			fs->wflag = 1;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	70da      	strb	r2, [r3, #3]
			break;
 800a1d4:	e037      	b.n	800a246 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6a1a      	ldr	r2, [r3, #32]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	09db      	lsrs	r3, r3, #7
 800a1de:	4413      	add	r3, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7ff fde8 	bl	8009db8 <move_window>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1ec:	7ffb      	ldrb	r3, [r7, #31]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d128      	bne.n	800a244 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a206:	4413      	add	r3, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fb3d 	bl	8009888 <ld_dword>
 800a20e:	4603      	mov	r3, r0
 800a210:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a214:	4323      	orrs	r3, r4
 800a216:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a226:	4413      	add	r3, r2
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fb6a 	bl	8009904 <st_dword>
			fs->wflag = 1;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	70da      	strb	r2, [r3, #3]
			break;
 800a236:	e006      	b.n	800a246 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a238:	bf00      	nop
 800a23a:	e004      	b.n	800a246 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a23c:	bf00      	nop
 800a23e:	e002      	b.n	800a246 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a240:	bf00      	nop
 800a242:	e000      	b.n	800a246 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a244:	bf00      	nop
		}
	}
	return res;
 800a246:	7ffb      	ldrb	r3, [r7, #31]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3724      	adds	r7, #36	@ 0x24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d904      	bls.n	800a276 <remove_chain+0x26>
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	429a      	cmp	r2, r3
 800a274:	d301      	bcc.n	800a27a <remove_chain+0x2a>
 800a276:	2302      	movs	r3, #2
 800a278:	e04b      	b.n	800a312 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00c      	beq.n	800a29a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a280:	f04f 32ff 	mov.w	r2, #4294967295
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	69b8      	ldr	r0, [r7, #24]
 800a288:	f7ff fef8 	bl	800a07c <put_fat>
 800a28c:	4603      	mov	r3, r0
 800a28e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a290:	7ffb      	ldrb	r3, [r7, #31]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <remove_chain+0x4a>
 800a296:	7ffb      	ldrb	r3, [r7, #31]
 800a298:	e03b      	b.n	800a312 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fe46 	bl	8009f2e <get_fat>
 800a2a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d031      	beq.n	800a30e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d101      	bne.n	800a2b4 <remove_chain+0x64>
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e02e      	b.n	800a312 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ba:	d101      	bne.n	800a2c0 <remove_chain+0x70>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e028      	b.n	800a312 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	69b8      	ldr	r0, [r7, #24]
 800a2c6:	f7ff fed9 	bl	800a07c <put_fat>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2ce:	7ffb      	ldrb	r3, [r7, #31]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <remove_chain+0x88>
 800a2d4:	7ffb      	ldrb	r3, [r7, #31]
 800a2d6:	e01c      	b.n	800a312 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	3b02      	subs	r3, #2
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d20b      	bcs.n	800a2fe <remove_chain+0xae>
			fs->free_clst++;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	791b      	ldrb	r3, [r3, #4]
 800a2f4:	f043 0301 	orr.w	r3, r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d3c6      	bcc.n	800a29a <remove_chain+0x4a>
 800a30c:	e000      	b.n	800a310 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a30e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b088      	sub	sp, #32
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10d      	bne.n	800a34c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <create_chain+0x2c>
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	429a      	cmp	r2, r3
 800a344:	d31b      	bcc.n	800a37e <create_chain+0x64>
 800a346:	2301      	movs	r3, #1
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	e018      	b.n	800a37e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fded 	bl	8009f2e <get_fat>
 800a354:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d801      	bhi.n	800a360 <create_chain+0x46>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e070      	b.n	800a442 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a366:	d101      	bne.n	800a36c <create_chain+0x52>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	e06a      	b.n	800a442 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	429a      	cmp	r2, r3
 800a374:	d201      	bcs.n	800a37a <create_chain+0x60>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	e063      	b.n	800a442 <create_chain+0x128>
		scl = clst;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	3301      	adds	r3, #1
 800a386:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d307      	bcc.n	800a3a2 <create_chain+0x88>
				ncl = 2;
 800a392:	2302      	movs	r3, #2
 800a394:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d901      	bls.n	800a3a2 <create_chain+0x88>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e04f      	b.n	800a442 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a3a2:	69f9      	ldr	r1, [r7, #28]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fdc2 	bl	8009f2e <get_fat>
 800a3aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00e      	beq.n	800a3d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d003      	beq.n	800a3c0 <create_chain+0xa6>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3be:	d101      	bne.n	800a3c4 <create_chain+0xaa>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	e03e      	b.n	800a442 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d1da      	bne.n	800a382 <create_chain+0x68>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e038      	b.n	800a442 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a3d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d6:	69f9      	ldr	r1, [r7, #28]
 800a3d8:	6938      	ldr	r0, [r7, #16]
 800a3da:	f7ff fe4f 	bl	800a07c <put_fat>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <create_chain+0xe2>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6938      	ldr	r0, [r7, #16]
 800a3f4:	f7ff fe42 	bl	800a07c <put_fat>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d116      	bne.n	800a430 <create_chain+0x116>
		fs->last_clst = ncl;
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	3b02      	subs	r3, #2
 800a412:	429a      	cmp	r2, r3
 800a414:	d804      	bhi.n	800a420 <create_chain+0x106>
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	1e5a      	subs	r2, r3, #1
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	791b      	ldrb	r3, [r3, #4]
 800a424:	f043 0301 	orr.w	r3, r3, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	711a      	strb	r2, [r3, #4]
 800a42e:	e007      	b.n	800a440 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d102      	bne.n	800a43c <create_chain+0x122>
 800a436:	f04f 33ff 	mov.w	r3, #4294967295
 800a43a:	e000      	b.n	800a43e <create_chain+0x124>
 800a43c:	2301      	movs	r3, #1
 800a43e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a440:	69fb      	ldr	r3, [r7, #28]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a45e:	3304      	adds	r3, #4
 800a460:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	0a5b      	lsrs	r3, r3, #9
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	8952      	ldrh	r2, [r2, #10]
 800a46a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	613a      	str	r2, [r7, #16]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <clmt_clust+0x3a>
 800a480:	2300      	movs	r3, #0
 800a482:	e010      	b.n	800a4a6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d307      	bcc.n	800a49c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	3304      	adds	r3, #4
 800a498:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a49a:	e7e9      	b.n	800a470 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a49c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	4413      	add	r3, r2
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b086      	sub	sp, #24
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4c8:	d204      	bcs.n	800a4d4 <dir_sdi+0x22>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e063      	b.n	800a5a0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d106      	bne.n	800a4f8 <dir_sdi+0x46>
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d902      	bls.n	800a4f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10c      	bne.n	800a518 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	095b      	lsrs	r3, r3, #5
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	8912      	ldrh	r2, [r2, #8]
 800a506:	4293      	cmp	r3, r2
 800a508:	d301      	bcc.n	800a50e <dir_sdi+0x5c>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e048      	b.n	800a5a0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	61da      	str	r2, [r3, #28]
 800a516:	e029      	b.n	800a56c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	895b      	ldrh	r3, [r3, #10]
 800a51c:	025b      	lsls	r3, r3, #9
 800a51e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a520:	e019      	b.n	800a556 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6979      	ldr	r1, [r7, #20]
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff fd01 	bl	8009f2e <get_fat>
 800a52c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d101      	bne.n	800a53a <dir_sdi+0x88>
 800a536:	2301      	movs	r3, #1
 800a538:	e032      	b.n	800a5a0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d904      	bls.n	800a54a <dir_sdi+0x98>
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	429a      	cmp	r2, r3
 800a548:	d301      	bcc.n	800a54e <dir_sdi+0x9c>
 800a54a:	2302      	movs	r3, #2
 800a54c:	e028      	b.n	800a5a0 <dir_sdi+0xee>
			ofs -= csz;
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d2e1      	bcs.n	800a522 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a55e:	6979      	ldr	r1, [r7, #20]
 800a560:	6938      	ldr	r0, [r7, #16]
 800a562:	f7ff fcc5 	bl	8009ef0 <clust2sect>
 800a566:	4602      	mov	r2, r0
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <dir_sdi+0xcc>
 800a57a:	2302      	movs	r3, #2
 800a57c:	e010      	b.n	800a5a0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	0a5b      	lsrs	r3, r3, #9
 800a586:	441a      	add	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a598:	441a      	add	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	3320      	adds	r3, #32
 800a5be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <dir_next+0x28>
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5ce:	d301      	bcc.n	800a5d4 <dir_next+0x2c>
 800a5d0:	2304      	movs	r3, #4
 800a5d2:	e0aa      	b.n	800a72a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 8098 	bne.w	800a710 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	1c5a      	adds	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10b      	bne.n	800a60a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	095b      	lsrs	r3, r3, #5
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	8912      	ldrh	r2, [r2, #8]
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	f0c0 8088 	bcc.w	800a710 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	61da      	str	r2, [r3, #28]
 800a606:	2304      	movs	r3, #4
 800a608:	e08f      	b.n	800a72a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	8952      	ldrh	r2, [r2, #10]
 800a612:	3a01      	subs	r2, #1
 800a614:	4013      	ands	r3, r2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d17a      	bne.n	800a710 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f7ff fc83 	bl	8009f2e <get_fat>
 800a628:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d801      	bhi.n	800a634 <dir_next+0x8c>
 800a630:	2302      	movs	r3, #2
 800a632:	e07a      	b.n	800a72a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d101      	bne.n	800a640 <dir_next+0x98>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e074      	b.n	800a72a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	429a      	cmp	r2, r3
 800a648:	d358      	bcc.n	800a6fc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d104      	bne.n	800a65a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	61da      	str	r2, [r3, #28]
 800a656:	2304      	movs	r3, #4
 800a658:	e067      	b.n	800a72a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	4619      	mov	r1, r3
 800a662:	4610      	mov	r0, r2
 800a664:	f7ff fe59 	bl	800a31a <create_chain>
 800a668:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <dir_next+0xcc>
 800a670:	2307      	movs	r3, #7
 800a672:	e05a      	b.n	800a72a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <dir_next+0xd6>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e055      	b.n	800a72a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d101      	bne.n	800a68a <dir_next+0xe2>
 800a686:	2301      	movs	r3, #1
 800a688:	e04f      	b.n	800a72a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7ff fb50 	bl	8009d30 <sync_window>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <dir_next+0xf2>
 800a696:	2301      	movs	r3, #1
 800a698:	e047      	b.n	800a72a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3330      	adds	r3, #48	@ 0x30
 800a69e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff f97a 	bl	800999e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	6979      	ldr	r1, [r7, #20]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f7ff fc1d 	bl	8009ef0 <clust2sect>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a6bc:	e012      	b.n	800a6e4 <dir_next+0x13c>
						fs->wflag = 1;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f7ff fb33 	bl	8009d30 <sync_window>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <dir_next+0x12c>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e02a      	b.n	800a72a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	613b      	str	r3, [r7, #16]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	895b      	ldrh	r3, [r3, #10]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d3e6      	bcc.n	800a6be <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a702:	6979      	ldr	r1, [r7, #20]
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff fbf3 	bl	8009ef0 <clust2sect>
 800a70a:	4602      	mov	r2, r0
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a722:	441a      	add	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a742:	2100      	movs	r1, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff feb4 	bl	800a4b2 <dir_sdi>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d12b      	bne.n	800a7ac <dir_alloc+0x7a>
		n = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	4619      	mov	r1, r3
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fb2a 	bl	8009db8 <move_window>
 800a764:	4603      	mov	r3, r0
 800a766:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d11d      	bne.n	800a7aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2be5      	cmp	r3, #229	@ 0xe5
 800a776:	d004      	beq.n	800a782 <dir_alloc+0x50>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d107      	bne.n	800a792 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d102      	bne.n	800a796 <dir_alloc+0x64>
 800a790:	e00c      	b.n	800a7ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a792:	2300      	movs	r3, #0
 800a794:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a796:	2101      	movs	r1, #1
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff ff05 	bl	800a5a8 <dir_next>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0d7      	beq.n	800a758 <dir_alloc+0x26>
 800a7a8:	e000      	b.n	800a7ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a7aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d101      	bne.n	800a7b6 <dir_alloc+0x84>
 800a7b2:	2307      	movs	r3, #7
 800a7b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	331a      	adds	r3, #26
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff f842 	bl	8009858 <ld_word>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d109      	bne.n	800a7f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff f837 	bl	8009858 <ld_word>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	041b      	lsls	r3, r3, #16
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	331a      	adds	r3, #26
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	b292      	uxth	r2, r2
 800a812:	4611      	mov	r1, r2
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff f85a 	bl	80098ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d109      	bne.n	800a836 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f103 0214 	add.w	r2, r3, #20
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f7ff f84c 	bl	80098ce <st_word>
	}
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff fe2f 	bl	800a4b2 <dir_sdi>
 800a854:	4603      	mov	r3, r0
 800a856:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <dir_find+0x24>
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	e03e      	b.n	800a8e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	4619      	mov	r1, r3
 800a868:	6938      	ldr	r0, [r7, #16]
 800a86a:	f7ff faa5 	bl	8009db8 <move_window>
 800a86e:	4603      	mov	r3, r0
 800a870:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d12f      	bne.n	800a8d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <dir_find+0x4e>
 800a886:	2304      	movs	r3, #4
 800a888:	75fb      	strb	r3, [r7, #23]
 800a88a:	e028      	b.n	800a8de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	330b      	adds	r3, #11
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	330b      	adds	r3, #11
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	f003 0308 	and.w	r3, r3, #8
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10a      	bne.n	800a8c4 <dir_find+0x86>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a18      	ldr	r0, [r3, #32]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3324      	adds	r3, #36	@ 0x24
 800a8b6:	220b      	movs	r2, #11
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7ff f88b 	bl	80099d4 <mem_cmp>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe6e 	bl	800a5a8 <dir_next>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a8d0:	7dfb      	ldrb	r3, [r7, #23]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0c5      	beq.n	800a862 <dir_find+0x24>
 800a8d6:	e002      	b.n	800a8de <dir_find+0xa0>
		if (res != FR_OK) break;
 800a8d8:	bf00      	nop
 800a8da:	e000      	b.n	800a8de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a8dc:	bf00      	nop

	return res;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff ff1a 	bl	800a732 <dir_alloc>
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d11c      	bne.n	800a942 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	4619      	mov	r1, r3
 800a90e:	68b8      	ldr	r0, [r7, #8]
 800a910:	f7ff fa52 	bl	8009db8 <move_window>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d111      	bne.n	800a942 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	2220      	movs	r2, #32
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff f839 	bl	800999e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a18      	ldr	r0, [r3, #32]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3324      	adds	r3, #36	@ 0x24
 800a934:	220b      	movs	r2, #11
 800a936:	4619      	mov	r1, r3
 800a938:	f7ff f810 	bl	800995c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2201      	movs	r2, #1
 800a940:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a942:	7bfb      	ldrb	r3, [r7, #15]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3324      	adds	r3, #36	@ 0x24
 800a960:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a962:	220b      	movs	r2, #11
 800a964:	2120      	movs	r1, #32
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f7ff f819 	bl	800999e <mem_set>
	si = i = 0; ni = 8;
 800a96c:	2300      	movs	r3, #0
 800a96e:	613b      	str	r3, [r7, #16]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	61fb      	str	r3, [r7, #28]
 800a974:	2308      	movs	r3, #8
 800a976:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	61fa      	str	r2, [r7, #28]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4413      	add	r3, r2
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a986:	7efb      	ldrb	r3, [r7, #27]
 800a988:	2b20      	cmp	r3, #32
 800a98a:	d94e      	bls.n	800aa2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a98c:	7efb      	ldrb	r3, [r7, #27]
 800a98e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a990:	d006      	beq.n	800a9a0 <create_name+0x54>
 800a992:	7efb      	ldrb	r3, [r7, #27]
 800a994:	2b5c      	cmp	r3, #92	@ 0x5c
 800a996:	d110      	bne.n	800a9ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a998:	e002      	b.n	800a9a0 <create_name+0x54>
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	3301      	adds	r3, #1
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800a9aa:	d0f6      	beq.n	800a99a <create_name+0x4e>
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9b6:	d0f0      	beq.n	800a99a <create_name+0x4e>
			break;
 800a9b8:	e038      	b.n	800aa2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a9ba:	7efb      	ldrb	r3, [r7, #27]
 800a9bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9be:	d003      	beq.n	800a9c8 <create_name+0x7c>
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d30c      	bcc.n	800a9e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b0b      	cmp	r3, #11
 800a9cc:	d002      	beq.n	800a9d4 <create_name+0x88>
 800a9ce:	7efb      	ldrb	r3, [r7, #27]
 800a9d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9d2:	d001      	beq.n	800a9d8 <create_name+0x8c>
 800a9d4:	2306      	movs	r3, #6
 800a9d6:	e044      	b.n	800aa62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a9d8:	2308      	movs	r3, #8
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	230b      	movs	r3, #11
 800a9de:	617b      	str	r3, [r7, #20]
			continue;
 800a9e0:	e022      	b.n	800aa28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a9e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da04      	bge.n	800a9f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a9ea:	7efb      	ldrb	r3, [r7, #27]
 800a9ec:	3b80      	subs	r3, #128	@ 0x80
 800a9ee:	4a1f      	ldr	r2, [pc, #124]	@ (800aa6c <create_name+0x120>)
 800a9f0:	5cd3      	ldrb	r3, [r2, r3]
 800a9f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a9f4:	7efb      	ldrb	r3, [r7, #27]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	481d      	ldr	r0, [pc, #116]	@ (800aa70 <create_name+0x124>)
 800a9fa:	f7ff f812 	bl	8009a22 <chk_chr>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <create_name+0xbc>
 800aa04:	2306      	movs	r3, #6
 800aa06:	e02c      	b.n	800aa62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aa08:	7efb      	ldrb	r3, [r7, #27]
 800aa0a:	2b60      	cmp	r3, #96	@ 0x60
 800aa0c:	d905      	bls.n	800aa1a <create_name+0xce>
 800aa0e:	7efb      	ldrb	r3, [r7, #27]
 800aa10:	2b7a      	cmp	r3, #122	@ 0x7a
 800aa12:	d802      	bhi.n	800aa1a <create_name+0xce>
 800aa14:	7efb      	ldrb	r3, [r7, #27]
 800aa16:	3b20      	subs	r3, #32
 800aa18:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	613a      	str	r2, [r7, #16]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	4413      	add	r3, r2
 800aa24:	7efa      	ldrb	r2, [r7, #27]
 800aa26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aa28:	e7a6      	b.n	800a978 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	441a      	add	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <create_name+0xf4>
 800aa3c:	2306      	movs	r3, #6
 800aa3e:	e010      	b.n	800aa62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2be5      	cmp	r3, #229	@ 0xe5
 800aa46:	d102      	bne.n	800aa4e <create_name+0x102>
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	2205      	movs	r2, #5
 800aa4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa4e:	7efb      	ldrb	r3, [r7, #27]
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d801      	bhi.n	800aa58 <create_name+0x10c>
 800aa54:	2204      	movs	r2, #4
 800aa56:	e000      	b.n	800aa5a <create_name+0x10e>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	330b      	adds	r3, #11
 800aa5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3720      	adds	r7, #32
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	0809cdb4 	.word	0x0809cdb4
 800aa70:	0800ec58 	.word	0x0800ec58

0800aa74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa88:	e002      	b.n	800aa90 <follow_path+0x1c>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2b2f      	cmp	r3, #47	@ 0x2f
 800aa96:	d0f8      	beq.n	800aa8a <follow_path+0x16>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b5c      	cmp	r3, #92	@ 0x5c
 800aa9e:	d0f4      	beq.n	800aa8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b1f      	cmp	r3, #31
 800aaac:	d80a      	bhi.n	800aac4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2280      	movs	r2, #128	@ 0x80
 800aab2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fcfa 	bl	800a4b2 <dir_sdi>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
 800aac2:	e043      	b.n	800ab4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aac4:	463b      	mov	r3, r7
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff ff3f 	bl	800a94c <create_name>
 800aace:	4603      	mov	r3, r0
 800aad0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d134      	bne.n	800ab42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff feb0 	bl	800a83e <dir_find>
 800aade:	4603      	mov	r3, r0
 800aae0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aae8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d127      	bne.n	800ab46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d122      	bne.n	800ab46 <follow_path+0xd2>
 800ab00:	2305      	movs	r3, #5
 800ab02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab04:	e01f      	b.n	800ab46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d11c      	bne.n	800ab4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	799b      	ldrb	r3, [r3, #6]
 800ab14:	f003 0310 	and.w	r3, r3, #16
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab1c:	2305      	movs	r3, #5
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	e014      	b.n	800ab4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab30:	4413      	add	r3, r2
 800ab32:	4619      	mov	r1, r3
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff fe43 	bl	800a7c0 <ld_clust>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab40:	e7c0      	b.n	800aac4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ab42:	bf00      	nop
 800ab44:	e002      	b.n	800ab4c <follow_path+0xd8>
				break;
 800ab46:	bf00      	nop
 800ab48:	e000      	b.n	800ab4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab4a:	bf00      	nop
			}
		}
	}

	return res;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d031      	beq.n	800abd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	e002      	b.n	800ab7a <get_ldnumber+0x24>
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	3301      	adds	r3, #1
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b20      	cmp	r3, #32
 800ab80:	d903      	bls.n	800ab8a <get_ldnumber+0x34>
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b3a      	cmp	r3, #58	@ 0x3a
 800ab88:	d1f4      	bne.n	800ab74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ab90:	d11c      	bne.n	800abcc <get_ldnumber+0x76>
			tp = *path;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	60fa      	str	r2, [r7, #12]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	3b30      	subs	r3, #48	@ 0x30
 800aba2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b09      	cmp	r3, #9
 800aba8:	d80e      	bhi.n	800abc8 <get_ldnumber+0x72>
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d10a      	bne.n	800abc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d107      	bne.n	800abc8 <get_ldnumber+0x72>
					vol = (int)i;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	3301      	adds	r3, #1
 800abc0:	617b      	str	r3, [r7, #20]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	e002      	b.n	800abd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800abd0:	693b      	ldr	r3, [r7, #16]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
	...

0800abe0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	70da      	strb	r2, [r3, #3]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff f8dc 	bl	8009db8 <move_window>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <check_fs+0x2a>
 800ac06:	2304      	movs	r3, #4
 800ac08:	e038      	b.n	800ac7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3330      	adds	r3, #48	@ 0x30
 800ac0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fe20 	bl	8009858 <ld_word>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d001      	beq.n	800ac28 <check_fs+0x48>
 800ac24:	2303      	movs	r3, #3
 800ac26:	e029      	b.n	800ac7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac2e:	2be9      	cmp	r3, #233	@ 0xe9
 800ac30:	d009      	beq.n	800ac46 <check_fs+0x66>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac38:	2beb      	cmp	r3, #235	@ 0xeb
 800ac3a:	d11e      	bne.n	800ac7a <check_fs+0x9a>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ac42:	2b90      	cmp	r3, #144	@ 0x90
 800ac44:	d119      	bne.n	800ac7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	3330      	adds	r3, #48	@ 0x30
 800ac4a:	3336      	adds	r3, #54	@ 0x36
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fe1b 	bl	8009888 <ld_dword>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ac58:	4a0a      	ldr	r2, [pc, #40]	@ (800ac84 <check_fs+0xa4>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d101      	bne.n	800ac62 <check_fs+0x82>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e00c      	b.n	800ac7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3330      	adds	r3, #48	@ 0x30
 800ac66:	3352      	adds	r3, #82	@ 0x52
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe fe0d 	bl	8009888 <ld_dword>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4a05      	ldr	r2, [pc, #20]	@ (800ac88 <check_fs+0xa8>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d101      	bne.n	800ac7a <check_fs+0x9a>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac7a:	2302      	movs	r3, #2
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	00544146 	.word	0x00544146
 800ac88:	33544146 	.word	0x33544146

0800ac8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b096      	sub	sp, #88	@ 0x58
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4613      	mov	r3, r2
 800ac98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff ff58 	bl	800ab56 <get_ldnumber>
 800aca6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da01      	bge.n	800acb2 <find_volume+0x26>
 800acae:	230b      	movs	r3, #11
 800acb0:	e22d      	b.n	800b10e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acb2:	4aa1      	ldr	r2, [pc, #644]	@ (800af38 <find_volume+0x2ac>)
 800acb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800acbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <find_volume+0x3a>
 800acc2:	230c      	movs	r3, #12
 800acc4:	e223      	b.n	800b10e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800accc:	79fb      	ldrb	r3, [r7, #7]
 800acce:	f023 0301 	bic.w	r3, r3, #1
 800acd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01a      	beq.n	800ad12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fd1b 	bl	800971c <disk_status>
 800ace6:	4603      	mov	r3, r0
 800ace8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10c      	bne.n	800ad12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d007      	beq.n	800ad0e <find_volume+0x82>
 800acfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	e1ff      	b.n	800b10e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e1fd      	b.n	800b10e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad22:	785b      	ldrb	r3, [r3, #1]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe fd13 	bl	8009750 <disk_initialize>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e1e6      	b.n	800b10e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <find_volume+0xca>
 800ad46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad4a:	f003 0304 	and.w	r3, r3, #4
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad52:	230a      	movs	r3, #10
 800ad54:	e1db      	b.n	800b10e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ad5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad5c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad5e:	f7ff ff3f 	bl	800abe0 <check_fs>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d149      	bne.n	800ae04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad70:	2300      	movs	r3, #0
 800ad72:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad74:	e01e      	b.n	800adb4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ad84:	4413      	add	r3, r2
 800ad86:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <find_volume+0x114>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	3308      	adds	r3, #8
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe fd76 	bl	8009888 <ld_dword>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	e000      	b.n	800ada2 <find_volume+0x116>
 800ada0:	2200      	movs	r2, #0
 800ada2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	3358      	adds	r3, #88	@ 0x58
 800ada8:	443b      	add	r3, r7
 800adaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb0:	3301      	adds	r3, #1
 800adb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800adb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d9dd      	bls.n	800ad76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800adba:	2300      	movs	r3, #0
 800adbc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800adbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <find_volume+0x13e>
 800adc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc6:	3b01      	subs	r3, #1
 800adc8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800adca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	3358      	adds	r3, #88	@ 0x58
 800add0:	443b      	add	r3, r7
 800add2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800add6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800add8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <find_volume+0x15e>
 800adde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ade0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ade2:	f7ff fefd 	bl	800abe0 <check_fs>
 800ade6:	4603      	mov	r3, r0
 800ade8:	e000      	b.n	800adec <find_volume+0x160>
 800adea:	2303      	movs	r3, #3
 800adec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800adf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d905      	bls.n	800ae04 <find_volume+0x178>
 800adf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adfa:	3301      	adds	r3, #1
 800adfc:	643b      	str	r3, [r7, #64]	@ 0x40
 800adfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae00:	2b03      	cmp	r3, #3
 800ae02:	d9e2      	bls.n	800adca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d101      	bne.n	800ae10 <find_volume+0x184>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e17e      	b.n	800b10e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d901      	bls.n	800ae1c <find_volume+0x190>
 800ae18:	230d      	movs	r3, #13
 800ae1a:	e178      	b.n	800b10e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	3330      	adds	r3, #48	@ 0x30
 800ae20:	330b      	adds	r3, #11
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fe fd18 	bl	8009858 <ld_word>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae2e:	d001      	beq.n	800ae34 <find_volume+0x1a8>
 800ae30:	230d      	movs	r3, #13
 800ae32:	e16c      	b.n	800b10e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae36:	3330      	adds	r3, #48	@ 0x30
 800ae38:	3316      	adds	r3, #22
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fd0c 	bl	8009858 <ld_word>
 800ae40:	4603      	mov	r3, r0
 800ae42:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <find_volume+0x1cc>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	3330      	adds	r3, #48	@ 0x30
 800ae4e:	3324      	adds	r3, #36	@ 0x24
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fe fd19 	bl	8009888 <ld_dword>
 800ae56:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ae58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ae64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6a:	789b      	ldrb	r3, [r3, #2]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d005      	beq.n	800ae7c <find_volume+0x1f0>
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	789b      	ldrb	r3, [r3, #2]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d001      	beq.n	800ae7c <find_volume+0x1f0>
 800ae78:	230d      	movs	r3, #13
 800ae7a:	e148      	b.n	800b10e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7e:	789b      	ldrb	r3, [r3, #2]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae84:	fb02 f303 	mul.w	r3, r2, r3
 800ae88:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae90:	461a      	mov	r2, r3
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	895b      	ldrh	r3, [r3, #10]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d008      	beq.n	800aeb0 <find_volume+0x224>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea0:	895b      	ldrh	r3, [r3, #10]
 800aea2:	461a      	mov	r2, r3
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	895b      	ldrh	r3, [r3, #10]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <find_volume+0x228>
 800aeb0:	230d      	movs	r3, #13
 800aeb2:	e12c      	b.n	800b10e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb6:	3330      	adds	r3, #48	@ 0x30
 800aeb8:	3311      	adds	r3, #17
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fccc 	bl	8009858 <ld_word>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	891b      	ldrh	r3, [r3, #8]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <find_volume+0x24e>
 800aed6:	230d      	movs	r3, #13
 800aed8:	e119      	b.n	800b10e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aedc:	3330      	adds	r3, #48	@ 0x30
 800aede:	3313      	adds	r3, #19
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fe fcb9 	bl	8009858 <ld_word>
 800aee6:	4603      	mov	r3, r0
 800aee8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aeea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d106      	bne.n	800aefe <find_volume+0x272>
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	3330      	adds	r3, #48	@ 0x30
 800aef4:	3320      	adds	r3, #32
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fcc6 	bl	8009888 <ld_dword>
 800aefc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	3330      	adds	r3, #48	@ 0x30
 800af02:	330e      	adds	r3, #14
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe fca7 	bl	8009858 <ld_word>
 800af0a:	4603      	mov	r3, r0
 800af0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <find_volume+0x28c>
 800af14:	230d      	movs	r3, #13
 800af16:	e0fa      	b.n	800b10e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af1c:	4413      	add	r3, r2
 800af1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af20:	8912      	ldrh	r2, [r2, #8]
 800af22:	0912      	lsrs	r2, r2, #4
 800af24:	b292      	uxth	r2, r2
 800af26:	4413      	add	r3, r2
 800af28:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2e:	429a      	cmp	r2, r3
 800af30:	d204      	bcs.n	800af3c <find_volume+0x2b0>
 800af32:	230d      	movs	r3, #13
 800af34:	e0eb      	b.n	800b10e <find_volume+0x482>
 800af36:	bf00      	nop
 800af38:	20040950 	.word	0x20040950
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af44:	8952      	ldrh	r2, [r2, #10]
 800af46:	fbb3 f3f2 	udiv	r3, r3, r2
 800af4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <find_volume+0x2ca>
 800af52:	230d      	movs	r3, #13
 800af54:	e0db      	b.n	800b10e <find_volume+0x482>
		fmt = FS_FAT32;
 800af56:	2303      	movs	r3, #3
 800af58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800af62:	4293      	cmp	r3, r2
 800af64:	d802      	bhi.n	800af6c <find_volume+0x2e0>
 800af66:	2302      	movs	r3, #2
 800af68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800af72:	4293      	cmp	r3, r2
 800af74:	d802      	bhi.n	800af7c <find_volume+0x2f0>
 800af76:	2301      	movs	r3, #1
 800af78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	1c9a      	adds	r2, r3, #2
 800af80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af82:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800af84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af88:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af8e:	441a      	add	r2, r3
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800af94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af98:	441a      	add	r2, r3
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800af9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d11e      	bne.n	800afe4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	3330      	adds	r3, #48	@ 0x30
 800afaa:	332a      	adds	r3, #42	@ 0x2a
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fc53 	bl	8009858 <ld_word>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <find_volume+0x330>
 800afb8:	230d      	movs	r3, #13
 800afba:	e0a8      	b.n	800b10e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800afbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afbe:	891b      	ldrh	r3, [r3, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <find_volume+0x33c>
 800afc4:	230d      	movs	r3, #13
 800afc6:	e0a2      	b.n	800b10e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	3330      	adds	r3, #48	@ 0x30
 800afcc:	332c      	adds	r3, #44	@ 0x2c
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fc5a 	bl	8009888 <ld_dword>
 800afd4:	4602      	mov	r2, r0
 800afd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afe2:	e01f      	b.n	800b024 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	891b      	ldrh	r3, [r3, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <find_volume+0x364>
 800afec:	230d      	movs	r3, #13
 800afee:	e08e      	b.n	800b10e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	6a1a      	ldr	r2, [r3, #32]
 800aff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aff6:	441a      	add	r2, r3
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800affc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b000:	2b02      	cmp	r3, #2
 800b002:	d103      	bne.n	800b00c <find_volume+0x380>
 800b004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	e00a      	b.n	800b022 <find_volume+0x396>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	695a      	ldr	r2, [r3, #20]
 800b010:	4613      	mov	r3, r2
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	4413      	add	r3, r2
 800b016:	085a      	lsrs	r2, r3, #1
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b022:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	699a      	ldr	r2, [r3, #24]
 800b028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b02a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b02e:	0a5b      	lsrs	r3, r3, #9
 800b030:	429a      	cmp	r2, r3
 800b032:	d201      	bcs.n	800b038 <find_volume+0x3ac>
 800b034:	230d      	movs	r3, #13
 800b036:	e06a      	b.n	800b10e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	f04f 32ff 	mov.w	r2, #4294967295
 800b03e:	611a      	str	r2, [r3, #16]
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	2280      	movs	r2, #128	@ 0x80
 800b04c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b04e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b052:	2b03      	cmp	r3, #3
 800b054:	d149      	bne.n	800b0ea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b058:	3330      	adds	r3, #48	@ 0x30
 800b05a:	3330      	adds	r3, #48	@ 0x30
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fbfb 	bl	8009858 <ld_word>
 800b062:	4603      	mov	r3, r0
 800b064:	2b01      	cmp	r3, #1
 800b066:	d140      	bne.n	800b0ea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b06a:	3301      	adds	r3, #1
 800b06c:	4619      	mov	r1, r3
 800b06e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b070:	f7fe fea2 	bl	8009db8 <move_window>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d137      	bne.n	800b0ea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07c:	2200      	movs	r2, #0
 800b07e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b082:	3330      	adds	r3, #48	@ 0x30
 800b084:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fbe5 	bl	8009858 <ld_word>
 800b08e:	4603      	mov	r3, r0
 800b090:	461a      	mov	r2, r3
 800b092:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b096:	429a      	cmp	r2, r3
 800b098:	d127      	bne.n	800b0ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	3330      	adds	r3, #48	@ 0x30
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fbf2 	bl	8009888 <ld_dword>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b118 <find_volume+0x48c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d11e      	bne.n	800b0ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	3330      	adds	r3, #48	@ 0x30
 800b0b0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe fbe7 	bl	8009888 <ld_dword>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4a17      	ldr	r2, [pc, #92]	@ (800b11c <find_volume+0x490>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d113      	bne.n	800b0ea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	3330      	adds	r3, #48	@ 0x30
 800b0c6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fe fbdc 	bl	8009888 <ld_dword>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	3330      	adds	r3, #48	@ 0x30
 800b0da:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fbd2 	bl	8009888 <ld_dword>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b0f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b120 <find_volume+0x494>)
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	4b09      	ldr	r3, [pc, #36]	@ (800b120 <find_volume+0x494>)
 800b0fc:	801a      	strh	r2, [r3, #0]
 800b0fe:	4b08      	ldr	r3, [pc, #32]	@ (800b120 <find_volume+0x494>)
 800b100:	881a      	ldrh	r2, [r3, #0]
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b106:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b108:	f7fe fdee 	bl	8009ce8 <clear_lock>
#endif
	return FR_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3758      	adds	r7, #88	@ 0x58
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	41615252 	.word	0x41615252
 800b11c:	61417272 	.word	0x61417272
 800b120:	20040954 	.word	0x20040954

0800b124 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b12e:	2309      	movs	r3, #9
 800b130:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01c      	beq.n	800b172 <validate+0x4e>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d018      	beq.n	800b172 <validate+0x4e>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d013      	beq.n	800b172 <validate+0x4e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	889a      	ldrh	r2, [r3, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	88db      	ldrh	r3, [r3, #6]
 800b154:	429a      	cmp	r2, r3
 800b156:	d10c      	bne.n	800b172 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	785b      	ldrb	r3, [r3, #1]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fadc 	bl	800971c <disk_status>
 800b164:	4603      	mov	r3, r0
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <validate+0x4e>
			res = FR_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <validate+0x5a>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	e000      	b.n	800b180 <validate+0x5c>
 800b17e:	2300      	movs	r3, #0
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	6013      	str	r3, [r2, #0]
	return res;
 800b184:	7bfb      	ldrb	r3, [r7, #15]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b1a2:	f107 0310 	add.w	r3, r7, #16
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff fcd5 	bl	800ab56 <get_ldnumber>
 800b1ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	da01      	bge.n	800b1b8 <f_mount+0x28>
 800b1b4:	230b      	movs	r3, #11
 800b1b6:	e02b      	b.n	800b210 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b1b8:	4a17      	ldr	r2, [pc, #92]	@ (800b218 <f_mount+0x88>)
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b1c8:	69b8      	ldr	r0, [r7, #24]
 800b1ca:	f7fe fd8d 	bl	8009ce8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	490d      	ldr	r1, [pc, #52]	@ (800b218 <f_mount+0x88>)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <f_mount+0x66>
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d001      	beq.n	800b1fa <f_mount+0x6a>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e00a      	b.n	800b210 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1fa:	f107 010c 	add.w	r1, r7, #12
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	2200      	movs	r2, #0
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff fd41 	bl	800ac8c <find_volume>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3720      	adds	r7, #32
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20040950 	.word	0x20040950

0800b21c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b098      	sub	sp, #96	@ 0x60
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <f_open+0x18>
 800b230:	2309      	movs	r3, #9
 800b232:	e1a9      	b.n	800b588 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b23a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b23c:	79fa      	ldrb	r2, [r7, #7]
 800b23e:	f107 0110 	add.w	r1, r7, #16
 800b242:	f107 0308 	add.w	r3, r7, #8
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fd20 	bl	800ac8c <find_volume>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b252:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b256:	2b00      	cmp	r3, #0
 800b258:	f040 818d 	bne.w	800b576 <f_open+0x35a>
		dj.obj.fs = fs;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	f107 0314 	add.w	r3, r7, #20
 800b266:	4611      	mov	r1, r2
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fc03 	bl	800aa74 <follow_path>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b274:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d118      	bne.n	800b2ae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b27c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b280:	b25b      	sxtb	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	da03      	bge.n	800b28e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b286:	2306      	movs	r3, #6
 800b288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b28c:	e00f      	b.n	800b2ae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	2b01      	cmp	r3, #1
 800b292:	bf8c      	ite	hi
 800b294:	2301      	movhi	r3, #1
 800b296:	2300      	movls	r3, #0
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	461a      	mov	r2, r3
 800b29c:	f107 0314 	add.w	r3, r7, #20
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fbd8 	bl	8009a58 <chk_lock>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	f003 031c 	and.w	r3, r3, #28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d07f      	beq.n	800b3b8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b2b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b2c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d10e      	bne.n	800b2e6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b2c8:	f7fe fc22 	bl	8009b10 <enq_lock>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d006      	beq.n	800b2e0 <f_open+0xc4>
 800b2d2:	f107 0314 	add.w	r3, r7, #20
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7ff fb06 	bl	800a8e8 <dir_register>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	e000      	b.n	800b2e2 <f_open+0xc6>
 800b2e0:	2312      	movs	r3, #18
 800b2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	f043 0308 	orr.w	r3, r3, #8
 800b2ec:	71fb      	strb	r3, [r7, #7]
 800b2ee:	e010      	b.n	800b312 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b2f0:	7ebb      	ldrb	r3, [r7, #26]
 800b2f2:	f003 0311 	and.w	r3, r3, #17
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <f_open+0xe6>
					res = FR_DENIED;
 800b2fa:	2307      	movs	r3, #7
 800b2fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b300:	e007      	b.n	800b312 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <f_open+0xf6>
 800b30c:	2308      	movs	r3, #8
 800b30e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b312:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b316:	2b00      	cmp	r3, #0
 800b318:	d168      	bne.n	800b3ec <f_open+0x1d0>
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b00      	cmp	r3, #0
 800b322:	d063      	beq.n	800b3ec <f_open+0x1d0>
				dw = GET_FATTIME();
 800b324:	f7fd fcbe 	bl	8008ca4 <get_fattime>
 800b328:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32c:	330e      	adds	r3, #14
 800b32e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fae7 	bl	8009904 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b338:	3316      	adds	r3, #22
 800b33a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fe fae1 	bl	8009904 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b344:	330b      	adds	r3, #11
 800b346:	2220      	movs	r2, #32
 800b348:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b34e:	4611      	mov	r1, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fa35 	bl	800a7c0 <ld_clust>
 800b356:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b35c:	2200      	movs	r2, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff fa4d 	bl	800a7fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b366:	331c      	adds	r3, #28
 800b368:	2100      	movs	r1, #0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe faca 	bl	8009904 <st_dword>
					fs->wflag = 1;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2201      	movs	r2, #1
 800b374:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d037      	beq.n	800b3ec <f_open+0x1d0>
						dw = fs->winsect;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b380:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	2200      	movs	r2, #0
 800b388:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe ff60 	bl	800a250 <remove_chain>
 800b390:	4603      	mov	r3, r0
 800b392:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b396:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d126      	bne.n	800b3ec <f_open+0x1d0>
							res = move_window(fs, dw);
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fd08 	bl	8009db8 <move_window>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	60da      	str	r2, [r3, #12]
 800b3b6:	e019      	b.n	800b3ec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b3b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d115      	bne.n	800b3ec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b3c0:	7ebb      	ldrb	r3, [r7, #26]
 800b3c2:	f003 0310 	and.w	r3, r3, #16
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b3ca:	2304      	movs	r3, #4
 800b3cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b3d0:	e00c      	b.n	800b3ec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	f003 0302 	and.w	r3, r3, #2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d007      	beq.n	800b3ec <f_open+0x1d0>
 800b3dc:	7ebb      	ldrb	r3, [r7, #26]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <f_open+0x1d0>
						res = FR_DENIED;
 800b3e6:	2307      	movs	r3, #7
 800b3e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d126      	bne.n	800b442 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	f003 0308 	and.w	r3, r3, #8
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b404:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b40e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	2b01      	cmp	r3, #1
 800b418:	bf8c      	ite	hi
 800b41a:	2301      	movhi	r3, #1
 800b41c:	2300      	movls	r3, #0
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	461a      	mov	r2, r3
 800b422:	f107 0314 	add.w	r3, r7, #20
 800b426:	4611      	mov	r1, r2
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe fb93 	bl	8009b54 <inc_lock>
 800b42e:	4602      	mov	r2, r0
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <f_open+0x226>
 800b43c:	2302      	movs	r3, #2
 800b43e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b442:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b446:	2b00      	cmp	r3, #0
 800b448:	f040 8095 	bne.w	800b576 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff f9b4 	bl	800a7c0 <ld_clust>
 800b458:	4602      	mov	r2, r0
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b460:	331c      	adds	r3, #28
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fa10 	bl	8009888 <ld_dword>
 800b468:	4602      	mov	r2, r0
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	88da      	ldrh	r2, [r3, #6]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	79fa      	ldrb	r2, [r7, #7]
 800b486:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3330      	adds	r3, #48	@ 0x30
 800b49e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fe fa7a 	bl	800999e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d060      	beq.n	800b576 <f_open+0x35a>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d05c      	beq.n	800b576 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	68da      	ldr	r2, [r3, #12]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	895b      	ldrh	r3, [r3, #10]
 800b4c8:	025b      	lsls	r3, r3, #9
 800b4ca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4d8:	e016      	b.n	800b508 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fd25 	bl	8009f2e <get_fat>
 800b4e4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b4e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d802      	bhi.n	800b4f2 <f_open+0x2d6>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b4f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4f8:	d102      	bne.n	800b500 <f_open+0x2e4>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b500:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	657b      	str	r3, [r7, #84]	@ 0x54
 800b508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <f_open+0x2fc>
 800b510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b514:	429a      	cmp	r2, r3
 800b516:	d8e0      	bhi.n	800b4da <f_open+0x2be>
				}
				fp->clust = clst;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b51c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b51e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b522:	2b00      	cmp	r3, #0
 800b524:	d127      	bne.n	800b576 <f_open+0x35a>
 800b526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d022      	beq.n	800b576 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe fcdb 	bl	8009ef0 <clust2sect>
 800b53a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d103      	bne.n	800b54a <f_open+0x32e>
						res = FR_INT_ERR;
 800b542:	2302      	movs	r3, #2
 800b544:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b548:	e015      	b.n	800b576 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54c:	0a5a      	lsrs	r2, r3, #9
 800b54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b550:	441a      	add	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	7858      	ldrb	r0, [r3, #1]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a1a      	ldr	r2, [r3, #32]
 800b564:	2301      	movs	r3, #1
 800b566:	f7fe f919 	bl	800979c <disk_read>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <f_open+0x35a>
 800b570:	2301      	movs	r3, #1
 800b572:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b576:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <f_open+0x368>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b584:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3760      	adds	r7, #96	@ 0x60
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08c      	sub	sp, #48	@ 0x30
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f107 0210 	add.w	r2, r7, #16
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fdb7 	bl	800b124 <validate>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b5bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d107      	bne.n	800b5d4 <f_write+0x44>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	7d5b      	ldrb	r3, [r3, #21]
 800b5c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b5cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <f_write+0x4a>
 800b5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5d8:	e14b      	b.n	800b872 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	7d1b      	ldrb	r3, [r3, #20]
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <f_write+0x5a>
 800b5e6:	2307      	movs	r3, #7
 800b5e8:	e143      	b.n	800b872 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	441a      	add	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	f080 812d 	bcs.w	800b856 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	43db      	mvns	r3, r3
 800b602:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b604:	e127      	b.n	800b856 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f040 80e3 	bne.w	800b7da <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	0a5b      	lsrs	r3, r3, #9
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	8952      	ldrh	r2, [r2, #10]
 800b61e:	3a01      	subs	r2, #1
 800b620:	4013      	ands	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d143      	bne.n	800b6b2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10c      	bne.n	800b64c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d11a      	bne.n	800b674 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe fe69 	bl	800a31a <create_chain>
 800b648:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b64a:	e013      	b.n	800b674 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b650:	2b00      	cmp	r3, #0
 800b652:	d007      	beq.n	800b664 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7fe fef5 	bl	800a44a <clmt_clust>
 800b660:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b662:	e007      	b.n	800b674 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	4619      	mov	r1, r3
 800b66c:	4610      	mov	r0, r2
 800b66e:	f7fe fe54 	bl	800a31a <create_chain>
 800b672:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 80f2 	beq.w	800b860 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d104      	bne.n	800b68c <f_write+0xfc>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2202      	movs	r2, #2
 800b686:	755a      	strb	r2, [r3, #21]
 800b688:	2302      	movs	r3, #2
 800b68a:	e0f2      	b.n	800b872 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b692:	d104      	bne.n	800b69e <f_write+0x10e>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	755a      	strb	r2, [r3, #21]
 800b69a:	2301      	movs	r3, #1
 800b69c:	e0e9      	b.n	800b872 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <f_write+0x122>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	7d1b      	ldrb	r3, [r3, #20]
 800b6b6:	b25b      	sxtb	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	da18      	bge.n	800b6ee <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	7858      	ldrb	r0, [r3, #1]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a1a      	ldr	r2, [r3, #32]
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f7fe f886 	bl	80097dc <disk_write>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <f_write+0x150>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	755a      	strb	r2, [r3, #21]
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e0c8      	b.n	800b872 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	7d1b      	ldrb	r3, [r3, #20]
 800b6e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fe fbfa 	bl	8009ef0 <clust2sect>
 800b6fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <f_write+0x17e>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2202      	movs	r2, #2
 800b708:	755a      	strb	r2, [r3, #21]
 800b70a:	2302      	movs	r3, #2
 800b70c:	e0b1      	b.n	800b872 <f_write+0x2e2>
			sect += csect;
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	4413      	add	r3, r2
 800b714:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	0a5b      	lsrs	r3, r3, #9
 800b71a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d03c      	beq.n	800b79c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	4413      	add	r3, r2
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	8952      	ldrh	r2, [r2, #10]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d905      	bls.n	800b73c <f_write+0x1ac>
					cc = fs->csize - csect;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	895b      	ldrh	r3, [r3, #10]
 800b734:	461a      	mov	r2, r3
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	7858      	ldrb	r0, [r3, #1]
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	f7fe f849 	bl	80097dc <disk_write>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d004      	beq.n	800b75a <f_write+0x1ca>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	755a      	strb	r2, [r3, #21]
 800b756:	2301      	movs	r3, #1
 800b758:	e08b      	b.n	800b872 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6a1a      	ldr	r2, [r3, #32]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	6a3a      	ldr	r2, [r7, #32]
 800b764:	429a      	cmp	r2, r3
 800b766:	d915      	bls.n	800b794 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a1a      	ldr	r2, [r3, #32]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	025b      	lsls	r3, r3, #9
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	4413      	add	r3, r2
 800b77c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b780:	4619      	mov	r1, r3
 800b782:	f7fe f8eb 	bl	800995c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	7d1b      	ldrb	r3, [r3, #20]
 800b78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	025b      	lsls	r3, r3, #9
 800b798:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b79a:	e03f      	b.n	800b81c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a1b      	ldr	r3, [r3, #32]
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d016      	beq.n	800b7d4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d210      	bcs.n	800b7d4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	7858      	ldrb	r0, [r3, #1]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7bc:	2301      	movs	r3, #1
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	f7fd ffec 	bl	800979c <disk_read>
 800b7c4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d004      	beq.n	800b7d4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	755a      	strb	r2, [r3, #21]
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e04e      	b.n	800b872 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b7e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b7e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d901      	bls.n	800b7f4 <f_write+0x264>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	699b      	ldr	r3, [r3, #24]
 800b7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b802:	4413      	add	r3, r2
 800b804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b806:	69f9      	ldr	r1, [r7, #28]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe f8a7 	bl	800995c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	7d1b      	ldrb	r3, [r3, #20]
 800b812:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b816:	b2da      	uxtb	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	4413      	add	r3, r2
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	699a      	ldr	r2, [r3, #24]
 800b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82a:	441a      	add	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	619a      	str	r2, [r3, #24]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	bf38      	it	cc
 800b83c:	461a      	movcc	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	60da      	str	r2, [r3, #12]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b848:	441a      	add	r2, r3
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f47f aed4 	bne.w	800b606 <f_write+0x76>
 800b85e:	e000      	b.n	800b862 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b860:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	7d1b      	ldrb	r3, [r3, #20]
 800b866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3730      	adds	r7, #48	@ 0x30
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f107 0208 	add.w	r2, r7, #8
 800b888:	4611      	mov	r1, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fc4a 	bl	800b124 <validate>
 800b890:	4603      	mov	r3, r0
 800b892:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d168      	bne.n	800b96c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	7d1b      	ldrb	r3, [r3, #20]
 800b89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d062      	beq.n	800b96c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	7d1b      	ldrb	r3, [r3, #20]
 800b8aa:	b25b      	sxtb	r3, r3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	da15      	bge.n	800b8dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	7858      	ldrb	r0, [r3, #1]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1a      	ldr	r2, [r3, #32]
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f7fd ff8c 	bl	80097dc <disk_write>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <f_sync+0x54>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e04f      	b.n	800b96e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	7d1b      	ldrb	r3, [r3, #20]
 800b8d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b8dc:	f7fd f9e2 	bl	8008ca4 <get_fattime>
 800b8e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	f7fe fa64 	bl	8009db8 <move_window>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d138      	bne.n	800b96c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	330b      	adds	r3, #11
 800b904:	781a      	ldrb	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	330b      	adds	r3, #11
 800b90a:	f042 0220 	orr.w	r2, r2, #32
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6818      	ldr	r0, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	461a      	mov	r2, r3
 800b91c:	68f9      	ldr	r1, [r7, #12]
 800b91e:	f7fe ff6e 	bl	800a7fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f103 021c 	add.w	r2, r3, #28
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	4619      	mov	r1, r3
 800b92e:	4610      	mov	r0, r2
 800b930:	f7fd ffe8 	bl	8009904 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3316      	adds	r3, #22
 800b938:	6939      	ldr	r1, [r7, #16]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fd ffe2 	bl	8009904 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3312      	adds	r3, #18
 800b944:	2100      	movs	r1, #0
 800b946:	4618      	mov	r0, r3
 800b948:	f7fd ffc1 	bl	80098ce <st_word>
					fs->wflag = 1;
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2201      	movs	r2, #1
 800b950:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fa5d 	bl	8009e14 <sync_fs>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7d1b      	ldrb	r3, [r3, #20]
 800b962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b966:	b2da      	uxtb	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3718      	adds	r7, #24
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff ff7b 	bl	800b87a <f_sync>
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d118      	bne.n	800b9c0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f107 0208 	add.w	r2, r7, #8
 800b994:	4611      	mov	r1, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff fbc4 	bl	800b124 <validate>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10c      	bne.n	800b9c0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe f960 	bl	8009c70 <dec_lock>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d102      	bne.n	800b9c0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
	...

0800b9cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800b9e4:	7a5b      	ldrb	r3, [r3, #9]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d131      	bne.n	800ba50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9ec:	4b1c      	ldr	r3, [pc, #112]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800b9ee:	7a5b      	ldrb	r3, [r3, #9]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9fa:	4b19      	ldr	r3, [pc, #100]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800b9fc:	7a5b      	ldrb	r3, [r3, #9]
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	4a17      	ldr	r2, [pc, #92]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba0a:	4b15      	ldr	r3, [pc, #84]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800ba0c:	7a5b      	ldrb	r3, [r3, #9]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	4b13      	ldr	r3, [pc, #76]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800ba14:	4413      	add	r3, r2
 800ba16:	79fa      	ldrb	r2, [r7, #7]
 800ba18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba1a:	4b11      	ldr	r3, [pc, #68]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800ba1c:	7a5b      	ldrb	r3, [r3, #9]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	b2d1      	uxtb	r1, r2
 800ba24:	4a0e      	ldr	r2, [pc, #56]	@ (800ba60 <FATFS_LinkDriverEx+0x94>)
 800ba26:	7251      	strb	r1, [r2, #9]
 800ba28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba2a:	7dbb      	ldrb	r3, [r7, #22]
 800ba2c:	3330      	adds	r3, #48	@ 0x30
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	3301      	adds	r3, #1
 800ba38:	223a      	movs	r2, #58	@ 0x3a
 800ba3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	3302      	adds	r3, #2
 800ba40:	222f      	movs	r2, #47	@ 0x2f
 800ba42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	3303      	adds	r3, #3
 800ba48:	2200      	movs	r2, #0
 800ba4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	371c      	adds	r7, #28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20040978 	.word	0x20040978

0800ba64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba6e:	2200      	movs	r2, #0
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff ffaa 	bl	800b9cc <FATFS_LinkDriverEx>
 800ba78:	4603      	mov	r3, r0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <rand>:
 800ba84:	4b16      	ldr	r3, [pc, #88]	@ (800bae0 <rand+0x5c>)
 800ba86:	b510      	push	{r4, lr}
 800ba88:	681c      	ldr	r4, [r3, #0]
 800ba8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ba8c:	b9b3      	cbnz	r3, 800babc <rand+0x38>
 800ba8e:	2018      	movs	r0, #24
 800ba90:	f001 fcfc 	bl	800d48c <malloc>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6320      	str	r0, [r4, #48]	@ 0x30
 800ba98:	b920      	cbnz	r0, 800baa4 <rand+0x20>
 800ba9a:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <rand+0x60>)
 800ba9c:	4812      	ldr	r0, [pc, #72]	@ (800bae8 <rand+0x64>)
 800ba9e:	2152      	movs	r1, #82	@ 0x52
 800baa0:	f000 fe3e 	bl	800c720 <__assert_func>
 800baa4:	4911      	ldr	r1, [pc, #68]	@ (800baec <rand+0x68>)
 800baa6:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <rand+0x6c>)
 800baa8:	e9c0 1300 	strd	r1, r3, [r0]
 800baac:	4b11      	ldr	r3, [pc, #68]	@ (800baf4 <rand+0x70>)
 800baae:	6083      	str	r3, [r0, #8]
 800bab0:	230b      	movs	r3, #11
 800bab2:	8183      	strh	r3, [r0, #12]
 800bab4:	2100      	movs	r1, #0
 800bab6:	2001      	movs	r0, #1
 800bab8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800babc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800babe:	480e      	ldr	r0, [pc, #56]	@ (800baf8 <rand+0x74>)
 800bac0:	690b      	ldr	r3, [r1, #16]
 800bac2:	694c      	ldr	r4, [r1, #20]
 800bac4:	4a0d      	ldr	r2, [pc, #52]	@ (800bafc <rand+0x78>)
 800bac6:	4358      	muls	r0, r3
 800bac8:	fb02 0004 	mla	r0, r2, r4, r0
 800bacc:	fba3 3202 	umull	r3, r2, r3, r2
 800bad0:	3301      	adds	r3, #1
 800bad2:	eb40 0002 	adc.w	r0, r0, r2
 800bad6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bada:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	200400c8 	.word	0x200400c8
 800bae4:	0809ce34 	.word	0x0809ce34
 800bae8:	0809ce4b 	.word	0x0809ce4b
 800baec:	abcd330e 	.word	0xabcd330e
 800baf0:	e66d1234 	.word	0xe66d1234
 800baf4:	0005deec 	.word	0x0005deec
 800baf8:	5851f42d 	.word	0x5851f42d
 800bafc:	4c957f2d 	.word	0x4c957f2d

0800bb00 <__cvt>:
 800bb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb04:	ec57 6b10 	vmov	r6, r7, d0
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	463b      	mov	r3, r7
 800bb10:	bfbb      	ittet	lt
 800bb12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bb16:	461f      	movlt	r7, r3
 800bb18:	2300      	movge	r3, #0
 800bb1a:	232d      	movlt	r3, #45	@ 0x2d
 800bb1c:	700b      	strb	r3, [r1, #0]
 800bb1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bb24:	4691      	mov	r9, r2
 800bb26:	f023 0820 	bic.w	r8, r3, #32
 800bb2a:	bfbc      	itt	lt
 800bb2c:	4632      	movlt	r2, r6
 800bb2e:	4616      	movlt	r6, r2
 800bb30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb34:	d005      	beq.n	800bb42 <__cvt+0x42>
 800bb36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bb3a:	d100      	bne.n	800bb3e <__cvt+0x3e>
 800bb3c:	3401      	adds	r4, #1
 800bb3e:	2102      	movs	r1, #2
 800bb40:	e000      	b.n	800bb44 <__cvt+0x44>
 800bb42:	2103      	movs	r1, #3
 800bb44:	ab03      	add	r3, sp, #12
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	ab02      	add	r3, sp, #8
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	ec47 6b10 	vmov	d0, r6, r7
 800bb50:	4653      	mov	r3, sl
 800bb52:	4622      	mov	r2, r4
 800bb54:	f000 fe8c 	bl	800c870 <_dtoa_r>
 800bb58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	d119      	bne.n	800bb94 <__cvt+0x94>
 800bb60:	f019 0f01 	tst.w	r9, #1
 800bb64:	d00e      	beq.n	800bb84 <__cvt+0x84>
 800bb66:	eb00 0904 	add.w	r9, r0, r4
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 ffc1 	bl	8000af8 <__aeabi_dcmpeq>
 800bb76:	b108      	cbz	r0, 800bb7c <__cvt+0x7c>
 800bb78:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb7c:	2230      	movs	r2, #48	@ 0x30
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	454b      	cmp	r3, r9
 800bb82:	d31e      	bcc.n	800bbc2 <__cvt+0xc2>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb88:	1b5b      	subs	r3, r3, r5
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	b004      	add	sp, #16
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb98:	eb00 0904 	add.w	r9, r0, r4
 800bb9c:	d1e5      	bne.n	800bb6a <__cvt+0x6a>
 800bb9e:	7803      	ldrb	r3, [r0, #0]
 800bba0:	2b30      	cmp	r3, #48	@ 0x30
 800bba2:	d10a      	bne.n	800bbba <__cvt+0xba>
 800bba4:	2200      	movs	r2, #0
 800bba6:	2300      	movs	r3, #0
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4639      	mov	r1, r7
 800bbac:	f7f4 ffa4 	bl	8000af8 <__aeabi_dcmpeq>
 800bbb0:	b918      	cbnz	r0, 800bbba <__cvt+0xba>
 800bbb2:	f1c4 0401 	rsb	r4, r4, #1
 800bbb6:	f8ca 4000 	str.w	r4, [sl]
 800bbba:	f8da 3000 	ldr.w	r3, [sl]
 800bbbe:	4499      	add	r9, r3
 800bbc0:	e7d3      	b.n	800bb6a <__cvt+0x6a>
 800bbc2:	1c59      	adds	r1, r3, #1
 800bbc4:	9103      	str	r1, [sp, #12]
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e7d9      	b.n	800bb7e <__cvt+0x7e>

0800bbca <__exponent>:
 800bbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbcc:	2900      	cmp	r1, #0
 800bbce:	bfba      	itte	lt
 800bbd0:	4249      	neglt	r1, r1
 800bbd2:	232d      	movlt	r3, #45	@ 0x2d
 800bbd4:	232b      	movge	r3, #43	@ 0x2b
 800bbd6:	2909      	cmp	r1, #9
 800bbd8:	7002      	strb	r2, [r0, #0]
 800bbda:	7043      	strb	r3, [r0, #1]
 800bbdc:	dd29      	ble.n	800bc32 <__exponent+0x68>
 800bbde:	f10d 0307 	add.w	r3, sp, #7
 800bbe2:	461d      	mov	r5, r3
 800bbe4:	270a      	movs	r7, #10
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	fbb1 f6f7 	udiv	r6, r1, r7
 800bbec:	fb07 1416 	mls	r4, r7, r6, r1
 800bbf0:	3430      	adds	r4, #48	@ 0x30
 800bbf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	2c63      	cmp	r4, #99	@ 0x63
 800bbfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbfe:	4631      	mov	r1, r6
 800bc00:	dcf1      	bgt.n	800bbe6 <__exponent+0x1c>
 800bc02:	3130      	adds	r1, #48	@ 0x30
 800bc04:	1e94      	subs	r4, r2, #2
 800bc06:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc0a:	1c41      	adds	r1, r0, #1
 800bc0c:	4623      	mov	r3, r4
 800bc0e:	42ab      	cmp	r3, r5
 800bc10:	d30a      	bcc.n	800bc28 <__exponent+0x5e>
 800bc12:	f10d 0309 	add.w	r3, sp, #9
 800bc16:	1a9b      	subs	r3, r3, r2
 800bc18:	42ac      	cmp	r4, r5
 800bc1a:	bf88      	it	hi
 800bc1c:	2300      	movhi	r3, #0
 800bc1e:	3302      	adds	r3, #2
 800bc20:	4403      	add	r3, r0
 800bc22:	1a18      	subs	r0, r3, r0
 800bc24:	b003      	add	sp, #12
 800bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc28:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc30:	e7ed      	b.n	800bc0e <__exponent+0x44>
 800bc32:	2330      	movs	r3, #48	@ 0x30
 800bc34:	3130      	adds	r1, #48	@ 0x30
 800bc36:	7083      	strb	r3, [r0, #2]
 800bc38:	70c1      	strb	r1, [r0, #3]
 800bc3a:	1d03      	adds	r3, r0, #4
 800bc3c:	e7f1      	b.n	800bc22 <__exponent+0x58>
	...

0800bc40 <_printf_float>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	b08d      	sub	sp, #52	@ 0x34
 800bc46:	460c      	mov	r4, r1
 800bc48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc4c:	4616      	mov	r6, r2
 800bc4e:	461f      	mov	r7, r3
 800bc50:	4605      	mov	r5, r0
 800bc52:	f000 fced 	bl	800c630 <_localeconv_r>
 800bc56:	6803      	ldr	r3, [r0, #0]
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f4 fb20 	bl	80002a0 <strlen>
 800bc60:	2300      	movs	r3, #0
 800bc62:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc64:	f8d8 3000 	ldr.w	r3, [r8]
 800bc68:	9005      	str	r0, [sp, #20]
 800bc6a:	3307      	adds	r3, #7
 800bc6c:	f023 0307 	bic.w	r3, r3, #7
 800bc70:	f103 0208 	add.w	r2, r3, #8
 800bc74:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc78:	f8d4 b000 	ldr.w	fp, [r4]
 800bc7c:	f8c8 2000 	str.w	r2, [r8]
 800bc80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc88:	9307      	str	r3, [sp, #28]
 800bc8a:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc96:	4b9c      	ldr	r3, [pc, #624]	@ (800bf08 <_printf_float+0x2c8>)
 800bc98:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9c:	f7f4 ff5e 	bl	8000b5c <__aeabi_dcmpun>
 800bca0:	bb70      	cbnz	r0, 800bd00 <_printf_float+0xc0>
 800bca2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bca6:	4b98      	ldr	r3, [pc, #608]	@ (800bf08 <_printf_float+0x2c8>)
 800bca8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcac:	f7f4 ff38 	bl	8000b20 <__aeabi_dcmple>
 800bcb0:	bb30      	cbnz	r0, 800bd00 <_printf_float+0xc0>
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 ff27 	bl	8000b0c <__aeabi_dcmplt>
 800bcbe:	b110      	cbz	r0, 800bcc6 <_printf_float+0x86>
 800bcc0:	232d      	movs	r3, #45	@ 0x2d
 800bcc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcc6:	4a91      	ldr	r2, [pc, #580]	@ (800bf0c <_printf_float+0x2cc>)
 800bcc8:	4b91      	ldr	r3, [pc, #580]	@ (800bf10 <_printf_float+0x2d0>)
 800bcca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bcce:	bf94      	ite	ls
 800bcd0:	4690      	movls	r8, r2
 800bcd2:	4698      	movhi	r8, r3
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	6123      	str	r3, [r4, #16]
 800bcd8:	f02b 0304 	bic.w	r3, fp, #4
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	9700      	str	r7, [sp, #0]
 800bce4:	4633      	mov	r3, r6
 800bce6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bce8:	4621      	mov	r1, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f9d2 	bl	800c094 <_printf_common>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f040 808d 	bne.w	800be10 <_printf_float+0x1d0>
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfa:	b00d      	add	sp, #52	@ 0x34
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	4642      	mov	r2, r8
 800bd02:	464b      	mov	r3, r9
 800bd04:	4640      	mov	r0, r8
 800bd06:	4649      	mov	r1, r9
 800bd08:	f7f4 ff28 	bl	8000b5c <__aeabi_dcmpun>
 800bd0c:	b140      	cbz	r0, 800bd20 <_printf_float+0xe0>
 800bd0e:	464b      	mov	r3, r9
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	bfbc      	itt	lt
 800bd14:	232d      	movlt	r3, #45	@ 0x2d
 800bd16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd1a:	4a7e      	ldr	r2, [pc, #504]	@ (800bf14 <_printf_float+0x2d4>)
 800bd1c:	4b7e      	ldr	r3, [pc, #504]	@ (800bf18 <_printf_float+0x2d8>)
 800bd1e:	e7d4      	b.n	800bcca <_printf_float+0x8a>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bd26:	9206      	str	r2, [sp, #24]
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	d13b      	bne.n	800bda4 <_printf_float+0x164>
 800bd2c:	2306      	movs	r3, #6
 800bd2e:	6063      	str	r3, [r4, #4]
 800bd30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bd34:	2300      	movs	r3, #0
 800bd36:	6022      	str	r2, [r4, #0]
 800bd38:	9303      	str	r3, [sp, #12]
 800bd3a:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bd40:	ab09      	add	r3, sp, #36	@ 0x24
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	6861      	ldr	r1, [r4, #4]
 800bd46:	ec49 8b10 	vmov	d0, r8, r9
 800bd4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7ff fed6 	bl	800bb00 <__cvt>
 800bd54:	9b06      	ldr	r3, [sp, #24]
 800bd56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd58:	2b47      	cmp	r3, #71	@ 0x47
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	d129      	bne.n	800bdb2 <_printf_float+0x172>
 800bd5e:	1cc8      	adds	r0, r1, #3
 800bd60:	db02      	blt.n	800bd68 <_printf_float+0x128>
 800bd62:	6863      	ldr	r3, [r4, #4]
 800bd64:	4299      	cmp	r1, r3
 800bd66:	dd41      	ble.n	800bdec <_printf_float+0x1ac>
 800bd68:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd6c:	fa5f fa8a 	uxtb.w	sl, sl
 800bd70:	3901      	subs	r1, #1
 800bd72:	4652      	mov	r2, sl
 800bd74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd78:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd7a:	f7ff ff26 	bl	800bbca <__exponent>
 800bd7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd80:	1813      	adds	r3, r2, r0
 800bd82:	2a01      	cmp	r2, #1
 800bd84:	4681      	mov	r9, r0
 800bd86:	6123      	str	r3, [r4, #16]
 800bd88:	dc02      	bgt.n	800bd90 <_printf_float+0x150>
 800bd8a:	6822      	ldr	r2, [r4, #0]
 800bd8c:	07d2      	lsls	r2, r2, #31
 800bd8e:	d501      	bpl.n	800bd94 <_printf_float+0x154>
 800bd90:	3301      	adds	r3, #1
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0a2      	beq.n	800bce2 <_printf_float+0xa2>
 800bd9c:	232d      	movs	r3, #45	@ 0x2d
 800bd9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bda2:	e79e      	b.n	800bce2 <_printf_float+0xa2>
 800bda4:	9a06      	ldr	r2, [sp, #24]
 800bda6:	2a47      	cmp	r2, #71	@ 0x47
 800bda8:	d1c2      	bne.n	800bd30 <_printf_float+0xf0>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1c0      	bne.n	800bd30 <_printf_float+0xf0>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e7bd      	b.n	800bd2e <_printf_float+0xee>
 800bdb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdb6:	d9db      	bls.n	800bd70 <_printf_float+0x130>
 800bdb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bdbc:	d118      	bne.n	800bdf0 <_printf_float+0x1b0>
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	6863      	ldr	r3, [r4, #4]
 800bdc2:	dd0b      	ble.n	800bddc <_printf_float+0x19c>
 800bdc4:	6121      	str	r1, [r4, #16]
 800bdc6:	b913      	cbnz	r3, 800bdce <_printf_float+0x18e>
 800bdc8:	6822      	ldr	r2, [r4, #0]
 800bdca:	07d0      	lsls	r0, r2, #31
 800bdcc:	d502      	bpl.n	800bdd4 <_printf_float+0x194>
 800bdce:	3301      	adds	r3, #1
 800bdd0:	440b      	add	r3, r1
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdd6:	f04f 0900 	mov.w	r9, #0
 800bdda:	e7db      	b.n	800bd94 <_printf_float+0x154>
 800bddc:	b913      	cbnz	r3, 800bde4 <_printf_float+0x1a4>
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	07d2      	lsls	r2, r2, #31
 800bde2:	d501      	bpl.n	800bde8 <_printf_float+0x1a8>
 800bde4:	3302      	adds	r3, #2
 800bde6:	e7f4      	b.n	800bdd2 <_printf_float+0x192>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e7f2      	b.n	800bdd2 <_printf_float+0x192>
 800bdec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bdf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	db05      	blt.n	800be02 <_printf_float+0x1c2>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	6121      	str	r1, [r4, #16]
 800bdfa:	07d8      	lsls	r0, r3, #31
 800bdfc:	d5ea      	bpl.n	800bdd4 <_printf_float+0x194>
 800bdfe:	1c4b      	adds	r3, r1, #1
 800be00:	e7e7      	b.n	800bdd2 <_printf_float+0x192>
 800be02:	2900      	cmp	r1, #0
 800be04:	bfd4      	ite	le
 800be06:	f1c1 0202 	rsble	r2, r1, #2
 800be0a:	2201      	movgt	r2, #1
 800be0c:	4413      	add	r3, r2
 800be0e:	e7e0      	b.n	800bdd2 <_printf_float+0x192>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	055a      	lsls	r2, r3, #21
 800be14:	d407      	bmi.n	800be26 <_printf_float+0x1e6>
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	4642      	mov	r2, r8
 800be1a:	4631      	mov	r1, r6
 800be1c:	4628      	mov	r0, r5
 800be1e:	47b8      	blx	r7
 800be20:	3001      	adds	r0, #1
 800be22:	d12b      	bne.n	800be7c <_printf_float+0x23c>
 800be24:	e767      	b.n	800bcf6 <_printf_float+0xb6>
 800be26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be2a:	f240 80dd 	bls.w	800bfe8 <_printf_float+0x3a8>
 800be2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be32:	2200      	movs	r2, #0
 800be34:	2300      	movs	r3, #0
 800be36:	f7f4 fe5f 	bl	8000af8 <__aeabi_dcmpeq>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d033      	beq.n	800bea6 <_printf_float+0x266>
 800be3e:	4a37      	ldr	r2, [pc, #220]	@ (800bf1c <_printf_float+0x2dc>)
 800be40:	2301      	movs	r3, #1
 800be42:	4631      	mov	r1, r6
 800be44:	4628      	mov	r0, r5
 800be46:	47b8      	blx	r7
 800be48:	3001      	adds	r0, #1
 800be4a:	f43f af54 	beq.w	800bcf6 <_printf_float+0xb6>
 800be4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be52:	4543      	cmp	r3, r8
 800be54:	db02      	blt.n	800be5c <_printf_float+0x21c>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	07d8      	lsls	r0, r3, #31
 800be5a:	d50f      	bpl.n	800be7c <_printf_float+0x23c>
 800be5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af45 	beq.w	800bcf6 <_printf_float+0xb6>
 800be6c:	f04f 0900 	mov.w	r9, #0
 800be70:	f108 38ff 	add.w	r8, r8, #4294967295
 800be74:	f104 0a1a 	add.w	sl, r4, #26
 800be78:	45c8      	cmp	r8, r9
 800be7a:	dc09      	bgt.n	800be90 <_printf_float+0x250>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	079b      	lsls	r3, r3, #30
 800be80:	f100 8103 	bmi.w	800c08a <_printf_float+0x44a>
 800be84:	68e0      	ldr	r0, [r4, #12]
 800be86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be88:	4298      	cmp	r0, r3
 800be8a:	bfb8      	it	lt
 800be8c:	4618      	movlt	r0, r3
 800be8e:	e734      	b.n	800bcfa <_printf_float+0xba>
 800be90:	2301      	movs	r3, #1
 800be92:	4652      	mov	r2, sl
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f af2b 	beq.w	800bcf6 <_printf_float+0xb6>
 800bea0:	f109 0901 	add.w	r9, r9, #1
 800bea4:	e7e8      	b.n	800be78 <_printf_float+0x238>
 800bea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc39      	bgt.n	800bf20 <_printf_float+0x2e0>
 800beac:	4a1b      	ldr	r2, [pc, #108]	@ (800bf1c <_printf_float+0x2dc>)
 800beae:	2301      	movs	r3, #1
 800beb0:	4631      	mov	r1, r6
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	f43f af1d 	beq.w	800bcf6 <_printf_float+0xb6>
 800bebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bec0:	ea59 0303 	orrs.w	r3, r9, r3
 800bec4:	d102      	bne.n	800becc <_printf_float+0x28c>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	07d9      	lsls	r1, r3, #31
 800beca:	d5d7      	bpl.n	800be7c <_printf_float+0x23c>
 800becc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bed0:	4631      	mov	r1, r6
 800bed2:	4628      	mov	r0, r5
 800bed4:	47b8      	blx	r7
 800bed6:	3001      	adds	r0, #1
 800bed8:	f43f af0d 	beq.w	800bcf6 <_printf_float+0xb6>
 800bedc:	f04f 0a00 	mov.w	sl, #0
 800bee0:	f104 0b1a 	add.w	fp, r4, #26
 800bee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee6:	425b      	negs	r3, r3
 800bee8:	4553      	cmp	r3, sl
 800beea:	dc01      	bgt.n	800bef0 <_printf_float+0x2b0>
 800beec:	464b      	mov	r3, r9
 800beee:	e793      	b.n	800be18 <_printf_float+0x1d8>
 800bef0:	2301      	movs	r3, #1
 800bef2:	465a      	mov	r2, fp
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f aefb 	beq.w	800bcf6 <_printf_float+0xb6>
 800bf00:	f10a 0a01 	add.w	sl, sl, #1
 800bf04:	e7ee      	b.n	800bee4 <_printf_float+0x2a4>
 800bf06:	bf00      	nop
 800bf08:	7fefffff 	.word	0x7fefffff
 800bf0c:	0809cea3 	.word	0x0809cea3
 800bf10:	0809cea7 	.word	0x0809cea7
 800bf14:	0809ceab 	.word	0x0809ceab
 800bf18:	0809ceaf 	.word	0x0809ceaf
 800bf1c:	0809ceb3 	.word	0x0809ceb3
 800bf20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf26:	4553      	cmp	r3, sl
 800bf28:	bfa8      	it	ge
 800bf2a:	4653      	movge	r3, sl
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	4699      	mov	r9, r3
 800bf30:	dc36      	bgt.n	800bfa0 <_printf_float+0x360>
 800bf32:	f04f 0b00 	mov.w	fp, #0
 800bf36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf3a:	f104 021a 	add.w	r2, r4, #26
 800bf3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf40:	9306      	str	r3, [sp, #24]
 800bf42:	eba3 0309 	sub.w	r3, r3, r9
 800bf46:	455b      	cmp	r3, fp
 800bf48:	dc31      	bgt.n	800bfae <_printf_float+0x36e>
 800bf4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4c:	459a      	cmp	sl, r3
 800bf4e:	dc3a      	bgt.n	800bfc6 <_printf_float+0x386>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07da      	lsls	r2, r3, #31
 800bf54:	d437      	bmi.n	800bfc6 <_printf_float+0x386>
 800bf56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf58:	ebaa 0903 	sub.w	r9, sl, r3
 800bf5c:	9b06      	ldr	r3, [sp, #24]
 800bf5e:	ebaa 0303 	sub.w	r3, sl, r3
 800bf62:	4599      	cmp	r9, r3
 800bf64:	bfa8      	it	ge
 800bf66:	4699      	movge	r9, r3
 800bf68:	f1b9 0f00 	cmp.w	r9, #0
 800bf6c:	dc33      	bgt.n	800bfd6 <_printf_float+0x396>
 800bf6e:	f04f 0800 	mov.w	r8, #0
 800bf72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf76:	f104 0b1a 	add.w	fp, r4, #26
 800bf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf80:	eba3 0309 	sub.w	r3, r3, r9
 800bf84:	4543      	cmp	r3, r8
 800bf86:	f77f af79 	ble.w	800be7c <_printf_float+0x23c>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	465a      	mov	r2, fp
 800bf8e:	4631      	mov	r1, r6
 800bf90:	4628      	mov	r0, r5
 800bf92:	47b8      	blx	r7
 800bf94:	3001      	adds	r0, #1
 800bf96:	f43f aeae 	beq.w	800bcf6 <_printf_float+0xb6>
 800bf9a:	f108 0801 	add.w	r8, r8, #1
 800bf9e:	e7ec      	b.n	800bf7a <_printf_float+0x33a>
 800bfa0:	4642      	mov	r2, r8
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b8      	blx	r7
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	d1c2      	bne.n	800bf32 <_printf_float+0x2f2>
 800bfac:	e6a3      	b.n	800bcf6 <_printf_float+0xb6>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	9206      	str	r2, [sp, #24]
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	f43f ae9c 	beq.w	800bcf6 <_printf_float+0xb6>
 800bfbe:	9a06      	ldr	r2, [sp, #24]
 800bfc0:	f10b 0b01 	add.w	fp, fp, #1
 800bfc4:	e7bb      	b.n	800bf3e <_printf_float+0x2fe>
 800bfc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4628      	mov	r0, r5
 800bfce:	47b8      	blx	r7
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d1c0      	bne.n	800bf56 <_printf_float+0x316>
 800bfd4:	e68f      	b.n	800bcf6 <_printf_float+0xb6>
 800bfd6:	9a06      	ldr	r2, [sp, #24]
 800bfd8:	464b      	mov	r3, r9
 800bfda:	4442      	add	r2, r8
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b8      	blx	r7
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d1c3      	bne.n	800bf6e <_printf_float+0x32e>
 800bfe6:	e686      	b.n	800bcf6 <_printf_float+0xb6>
 800bfe8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfec:	f1ba 0f01 	cmp.w	sl, #1
 800bff0:	dc01      	bgt.n	800bff6 <_printf_float+0x3b6>
 800bff2:	07db      	lsls	r3, r3, #31
 800bff4:	d536      	bpl.n	800c064 <_printf_float+0x424>
 800bff6:	2301      	movs	r3, #1
 800bff8:	4642      	mov	r2, r8
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b8      	blx	r7
 800c000:	3001      	adds	r0, #1
 800c002:	f43f ae78 	beq.w	800bcf6 <_printf_float+0xb6>
 800c006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	f43f ae70 	beq.w	800bcf6 <_printf_float+0xb6>
 800c016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c01a:	2200      	movs	r2, #0
 800c01c:	2300      	movs	r3, #0
 800c01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c022:	f7f4 fd69 	bl	8000af8 <__aeabi_dcmpeq>
 800c026:	b9c0      	cbnz	r0, 800c05a <_printf_float+0x41a>
 800c028:	4653      	mov	r3, sl
 800c02a:	f108 0201 	add.w	r2, r8, #1
 800c02e:	4631      	mov	r1, r6
 800c030:	4628      	mov	r0, r5
 800c032:	47b8      	blx	r7
 800c034:	3001      	adds	r0, #1
 800c036:	d10c      	bne.n	800c052 <_printf_float+0x412>
 800c038:	e65d      	b.n	800bcf6 <_printf_float+0xb6>
 800c03a:	2301      	movs	r3, #1
 800c03c:	465a      	mov	r2, fp
 800c03e:	4631      	mov	r1, r6
 800c040:	4628      	mov	r0, r5
 800c042:	47b8      	blx	r7
 800c044:	3001      	adds	r0, #1
 800c046:	f43f ae56 	beq.w	800bcf6 <_printf_float+0xb6>
 800c04a:	f108 0801 	add.w	r8, r8, #1
 800c04e:	45d0      	cmp	r8, sl
 800c050:	dbf3      	blt.n	800c03a <_printf_float+0x3fa>
 800c052:	464b      	mov	r3, r9
 800c054:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c058:	e6df      	b.n	800be1a <_printf_float+0x1da>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	f104 0b1a 	add.w	fp, r4, #26
 800c062:	e7f4      	b.n	800c04e <_printf_float+0x40e>
 800c064:	2301      	movs	r3, #1
 800c066:	4642      	mov	r2, r8
 800c068:	e7e1      	b.n	800c02e <_printf_float+0x3ee>
 800c06a:	2301      	movs	r3, #1
 800c06c:	464a      	mov	r2, r9
 800c06e:	4631      	mov	r1, r6
 800c070:	4628      	mov	r0, r5
 800c072:	47b8      	blx	r7
 800c074:	3001      	adds	r0, #1
 800c076:	f43f ae3e 	beq.w	800bcf6 <_printf_float+0xb6>
 800c07a:	f108 0801 	add.w	r8, r8, #1
 800c07e:	68e3      	ldr	r3, [r4, #12]
 800c080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c082:	1a5b      	subs	r3, r3, r1
 800c084:	4543      	cmp	r3, r8
 800c086:	dcf0      	bgt.n	800c06a <_printf_float+0x42a>
 800c088:	e6fc      	b.n	800be84 <_printf_float+0x244>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	f104 0919 	add.w	r9, r4, #25
 800c092:	e7f4      	b.n	800c07e <_printf_float+0x43e>

0800c094 <_printf_common>:
 800c094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c098:	4616      	mov	r6, r2
 800c09a:	4698      	mov	r8, r3
 800c09c:	688a      	ldr	r2, [r1, #8]
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	bfb8      	it	lt
 800c0a8:	4613      	movlt	r3, r2
 800c0aa:	6033      	str	r3, [r6, #0]
 800c0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	b10a      	cbz	r2, 800c0ba <_printf_common+0x26>
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	6033      	str	r3, [r6, #0]
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	0699      	lsls	r1, r3, #26
 800c0be:	bf42      	ittt	mi
 800c0c0:	6833      	ldrmi	r3, [r6, #0]
 800c0c2:	3302      	addmi	r3, #2
 800c0c4:	6033      	strmi	r3, [r6, #0]
 800c0c6:	6825      	ldr	r5, [r4, #0]
 800c0c8:	f015 0506 	ands.w	r5, r5, #6
 800c0cc:	d106      	bne.n	800c0dc <_printf_common+0x48>
 800c0ce:	f104 0a19 	add.w	sl, r4, #25
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	6832      	ldr	r2, [r6, #0]
 800c0d6:	1a9b      	subs	r3, r3, r2
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dc26      	bgt.n	800c12a <_printf_common+0x96>
 800c0dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0e0:	6822      	ldr	r2, [r4, #0]
 800c0e2:	3b00      	subs	r3, #0
 800c0e4:	bf18      	it	ne
 800c0e6:	2301      	movne	r3, #1
 800c0e8:	0692      	lsls	r2, r2, #26
 800c0ea:	d42b      	bmi.n	800c144 <_printf_common+0xb0>
 800c0ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	47c8      	blx	r9
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	d01e      	beq.n	800c138 <_printf_common+0xa4>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	6922      	ldr	r2, [r4, #16]
 800c0fe:	f003 0306 	and.w	r3, r3, #6
 800c102:	2b04      	cmp	r3, #4
 800c104:	bf02      	ittt	eq
 800c106:	68e5      	ldreq	r5, [r4, #12]
 800c108:	6833      	ldreq	r3, [r6, #0]
 800c10a:	1aed      	subeq	r5, r5, r3
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	bf0c      	ite	eq
 800c110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c114:	2500      	movne	r5, #0
 800c116:	4293      	cmp	r3, r2
 800c118:	bfc4      	itt	gt
 800c11a:	1a9b      	subgt	r3, r3, r2
 800c11c:	18ed      	addgt	r5, r5, r3
 800c11e:	2600      	movs	r6, #0
 800c120:	341a      	adds	r4, #26
 800c122:	42b5      	cmp	r5, r6
 800c124:	d11a      	bne.n	800c15c <_printf_common+0xc8>
 800c126:	2000      	movs	r0, #0
 800c128:	e008      	b.n	800c13c <_printf_common+0xa8>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4652      	mov	r2, sl
 800c12e:	4641      	mov	r1, r8
 800c130:	4638      	mov	r0, r7
 800c132:	47c8      	blx	r9
 800c134:	3001      	adds	r0, #1
 800c136:	d103      	bne.n	800c140 <_printf_common+0xac>
 800c138:	f04f 30ff 	mov.w	r0, #4294967295
 800c13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c140:	3501      	adds	r5, #1
 800c142:	e7c6      	b.n	800c0d2 <_printf_common+0x3e>
 800c144:	18e1      	adds	r1, r4, r3
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	2030      	movs	r0, #48	@ 0x30
 800c14a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c14e:	4422      	add	r2, r4
 800c150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c158:	3302      	adds	r3, #2
 800c15a:	e7c7      	b.n	800c0ec <_printf_common+0x58>
 800c15c:	2301      	movs	r3, #1
 800c15e:	4622      	mov	r2, r4
 800c160:	4641      	mov	r1, r8
 800c162:	4638      	mov	r0, r7
 800c164:	47c8      	blx	r9
 800c166:	3001      	adds	r0, #1
 800c168:	d0e6      	beq.n	800c138 <_printf_common+0xa4>
 800c16a:	3601      	adds	r6, #1
 800c16c:	e7d9      	b.n	800c122 <_printf_common+0x8e>
	...

0800c170 <_printf_i>:
 800c170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c174:	7e0f      	ldrb	r7, [r1, #24]
 800c176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c178:	2f78      	cmp	r7, #120	@ 0x78
 800c17a:	4691      	mov	r9, r2
 800c17c:	4680      	mov	r8, r0
 800c17e:	460c      	mov	r4, r1
 800c180:	469a      	mov	sl, r3
 800c182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c186:	d807      	bhi.n	800c198 <_printf_i+0x28>
 800c188:	2f62      	cmp	r7, #98	@ 0x62
 800c18a:	d80a      	bhi.n	800c1a2 <_printf_i+0x32>
 800c18c:	2f00      	cmp	r7, #0
 800c18e:	f000 80d2 	beq.w	800c336 <_printf_i+0x1c6>
 800c192:	2f58      	cmp	r7, #88	@ 0x58
 800c194:	f000 80b9 	beq.w	800c30a <_printf_i+0x19a>
 800c198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c19c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1a0:	e03a      	b.n	800c218 <_printf_i+0xa8>
 800c1a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1a6:	2b15      	cmp	r3, #21
 800c1a8:	d8f6      	bhi.n	800c198 <_printf_i+0x28>
 800c1aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c1b0 <_printf_i+0x40>)
 800c1ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1b0:	0800c209 	.word	0x0800c209
 800c1b4:	0800c21d 	.word	0x0800c21d
 800c1b8:	0800c199 	.word	0x0800c199
 800c1bc:	0800c199 	.word	0x0800c199
 800c1c0:	0800c199 	.word	0x0800c199
 800c1c4:	0800c199 	.word	0x0800c199
 800c1c8:	0800c21d 	.word	0x0800c21d
 800c1cc:	0800c199 	.word	0x0800c199
 800c1d0:	0800c199 	.word	0x0800c199
 800c1d4:	0800c199 	.word	0x0800c199
 800c1d8:	0800c199 	.word	0x0800c199
 800c1dc:	0800c31d 	.word	0x0800c31d
 800c1e0:	0800c247 	.word	0x0800c247
 800c1e4:	0800c2d7 	.word	0x0800c2d7
 800c1e8:	0800c199 	.word	0x0800c199
 800c1ec:	0800c199 	.word	0x0800c199
 800c1f0:	0800c33f 	.word	0x0800c33f
 800c1f4:	0800c199 	.word	0x0800c199
 800c1f8:	0800c247 	.word	0x0800c247
 800c1fc:	0800c199 	.word	0x0800c199
 800c200:	0800c199 	.word	0x0800c199
 800c204:	0800c2df 	.word	0x0800c2df
 800c208:	6833      	ldr	r3, [r6, #0]
 800c20a:	1d1a      	adds	r2, r3, #4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6032      	str	r2, [r6, #0]
 800c210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c218:	2301      	movs	r3, #1
 800c21a:	e09d      	b.n	800c358 <_printf_i+0x1e8>
 800c21c:	6833      	ldr	r3, [r6, #0]
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	1d19      	adds	r1, r3, #4
 800c222:	6031      	str	r1, [r6, #0]
 800c224:	0606      	lsls	r6, r0, #24
 800c226:	d501      	bpl.n	800c22c <_printf_i+0xbc>
 800c228:	681d      	ldr	r5, [r3, #0]
 800c22a:	e003      	b.n	800c234 <_printf_i+0xc4>
 800c22c:	0645      	lsls	r5, r0, #25
 800c22e:	d5fb      	bpl.n	800c228 <_printf_i+0xb8>
 800c230:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c234:	2d00      	cmp	r5, #0
 800c236:	da03      	bge.n	800c240 <_printf_i+0xd0>
 800c238:	232d      	movs	r3, #45	@ 0x2d
 800c23a:	426d      	negs	r5, r5
 800c23c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c240:	4859      	ldr	r0, [pc, #356]	@ (800c3a8 <_printf_i+0x238>)
 800c242:	230a      	movs	r3, #10
 800c244:	e011      	b.n	800c26a <_printf_i+0xfa>
 800c246:	6821      	ldr	r1, [r4, #0]
 800c248:	6833      	ldr	r3, [r6, #0]
 800c24a:	0608      	lsls	r0, r1, #24
 800c24c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c250:	d402      	bmi.n	800c258 <_printf_i+0xe8>
 800c252:	0649      	lsls	r1, r1, #25
 800c254:	bf48      	it	mi
 800c256:	b2ad      	uxthmi	r5, r5
 800c258:	2f6f      	cmp	r7, #111	@ 0x6f
 800c25a:	4853      	ldr	r0, [pc, #332]	@ (800c3a8 <_printf_i+0x238>)
 800c25c:	6033      	str	r3, [r6, #0]
 800c25e:	bf14      	ite	ne
 800c260:	230a      	movne	r3, #10
 800c262:	2308      	moveq	r3, #8
 800c264:	2100      	movs	r1, #0
 800c266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c26a:	6866      	ldr	r6, [r4, #4]
 800c26c:	60a6      	str	r6, [r4, #8]
 800c26e:	2e00      	cmp	r6, #0
 800c270:	bfa2      	ittt	ge
 800c272:	6821      	ldrge	r1, [r4, #0]
 800c274:	f021 0104 	bicge.w	r1, r1, #4
 800c278:	6021      	strge	r1, [r4, #0]
 800c27a:	b90d      	cbnz	r5, 800c280 <_printf_i+0x110>
 800c27c:	2e00      	cmp	r6, #0
 800c27e:	d04b      	beq.n	800c318 <_printf_i+0x1a8>
 800c280:	4616      	mov	r6, r2
 800c282:	fbb5 f1f3 	udiv	r1, r5, r3
 800c286:	fb03 5711 	mls	r7, r3, r1, r5
 800c28a:	5dc7      	ldrb	r7, [r0, r7]
 800c28c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c290:	462f      	mov	r7, r5
 800c292:	42bb      	cmp	r3, r7
 800c294:	460d      	mov	r5, r1
 800c296:	d9f4      	bls.n	800c282 <_printf_i+0x112>
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d10b      	bne.n	800c2b4 <_printf_i+0x144>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	07df      	lsls	r7, r3, #31
 800c2a0:	d508      	bpl.n	800c2b4 <_printf_i+0x144>
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	6861      	ldr	r1, [r4, #4]
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	bfde      	ittt	le
 800c2aa:	2330      	movle	r3, #48	@ 0x30
 800c2ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2b4:	1b92      	subs	r2, r2, r6
 800c2b6:	6122      	str	r2, [r4, #16]
 800c2b8:	f8cd a000 	str.w	sl, [sp]
 800c2bc:	464b      	mov	r3, r9
 800c2be:	aa03      	add	r2, sp, #12
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f7ff fee6 	bl	800c094 <_printf_common>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d14a      	bne.n	800c362 <_printf_i+0x1f2>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b004      	add	sp, #16
 800c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	f043 0320 	orr.w	r3, r3, #32
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	4833      	ldr	r0, [pc, #204]	@ (800c3ac <_printf_i+0x23c>)
 800c2e0:	2778      	movs	r7, #120	@ 0x78
 800c2e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	6831      	ldr	r1, [r6, #0]
 800c2ea:	061f      	lsls	r7, r3, #24
 800c2ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2f0:	d402      	bmi.n	800c2f8 <_printf_i+0x188>
 800c2f2:	065f      	lsls	r7, r3, #25
 800c2f4:	bf48      	it	mi
 800c2f6:	b2ad      	uxthmi	r5, r5
 800c2f8:	6031      	str	r1, [r6, #0]
 800c2fa:	07d9      	lsls	r1, r3, #31
 800c2fc:	bf44      	itt	mi
 800c2fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c302:	6023      	strmi	r3, [r4, #0]
 800c304:	b11d      	cbz	r5, 800c30e <_printf_i+0x19e>
 800c306:	2310      	movs	r3, #16
 800c308:	e7ac      	b.n	800c264 <_printf_i+0xf4>
 800c30a:	4827      	ldr	r0, [pc, #156]	@ (800c3a8 <_printf_i+0x238>)
 800c30c:	e7e9      	b.n	800c2e2 <_printf_i+0x172>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	f023 0320 	bic.w	r3, r3, #32
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	e7f6      	b.n	800c306 <_printf_i+0x196>
 800c318:	4616      	mov	r6, r2
 800c31a:	e7bd      	b.n	800c298 <_printf_i+0x128>
 800c31c:	6833      	ldr	r3, [r6, #0]
 800c31e:	6825      	ldr	r5, [r4, #0]
 800c320:	6961      	ldr	r1, [r4, #20]
 800c322:	1d18      	adds	r0, r3, #4
 800c324:	6030      	str	r0, [r6, #0]
 800c326:	062e      	lsls	r6, r5, #24
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	d501      	bpl.n	800c330 <_printf_i+0x1c0>
 800c32c:	6019      	str	r1, [r3, #0]
 800c32e:	e002      	b.n	800c336 <_printf_i+0x1c6>
 800c330:	0668      	lsls	r0, r5, #25
 800c332:	d5fb      	bpl.n	800c32c <_printf_i+0x1bc>
 800c334:	8019      	strh	r1, [r3, #0]
 800c336:	2300      	movs	r3, #0
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	4616      	mov	r6, r2
 800c33c:	e7bc      	b.n	800c2b8 <_printf_i+0x148>
 800c33e:	6833      	ldr	r3, [r6, #0]
 800c340:	1d1a      	adds	r2, r3, #4
 800c342:	6032      	str	r2, [r6, #0]
 800c344:	681e      	ldr	r6, [r3, #0]
 800c346:	6862      	ldr	r2, [r4, #4]
 800c348:	2100      	movs	r1, #0
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7f3 ff58 	bl	8000200 <memchr>
 800c350:	b108      	cbz	r0, 800c356 <_printf_i+0x1e6>
 800c352:	1b80      	subs	r0, r0, r6
 800c354:	6060      	str	r0, [r4, #4]
 800c356:	6863      	ldr	r3, [r4, #4]
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	2300      	movs	r3, #0
 800c35c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c360:	e7aa      	b.n	800c2b8 <_printf_i+0x148>
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	4632      	mov	r2, r6
 800c366:	4649      	mov	r1, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	47d0      	blx	sl
 800c36c:	3001      	adds	r0, #1
 800c36e:	d0ad      	beq.n	800c2cc <_printf_i+0x15c>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	079b      	lsls	r3, r3, #30
 800c374:	d413      	bmi.n	800c39e <_printf_i+0x22e>
 800c376:	68e0      	ldr	r0, [r4, #12]
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	4298      	cmp	r0, r3
 800c37c:	bfb8      	it	lt
 800c37e:	4618      	movlt	r0, r3
 800c380:	e7a6      	b.n	800c2d0 <_printf_i+0x160>
 800c382:	2301      	movs	r3, #1
 800c384:	4632      	mov	r2, r6
 800c386:	4649      	mov	r1, r9
 800c388:	4640      	mov	r0, r8
 800c38a:	47d0      	blx	sl
 800c38c:	3001      	adds	r0, #1
 800c38e:	d09d      	beq.n	800c2cc <_printf_i+0x15c>
 800c390:	3501      	adds	r5, #1
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	9903      	ldr	r1, [sp, #12]
 800c396:	1a5b      	subs	r3, r3, r1
 800c398:	42ab      	cmp	r3, r5
 800c39a:	dcf2      	bgt.n	800c382 <_printf_i+0x212>
 800c39c:	e7eb      	b.n	800c376 <_printf_i+0x206>
 800c39e:	2500      	movs	r5, #0
 800c3a0:	f104 0619 	add.w	r6, r4, #25
 800c3a4:	e7f5      	b.n	800c392 <_printf_i+0x222>
 800c3a6:	bf00      	nop
 800c3a8:	0809ceb5 	.word	0x0809ceb5
 800c3ac:	0809cec6 	.word	0x0809cec6

0800c3b0 <std>:
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800c3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3be:	6083      	str	r3, [r0, #8]
 800c3c0:	8181      	strh	r1, [r0, #12]
 800c3c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3c4:	81c2      	strh	r2, [r0, #14]
 800c3c6:	6183      	str	r3, [r0, #24]
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	305c      	adds	r0, #92	@ 0x5c
 800c3ce:	f000 f926 	bl	800c61e <memset>
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c408 <std+0x58>)
 800c3d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c40c <std+0x5c>)
 800c3d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3da:	4b0d      	ldr	r3, [pc, #52]	@ (800c410 <std+0x60>)
 800c3dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3de:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <std+0x64>)
 800c3e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c418 <std+0x68>)
 800c3e4:	6224      	str	r4, [r4, #32]
 800c3e6:	429c      	cmp	r4, r3
 800c3e8:	d006      	beq.n	800c3f8 <std+0x48>
 800c3ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3ee:	4294      	cmp	r4, r2
 800c3f0:	d002      	beq.n	800c3f8 <std+0x48>
 800c3f2:	33d0      	adds	r3, #208	@ 0xd0
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	d105      	bne.n	800c404 <std+0x54>
 800c3f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c400:	f000 b98a 	b.w	800c718 <__retarget_lock_init_recursive>
 800c404:	bd10      	pop	{r4, pc}
 800c406:	bf00      	nop
 800c408:	0800c599 	.word	0x0800c599
 800c40c:	0800c5bb 	.word	0x0800c5bb
 800c410:	0800c5f3 	.word	0x0800c5f3
 800c414:	0800c617 	.word	0x0800c617
 800c418:	20040984 	.word	0x20040984

0800c41c <stdio_exit_handler>:
 800c41c:	4a02      	ldr	r2, [pc, #8]	@ (800c428 <stdio_exit_handler+0xc>)
 800c41e:	4903      	ldr	r1, [pc, #12]	@ (800c42c <stdio_exit_handler+0x10>)
 800c420:	4803      	ldr	r0, [pc, #12]	@ (800c430 <stdio_exit_handler+0x14>)
 800c422:	f000 b869 	b.w	800c4f8 <_fwalk_sglue>
 800c426:	bf00      	nop
 800c428:	200400bc 	.word	0x200400bc
 800c42c:	0800e339 	.word	0x0800e339
 800c430:	200400cc 	.word	0x200400cc

0800c434 <cleanup_stdio>:
 800c434:	6841      	ldr	r1, [r0, #4]
 800c436:	4b0c      	ldr	r3, [pc, #48]	@ (800c468 <cleanup_stdio+0x34>)
 800c438:	4299      	cmp	r1, r3
 800c43a:	b510      	push	{r4, lr}
 800c43c:	4604      	mov	r4, r0
 800c43e:	d001      	beq.n	800c444 <cleanup_stdio+0x10>
 800c440:	f001 ff7a 	bl	800e338 <_fflush_r>
 800c444:	68a1      	ldr	r1, [r4, #8]
 800c446:	4b09      	ldr	r3, [pc, #36]	@ (800c46c <cleanup_stdio+0x38>)
 800c448:	4299      	cmp	r1, r3
 800c44a:	d002      	beq.n	800c452 <cleanup_stdio+0x1e>
 800c44c:	4620      	mov	r0, r4
 800c44e:	f001 ff73 	bl	800e338 <_fflush_r>
 800c452:	68e1      	ldr	r1, [r4, #12]
 800c454:	4b06      	ldr	r3, [pc, #24]	@ (800c470 <cleanup_stdio+0x3c>)
 800c456:	4299      	cmp	r1, r3
 800c458:	d004      	beq.n	800c464 <cleanup_stdio+0x30>
 800c45a:	4620      	mov	r0, r4
 800c45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c460:	f001 bf6a 	b.w	800e338 <_fflush_r>
 800c464:	bd10      	pop	{r4, pc}
 800c466:	bf00      	nop
 800c468:	20040984 	.word	0x20040984
 800c46c:	200409ec 	.word	0x200409ec
 800c470:	20040a54 	.word	0x20040a54

0800c474 <global_stdio_init.part.0>:
 800c474:	b510      	push	{r4, lr}
 800c476:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <global_stdio_init.part.0+0x30>)
 800c478:	4c0b      	ldr	r4, [pc, #44]	@ (800c4a8 <global_stdio_init.part.0+0x34>)
 800c47a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4ac <global_stdio_init.part.0+0x38>)
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	4620      	mov	r0, r4
 800c480:	2200      	movs	r2, #0
 800c482:	2104      	movs	r1, #4
 800c484:	f7ff ff94 	bl	800c3b0 <std>
 800c488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c48c:	2201      	movs	r2, #1
 800c48e:	2109      	movs	r1, #9
 800c490:	f7ff ff8e 	bl	800c3b0 <std>
 800c494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c498:	2202      	movs	r2, #2
 800c49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49e:	2112      	movs	r1, #18
 800c4a0:	f7ff bf86 	b.w	800c3b0 <std>
 800c4a4:	20040abc 	.word	0x20040abc
 800c4a8:	20040984 	.word	0x20040984
 800c4ac:	0800c41d 	.word	0x0800c41d

0800c4b0 <__sfp_lock_acquire>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	@ (800c4b8 <__sfp_lock_acquire+0x8>)
 800c4b2:	f000 b932 	b.w	800c71a <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20040ac5 	.word	0x20040ac5

0800c4bc <__sfp_lock_release>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	@ (800c4c4 <__sfp_lock_release+0x8>)
 800c4be:	f000 b92d 	b.w	800c71c <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	20040ac5 	.word	0x20040ac5

0800c4c8 <__sinit>:
 800c4c8:	b510      	push	{r4, lr}
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	f7ff fff0 	bl	800c4b0 <__sfp_lock_acquire>
 800c4d0:	6a23      	ldr	r3, [r4, #32]
 800c4d2:	b11b      	cbz	r3, 800c4dc <__sinit+0x14>
 800c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d8:	f7ff bff0 	b.w	800c4bc <__sfp_lock_release>
 800c4dc:	4b04      	ldr	r3, [pc, #16]	@ (800c4f0 <__sinit+0x28>)
 800c4de:	6223      	str	r3, [r4, #32]
 800c4e0:	4b04      	ldr	r3, [pc, #16]	@ (800c4f4 <__sinit+0x2c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1f5      	bne.n	800c4d4 <__sinit+0xc>
 800c4e8:	f7ff ffc4 	bl	800c474 <global_stdio_init.part.0>
 800c4ec:	e7f2      	b.n	800c4d4 <__sinit+0xc>
 800c4ee:	bf00      	nop
 800c4f0:	0800c435 	.word	0x0800c435
 800c4f4:	20040abc 	.word	0x20040abc

0800c4f8 <_fwalk_sglue>:
 800c4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4fc:	4607      	mov	r7, r0
 800c4fe:	4688      	mov	r8, r1
 800c500:	4614      	mov	r4, r2
 800c502:	2600      	movs	r6, #0
 800c504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c508:	f1b9 0901 	subs.w	r9, r9, #1
 800c50c:	d505      	bpl.n	800c51a <_fwalk_sglue+0x22>
 800c50e:	6824      	ldr	r4, [r4, #0]
 800c510:	2c00      	cmp	r4, #0
 800c512:	d1f7      	bne.n	800c504 <_fwalk_sglue+0xc>
 800c514:	4630      	mov	r0, r6
 800c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d907      	bls.n	800c530 <_fwalk_sglue+0x38>
 800c520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c524:	3301      	adds	r3, #1
 800c526:	d003      	beq.n	800c530 <_fwalk_sglue+0x38>
 800c528:	4629      	mov	r1, r5
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c0      	blx	r8
 800c52e:	4306      	orrs	r6, r0
 800c530:	3568      	adds	r5, #104	@ 0x68
 800c532:	e7e9      	b.n	800c508 <_fwalk_sglue+0x10>

0800c534 <iprintf>:
 800c534:	b40f      	push	{r0, r1, r2, r3}
 800c536:	b507      	push	{r0, r1, r2, lr}
 800c538:	4906      	ldr	r1, [pc, #24]	@ (800c554 <iprintf+0x20>)
 800c53a:	ab04      	add	r3, sp, #16
 800c53c:	6808      	ldr	r0, [r1, #0]
 800c53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c542:	6881      	ldr	r1, [r0, #8]
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	f001 fd5b 	bl	800e000 <_vfiprintf_r>
 800c54a:	b003      	add	sp, #12
 800c54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c550:	b004      	add	sp, #16
 800c552:	4770      	bx	lr
 800c554:	200400c8 	.word	0x200400c8

0800c558 <siprintf>:
 800c558:	b40e      	push	{r1, r2, r3}
 800c55a:	b500      	push	{lr}
 800c55c:	b09c      	sub	sp, #112	@ 0x70
 800c55e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c560:	9002      	str	r0, [sp, #8]
 800c562:	9006      	str	r0, [sp, #24]
 800c564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c568:	4809      	ldr	r0, [pc, #36]	@ (800c590 <siprintf+0x38>)
 800c56a:	9107      	str	r1, [sp, #28]
 800c56c:	9104      	str	r1, [sp, #16]
 800c56e:	4909      	ldr	r1, [pc, #36]	@ (800c594 <siprintf+0x3c>)
 800c570:	f853 2b04 	ldr.w	r2, [r3], #4
 800c574:	9105      	str	r1, [sp, #20]
 800c576:	6800      	ldr	r0, [r0, #0]
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	a902      	add	r1, sp, #8
 800c57c:	f001 fc1a 	bl	800ddb4 <_svfiprintf_r>
 800c580:	9b02      	ldr	r3, [sp, #8]
 800c582:	2200      	movs	r2, #0
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	b01c      	add	sp, #112	@ 0x70
 800c588:	f85d eb04 	ldr.w	lr, [sp], #4
 800c58c:	b003      	add	sp, #12
 800c58e:	4770      	bx	lr
 800c590:	200400c8 	.word	0x200400c8
 800c594:	ffff0208 	.word	0xffff0208

0800c598 <__sread>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	460c      	mov	r4, r1
 800c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a0:	f000 f86c 	bl	800c67c <_read_r>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	bfab      	itete	ge
 800c5a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c5ac:	181b      	addge	r3, r3, r0
 800c5ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c5b2:	bfac      	ite	ge
 800c5b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c5b6:	81a3      	strhlt	r3, [r4, #12]
 800c5b8:	bd10      	pop	{r4, pc}

0800c5ba <__swrite>:
 800c5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5be:	461f      	mov	r7, r3
 800c5c0:	898b      	ldrh	r3, [r1, #12]
 800c5c2:	05db      	lsls	r3, r3, #23
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	d505      	bpl.n	800c5d8 <__swrite+0x1e>
 800c5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f000 f840 	bl	800c658 <_lseek_r>
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ee:	f000 b857 	b.w	800c6a0 <_write_r>

0800c5f2 <__sseek>:
 800c5f2:	b510      	push	{r4, lr}
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5fa:	f000 f82d 	bl	800c658 <_lseek_r>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	bf15      	itete	ne
 800c604:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c60a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c60e:	81a3      	strheq	r3, [r4, #12]
 800c610:	bf18      	it	ne
 800c612:	81a3      	strhne	r3, [r4, #12]
 800c614:	bd10      	pop	{r4, pc}

0800c616 <__sclose>:
 800c616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c61a:	f000 b80d 	b.w	800c638 <_close_r>

0800c61e <memset>:
 800c61e:	4402      	add	r2, r0
 800c620:	4603      	mov	r3, r0
 800c622:	4293      	cmp	r3, r2
 800c624:	d100      	bne.n	800c628 <memset+0xa>
 800c626:	4770      	bx	lr
 800c628:	f803 1b01 	strb.w	r1, [r3], #1
 800c62c:	e7f9      	b.n	800c622 <memset+0x4>
	...

0800c630 <_localeconv_r>:
 800c630:	4800      	ldr	r0, [pc, #0]	@ (800c634 <_localeconv_r+0x4>)
 800c632:	4770      	bx	lr
 800c634:	20040208 	.word	0x20040208

0800c638 <_close_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d06      	ldr	r5, [pc, #24]	@ (800c654 <_close_r+0x1c>)
 800c63c:	2300      	movs	r3, #0
 800c63e:	4604      	mov	r4, r0
 800c640:	4608      	mov	r0, r1
 800c642:	602b      	str	r3, [r5, #0]
 800c644:	f7f6 fb62 	bl	8002d0c <_close>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	d102      	bne.n	800c652 <_close_r+0x1a>
 800c64c:	682b      	ldr	r3, [r5, #0]
 800c64e:	b103      	cbz	r3, 800c652 <_close_r+0x1a>
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	20040ac0 	.word	0x20040ac0

0800c658 <_lseek_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4d07      	ldr	r5, [pc, #28]	@ (800c678 <_lseek_r+0x20>)
 800c65c:	4604      	mov	r4, r0
 800c65e:	4608      	mov	r0, r1
 800c660:	4611      	mov	r1, r2
 800c662:	2200      	movs	r2, #0
 800c664:	602a      	str	r2, [r5, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	f7f6 fb77 	bl	8002d5a <_lseek>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	d102      	bne.n	800c676 <_lseek_r+0x1e>
 800c670:	682b      	ldr	r3, [r5, #0]
 800c672:	b103      	cbz	r3, 800c676 <_lseek_r+0x1e>
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	20040ac0 	.word	0x20040ac0

0800c67c <_read_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4d07      	ldr	r5, [pc, #28]	@ (800c69c <_read_r+0x20>)
 800c680:	4604      	mov	r4, r0
 800c682:	4608      	mov	r0, r1
 800c684:	4611      	mov	r1, r2
 800c686:	2200      	movs	r2, #0
 800c688:	602a      	str	r2, [r5, #0]
 800c68a:	461a      	mov	r2, r3
 800c68c:	f7f6 fb05 	bl	8002c9a <_read>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_read_r+0x1e>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_read_r+0x1e>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	20040ac0 	.word	0x20040ac0

0800c6a0 <_write_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	@ (800c6c0 <_write_r+0x20>)
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	4608      	mov	r0, r1
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	602a      	str	r2, [r5, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f7f6 fb10 	bl	8002cd4 <_write>
 800c6b4:	1c43      	adds	r3, r0, #1
 800c6b6:	d102      	bne.n	800c6be <_write_r+0x1e>
 800c6b8:	682b      	ldr	r3, [r5, #0]
 800c6ba:	b103      	cbz	r3, 800c6be <_write_r+0x1e>
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
 800c6c0:	20040ac0 	.word	0x20040ac0

0800c6c4 <__errno>:
 800c6c4:	4b01      	ldr	r3, [pc, #4]	@ (800c6cc <__errno+0x8>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	200400c8 	.word	0x200400c8

0800c6d0 <__libc_init_array>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800c708 <__libc_init_array+0x38>)
 800c6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800c70c <__libc_init_array+0x3c>)
 800c6d6:	1b64      	subs	r4, r4, r5
 800c6d8:	10a4      	asrs	r4, r4, #2
 800c6da:	2600      	movs	r6, #0
 800c6dc:	42a6      	cmp	r6, r4
 800c6de:	d109      	bne.n	800c6f4 <__libc_init_array+0x24>
 800c6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800c710 <__libc_init_array+0x40>)
 800c6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800c714 <__libc_init_array+0x44>)
 800c6e4:	f002 f866 	bl	800e7b4 <_init>
 800c6e8:	1b64      	subs	r4, r4, r5
 800c6ea:	10a4      	asrs	r4, r4, #2
 800c6ec:	2600      	movs	r6, #0
 800c6ee:	42a6      	cmp	r6, r4
 800c6f0:	d105      	bne.n	800c6fe <__libc_init_array+0x2e>
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f8:	4798      	blx	r3
 800c6fa:	3601      	adds	r6, #1
 800c6fc:	e7ee      	b.n	800c6dc <__libc_init_array+0xc>
 800c6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c702:	4798      	blx	r3
 800c704:	3601      	adds	r6, #1
 800c706:	e7f2      	b.n	800c6ee <__libc_init_array+0x1e>
 800c708:	0809d204 	.word	0x0809d204
 800c70c:	0809d204 	.word	0x0809d204
 800c710:	0809d204 	.word	0x0809d204
 800c714:	0809d208 	.word	0x0809d208

0800c718 <__retarget_lock_init_recursive>:
 800c718:	4770      	bx	lr

0800c71a <__retarget_lock_acquire_recursive>:
 800c71a:	4770      	bx	lr

0800c71c <__retarget_lock_release_recursive>:
 800c71c:	4770      	bx	lr
	...

0800c720 <__assert_func>:
 800c720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c722:	4614      	mov	r4, r2
 800c724:	461a      	mov	r2, r3
 800c726:	4b09      	ldr	r3, [pc, #36]	@ (800c74c <__assert_func+0x2c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4605      	mov	r5, r0
 800c72c:	68d8      	ldr	r0, [r3, #12]
 800c72e:	b954      	cbnz	r4, 800c746 <__assert_func+0x26>
 800c730:	4b07      	ldr	r3, [pc, #28]	@ (800c750 <__assert_func+0x30>)
 800c732:	461c      	mov	r4, r3
 800c734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c738:	9100      	str	r1, [sp, #0]
 800c73a:	462b      	mov	r3, r5
 800c73c:	4905      	ldr	r1, [pc, #20]	@ (800c754 <__assert_func+0x34>)
 800c73e:	f001 fe23 	bl	800e388 <fiprintf>
 800c742:	f001 feff 	bl	800e544 <abort>
 800c746:	4b04      	ldr	r3, [pc, #16]	@ (800c758 <__assert_func+0x38>)
 800c748:	e7f4      	b.n	800c734 <__assert_func+0x14>
 800c74a:	bf00      	nop
 800c74c:	200400c8 	.word	0x200400c8
 800c750:	0809cf12 	.word	0x0809cf12
 800c754:	0809cee4 	.word	0x0809cee4
 800c758:	0809ced7 	.word	0x0809ced7

0800c75c <quorem>:
 800c75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	6903      	ldr	r3, [r0, #16]
 800c762:	690c      	ldr	r4, [r1, #16]
 800c764:	42a3      	cmp	r3, r4
 800c766:	4607      	mov	r7, r0
 800c768:	db7e      	blt.n	800c868 <quorem+0x10c>
 800c76a:	3c01      	subs	r4, #1
 800c76c:	f101 0814 	add.w	r8, r1, #20
 800c770:	00a3      	lsls	r3, r4, #2
 800c772:	f100 0514 	add.w	r5, r0, #20
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c786:	3301      	adds	r3, #1
 800c788:	429a      	cmp	r2, r3
 800c78a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c78e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c792:	d32e      	bcc.n	800c7f2 <quorem+0x96>
 800c794:	f04f 0a00 	mov.w	sl, #0
 800c798:	46c4      	mov	ip, r8
 800c79a:	46ae      	mov	lr, r5
 800c79c:	46d3      	mov	fp, sl
 800c79e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7a2:	b298      	uxth	r0, r3
 800c7a4:	fb06 a000 	mla	r0, r6, r0, sl
 800c7a8:	0c02      	lsrs	r2, r0, #16
 800c7aa:	0c1b      	lsrs	r3, r3, #16
 800c7ac:	fb06 2303 	mla	r3, r6, r3, r2
 800c7b0:	f8de 2000 	ldr.w	r2, [lr]
 800c7b4:	b280      	uxth	r0, r0
 800c7b6:	b292      	uxth	r2, r2
 800c7b8:	1a12      	subs	r2, r2, r0
 800c7ba:	445a      	add	r2, fp
 800c7bc:	f8de 0000 	ldr.w	r0, [lr]
 800c7c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c7ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c7ce:	b292      	uxth	r2, r2
 800c7d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c7d4:	45e1      	cmp	r9, ip
 800c7d6:	f84e 2b04 	str.w	r2, [lr], #4
 800c7da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c7de:	d2de      	bcs.n	800c79e <quorem+0x42>
 800c7e0:	9b00      	ldr	r3, [sp, #0]
 800c7e2:	58eb      	ldr	r3, [r5, r3]
 800c7e4:	b92b      	cbnz	r3, 800c7f2 <quorem+0x96>
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	3b04      	subs	r3, #4
 800c7ea:	429d      	cmp	r5, r3
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	d32f      	bcc.n	800c850 <quorem+0xf4>
 800c7f0:	613c      	str	r4, [r7, #16]
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	f001 f97a 	bl	800daec <__mcmp>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	db25      	blt.n	800c848 <quorem+0xec>
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	2000      	movs	r0, #0
 800c800:	f858 2b04 	ldr.w	r2, [r8], #4
 800c804:	f8d1 c000 	ldr.w	ip, [r1]
 800c808:	fa1f fe82 	uxth.w	lr, r2
 800c80c:	fa1f f38c 	uxth.w	r3, ip
 800c810:	eba3 030e 	sub.w	r3, r3, lr
 800c814:	4403      	add	r3, r0
 800c816:	0c12      	lsrs	r2, r2, #16
 800c818:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c81c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c820:	b29b      	uxth	r3, r3
 800c822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c826:	45c1      	cmp	r9, r8
 800c828:	f841 3b04 	str.w	r3, [r1], #4
 800c82c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c830:	d2e6      	bcs.n	800c800 <quorem+0xa4>
 800c832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c836:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c83a:	b922      	cbnz	r2, 800c846 <quorem+0xea>
 800c83c:	3b04      	subs	r3, #4
 800c83e:	429d      	cmp	r5, r3
 800c840:	461a      	mov	r2, r3
 800c842:	d30b      	bcc.n	800c85c <quorem+0x100>
 800c844:	613c      	str	r4, [r7, #16]
 800c846:	3601      	adds	r6, #1
 800c848:	4630      	mov	r0, r6
 800c84a:	b003      	add	sp, #12
 800c84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c850:	6812      	ldr	r2, [r2, #0]
 800c852:	3b04      	subs	r3, #4
 800c854:	2a00      	cmp	r2, #0
 800c856:	d1cb      	bne.n	800c7f0 <quorem+0x94>
 800c858:	3c01      	subs	r4, #1
 800c85a:	e7c6      	b.n	800c7ea <quorem+0x8e>
 800c85c:	6812      	ldr	r2, [r2, #0]
 800c85e:	3b04      	subs	r3, #4
 800c860:	2a00      	cmp	r2, #0
 800c862:	d1ef      	bne.n	800c844 <quorem+0xe8>
 800c864:	3c01      	subs	r4, #1
 800c866:	e7ea      	b.n	800c83e <quorem+0xe2>
 800c868:	2000      	movs	r0, #0
 800c86a:	e7ee      	b.n	800c84a <quorem+0xee>
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <_dtoa_r>:
 800c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c874:	69c7      	ldr	r7, [r0, #28]
 800c876:	b099      	sub	sp, #100	@ 0x64
 800c878:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c87c:	ec55 4b10 	vmov	r4, r5, d0
 800c880:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c882:	9109      	str	r1, [sp, #36]	@ 0x24
 800c884:	4683      	mov	fp, r0
 800c886:	920e      	str	r2, [sp, #56]	@ 0x38
 800c888:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c88a:	b97f      	cbnz	r7, 800c8ac <_dtoa_r+0x3c>
 800c88c:	2010      	movs	r0, #16
 800c88e:	f000 fdfd 	bl	800d48c <malloc>
 800c892:	4602      	mov	r2, r0
 800c894:	f8cb 001c 	str.w	r0, [fp, #28]
 800c898:	b920      	cbnz	r0, 800c8a4 <_dtoa_r+0x34>
 800c89a:	4ba7      	ldr	r3, [pc, #668]	@ (800cb38 <_dtoa_r+0x2c8>)
 800c89c:	21ef      	movs	r1, #239	@ 0xef
 800c89e:	48a7      	ldr	r0, [pc, #668]	@ (800cb3c <_dtoa_r+0x2cc>)
 800c8a0:	f7ff ff3e 	bl	800c720 <__assert_func>
 800c8a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c8a8:	6007      	str	r7, [r0, #0]
 800c8aa:	60c7      	str	r7, [r0, #12]
 800c8ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8b0:	6819      	ldr	r1, [r3, #0]
 800c8b2:	b159      	cbz	r1, 800c8cc <_dtoa_r+0x5c>
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	604a      	str	r2, [r1, #4]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	4093      	lsls	r3, r2
 800c8bc:	608b      	str	r3, [r1, #8]
 800c8be:	4658      	mov	r0, fp
 800c8c0:	f000 feda 	bl	800d678 <_Bfree>
 800c8c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
 800c8cc:	1e2b      	subs	r3, r5, #0
 800c8ce:	bfb9      	ittee	lt
 800c8d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c8d4:	9303      	strlt	r3, [sp, #12]
 800c8d6:	2300      	movge	r3, #0
 800c8d8:	6033      	strge	r3, [r6, #0]
 800c8da:	9f03      	ldr	r7, [sp, #12]
 800c8dc:	4b98      	ldr	r3, [pc, #608]	@ (800cb40 <_dtoa_r+0x2d0>)
 800c8de:	bfbc      	itt	lt
 800c8e0:	2201      	movlt	r2, #1
 800c8e2:	6032      	strlt	r2, [r6, #0]
 800c8e4:	43bb      	bics	r3, r7
 800c8e6:	d112      	bne.n	800c90e <_dtoa_r+0x9e>
 800c8e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c8ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8f4:	4323      	orrs	r3, r4
 800c8f6:	f000 854d 	beq.w	800d394 <_dtoa_r+0xb24>
 800c8fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cb54 <_dtoa_r+0x2e4>
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 854f 	beq.w	800d3a4 <_dtoa_r+0xb34>
 800c906:	f10a 0303 	add.w	r3, sl, #3
 800c90a:	f000 bd49 	b.w	800d3a0 <_dtoa_r+0xb30>
 800c90e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c912:	2200      	movs	r2, #0
 800c914:	ec51 0b17 	vmov	r0, r1, d7
 800c918:	2300      	movs	r3, #0
 800c91a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c91e:	f7f4 f8eb 	bl	8000af8 <__aeabi_dcmpeq>
 800c922:	4680      	mov	r8, r0
 800c924:	b158      	cbz	r0, 800c93e <_dtoa_r+0xce>
 800c926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c928:	2301      	movs	r3, #1
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c92e:	b113      	cbz	r3, 800c936 <_dtoa_r+0xc6>
 800c930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c932:	4b84      	ldr	r3, [pc, #528]	@ (800cb44 <_dtoa_r+0x2d4>)
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cb58 <_dtoa_r+0x2e8>
 800c93a:	f000 bd33 	b.w	800d3a4 <_dtoa_r+0xb34>
 800c93e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c942:	aa16      	add	r2, sp, #88	@ 0x58
 800c944:	a917      	add	r1, sp, #92	@ 0x5c
 800c946:	4658      	mov	r0, fp
 800c948:	f001 f980 	bl	800dc4c <__d2b>
 800c94c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c950:	4681      	mov	r9, r0
 800c952:	2e00      	cmp	r6, #0
 800c954:	d077      	beq.n	800ca46 <_dtoa_r+0x1d6>
 800c956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c958:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c95c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c964:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c968:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c96c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c970:	4619      	mov	r1, r3
 800c972:	2200      	movs	r2, #0
 800c974:	4b74      	ldr	r3, [pc, #464]	@ (800cb48 <_dtoa_r+0x2d8>)
 800c976:	f7f3 fc9f 	bl	80002b8 <__aeabi_dsub>
 800c97a:	a369      	add	r3, pc, #420	@ (adr r3, 800cb20 <_dtoa_r+0x2b0>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fe52 	bl	8000628 <__aeabi_dmul>
 800c984:	a368      	add	r3, pc, #416	@ (adr r3, 800cb28 <_dtoa_r+0x2b8>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	f7f3 fc97 	bl	80002bc <__adddf3>
 800c98e:	4604      	mov	r4, r0
 800c990:	4630      	mov	r0, r6
 800c992:	460d      	mov	r5, r1
 800c994:	f7f3 fdde 	bl	8000554 <__aeabi_i2d>
 800c998:	a365      	add	r3, pc, #404	@ (adr r3, 800cb30 <_dtoa_r+0x2c0>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 fe43 	bl	8000628 <__aeabi_dmul>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f3 fc87 	bl	80002bc <__adddf3>
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	460d      	mov	r5, r1
 800c9b2:	f7f4 f8e9 	bl	8000b88 <__aeabi_d2iz>
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	f7f4 f8a4 	bl	8000b0c <__aeabi_dcmplt>
 800c9c4:	b140      	cbz	r0, 800c9d8 <_dtoa_r+0x168>
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	f7f3 fdc4 	bl	8000554 <__aeabi_i2d>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	f7f4 f892 	bl	8000af8 <__aeabi_dcmpeq>
 800c9d4:	b900      	cbnz	r0, 800c9d8 <_dtoa_r+0x168>
 800c9d6:	3f01      	subs	r7, #1
 800c9d8:	2f16      	cmp	r7, #22
 800c9da:	d851      	bhi.n	800ca80 <_dtoa_r+0x210>
 800c9dc:	4b5b      	ldr	r3, [pc, #364]	@ (800cb4c <_dtoa_r+0x2dc>)
 800c9de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9ea:	f7f4 f88f 	bl	8000b0c <__aeabi_dcmplt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d048      	beq.n	800ca84 <_dtoa_r+0x214>
 800c9f2:	3f01      	subs	r7, #1
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9fa:	1b9b      	subs	r3, r3, r6
 800c9fc:	1e5a      	subs	r2, r3, #1
 800c9fe:	bf44      	itt	mi
 800ca00:	f1c3 0801 	rsbmi	r8, r3, #1
 800ca04:	2300      	movmi	r3, #0
 800ca06:	9208      	str	r2, [sp, #32]
 800ca08:	bf54      	ite	pl
 800ca0a:	f04f 0800 	movpl.w	r8, #0
 800ca0e:	9308      	strmi	r3, [sp, #32]
 800ca10:	2f00      	cmp	r7, #0
 800ca12:	db39      	blt.n	800ca88 <_dtoa_r+0x218>
 800ca14:	9b08      	ldr	r3, [sp, #32]
 800ca16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ca18:	443b      	add	r3, r7
 800ca1a:	9308      	str	r3, [sp, #32]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca22:	2b09      	cmp	r3, #9
 800ca24:	d864      	bhi.n	800caf0 <_dtoa_r+0x280>
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	bfc4      	itt	gt
 800ca2a:	3b04      	subgt	r3, #4
 800ca2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ca2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca30:	f1a3 0302 	sub.w	r3, r3, #2
 800ca34:	bfcc      	ite	gt
 800ca36:	2400      	movgt	r4, #0
 800ca38:	2401      	movle	r4, #1
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d863      	bhi.n	800cb06 <_dtoa_r+0x296>
 800ca3e:	e8df f003 	tbb	[pc, r3]
 800ca42:	372a      	.short	0x372a
 800ca44:	5535      	.short	0x5535
 800ca46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ca4a:	441e      	add	r6, r3
 800ca4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca50:	2b20      	cmp	r3, #32
 800ca52:	bfc1      	itttt	gt
 800ca54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca58:	409f      	lslgt	r7, r3
 800ca5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ca5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ca62:	bfd6      	itet	le
 800ca64:	f1c3 0320 	rsble	r3, r3, #32
 800ca68:	ea47 0003 	orrgt.w	r0, r7, r3
 800ca6c:	fa04 f003 	lslle.w	r0, r4, r3
 800ca70:	f7f3 fd60 	bl	8000534 <__aeabi_ui2d>
 800ca74:	2201      	movs	r2, #1
 800ca76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ca7a:	3e01      	subs	r6, #1
 800ca7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ca7e:	e777      	b.n	800c970 <_dtoa_r+0x100>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e7b8      	b.n	800c9f6 <_dtoa_r+0x186>
 800ca84:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca86:	e7b7      	b.n	800c9f8 <_dtoa_r+0x188>
 800ca88:	427b      	negs	r3, r7
 800ca8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	eba8 0807 	sub.w	r8, r8, r7
 800ca92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca94:	e7c4      	b.n	800ca20 <_dtoa_r+0x1b0>
 800ca96:	2300      	movs	r3, #0
 800ca98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dc35      	bgt.n	800cb0c <_dtoa_r+0x29c>
 800caa0:	2301      	movs	r3, #1
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	9307      	str	r3, [sp, #28]
 800caa6:	461a      	mov	r2, r3
 800caa8:	920e      	str	r2, [sp, #56]	@ 0x38
 800caaa:	e00b      	b.n	800cac4 <_dtoa_r+0x254>
 800caac:	2301      	movs	r3, #1
 800caae:	e7f3      	b.n	800ca98 <_dtoa_r+0x228>
 800cab0:	2300      	movs	r3, #0
 800cab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab6:	18fb      	adds	r3, r7, r3
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	3301      	adds	r3, #1
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	bfb8      	it	lt
 800cac2:	2301      	movlt	r3, #1
 800cac4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cac8:	2100      	movs	r1, #0
 800caca:	2204      	movs	r2, #4
 800cacc:	f102 0514 	add.w	r5, r2, #20
 800cad0:	429d      	cmp	r5, r3
 800cad2:	d91f      	bls.n	800cb14 <_dtoa_r+0x2a4>
 800cad4:	6041      	str	r1, [r0, #4]
 800cad6:	4658      	mov	r0, fp
 800cad8:	f000 fd8e 	bl	800d5f8 <_Balloc>
 800cadc:	4682      	mov	sl, r0
 800cade:	2800      	cmp	r0, #0
 800cae0:	d13c      	bne.n	800cb5c <_dtoa_r+0x2ec>
 800cae2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb50 <_dtoa_r+0x2e0>)
 800cae4:	4602      	mov	r2, r0
 800cae6:	f240 11af 	movw	r1, #431	@ 0x1af
 800caea:	e6d8      	b.n	800c89e <_dtoa_r+0x2e>
 800caec:	2301      	movs	r3, #1
 800caee:	e7e0      	b.n	800cab2 <_dtoa_r+0x242>
 800caf0:	2401      	movs	r4, #1
 800caf2:	2300      	movs	r3, #0
 800caf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	9307      	str	r3, [sp, #28]
 800cb00:	2200      	movs	r2, #0
 800cb02:	2312      	movs	r3, #18
 800cb04:	e7d0      	b.n	800caa8 <_dtoa_r+0x238>
 800cb06:	2301      	movs	r3, #1
 800cb08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb0a:	e7f5      	b.n	800caf8 <_dtoa_r+0x288>
 800cb0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	9307      	str	r3, [sp, #28]
 800cb12:	e7d7      	b.n	800cac4 <_dtoa_r+0x254>
 800cb14:	3101      	adds	r1, #1
 800cb16:	0052      	lsls	r2, r2, #1
 800cb18:	e7d8      	b.n	800cacc <_dtoa_r+0x25c>
 800cb1a:	bf00      	nop
 800cb1c:	f3af 8000 	nop.w
 800cb20:	636f4361 	.word	0x636f4361
 800cb24:	3fd287a7 	.word	0x3fd287a7
 800cb28:	8b60c8b3 	.word	0x8b60c8b3
 800cb2c:	3fc68a28 	.word	0x3fc68a28
 800cb30:	509f79fb 	.word	0x509f79fb
 800cb34:	3fd34413 	.word	0x3fd34413
 800cb38:	0809ce34 	.word	0x0809ce34
 800cb3c:	0809cf20 	.word	0x0809cf20
 800cb40:	7ff00000 	.word	0x7ff00000
 800cb44:	0809ceb4 	.word	0x0809ceb4
 800cb48:	3ff80000 	.word	0x3ff80000
 800cb4c:	0809d018 	.word	0x0809d018
 800cb50:	0809cf78 	.word	0x0809cf78
 800cb54:	0809cf1c 	.word	0x0809cf1c
 800cb58:	0809ceb3 	.word	0x0809ceb3
 800cb5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb60:	6018      	str	r0, [r3, #0]
 800cb62:	9b07      	ldr	r3, [sp, #28]
 800cb64:	2b0e      	cmp	r3, #14
 800cb66:	f200 80a4 	bhi.w	800ccb2 <_dtoa_r+0x442>
 800cb6a:	2c00      	cmp	r4, #0
 800cb6c:	f000 80a1 	beq.w	800ccb2 <_dtoa_r+0x442>
 800cb70:	2f00      	cmp	r7, #0
 800cb72:	dd33      	ble.n	800cbdc <_dtoa_r+0x36c>
 800cb74:	4bad      	ldr	r3, [pc, #692]	@ (800ce2c <_dtoa_r+0x5bc>)
 800cb76:	f007 020f 	and.w	r2, r7, #15
 800cb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb7e:	ed93 7b00 	vldr	d7, [r3]
 800cb82:	05f8      	lsls	r0, r7, #23
 800cb84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cb8c:	d516      	bpl.n	800cbbc <_dtoa_r+0x34c>
 800cb8e:	4ba8      	ldr	r3, [pc, #672]	@ (800ce30 <_dtoa_r+0x5c0>)
 800cb90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb98:	f7f3 fe70 	bl	800087c <__aeabi_ddiv>
 800cb9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cba0:	f004 040f 	and.w	r4, r4, #15
 800cba4:	2603      	movs	r6, #3
 800cba6:	4da2      	ldr	r5, [pc, #648]	@ (800ce30 <_dtoa_r+0x5c0>)
 800cba8:	b954      	cbnz	r4, 800cbc0 <_dtoa_r+0x350>
 800cbaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbb2:	f7f3 fe63 	bl	800087c <__aeabi_ddiv>
 800cbb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbba:	e028      	b.n	800cc0e <_dtoa_r+0x39e>
 800cbbc:	2602      	movs	r6, #2
 800cbbe:	e7f2      	b.n	800cba6 <_dtoa_r+0x336>
 800cbc0:	07e1      	lsls	r1, r4, #31
 800cbc2:	d508      	bpl.n	800cbd6 <_dtoa_r+0x366>
 800cbc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbcc:	f7f3 fd2c 	bl	8000628 <__aeabi_dmul>
 800cbd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbd4:	3601      	adds	r6, #1
 800cbd6:	1064      	asrs	r4, r4, #1
 800cbd8:	3508      	adds	r5, #8
 800cbda:	e7e5      	b.n	800cba8 <_dtoa_r+0x338>
 800cbdc:	f000 80d2 	beq.w	800cd84 <_dtoa_r+0x514>
 800cbe0:	427c      	negs	r4, r7
 800cbe2:	4b92      	ldr	r3, [pc, #584]	@ (800ce2c <_dtoa_r+0x5bc>)
 800cbe4:	4d92      	ldr	r5, [pc, #584]	@ (800ce30 <_dtoa_r+0x5c0>)
 800cbe6:	f004 020f 	and.w	r2, r4, #15
 800cbea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbf6:	f7f3 fd17 	bl	8000628 <__aeabi_dmul>
 800cbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbfe:	1124      	asrs	r4, r4, #4
 800cc00:	2300      	movs	r3, #0
 800cc02:	2602      	movs	r6, #2
 800cc04:	2c00      	cmp	r4, #0
 800cc06:	f040 80b2 	bne.w	800cd6e <_dtoa_r+0x4fe>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1d3      	bne.n	800cbb6 <_dtoa_r+0x346>
 800cc0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 80b7 	beq.w	800cd88 <_dtoa_r+0x518>
 800cc1a:	4b86      	ldr	r3, [pc, #536]	@ (800ce34 <_dtoa_r+0x5c4>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff73 	bl	8000b0c <__aeabi_dcmplt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	f000 80ae 	beq.w	800cd88 <_dtoa_r+0x518>
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80aa 	beq.w	800cd88 <_dtoa_r+0x518>
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd37      	ble.n	800ccaa <_dtoa_r+0x43a>
 800cc3a:	1e7b      	subs	r3, r7, #1
 800cc3c:	9304      	str	r3, [sp, #16]
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4b7d      	ldr	r3, [pc, #500]	@ (800ce38 <_dtoa_r+0x5c8>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	4629      	mov	r1, r5
 800cc46:	f7f3 fcef 	bl	8000628 <__aeabi_dmul>
 800cc4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc4e:	9c00      	ldr	r4, [sp, #0]
 800cc50:	3601      	adds	r6, #1
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7f3 fc7e 	bl	8000554 <__aeabi_i2d>
 800cc58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc5c:	f7f3 fce4 	bl	8000628 <__aeabi_dmul>
 800cc60:	4b76      	ldr	r3, [pc, #472]	@ (800ce3c <_dtoa_r+0x5cc>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	f7f3 fb2a 	bl	80002bc <__adddf3>
 800cc68:	4605      	mov	r5, r0
 800cc6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	f040 808d 	bne.w	800cd8e <_dtoa_r+0x51e>
 800cc74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc78:	4b71      	ldr	r3, [pc, #452]	@ (800ce40 <_dtoa_r+0x5d0>)
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f7f3 fb1c 	bl	80002b8 <__aeabi_dsub>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc88:	462a      	mov	r2, r5
 800cc8a:	4633      	mov	r3, r6
 800cc8c:	f7f3 ff5c 	bl	8000b48 <__aeabi_dcmpgt>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f040 828b 	bne.w	800d1ac <_dtoa_r+0x93c>
 800cc96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cca0:	f7f3 ff34 	bl	8000b0c <__aeabi_dcmplt>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	f040 8128 	bne.w	800cefa <_dtoa_r+0x68a>
 800ccaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ccae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ccb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f2c0 815a 	blt.w	800cf6e <_dtoa_r+0x6fe>
 800ccba:	2f0e      	cmp	r7, #14
 800ccbc:	f300 8157 	bgt.w	800cf6e <_dtoa_r+0x6fe>
 800ccc0:	4b5a      	ldr	r3, [pc, #360]	@ (800ce2c <_dtoa_r+0x5bc>)
 800ccc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ccc6:	ed93 7b00 	vldr	d7, [r3]
 800ccca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	ed8d 7b00 	vstr	d7, [sp]
 800ccd2:	da03      	bge.n	800ccdc <_dtoa_r+0x46c>
 800ccd4:	9b07      	ldr	r3, [sp, #28]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f340 8101 	ble.w	800cede <_dtoa_r+0x66e>
 800ccdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cce0:	4656      	mov	r6, sl
 800cce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cce6:	4620      	mov	r0, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7f3 fdc7 	bl	800087c <__aeabi_ddiv>
 800ccee:	f7f3 ff4b 	bl	8000b88 <__aeabi_d2iz>
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	f7f3 fc2e 	bl	8000554 <__aeabi_i2d>
 800ccf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccfc:	f7f3 fc94 	bl	8000628 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	4620      	mov	r0, r4
 800cd06:	4629      	mov	r1, r5
 800cd08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd0c:	f7f3 fad4 	bl	80002b8 <__aeabi_dsub>
 800cd10:	f806 4b01 	strb.w	r4, [r6], #1
 800cd14:	9d07      	ldr	r5, [sp, #28]
 800cd16:	eba6 040a 	sub.w	r4, r6, sl
 800cd1a:	42a5      	cmp	r5, r4
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	f040 8117 	bne.w	800cf52 <_dtoa_r+0x6e2>
 800cd24:	f7f3 faca 	bl	80002bc <__adddf3>
 800cd28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	460d      	mov	r5, r1
 800cd30:	f7f3 ff0a 	bl	8000b48 <__aeabi_dcmpgt>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f040 80f9 	bne.w	800cf2c <_dtoa_r+0x6bc>
 800cd3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	4629      	mov	r1, r5
 800cd42:	f7f3 fed9 	bl	8000af8 <__aeabi_dcmpeq>
 800cd46:	b118      	cbz	r0, 800cd50 <_dtoa_r+0x4e0>
 800cd48:	f018 0f01 	tst.w	r8, #1
 800cd4c:	f040 80ee 	bne.w	800cf2c <_dtoa_r+0x6bc>
 800cd50:	4649      	mov	r1, r9
 800cd52:	4658      	mov	r0, fp
 800cd54:	f000 fc90 	bl	800d678 <_Bfree>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	7033      	strb	r3, [r6, #0]
 800cd5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd5e:	3701      	adds	r7, #1
 800cd60:	601f      	str	r7, [r3, #0]
 800cd62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 831d 	beq.w	800d3a4 <_dtoa_r+0xb34>
 800cd6a:	601e      	str	r6, [r3, #0]
 800cd6c:	e31a      	b.n	800d3a4 <_dtoa_r+0xb34>
 800cd6e:	07e2      	lsls	r2, r4, #31
 800cd70:	d505      	bpl.n	800cd7e <_dtoa_r+0x50e>
 800cd72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd76:	f7f3 fc57 	bl	8000628 <__aeabi_dmul>
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	1064      	asrs	r4, r4, #1
 800cd80:	3508      	adds	r5, #8
 800cd82:	e73f      	b.n	800cc04 <_dtoa_r+0x394>
 800cd84:	2602      	movs	r6, #2
 800cd86:	e742      	b.n	800cc0e <_dtoa_r+0x39e>
 800cd88:	9c07      	ldr	r4, [sp, #28]
 800cd8a:	9704      	str	r7, [sp, #16]
 800cd8c:	e761      	b.n	800cc52 <_dtoa_r+0x3e2>
 800cd8e:	4b27      	ldr	r3, [pc, #156]	@ (800ce2c <_dtoa_r+0x5bc>)
 800cd90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd9a:	4454      	add	r4, sl
 800cd9c:	2900      	cmp	r1, #0
 800cd9e:	d053      	beq.n	800ce48 <_dtoa_r+0x5d8>
 800cda0:	4928      	ldr	r1, [pc, #160]	@ (800ce44 <_dtoa_r+0x5d4>)
 800cda2:	2000      	movs	r0, #0
 800cda4:	f7f3 fd6a 	bl	800087c <__aeabi_ddiv>
 800cda8:	4633      	mov	r3, r6
 800cdaa:	462a      	mov	r2, r5
 800cdac:	f7f3 fa84 	bl	80002b8 <__aeabi_dsub>
 800cdb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cdb4:	4656      	mov	r6, sl
 800cdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdba:	f7f3 fee5 	bl	8000b88 <__aeabi_d2iz>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	f7f3 fbc8 	bl	8000554 <__aeabi_i2d>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdcc:	f7f3 fa74 	bl	80002b8 <__aeabi_dsub>
 800cdd0:	3530      	adds	r5, #48	@ 0x30
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdda:	f806 5b01 	strb.w	r5, [r6], #1
 800cdde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cde2:	f7f3 fe93 	bl	8000b0c <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d171      	bne.n	800cece <_dtoa_r+0x65e>
 800cdea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdee:	4911      	ldr	r1, [pc, #68]	@ (800ce34 <_dtoa_r+0x5c4>)
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	f7f3 fa61 	bl	80002b8 <__aeabi_dsub>
 800cdf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdfa:	f7f3 fe87 	bl	8000b0c <__aeabi_dcmplt>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	f040 8095 	bne.w	800cf2e <_dtoa_r+0x6be>
 800ce04:	42a6      	cmp	r6, r4
 800ce06:	f43f af50 	beq.w	800ccaa <_dtoa_r+0x43a>
 800ce0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce38 <_dtoa_r+0x5c8>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	f7f3 fc09 	bl	8000628 <__aeabi_dmul>
 800ce16:	4b08      	ldr	r3, [pc, #32]	@ (800ce38 <_dtoa_r+0x5c8>)
 800ce18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce22:	f7f3 fc01 	bl	8000628 <__aeabi_dmul>
 800ce26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce2a:	e7c4      	b.n	800cdb6 <_dtoa_r+0x546>
 800ce2c:	0809d018 	.word	0x0809d018
 800ce30:	0809cff0 	.word	0x0809cff0
 800ce34:	3ff00000 	.word	0x3ff00000
 800ce38:	40240000 	.word	0x40240000
 800ce3c:	401c0000 	.word	0x401c0000
 800ce40:	40140000 	.word	0x40140000
 800ce44:	3fe00000 	.word	0x3fe00000
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f7f3 fbec 	bl	8000628 <__aeabi_dmul>
 800ce50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce54:	9415      	str	r4, [sp, #84]	@ 0x54
 800ce56:	4656      	mov	r6, sl
 800ce58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce5c:	f7f3 fe94 	bl	8000b88 <__aeabi_d2iz>
 800ce60:	4605      	mov	r5, r0
 800ce62:	f7f3 fb77 	bl	8000554 <__aeabi_i2d>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce6e:	f7f3 fa23 	bl	80002b8 <__aeabi_dsub>
 800ce72:	3530      	adds	r5, #48	@ 0x30
 800ce74:	f806 5b01 	strb.w	r5, [r6], #1
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	42a6      	cmp	r6, r4
 800ce7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce82:	f04f 0200 	mov.w	r2, #0
 800ce86:	d124      	bne.n	800ced2 <_dtoa_r+0x662>
 800ce88:	4bac      	ldr	r3, [pc, #688]	@ (800d13c <_dtoa_r+0x8cc>)
 800ce8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce8e:	f7f3 fa15 	bl	80002bc <__adddf3>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce9a:	f7f3 fe55 	bl	8000b48 <__aeabi_dcmpgt>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d145      	bne.n	800cf2e <_dtoa_r+0x6be>
 800cea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cea6:	49a5      	ldr	r1, [pc, #660]	@ (800d13c <_dtoa_r+0x8cc>)
 800cea8:	2000      	movs	r0, #0
 800ceaa:	f7f3 fa05 	bl	80002b8 <__aeabi_dsub>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceb6:	f7f3 fe29 	bl	8000b0c <__aeabi_dcmplt>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	f43f aef5 	beq.w	800ccaa <_dtoa_r+0x43a>
 800cec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cec2:	1e73      	subs	r3, r6, #1
 800cec4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ceca:	2b30      	cmp	r3, #48	@ 0x30
 800cecc:	d0f8      	beq.n	800cec0 <_dtoa_r+0x650>
 800cece:	9f04      	ldr	r7, [sp, #16]
 800ced0:	e73e      	b.n	800cd50 <_dtoa_r+0x4e0>
 800ced2:	4b9b      	ldr	r3, [pc, #620]	@ (800d140 <_dtoa_r+0x8d0>)
 800ced4:	f7f3 fba8 	bl	8000628 <__aeabi_dmul>
 800ced8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cedc:	e7bc      	b.n	800ce58 <_dtoa_r+0x5e8>
 800cede:	d10c      	bne.n	800cefa <_dtoa_r+0x68a>
 800cee0:	4b98      	ldr	r3, [pc, #608]	@ (800d144 <_dtoa_r+0x8d4>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cee8:	f7f3 fb9e 	bl	8000628 <__aeabi_dmul>
 800ceec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef0:	f7f3 fe20 	bl	8000b34 <__aeabi_dcmpge>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f000 8157 	beq.w	800d1a8 <_dtoa_r+0x938>
 800cefa:	2400      	movs	r4, #0
 800cefc:	4625      	mov	r5, r4
 800cefe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf00:	43db      	mvns	r3, r3
 800cf02:	9304      	str	r3, [sp, #16]
 800cf04:	4656      	mov	r6, sl
 800cf06:	2700      	movs	r7, #0
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4658      	mov	r0, fp
 800cf0c:	f000 fbb4 	bl	800d678 <_Bfree>
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	d0dc      	beq.n	800cece <_dtoa_r+0x65e>
 800cf14:	b12f      	cbz	r7, 800cf22 <_dtoa_r+0x6b2>
 800cf16:	42af      	cmp	r7, r5
 800cf18:	d003      	beq.n	800cf22 <_dtoa_r+0x6b2>
 800cf1a:	4639      	mov	r1, r7
 800cf1c:	4658      	mov	r0, fp
 800cf1e:	f000 fbab 	bl	800d678 <_Bfree>
 800cf22:	4629      	mov	r1, r5
 800cf24:	4658      	mov	r0, fp
 800cf26:	f000 fba7 	bl	800d678 <_Bfree>
 800cf2a:	e7d0      	b.n	800cece <_dtoa_r+0x65e>
 800cf2c:	9704      	str	r7, [sp, #16]
 800cf2e:	4633      	mov	r3, r6
 800cf30:	461e      	mov	r6, r3
 800cf32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf36:	2a39      	cmp	r2, #57	@ 0x39
 800cf38:	d107      	bne.n	800cf4a <_dtoa_r+0x6da>
 800cf3a:	459a      	cmp	sl, r3
 800cf3c:	d1f8      	bne.n	800cf30 <_dtoa_r+0x6c0>
 800cf3e:	9a04      	ldr	r2, [sp, #16]
 800cf40:	3201      	adds	r2, #1
 800cf42:	9204      	str	r2, [sp, #16]
 800cf44:	2230      	movs	r2, #48	@ 0x30
 800cf46:	f88a 2000 	strb.w	r2, [sl]
 800cf4a:	781a      	ldrb	r2, [r3, #0]
 800cf4c:	3201      	adds	r2, #1
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e7bd      	b.n	800cece <_dtoa_r+0x65e>
 800cf52:	4b7b      	ldr	r3, [pc, #492]	@ (800d140 <_dtoa_r+0x8d0>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	f7f3 fb67 	bl	8000628 <__aeabi_dmul>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	f7f3 fdc9 	bl	8000af8 <__aeabi_dcmpeq>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	f43f aebb 	beq.w	800cce2 <_dtoa_r+0x472>
 800cf6c:	e6f0      	b.n	800cd50 <_dtoa_r+0x4e0>
 800cf6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	f000 80db 	beq.w	800d12c <_dtoa_r+0x8bc>
 800cf76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf78:	2a01      	cmp	r2, #1
 800cf7a:	f300 80bf 	bgt.w	800d0fc <_dtoa_r+0x88c>
 800cf7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	f000 80b7 	beq.w	800d0f4 <_dtoa_r+0x884>
 800cf86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cf8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf8c:	4646      	mov	r6, r8
 800cf8e:	9a08      	ldr	r2, [sp, #32]
 800cf90:	2101      	movs	r1, #1
 800cf92:	441a      	add	r2, r3
 800cf94:	4658      	mov	r0, fp
 800cf96:	4498      	add	r8, r3
 800cf98:	9208      	str	r2, [sp, #32]
 800cf9a:	f000 fc21 	bl	800d7e0 <__i2b>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	b15e      	cbz	r6, 800cfba <_dtoa_r+0x74a>
 800cfa2:	9b08      	ldr	r3, [sp, #32]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd08      	ble.n	800cfba <_dtoa_r+0x74a>
 800cfa8:	42b3      	cmp	r3, r6
 800cfaa:	9a08      	ldr	r2, [sp, #32]
 800cfac:	bfa8      	it	ge
 800cfae:	4633      	movge	r3, r6
 800cfb0:	eba8 0803 	sub.w	r8, r8, r3
 800cfb4:	1af6      	subs	r6, r6, r3
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	9308      	str	r3, [sp, #32]
 800cfba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfbc:	b1f3      	cbz	r3, 800cffc <_dtoa_r+0x78c>
 800cfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 80b7 	beq.w	800d134 <_dtoa_r+0x8c4>
 800cfc6:	b18c      	cbz	r4, 800cfec <_dtoa_r+0x77c>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4622      	mov	r2, r4
 800cfcc:	4658      	mov	r0, fp
 800cfce:	f000 fcc7 	bl	800d960 <__pow5mult>
 800cfd2:	464a      	mov	r2, r9
 800cfd4:	4601      	mov	r1, r0
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	4658      	mov	r0, fp
 800cfda:	f000 fc17 	bl	800d80c <__multiply>
 800cfde:	4649      	mov	r1, r9
 800cfe0:	9004      	str	r0, [sp, #16]
 800cfe2:	4658      	mov	r0, fp
 800cfe4:	f000 fb48 	bl	800d678 <_Bfree>
 800cfe8:	9b04      	ldr	r3, [sp, #16]
 800cfea:	4699      	mov	r9, r3
 800cfec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfee:	1b1a      	subs	r2, r3, r4
 800cff0:	d004      	beq.n	800cffc <_dtoa_r+0x78c>
 800cff2:	4649      	mov	r1, r9
 800cff4:	4658      	mov	r0, fp
 800cff6:	f000 fcb3 	bl	800d960 <__pow5mult>
 800cffa:	4681      	mov	r9, r0
 800cffc:	2101      	movs	r1, #1
 800cffe:	4658      	mov	r0, fp
 800d000:	f000 fbee 	bl	800d7e0 <__i2b>
 800d004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d006:	4604      	mov	r4, r0
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 81cf 	beq.w	800d3ac <_dtoa_r+0xb3c>
 800d00e:	461a      	mov	r2, r3
 800d010:	4601      	mov	r1, r0
 800d012:	4658      	mov	r0, fp
 800d014:	f000 fca4 	bl	800d960 <__pow5mult>
 800d018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	4604      	mov	r4, r0
 800d01e:	f300 8095 	bgt.w	800d14c <_dtoa_r+0x8dc>
 800d022:	9b02      	ldr	r3, [sp, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	f040 8087 	bne.w	800d138 <_dtoa_r+0x8c8>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d030:	2b00      	cmp	r3, #0
 800d032:	f040 8089 	bne.w	800d148 <_dtoa_r+0x8d8>
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d03c:	0d1b      	lsrs	r3, r3, #20
 800d03e:	051b      	lsls	r3, r3, #20
 800d040:	b12b      	cbz	r3, 800d04e <_dtoa_r+0x7de>
 800d042:	9b08      	ldr	r3, [sp, #32]
 800d044:	3301      	adds	r3, #1
 800d046:	9308      	str	r3, [sp, #32]
 800d048:	f108 0801 	add.w	r8, r8, #1
 800d04c:	2301      	movs	r3, #1
 800d04e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 81b0 	beq.w	800d3b8 <_dtoa_r+0xb48>
 800d058:	6923      	ldr	r3, [r4, #16]
 800d05a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d05e:	6918      	ldr	r0, [r3, #16]
 800d060:	f000 fb72 	bl	800d748 <__hi0bits>
 800d064:	f1c0 0020 	rsb	r0, r0, #32
 800d068:	9b08      	ldr	r3, [sp, #32]
 800d06a:	4418      	add	r0, r3
 800d06c:	f010 001f 	ands.w	r0, r0, #31
 800d070:	d077      	beq.n	800d162 <_dtoa_r+0x8f2>
 800d072:	f1c0 0320 	rsb	r3, r0, #32
 800d076:	2b04      	cmp	r3, #4
 800d078:	dd6b      	ble.n	800d152 <_dtoa_r+0x8e2>
 800d07a:	9b08      	ldr	r3, [sp, #32]
 800d07c:	f1c0 001c 	rsb	r0, r0, #28
 800d080:	4403      	add	r3, r0
 800d082:	4480      	add	r8, r0
 800d084:	4406      	add	r6, r0
 800d086:	9308      	str	r3, [sp, #32]
 800d088:	f1b8 0f00 	cmp.w	r8, #0
 800d08c:	dd05      	ble.n	800d09a <_dtoa_r+0x82a>
 800d08e:	4649      	mov	r1, r9
 800d090:	4642      	mov	r2, r8
 800d092:	4658      	mov	r0, fp
 800d094:	f000 fcbe 	bl	800da14 <__lshift>
 800d098:	4681      	mov	r9, r0
 800d09a:	9b08      	ldr	r3, [sp, #32]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	dd05      	ble.n	800d0ac <_dtoa_r+0x83c>
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	f000 fcb5 	bl	800da14 <__lshift>
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d059      	beq.n	800d166 <_dtoa_r+0x8f6>
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	f000 fd19 	bl	800daec <__mcmp>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	da53      	bge.n	800d166 <_dtoa_r+0x8f6>
 800d0be:	1e7b      	subs	r3, r7, #1
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	220a      	movs	r2, #10
 800d0c8:	4658      	mov	r0, fp
 800d0ca:	f000 faf7 	bl	800d6bc <__multadd>
 800d0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0d0:	4681      	mov	r9, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 8172 	beq.w	800d3bc <_dtoa_r+0xb4c>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4629      	mov	r1, r5
 800d0dc:	220a      	movs	r2, #10
 800d0de:	4658      	mov	r0, fp
 800d0e0:	f000 faec 	bl	800d6bc <__multadd>
 800d0e4:	9b00      	ldr	r3, [sp, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	dc67      	bgt.n	800d1bc <_dtoa_r+0x94c>
 800d0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	dc41      	bgt.n	800d176 <_dtoa_r+0x906>
 800d0f2:	e063      	b.n	800d1bc <_dtoa_r+0x94c>
 800d0f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d0fa:	e746      	b.n	800cf8a <_dtoa_r+0x71a>
 800d0fc:	9b07      	ldr	r3, [sp, #28]
 800d0fe:	1e5c      	subs	r4, r3, #1
 800d100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d102:	42a3      	cmp	r3, r4
 800d104:	bfbf      	itttt	lt
 800d106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d108:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d10a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d10c:	1ae3      	sublt	r3, r4, r3
 800d10e:	bfb4      	ite	lt
 800d110:	18d2      	addlt	r2, r2, r3
 800d112:	1b1c      	subge	r4, r3, r4
 800d114:	9b07      	ldr	r3, [sp, #28]
 800d116:	bfbc      	itt	lt
 800d118:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d11a:	2400      	movlt	r4, #0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	bfb5      	itete	lt
 800d120:	eba8 0603 	sublt.w	r6, r8, r3
 800d124:	9b07      	ldrge	r3, [sp, #28]
 800d126:	2300      	movlt	r3, #0
 800d128:	4646      	movge	r6, r8
 800d12a:	e730      	b.n	800cf8e <_dtoa_r+0x71e>
 800d12c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d12e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d130:	4646      	mov	r6, r8
 800d132:	e735      	b.n	800cfa0 <_dtoa_r+0x730>
 800d134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d136:	e75c      	b.n	800cff2 <_dtoa_r+0x782>
 800d138:	2300      	movs	r3, #0
 800d13a:	e788      	b.n	800d04e <_dtoa_r+0x7de>
 800d13c:	3fe00000 	.word	0x3fe00000
 800d140:	40240000 	.word	0x40240000
 800d144:	40140000 	.word	0x40140000
 800d148:	9b02      	ldr	r3, [sp, #8]
 800d14a:	e780      	b.n	800d04e <_dtoa_r+0x7de>
 800d14c:	2300      	movs	r3, #0
 800d14e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d150:	e782      	b.n	800d058 <_dtoa_r+0x7e8>
 800d152:	d099      	beq.n	800d088 <_dtoa_r+0x818>
 800d154:	9a08      	ldr	r2, [sp, #32]
 800d156:	331c      	adds	r3, #28
 800d158:	441a      	add	r2, r3
 800d15a:	4498      	add	r8, r3
 800d15c:	441e      	add	r6, r3
 800d15e:	9208      	str	r2, [sp, #32]
 800d160:	e792      	b.n	800d088 <_dtoa_r+0x818>
 800d162:	4603      	mov	r3, r0
 800d164:	e7f6      	b.n	800d154 <_dtoa_r+0x8e4>
 800d166:	9b07      	ldr	r3, [sp, #28]
 800d168:	9704      	str	r7, [sp, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dc20      	bgt.n	800d1b0 <_dtoa_r+0x940>
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d172:	2b02      	cmp	r3, #2
 800d174:	dd1e      	ble.n	800d1b4 <_dtoa_r+0x944>
 800d176:	9b00      	ldr	r3, [sp, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f47f aec0 	bne.w	800cefe <_dtoa_r+0x68e>
 800d17e:	4621      	mov	r1, r4
 800d180:	2205      	movs	r2, #5
 800d182:	4658      	mov	r0, fp
 800d184:	f000 fa9a 	bl	800d6bc <__multadd>
 800d188:	4601      	mov	r1, r0
 800d18a:	4604      	mov	r4, r0
 800d18c:	4648      	mov	r0, r9
 800d18e:	f000 fcad 	bl	800daec <__mcmp>
 800d192:	2800      	cmp	r0, #0
 800d194:	f77f aeb3 	ble.w	800cefe <_dtoa_r+0x68e>
 800d198:	4656      	mov	r6, sl
 800d19a:	2331      	movs	r3, #49	@ 0x31
 800d19c:	f806 3b01 	strb.w	r3, [r6], #1
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	e6ae      	b.n	800cf06 <_dtoa_r+0x696>
 800d1a8:	9c07      	ldr	r4, [sp, #28]
 800d1aa:	9704      	str	r7, [sp, #16]
 800d1ac:	4625      	mov	r5, r4
 800d1ae:	e7f3      	b.n	800d198 <_dtoa_r+0x928>
 800d1b0:	9b07      	ldr	r3, [sp, #28]
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 8104 	beq.w	800d3c4 <_dtoa_r+0xb54>
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	dd05      	ble.n	800d1cc <_dtoa_r+0x95c>
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	4658      	mov	r0, fp
 800d1c6:	f000 fc25 	bl	800da14 <__lshift>
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d05a      	beq.n	800d288 <_dtoa_r+0xa18>
 800d1d2:	6869      	ldr	r1, [r5, #4]
 800d1d4:	4658      	mov	r0, fp
 800d1d6:	f000 fa0f 	bl	800d5f8 <_Balloc>
 800d1da:	4606      	mov	r6, r0
 800d1dc:	b928      	cbnz	r0, 800d1ea <_dtoa_r+0x97a>
 800d1de:	4b84      	ldr	r3, [pc, #528]	@ (800d3f0 <_dtoa_r+0xb80>)
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d1e6:	f7ff bb5a 	b.w	800c89e <_dtoa_r+0x2e>
 800d1ea:	692a      	ldr	r2, [r5, #16]
 800d1ec:	3202      	adds	r2, #2
 800d1ee:	0092      	lsls	r2, r2, #2
 800d1f0:	f105 010c 	add.w	r1, r5, #12
 800d1f4:	300c      	adds	r0, #12
 800d1f6:	f001 f997 	bl	800e528 <memcpy>
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4631      	mov	r1, r6
 800d1fe:	4658      	mov	r0, fp
 800d200:	f000 fc08 	bl	800da14 <__lshift>
 800d204:	f10a 0301 	add.w	r3, sl, #1
 800d208:	9307      	str	r3, [sp, #28]
 800d20a:	9b00      	ldr	r3, [sp, #0]
 800d20c:	4453      	add	r3, sl
 800d20e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d210:	9b02      	ldr	r3, [sp, #8]
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	462f      	mov	r7, r5
 800d218:	930a      	str	r3, [sp, #40]	@ 0x28
 800d21a:	4605      	mov	r5, r0
 800d21c:	9b07      	ldr	r3, [sp, #28]
 800d21e:	4621      	mov	r1, r4
 800d220:	3b01      	subs	r3, #1
 800d222:	4648      	mov	r0, r9
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	f7ff fa99 	bl	800c75c <quorem>
 800d22a:	4639      	mov	r1, r7
 800d22c:	9002      	str	r0, [sp, #8]
 800d22e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d232:	4648      	mov	r0, r9
 800d234:	f000 fc5a 	bl	800daec <__mcmp>
 800d238:	462a      	mov	r2, r5
 800d23a:	9008      	str	r0, [sp, #32]
 800d23c:	4621      	mov	r1, r4
 800d23e:	4658      	mov	r0, fp
 800d240:	f000 fc70 	bl	800db24 <__mdiff>
 800d244:	68c2      	ldr	r2, [r0, #12]
 800d246:	4606      	mov	r6, r0
 800d248:	bb02      	cbnz	r2, 800d28c <_dtoa_r+0xa1c>
 800d24a:	4601      	mov	r1, r0
 800d24c:	4648      	mov	r0, r9
 800d24e:	f000 fc4d 	bl	800daec <__mcmp>
 800d252:	4602      	mov	r2, r0
 800d254:	4631      	mov	r1, r6
 800d256:	4658      	mov	r0, fp
 800d258:	920e      	str	r2, [sp, #56]	@ 0x38
 800d25a:	f000 fa0d 	bl	800d678 <_Bfree>
 800d25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d262:	9e07      	ldr	r6, [sp, #28]
 800d264:	ea43 0102 	orr.w	r1, r3, r2
 800d268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d26a:	4319      	orrs	r1, r3
 800d26c:	d110      	bne.n	800d290 <_dtoa_r+0xa20>
 800d26e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d272:	d029      	beq.n	800d2c8 <_dtoa_r+0xa58>
 800d274:	9b08      	ldr	r3, [sp, #32]
 800d276:	2b00      	cmp	r3, #0
 800d278:	dd02      	ble.n	800d280 <_dtoa_r+0xa10>
 800d27a:	9b02      	ldr	r3, [sp, #8]
 800d27c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d280:	9b00      	ldr	r3, [sp, #0]
 800d282:	f883 8000 	strb.w	r8, [r3]
 800d286:	e63f      	b.n	800cf08 <_dtoa_r+0x698>
 800d288:	4628      	mov	r0, r5
 800d28a:	e7bb      	b.n	800d204 <_dtoa_r+0x994>
 800d28c:	2201      	movs	r2, #1
 800d28e:	e7e1      	b.n	800d254 <_dtoa_r+0x9e4>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	2b00      	cmp	r3, #0
 800d294:	db04      	blt.n	800d2a0 <_dtoa_r+0xa30>
 800d296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d298:	430b      	orrs	r3, r1
 800d29a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d29c:	430b      	orrs	r3, r1
 800d29e:	d120      	bne.n	800d2e2 <_dtoa_r+0xa72>
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	dded      	ble.n	800d280 <_dtoa_r+0xa10>
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	4658      	mov	r0, fp
 800d2aa:	f000 fbb3 	bl	800da14 <__lshift>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	4681      	mov	r9, r0
 800d2b2:	f000 fc1b 	bl	800daec <__mcmp>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	dc03      	bgt.n	800d2c2 <_dtoa_r+0xa52>
 800d2ba:	d1e1      	bne.n	800d280 <_dtoa_r+0xa10>
 800d2bc:	f018 0f01 	tst.w	r8, #1
 800d2c0:	d0de      	beq.n	800d280 <_dtoa_r+0xa10>
 800d2c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2c6:	d1d8      	bne.n	800d27a <_dtoa_r+0xa0a>
 800d2c8:	9a00      	ldr	r2, [sp, #0]
 800d2ca:	2339      	movs	r3, #57	@ 0x39
 800d2cc:	7013      	strb	r3, [r2, #0]
 800d2ce:	4633      	mov	r3, r6
 800d2d0:	461e      	mov	r6, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d2d8:	2a39      	cmp	r2, #57	@ 0x39
 800d2da:	d052      	beq.n	800d382 <_dtoa_r+0xb12>
 800d2dc:	3201      	adds	r2, #1
 800d2de:	701a      	strb	r2, [r3, #0]
 800d2e0:	e612      	b.n	800cf08 <_dtoa_r+0x698>
 800d2e2:	2a00      	cmp	r2, #0
 800d2e4:	dd07      	ble.n	800d2f6 <_dtoa_r+0xa86>
 800d2e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2ea:	d0ed      	beq.n	800d2c8 <_dtoa_r+0xa58>
 800d2ec:	9a00      	ldr	r2, [sp, #0]
 800d2ee:	f108 0301 	add.w	r3, r8, #1
 800d2f2:	7013      	strb	r3, [r2, #0]
 800d2f4:	e608      	b.n	800cf08 <_dtoa_r+0x698>
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	9a07      	ldr	r2, [sp, #28]
 800d2fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d300:	4293      	cmp	r3, r2
 800d302:	d028      	beq.n	800d356 <_dtoa_r+0xae6>
 800d304:	4649      	mov	r1, r9
 800d306:	2300      	movs	r3, #0
 800d308:	220a      	movs	r2, #10
 800d30a:	4658      	mov	r0, fp
 800d30c:	f000 f9d6 	bl	800d6bc <__multadd>
 800d310:	42af      	cmp	r7, r5
 800d312:	4681      	mov	r9, r0
 800d314:	f04f 0300 	mov.w	r3, #0
 800d318:	f04f 020a 	mov.w	r2, #10
 800d31c:	4639      	mov	r1, r7
 800d31e:	4658      	mov	r0, fp
 800d320:	d107      	bne.n	800d332 <_dtoa_r+0xac2>
 800d322:	f000 f9cb 	bl	800d6bc <__multadd>
 800d326:	4607      	mov	r7, r0
 800d328:	4605      	mov	r5, r0
 800d32a:	9b07      	ldr	r3, [sp, #28]
 800d32c:	3301      	adds	r3, #1
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	e774      	b.n	800d21c <_dtoa_r+0x9ac>
 800d332:	f000 f9c3 	bl	800d6bc <__multadd>
 800d336:	4629      	mov	r1, r5
 800d338:	4607      	mov	r7, r0
 800d33a:	2300      	movs	r3, #0
 800d33c:	220a      	movs	r2, #10
 800d33e:	4658      	mov	r0, fp
 800d340:	f000 f9bc 	bl	800d6bc <__multadd>
 800d344:	4605      	mov	r5, r0
 800d346:	e7f0      	b.n	800d32a <_dtoa_r+0xaba>
 800d348:	9b00      	ldr	r3, [sp, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	bfcc      	ite	gt
 800d34e:	461e      	movgt	r6, r3
 800d350:	2601      	movle	r6, #1
 800d352:	4456      	add	r6, sl
 800d354:	2700      	movs	r7, #0
 800d356:	4649      	mov	r1, r9
 800d358:	2201      	movs	r2, #1
 800d35a:	4658      	mov	r0, fp
 800d35c:	f000 fb5a 	bl	800da14 <__lshift>
 800d360:	4621      	mov	r1, r4
 800d362:	4681      	mov	r9, r0
 800d364:	f000 fbc2 	bl	800daec <__mcmp>
 800d368:	2800      	cmp	r0, #0
 800d36a:	dcb0      	bgt.n	800d2ce <_dtoa_r+0xa5e>
 800d36c:	d102      	bne.n	800d374 <_dtoa_r+0xb04>
 800d36e:	f018 0f01 	tst.w	r8, #1
 800d372:	d1ac      	bne.n	800d2ce <_dtoa_r+0xa5e>
 800d374:	4633      	mov	r3, r6
 800d376:	461e      	mov	r6, r3
 800d378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d37c:	2a30      	cmp	r2, #48	@ 0x30
 800d37e:	d0fa      	beq.n	800d376 <_dtoa_r+0xb06>
 800d380:	e5c2      	b.n	800cf08 <_dtoa_r+0x698>
 800d382:	459a      	cmp	sl, r3
 800d384:	d1a4      	bne.n	800d2d0 <_dtoa_r+0xa60>
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	3301      	adds	r3, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	2331      	movs	r3, #49	@ 0x31
 800d38e:	f88a 3000 	strb.w	r3, [sl]
 800d392:	e5b9      	b.n	800cf08 <_dtoa_r+0x698>
 800d394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d3f4 <_dtoa_r+0xb84>
 800d39a:	b11b      	cbz	r3, 800d3a4 <_dtoa_r+0xb34>
 800d39c:	f10a 0308 	add.w	r3, sl, #8
 800d3a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d3a2:	6013      	str	r3, [r2, #0]
 800d3a4:	4650      	mov	r0, sl
 800d3a6:	b019      	add	sp, #100	@ 0x64
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	f77f ae37 	ble.w	800d022 <_dtoa_r+0x7b2>
 800d3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b8:	2001      	movs	r0, #1
 800d3ba:	e655      	b.n	800d068 <_dtoa_r+0x7f8>
 800d3bc:	9b00      	ldr	r3, [sp, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f77f aed6 	ble.w	800d170 <_dtoa_r+0x900>
 800d3c4:	4656      	mov	r6, sl
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4648      	mov	r0, r9
 800d3ca:	f7ff f9c7 	bl	800c75c <quorem>
 800d3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d3d2:	f806 8b01 	strb.w	r8, [r6], #1
 800d3d6:	9b00      	ldr	r3, [sp, #0]
 800d3d8:	eba6 020a 	sub.w	r2, r6, sl
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	ddb3      	ble.n	800d348 <_dtoa_r+0xad8>
 800d3e0:	4649      	mov	r1, r9
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	220a      	movs	r2, #10
 800d3e6:	4658      	mov	r0, fp
 800d3e8:	f000 f968 	bl	800d6bc <__multadd>
 800d3ec:	4681      	mov	r9, r0
 800d3ee:	e7ea      	b.n	800d3c6 <_dtoa_r+0xb56>
 800d3f0:	0809cf78 	.word	0x0809cf78
 800d3f4:	0809cf13 	.word	0x0809cf13

0800d3f8 <_free_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	2900      	cmp	r1, #0
 800d3fe:	d041      	beq.n	800d484 <_free_r+0x8c>
 800d400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d404:	1f0c      	subs	r4, r1, #4
 800d406:	2b00      	cmp	r3, #0
 800d408:	bfb8      	it	lt
 800d40a:	18e4      	addlt	r4, r4, r3
 800d40c:	f000 f8e8 	bl	800d5e0 <__malloc_lock>
 800d410:	4a1d      	ldr	r2, [pc, #116]	@ (800d488 <_free_r+0x90>)
 800d412:	6813      	ldr	r3, [r2, #0]
 800d414:	b933      	cbnz	r3, 800d424 <_free_r+0x2c>
 800d416:	6063      	str	r3, [r4, #4]
 800d418:	6014      	str	r4, [r2, #0]
 800d41a:	4628      	mov	r0, r5
 800d41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d420:	f000 b8e4 	b.w	800d5ec <__malloc_unlock>
 800d424:	42a3      	cmp	r3, r4
 800d426:	d908      	bls.n	800d43a <_free_r+0x42>
 800d428:	6820      	ldr	r0, [r4, #0]
 800d42a:	1821      	adds	r1, r4, r0
 800d42c:	428b      	cmp	r3, r1
 800d42e:	bf01      	itttt	eq
 800d430:	6819      	ldreq	r1, [r3, #0]
 800d432:	685b      	ldreq	r3, [r3, #4]
 800d434:	1809      	addeq	r1, r1, r0
 800d436:	6021      	streq	r1, [r4, #0]
 800d438:	e7ed      	b.n	800d416 <_free_r+0x1e>
 800d43a:	461a      	mov	r2, r3
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	b10b      	cbz	r3, 800d444 <_free_r+0x4c>
 800d440:	42a3      	cmp	r3, r4
 800d442:	d9fa      	bls.n	800d43a <_free_r+0x42>
 800d444:	6811      	ldr	r1, [r2, #0]
 800d446:	1850      	adds	r0, r2, r1
 800d448:	42a0      	cmp	r0, r4
 800d44a:	d10b      	bne.n	800d464 <_free_r+0x6c>
 800d44c:	6820      	ldr	r0, [r4, #0]
 800d44e:	4401      	add	r1, r0
 800d450:	1850      	adds	r0, r2, r1
 800d452:	4283      	cmp	r3, r0
 800d454:	6011      	str	r1, [r2, #0]
 800d456:	d1e0      	bne.n	800d41a <_free_r+0x22>
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	6053      	str	r3, [r2, #4]
 800d45e:	4408      	add	r0, r1
 800d460:	6010      	str	r0, [r2, #0]
 800d462:	e7da      	b.n	800d41a <_free_r+0x22>
 800d464:	d902      	bls.n	800d46c <_free_r+0x74>
 800d466:	230c      	movs	r3, #12
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	e7d6      	b.n	800d41a <_free_r+0x22>
 800d46c:	6820      	ldr	r0, [r4, #0]
 800d46e:	1821      	adds	r1, r4, r0
 800d470:	428b      	cmp	r3, r1
 800d472:	bf04      	itt	eq
 800d474:	6819      	ldreq	r1, [r3, #0]
 800d476:	685b      	ldreq	r3, [r3, #4]
 800d478:	6063      	str	r3, [r4, #4]
 800d47a:	bf04      	itt	eq
 800d47c:	1809      	addeq	r1, r1, r0
 800d47e:	6021      	streq	r1, [r4, #0]
 800d480:	6054      	str	r4, [r2, #4]
 800d482:	e7ca      	b.n	800d41a <_free_r+0x22>
 800d484:	bd38      	pop	{r3, r4, r5, pc}
 800d486:	bf00      	nop
 800d488:	20040acc 	.word	0x20040acc

0800d48c <malloc>:
 800d48c:	4b02      	ldr	r3, [pc, #8]	@ (800d498 <malloc+0xc>)
 800d48e:	4601      	mov	r1, r0
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	f000 b825 	b.w	800d4e0 <_malloc_r>
 800d496:	bf00      	nop
 800d498:	200400c8 	.word	0x200400c8

0800d49c <sbrk_aligned>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	4e0f      	ldr	r6, [pc, #60]	@ (800d4dc <sbrk_aligned+0x40>)
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	6831      	ldr	r1, [r6, #0]
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	b911      	cbnz	r1, 800d4ae <sbrk_aligned+0x12>
 800d4a8:	f001 f82e 	bl	800e508 <_sbrk_r>
 800d4ac:	6030      	str	r0, [r6, #0]
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f001 f829 	bl	800e508 <_sbrk_r>
 800d4b6:	1c43      	adds	r3, r0, #1
 800d4b8:	d103      	bne.n	800d4c2 <sbrk_aligned+0x26>
 800d4ba:	f04f 34ff 	mov.w	r4, #4294967295
 800d4be:	4620      	mov	r0, r4
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	1cc4      	adds	r4, r0, #3
 800d4c4:	f024 0403 	bic.w	r4, r4, #3
 800d4c8:	42a0      	cmp	r0, r4
 800d4ca:	d0f8      	beq.n	800d4be <sbrk_aligned+0x22>
 800d4cc:	1a21      	subs	r1, r4, r0
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f001 f81a 	bl	800e508 <_sbrk_r>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d1f2      	bne.n	800d4be <sbrk_aligned+0x22>
 800d4d8:	e7ef      	b.n	800d4ba <sbrk_aligned+0x1e>
 800d4da:	bf00      	nop
 800d4dc:	20040ac8 	.word	0x20040ac8

0800d4e0 <_malloc_r>:
 800d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	1ccd      	adds	r5, r1, #3
 800d4e6:	f025 0503 	bic.w	r5, r5, #3
 800d4ea:	3508      	adds	r5, #8
 800d4ec:	2d0c      	cmp	r5, #12
 800d4ee:	bf38      	it	cc
 800d4f0:	250c      	movcc	r5, #12
 800d4f2:	2d00      	cmp	r5, #0
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	db01      	blt.n	800d4fc <_malloc_r+0x1c>
 800d4f8:	42a9      	cmp	r1, r5
 800d4fa:	d904      	bls.n	800d506 <_malloc_r+0x26>
 800d4fc:	230c      	movs	r3, #12
 800d4fe:	6033      	str	r3, [r6, #0]
 800d500:	2000      	movs	r0, #0
 800d502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5dc <_malloc_r+0xfc>
 800d50a:	f000 f869 	bl	800d5e0 <__malloc_lock>
 800d50e:	f8d8 3000 	ldr.w	r3, [r8]
 800d512:	461c      	mov	r4, r3
 800d514:	bb44      	cbnz	r4, 800d568 <_malloc_r+0x88>
 800d516:	4629      	mov	r1, r5
 800d518:	4630      	mov	r0, r6
 800d51a:	f7ff ffbf 	bl	800d49c <sbrk_aligned>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	4604      	mov	r4, r0
 800d522:	d158      	bne.n	800d5d6 <_malloc_r+0xf6>
 800d524:	f8d8 4000 	ldr.w	r4, [r8]
 800d528:	4627      	mov	r7, r4
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	d143      	bne.n	800d5b6 <_malloc_r+0xd6>
 800d52e:	2c00      	cmp	r4, #0
 800d530:	d04b      	beq.n	800d5ca <_malloc_r+0xea>
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	4639      	mov	r1, r7
 800d536:	4630      	mov	r0, r6
 800d538:	eb04 0903 	add.w	r9, r4, r3
 800d53c:	f000 ffe4 	bl	800e508 <_sbrk_r>
 800d540:	4581      	cmp	r9, r0
 800d542:	d142      	bne.n	800d5ca <_malloc_r+0xea>
 800d544:	6821      	ldr	r1, [r4, #0]
 800d546:	1a6d      	subs	r5, r5, r1
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ffa6 	bl	800d49c <sbrk_aligned>
 800d550:	3001      	adds	r0, #1
 800d552:	d03a      	beq.n	800d5ca <_malloc_r+0xea>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	442b      	add	r3, r5
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	f8d8 3000 	ldr.w	r3, [r8]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	bb62      	cbnz	r2, 800d5bc <_malloc_r+0xdc>
 800d562:	f8c8 7000 	str.w	r7, [r8]
 800d566:	e00f      	b.n	800d588 <_malloc_r+0xa8>
 800d568:	6822      	ldr	r2, [r4, #0]
 800d56a:	1b52      	subs	r2, r2, r5
 800d56c:	d420      	bmi.n	800d5b0 <_malloc_r+0xd0>
 800d56e:	2a0b      	cmp	r2, #11
 800d570:	d917      	bls.n	800d5a2 <_malloc_r+0xc2>
 800d572:	1961      	adds	r1, r4, r5
 800d574:	42a3      	cmp	r3, r4
 800d576:	6025      	str	r5, [r4, #0]
 800d578:	bf18      	it	ne
 800d57a:	6059      	strne	r1, [r3, #4]
 800d57c:	6863      	ldr	r3, [r4, #4]
 800d57e:	bf08      	it	eq
 800d580:	f8c8 1000 	streq.w	r1, [r8]
 800d584:	5162      	str	r2, [r4, r5]
 800d586:	604b      	str	r3, [r1, #4]
 800d588:	4630      	mov	r0, r6
 800d58a:	f000 f82f 	bl	800d5ec <__malloc_unlock>
 800d58e:	f104 000b 	add.w	r0, r4, #11
 800d592:	1d23      	adds	r3, r4, #4
 800d594:	f020 0007 	bic.w	r0, r0, #7
 800d598:	1ac2      	subs	r2, r0, r3
 800d59a:	bf1c      	itt	ne
 800d59c:	1a1b      	subne	r3, r3, r0
 800d59e:	50a3      	strne	r3, [r4, r2]
 800d5a0:	e7af      	b.n	800d502 <_malloc_r+0x22>
 800d5a2:	6862      	ldr	r2, [r4, #4]
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	bf0c      	ite	eq
 800d5a8:	f8c8 2000 	streq.w	r2, [r8]
 800d5ac:	605a      	strne	r2, [r3, #4]
 800d5ae:	e7eb      	b.n	800d588 <_malloc_r+0xa8>
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	6864      	ldr	r4, [r4, #4]
 800d5b4:	e7ae      	b.n	800d514 <_malloc_r+0x34>
 800d5b6:	463c      	mov	r4, r7
 800d5b8:	687f      	ldr	r7, [r7, #4]
 800d5ba:	e7b6      	b.n	800d52a <_malloc_r+0x4a>
 800d5bc:	461a      	mov	r2, r3
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	d1fb      	bne.n	800d5bc <_malloc_r+0xdc>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	6053      	str	r3, [r2, #4]
 800d5c8:	e7de      	b.n	800d588 <_malloc_r+0xa8>
 800d5ca:	230c      	movs	r3, #12
 800d5cc:	6033      	str	r3, [r6, #0]
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f000 f80c 	bl	800d5ec <__malloc_unlock>
 800d5d4:	e794      	b.n	800d500 <_malloc_r+0x20>
 800d5d6:	6005      	str	r5, [r0, #0]
 800d5d8:	e7d6      	b.n	800d588 <_malloc_r+0xa8>
 800d5da:	bf00      	nop
 800d5dc:	20040acc 	.word	0x20040acc

0800d5e0 <__malloc_lock>:
 800d5e0:	4801      	ldr	r0, [pc, #4]	@ (800d5e8 <__malloc_lock+0x8>)
 800d5e2:	f7ff b89a 	b.w	800c71a <__retarget_lock_acquire_recursive>
 800d5e6:	bf00      	nop
 800d5e8:	20040ac4 	.word	0x20040ac4

0800d5ec <__malloc_unlock>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	@ (800d5f4 <__malloc_unlock+0x8>)
 800d5ee:	f7ff b895 	b.w	800c71c <__retarget_lock_release_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	20040ac4 	.word	0x20040ac4

0800d5f8 <_Balloc>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	69c6      	ldr	r6, [r0, #28]
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	460d      	mov	r5, r1
 800d600:	b976      	cbnz	r6, 800d620 <_Balloc+0x28>
 800d602:	2010      	movs	r0, #16
 800d604:	f7ff ff42 	bl	800d48c <malloc>
 800d608:	4602      	mov	r2, r0
 800d60a:	61e0      	str	r0, [r4, #28]
 800d60c:	b920      	cbnz	r0, 800d618 <_Balloc+0x20>
 800d60e:	4b18      	ldr	r3, [pc, #96]	@ (800d670 <_Balloc+0x78>)
 800d610:	4818      	ldr	r0, [pc, #96]	@ (800d674 <_Balloc+0x7c>)
 800d612:	216b      	movs	r1, #107	@ 0x6b
 800d614:	f7ff f884 	bl	800c720 <__assert_func>
 800d618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d61c:	6006      	str	r6, [r0, #0]
 800d61e:	60c6      	str	r6, [r0, #12]
 800d620:	69e6      	ldr	r6, [r4, #28]
 800d622:	68f3      	ldr	r3, [r6, #12]
 800d624:	b183      	cbz	r3, 800d648 <_Balloc+0x50>
 800d626:	69e3      	ldr	r3, [r4, #28]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d62e:	b9b8      	cbnz	r0, 800d660 <_Balloc+0x68>
 800d630:	2101      	movs	r1, #1
 800d632:	fa01 f605 	lsl.w	r6, r1, r5
 800d636:	1d72      	adds	r2, r6, #5
 800d638:	0092      	lsls	r2, r2, #2
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 ff89 	bl	800e552 <_calloc_r>
 800d640:	b160      	cbz	r0, 800d65c <_Balloc+0x64>
 800d642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d646:	e00e      	b.n	800d666 <_Balloc+0x6e>
 800d648:	2221      	movs	r2, #33	@ 0x21
 800d64a:	2104      	movs	r1, #4
 800d64c:	4620      	mov	r0, r4
 800d64e:	f000 ff80 	bl	800e552 <_calloc_r>
 800d652:	69e3      	ldr	r3, [r4, #28]
 800d654:	60f0      	str	r0, [r6, #12]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1e4      	bne.n	800d626 <_Balloc+0x2e>
 800d65c:	2000      	movs	r0, #0
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	6802      	ldr	r2, [r0, #0]
 800d662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d666:	2300      	movs	r3, #0
 800d668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d66c:	e7f7      	b.n	800d65e <_Balloc+0x66>
 800d66e:	bf00      	nop
 800d670:	0809ce34 	.word	0x0809ce34
 800d674:	0809cf89 	.word	0x0809cf89

0800d678 <_Bfree>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	69c6      	ldr	r6, [r0, #28]
 800d67c:	4605      	mov	r5, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	b976      	cbnz	r6, 800d6a0 <_Bfree+0x28>
 800d682:	2010      	movs	r0, #16
 800d684:	f7ff ff02 	bl	800d48c <malloc>
 800d688:	4602      	mov	r2, r0
 800d68a:	61e8      	str	r0, [r5, #28]
 800d68c:	b920      	cbnz	r0, 800d698 <_Bfree+0x20>
 800d68e:	4b09      	ldr	r3, [pc, #36]	@ (800d6b4 <_Bfree+0x3c>)
 800d690:	4809      	ldr	r0, [pc, #36]	@ (800d6b8 <_Bfree+0x40>)
 800d692:	218f      	movs	r1, #143	@ 0x8f
 800d694:	f7ff f844 	bl	800c720 <__assert_func>
 800d698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d69c:	6006      	str	r6, [r0, #0]
 800d69e:	60c6      	str	r6, [r0, #12]
 800d6a0:	b13c      	cbz	r4, 800d6b2 <_Bfree+0x3a>
 800d6a2:	69eb      	ldr	r3, [r5, #28]
 800d6a4:	6862      	ldr	r2, [r4, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6ac:	6021      	str	r1, [r4, #0]
 800d6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	0809ce34 	.word	0x0809ce34
 800d6b8:	0809cf89 	.word	0x0809cf89

0800d6bc <__multadd>:
 800d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	690d      	ldr	r5, [r1, #16]
 800d6c2:	4607      	mov	r7, r0
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	461e      	mov	r6, r3
 800d6c8:	f101 0c14 	add.w	ip, r1, #20
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	f8dc 3000 	ldr.w	r3, [ip]
 800d6d2:	b299      	uxth	r1, r3
 800d6d4:	fb02 6101 	mla	r1, r2, r1, r6
 800d6d8:	0c1e      	lsrs	r6, r3, #16
 800d6da:	0c0b      	lsrs	r3, r1, #16
 800d6dc:	fb02 3306 	mla	r3, r2, r6, r3
 800d6e0:	b289      	uxth	r1, r1
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6e8:	4285      	cmp	r5, r0
 800d6ea:	f84c 1b04 	str.w	r1, [ip], #4
 800d6ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6f2:	dcec      	bgt.n	800d6ce <__multadd+0x12>
 800d6f4:	b30e      	cbz	r6, 800d73a <__multadd+0x7e>
 800d6f6:	68a3      	ldr	r3, [r4, #8]
 800d6f8:	42ab      	cmp	r3, r5
 800d6fa:	dc19      	bgt.n	800d730 <__multadd+0x74>
 800d6fc:	6861      	ldr	r1, [r4, #4]
 800d6fe:	4638      	mov	r0, r7
 800d700:	3101      	adds	r1, #1
 800d702:	f7ff ff79 	bl	800d5f8 <_Balloc>
 800d706:	4680      	mov	r8, r0
 800d708:	b928      	cbnz	r0, 800d716 <__multadd+0x5a>
 800d70a:	4602      	mov	r2, r0
 800d70c:	4b0c      	ldr	r3, [pc, #48]	@ (800d740 <__multadd+0x84>)
 800d70e:	480d      	ldr	r0, [pc, #52]	@ (800d744 <__multadd+0x88>)
 800d710:	21ba      	movs	r1, #186	@ 0xba
 800d712:	f7ff f805 	bl	800c720 <__assert_func>
 800d716:	6922      	ldr	r2, [r4, #16]
 800d718:	3202      	adds	r2, #2
 800d71a:	f104 010c 	add.w	r1, r4, #12
 800d71e:	0092      	lsls	r2, r2, #2
 800d720:	300c      	adds	r0, #12
 800d722:	f000 ff01 	bl	800e528 <memcpy>
 800d726:	4621      	mov	r1, r4
 800d728:	4638      	mov	r0, r7
 800d72a:	f7ff ffa5 	bl	800d678 <_Bfree>
 800d72e:	4644      	mov	r4, r8
 800d730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d734:	3501      	adds	r5, #1
 800d736:	615e      	str	r6, [r3, #20]
 800d738:	6125      	str	r5, [r4, #16]
 800d73a:	4620      	mov	r0, r4
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d740:	0809cf78 	.word	0x0809cf78
 800d744:	0809cf89 	.word	0x0809cf89

0800d748 <__hi0bits>:
 800d748:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d74c:	4603      	mov	r3, r0
 800d74e:	bf36      	itet	cc
 800d750:	0403      	lslcc	r3, r0, #16
 800d752:	2000      	movcs	r0, #0
 800d754:	2010      	movcc	r0, #16
 800d756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d75a:	bf3c      	itt	cc
 800d75c:	021b      	lslcc	r3, r3, #8
 800d75e:	3008      	addcc	r0, #8
 800d760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d764:	bf3c      	itt	cc
 800d766:	011b      	lslcc	r3, r3, #4
 800d768:	3004      	addcc	r0, #4
 800d76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d76e:	bf3c      	itt	cc
 800d770:	009b      	lslcc	r3, r3, #2
 800d772:	3002      	addcc	r0, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	db05      	blt.n	800d784 <__hi0bits+0x3c>
 800d778:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d77c:	f100 0001 	add.w	r0, r0, #1
 800d780:	bf08      	it	eq
 800d782:	2020      	moveq	r0, #32
 800d784:	4770      	bx	lr

0800d786 <__lo0bits>:
 800d786:	6803      	ldr	r3, [r0, #0]
 800d788:	4602      	mov	r2, r0
 800d78a:	f013 0007 	ands.w	r0, r3, #7
 800d78e:	d00b      	beq.n	800d7a8 <__lo0bits+0x22>
 800d790:	07d9      	lsls	r1, r3, #31
 800d792:	d421      	bmi.n	800d7d8 <__lo0bits+0x52>
 800d794:	0798      	lsls	r0, r3, #30
 800d796:	bf49      	itett	mi
 800d798:	085b      	lsrmi	r3, r3, #1
 800d79a:	089b      	lsrpl	r3, r3, #2
 800d79c:	2001      	movmi	r0, #1
 800d79e:	6013      	strmi	r3, [r2, #0]
 800d7a0:	bf5c      	itt	pl
 800d7a2:	6013      	strpl	r3, [r2, #0]
 800d7a4:	2002      	movpl	r0, #2
 800d7a6:	4770      	bx	lr
 800d7a8:	b299      	uxth	r1, r3
 800d7aa:	b909      	cbnz	r1, 800d7b0 <__lo0bits+0x2a>
 800d7ac:	0c1b      	lsrs	r3, r3, #16
 800d7ae:	2010      	movs	r0, #16
 800d7b0:	b2d9      	uxtb	r1, r3
 800d7b2:	b909      	cbnz	r1, 800d7b8 <__lo0bits+0x32>
 800d7b4:	3008      	adds	r0, #8
 800d7b6:	0a1b      	lsrs	r3, r3, #8
 800d7b8:	0719      	lsls	r1, r3, #28
 800d7ba:	bf04      	itt	eq
 800d7bc:	091b      	lsreq	r3, r3, #4
 800d7be:	3004      	addeq	r0, #4
 800d7c0:	0799      	lsls	r1, r3, #30
 800d7c2:	bf04      	itt	eq
 800d7c4:	089b      	lsreq	r3, r3, #2
 800d7c6:	3002      	addeq	r0, #2
 800d7c8:	07d9      	lsls	r1, r3, #31
 800d7ca:	d403      	bmi.n	800d7d4 <__lo0bits+0x4e>
 800d7cc:	085b      	lsrs	r3, r3, #1
 800d7ce:	f100 0001 	add.w	r0, r0, #1
 800d7d2:	d003      	beq.n	800d7dc <__lo0bits+0x56>
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	4770      	bx	lr
 800d7d8:	2000      	movs	r0, #0
 800d7da:	4770      	bx	lr
 800d7dc:	2020      	movs	r0, #32
 800d7de:	4770      	bx	lr

0800d7e0 <__i2b>:
 800d7e0:	b510      	push	{r4, lr}
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	f7ff ff07 	bl	800d5f8 <_Balloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	b928      	cbnz	r0, 800d7fa <__i2b+0x1a>
 800d7ee:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <__i2b+0x24>)
 800d7f0:	4805      	ldr	r0, [pc, #20]	@ (800d808 <__i2b+0x28>)
 800d7f2:	f240 1145 	movw	r1, #325	@ 0x145
 800d7f6:	f7fe ff93 	bl	800c720 <__assert_func>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	6144      	str	r4, [r0, #20]
 800d7fe:	6103      	str	r3, [r0, #16]
 800d800:	bd10      	pop	{r4, pc}
 800d802:	bf00      	nop
 800d804:	0809cf78 	.word	0x0809cf78
 800d808:	0809cf89 	.word	0x0809cf89

0800d80c <__multiply>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	4614      	mov	r4, r2
 800d812:	690a      	ldr	r2, [r1, #16]
 800d814:	6923      	ldr	r3, [r4, #16]
 800d816:	429a      	cmp	r2, r3
 800d818:	bfa8      	it	ge
 800d81a:	4623      	movge	r3, r4
 800d81c:	460f      	mov	r7, r1
 800d81e:	bfa4      	itt	ge
 800d820:	460c      	movge	r4, r1
 800d822:	461f      	movge	r7, r3
 800d824:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d828:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d82c:	68a3      	ldr	r3, [r4, #8]
 800d82e:	6861      	ldr	r1, [r4, #4]
 800d830:	eb0a 0609 	add.w	r6, sl, r9
 800d834:	42b3      	cmp	r3, r6
 800d836:	b085      	sub	sp, #20
 800d838:	bfb8      	it	lt
 800d83a:	3101      	addlt	r1, #1
 800d83c:	f7ff fedc 	bl	800d5f8 <_Balloc>
 800d840:	b930      	cbnz	r0, 800d850 <__multiply+0x44>
 800d842:	4602      	mov	r2, r0
 800d844:	4b44      	ldr	r3, [pc, #272]	@ (800d958 <__multiply+0x14c>)
 800d846:	4845      	ldr	r0, [pc, #276]	@ (800d95c <__multiply+0x150>)
 800d848:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d84c:	f7fe ff68 	bl	800c720 <__assert_func>
 800d850:	f100 0514 	add.w	r5, r0, #20
 800d854:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d858:	462b      	mov	r3, r5
 800d85a:	2200      	movs	r2, #0
 800d85c:	4543      	cmp	r3, r8
 800d85e:	d321      	bcc.n	800d8a4 <__multiply+0x98>
 800d860:	f107 0114 	add.w	r1, r7, #20
 800d864:	f104 0214 	add.w	r2, r4, #20
 800d868:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d86c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	1b13      	subs	r3, r2, r4
 800d874:	3b15      	subs	r3, #21
 800d876:	f023 0303 	bic.w	r3, r3, #3
 800d87a:	3304      	adds	r3, #4
 800d87c:	f104 0715 	add.w	r7, r4, #21
 800d880:	42ba      	cmp	r2, r7
 800d882:	bf38      	it	cc
 800d884:	2304      	movcc	r3, #4
 800d886:	9301      	str	r3, [sp, #4]
 800d888:	9b02      	ldr	r3, [sp, #8]
 800d88a:	9103      	str	r1, [sp, #12]
 800d88c:	428b      	cmp	r3, r1
 800d88e:	d80c      	bhi.n	800d8aa <__multiply+0x9e>
 800d890:	2e00      	cmp	r6, #0
 800d892:	dd03      	ble.n	800d89c <__multiply+0x90>
 800d894:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d05b      	beq.n	800d954 <__multiply+0x148>
 800d89c:	6106      	str	r6, [r0, #16]
 800d89e:	b005      	add	sp, #20
 800d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a4:	f843 2b04 	str.w	r2, [r3], #4
 800d8a8:	e7d8      	b.n	800d85c <__multiply+0x50>
 800d8aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8ae:	f1ba 0f00 	cmp.w	sl, #0
 800d8b2:	d024      	beq.n	800d8fe <__multiply+0xf2>
 800d8b4:	f104 0e14 	add.w	lr, r4, #20
 800d8b8:	46a9      	mov	r9, r5
 800d8ba:	f04f 0c00 	mov.w	ip, #0
 800d8be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8c2:	f8d9 3000 	ldr.w	r3, [r9]
 800d8c6:	fa1f fb87 	uxth.w	fp, r7
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d8d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d8d4:	f8d9 7000 	ldr.w	r7, [r9]
 800d8d8:	4463      	add	r3, ip
 800d8da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8de:	fb0a c70b 	mla	r7, sl, fp, ip
 800d8e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8ec:	4572      	cmp	r2, lr
 800d8ee:	f849 3b04 	str.w	r3, [r9], #4
 800d8f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8f6:	d8e2      	bhi.n	800d8be <__multiply+0xb2>
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	f845 c003 	str.w	ip, [r5, r3]
 800d8fe:	9b03      	ldr	r3, [sp, #12]
 800d900:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d904:	3104      	adds	r1, #4
 800d906:	f1b9 0f00 	cmp.w	r9, #0
 800d90a:	d021      	beq.n	800d950 <__multiply+0x144>
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	f104 0c14 	add.w	ip, r4, #20
 800d912:	46ae      	mov	lr, r5
 800d914:	f04f 0a00 	mov.w	sl, #0
 800d918:	f8bc b000 	ldrh.w	fp, [ip]
 800d91c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d920:	fb09 770b 	mla	r7, r9, fp, r7
 800d924:	4457      	add	r7, sl
 800d926:	b29b      	uxth	r3, r3
 800d928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d92c:	f84e 3b04 	str.w	r3, [lr], #4
 800d930:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d938:	f8be 3000 	ldrh.w	r3, [lr]
 800d93c:	fb09 330a 	mla	r3, r9, sl, r3
 800d940:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d944:	4562      	cmp	r2, ip
 800d946:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d94a:	d8e5      	bhi.n	800d918 <__multiply+0x10c>
 800d94c:	9f01      	ldr	r7, [sp, #4]
 800d94e:	51eb      	str	r3, [r5, r7]
 800d950:	3504      	adds	r5, #4
 800d952:	e799      	b.n	800d888 <__multiply+0x7c>
 800d954:	3e01      	subs	r6, #1
 800d956:	e79b      	b.n	800d890 <__multiply+0x84>
 800d958:	0809cf78 	.word	0x0809cf78
 800d95c:	0809cf89 	.word	0x0809cf89

0800d960 <__pow5mult>:
 800d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d964:	4615      	mov	r5, r2
 800d966:	f012 0203 	ands.w	r2, r2, #3
 800d96a:	4607      	mov	r7, r0
 800d96c:	460e      	mov	r6, r1
 800d96e:	d007      	beq.n	800d980 <__pow5mult+0x20>
 800d970:	4c25      	ldr	r4, [pc, #148]	@ (800da08 <__pow5mult+0xa8>)
 800d972:	3a01      	subs	r2, #1
 800d974:	2300      	movs	r3, #0
 800d976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d97a:	f7ff fe9f 	bl	800d6bc <__multadd>
 800d97e:	4606      	mov	r6, r0
 800d980:	10ad      	asrs	r5, r5, #2
 800d982:	d03d      	beq.n	800da00 <__pow5mult+0xa0>
 800d984:	69fc      	ldr	r4, [r7, #28]
 800d986:	b97c      	cbnz	r4, 800d9a8 <__pow5mult+0x48>
 800d988:	2010      	movs	r0, #16
 800d98a:	f7ff fd7f 	bl	800d48c <malloc>
 800d98e:	4602      	mov	r2, r0
 800d990:	61f8      	str	r0, [r7, #28]
 800d992:	b928      	cbnz	r0, 800d9a0 <__pow5mult+0x40>
 800d994:	4b1d      	ldr	r3, [pc, #116]	@ (800da0c <__pow5mult+0xac>)
 800d996:	481e      	ldr	r0, [pc, #120]	@ (800da10 <__pow5mult+0xb0>)
 800d998:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d99c:	f7fe fec0 	bl	800c720 <__assert_func>
 800d9a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9a4:	6004      	str	r4, [r0, #0]
 800d9a6:	60c4      	str	r4, [r0, #12]
 800d9a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9b0:	b94c      	cbnz	r4, 800d9c6 <__pow5mult+0x66>
 800d9b2:	f240 2171 	movw	r1, #625	@ 0x271
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f7ff ff12 	bl	800d7e0 <__i2b>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	6003      	str	r3, [r0, #0]
 800d9c6:	f04f 0900 	mov.w	r9, #0
 800d9ca:	07eb      	lsls	r3, r5, #31
 800d9cc:	d50a      	bpl.n	800d9e4 <__pow5mult+0x84>
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	4638      	mov	r0, r7
 800d9d4:	f7ff ff1a 	bl	800d80c <__multiply>
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4680      	mov	r8, r0
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff fe4b 	bl	800d678 <_Bfree>
 800d9e2:	4646      	mov	r6, r8
 800d9e4:	106d      	asrs	r5, r5, #1
 800d9e6:	d00b      	beq.n	800da00 <__pow5mult+0xa0>
 800d9e8:	6820      	ldr	r0, [r4, #0]
 800d9ea:	b938      	cbnz	r0, 800d9fc <__pow5mult+0x9c>
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	4638      	mov	r0, r7
 800d9f2:	f7ff ff0b 	bl	800d80c <__multiply>
 800d9f6:	6020      	str	r0, [r4, #0]
 800d9f8:	f8c0 9000 	str.w	r9, [r0]
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	e7e4      	b.n	800d9ca <__pow5mult+0x6a>
 800da00:	4630      	mov	r0, r6
 800da02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da06:	bf00      	nop
 800da08:	0809cfe4 	.word	0x0809cfe4
 800da0c:	0809ce34 	.word	0x0809ce34
 800da10:	0809cf89 	.word	0x0809cf89

0800da14 <__lshift>:
 800da14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da18:	460c      	mov	r4, r1
 800da1a:	6849      	ldr	r1, [r1, #4]
 800da1c:	6923      	ldr	r3, [r4, #16]
 800da1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	4607      	mov	r7, r0
 800da26:	4691      	mov	r9, r2
 800da28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da2c:	f108 0601 	add.w	r6, r8, #1
 800da30:	42b3      	cmp	r3, r6
 800da32:	db0b      	blt.n	800da4c <__lshift+0x38>
 800da34:	4638      	mov	r0, r7
 800da36:	f7ff fddf 	bl	800d5f8 <_Balloc>
 800da3a:	4605      	mov	r5, r0
 800da3c:	b948      	cbnz	r0, 800da52 <__lshift+0x3e>
 800da3e:	4602      	mov	r2, r0
 800da40:	4b28      	ldr	r3, [pc, #160]	@ (800dae4 <__lshift+0xd0>)
 800da42:	4829      	ldr	r0, [pc, #164]	@ (800dae8 <__lshift+0xd4>)
 800da44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da48:	f7fe fe6a 	bl	800c720 <__assert_func>
 800da4c:	3101      	adds	r1, #1
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	e7ee      	b.n	800da30 <__lshift+0x1c>
 800da52:	2300      	movs	r3, #0
 800da54:	f100 0114 	add.w	r1, r0, #20
 800da58:	f100 0210 	add.w	r2, r0, #16
 800da5c:	4618      	mov	r0, r3
 800da5e:	4553      	cmp	r3, sl
 800da60:	db33      	blt.n	800daca <__lshift+0xb6>
 800da62:	6920      	ldr	r0, [r4, #16]
 800da64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da68:	f104 0314 	add.w	r3, r4, #20
 800da6c:	f019 091f 	ands.w	r9, r9, #31
 800da70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da78:	d02b      	beq.n	800dad2 <__lshift+0xbe>
 800da7a:	f1c9 0e20 	rsb	lr, r9, #32
 800da7e:	468a      	mov	sl, r1
 800da80:	2200      	movs	r2, #0
 800da82:	6818      	ldr	r0, [r3, #0]
 800da84:	fa00 f009 	lsl.w	r0, r0, r9
 800da88:	4310      	orrs	r0, r2
 800da8a:	f84a 0b04 	str.w	r0, [sl], #4
 800da8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da92:	459c      	cmp	ip, r3
 800da94:	fa22 f20e 	lsr.w	r2, r2, lr
 800da98:	d8f3      	bhi.n	800da82 <__lshift+0x6e>
 800da9a:	ebac 0304 	sub.w	r3, ip, r4
 800da9e:	3b15      	subs	r3, #21
 800daa0:	f023 0303 	bic.w	r3, r3, #3
 800daa4:	3304      	adds	r3, #4
 800daa6:	f104 0015 	add.w	r0, r4, #21
 800daaa:	4584      	cmp	ip, r0
 800daac:	bf38      	it	cc
 800daae:	2304      	movcc	r3, #4
 800dab0:	50ca      	str	r2, [r1, r3]
 800dab2:	b10a      	cbz	r2, 800dab8 <__lshift+0xa4>
 800dab4:	f108 0602 	add.w	r6, r8, #2
 800dab8:	3e01      	subs	r6, #1
 800daba:	4638      	mov	r0, r7
 800dabc:	612e      	str	r6, [r5, #16]
 800dabe:	4621      	mov	r1, r4
 800dac0:	f7ff fdda 	bl	800d678 <_Bfree>
 800dac4:	4628      	mov	r0, r5
 800dac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daca:	f842 0f04 	str.w	r0, [r2, #4]!
 800dace:	3301      	adds	r3, #1
 800dad0:	e7c5      	b.n	800da5e <__lshift+0x4a>
 800dad2:	3904      	subs	r1, #4
 800dad4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dadc:	459c      	cmp	ip, r3
 800dade:	d8f9      	bhi.n	800dad4 <__lshift+0xc0>
 800dae0:	e7ea      	b.n	800dab8 <__lshift+0xa4>
 800dae2:	bf00      	nop
 800dae4:	0809cf78 	.word	0x0809cf78
 800dae8:	0809cf89 	.word	0x0809cf89

0800daec <__mcmp>:
 800daec:	690a      	ldr	r2, [r1, #16]
 800daee:	4603      	mov	r3, r0
 800daf0:	6900      	ldr	r0, [r0, #16]
 800daf2:	1a80      	subs	r0, r0, r2
 800daf4:	b530      	push	{r4, r5, lr}
 800daf6:	d10e      	bne.n	800db16 <__mcmp+0x2a>
 800daf8:	3314      	adds	r3, #20
 800dafa:	3114      	adds	r1, #20
 800dafc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db0c:	4295      	cmp	r5, r2
 800db0e:	d003      	beq.n	800db18 <__mcmp+0x2c>
 800db10:	d205      	bcs.n	800db1e <__mcmp+0x32>
 800db12:	f04f 30ff 	mov.w	r0, #4294967295
 800db16:	bd30      	pop	{r4, r5, pc}
 800db18:	42a3      	cmp	r3, r4
 800db1a:	d3f3      	bcc.n	800db04 <__mcmp+0x18>
 800db1c:	e7fb      	b.n	800db16 <__mcmp+0x2a>
 800db1e:	2001      	movs	r0, #1
 800db20:	e7f9      	b.n	800db16 <__mcmp+0x2a>
	...

0800db24 <__mdiff>:
 800db24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	4689      	mov	r9, r1
 800db2a:	4606      	mov	r6, r0
 800db2c:	4611      	mov	r1, r2
 800db2e:	4648      	mov	r0, r9
 800db30:	4614      	mov	r4, r2
 800db32:	f7ff ffdb 	bl	800daec <__mcmp>
 800db36:	1e05      	subs	r5, r0, #0
 800db38:	d112      	bne.n	800db60 <__mdiff+0x3c>
 800db3a:	4629      	mov	r1, r5
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff fd5b 	bl	800d5f8 <_Balloc>
 800db42:	4602      	mov	r2, r0
 800db44:	b928      	cbnz	r0, 800db52 <__mdiff+0x2e>
 800db46:	4b3f      	ldr	r3, [pc, #252]	@ (800dc44 <__mdiff+0x120>)
 800db48:	f240 2137 	movw	r1, #567	@ 0x237
 800db4c:	483e      	ldr	r0, [pc, #248]	@ (800dc48 <__mdiff+0x124>)
 800db4e:	f7fe fde7 	bl	800c720 <__assert_func>
 800db52:	2301      	movs	r3, #1
 800db54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db58:	4610      	mov	r0, r2
 800db5a:	b003      	add	sp, #12
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db60:	bfbc      	itt	lt
 800db62:	464b      	movlt	r3, r9
 800db64:	46a1      	movlt	r9, r4
 800db66:	4630      	mov	r0, r6
 800db68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db6c:	bfba      	itte	lt
 800db6e:	461c      	movlt	r4, r3
 800db70:	2501      	movlt	r5, #1
 800db72:	2500      	movge	r5, #0
 800db74:	f7ff fd40 	bl	800d5f8 <_Balloc>
 800db78:	4602      	mov	r2, r0
 800db7a:	b918      	cbnz	r0, 800db84 <__mdiff+0x60>
 800db7c:	4b31      	ldr	r3, [pc, #196]	@ (800dc44 <__mdiff+0x120>)
 800db7e:	f240 2145 	movw	r1, #581	@ 0x245
 800db82:	e7e3      	b.n	800db4c <__mdiff+0x28>
 800db84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db88:	6926      	ldr	r6, [r4, #16]
 800db8a:	60c5      	str	r5, [r0, #12]
 800db8c:	f109 0310 	add.w	r3, r9, #16
 800db90:	f109 0514 	add.w	r5, r9, #20
 800db94:	f104 0e14 	add.w	lr, r4, #20
 800db98:	f100 0b14 	add.w	fp, r0, #20
 800db9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dba0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dba4:	9301      	str	r3, [sp, #4]
 800dba6:	46d9      	mov	r9, fp
 800dba8:	f04f 0c00 	mov.w	ip, #0
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	fa1f f38a 	uxth.w	r3, sl
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	b283      	uxth	r3, r0
 800dbc0:	1acb      	subs	r3, r1, r3
 800dbc2:	0c00      	lsrs	r0, r0, #16
 800dbc4:	4463      	add	r3, ip
 800dbc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dbd4:	4576      	cmp	r6, lr
 800dbd6:	f849 3b04 	str.w	r3, [r9], #4
 800dbda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbde:	d8e5      	bhi.n	800dbac <__mdiff+0x88>
 800dbe0:	1b33      	subs	r3, r6, r4
 800dbe2:	3b15      	subs	r3, #21
 800dbe4:	f023 0303 	bic.w	r3, r3, #3
 800dbe8:	3415      	adds	r4, #21
 800dbea:	3304      	adds	r3, #4
 800dbec:	42a6      	cmp	r6, r4
 800dbee:	bf38      	it	cc
 800dbf0:	2304      	movcc	r3, #4
 800dbf2:	441d      	add	r5, r3
 800dbf4:	445b      	add	r3, fp
 800dbf6:	461e      	mov	r6, r3
 800dbf8:	462c      	mov	r4, r5
 800dbfa:	4544      	cmp	r4, r8
 800dbfc:	d30e      	bcc.n	800dc1c <__mdiff+0xf8>
 800dbfe:	f108 0103 	add.w	r1, r8, #3
 800dc02:	1b49      	subs	r1, r1, r5
 800dc04:	f021 0103 	bic.w	r1, r1, #3
 800dc08:	3d03      	subs	r5, #3
 800dc0a:	45a8      	cmp	r8, r5
 800dc0c:	bf38      	it	cc
 800dc0e:	2100      	movcc	r1, #0
 800dc10:	440b      	add	r3, r1
 800dc12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc16:	b191      	cbz	r1, 800dc3e <__mdiff+0x11a>
 800dc18:	6117      	str	r7, [r2, #16]
 800dc1a:	e79d      	b.n	800db58 <__mdiff+0x34>
 800dc1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc20:	46e6      	mov	lr, ip
 800dc22:	0c08      	lsrs	r0, r1, #16
 800dc24:	fa1c fc81 	uxtah	ip, ip, r1
 800dc28:	4471      	add	r1, lr
 800dc2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc2e:	b289      	uxth	r1, r1
 800dc30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc34:	f846 1b04 	str.w	r1, [r6], #4
 800dc38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc3c:	e7dd      	b.n	800dbfa <__mdiff+0xd6>
 800dc3e:	3f01      	subs	r7, #1
 800dc40:	e7e7      	b.n	800dc12 <__mdiff+0xee>
 800dc42:	bf00      	nop
 800dc44:	0809cf78 	.word	0x0809cf78
 800dc48:	0809cf89 	.word	0x0809cf89

0800dc4c <__d2b>:
 800dc4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc50:	460f      	mov	r7, r1
 800dc52:	2101      	movs	r1, #1
 800dc54:	ec59 8b10 	vmov	r8, r9, d0
 800dc58:	4616      	mov	r6, r2
 800dc5a:	f7ff fccd 	bl	800d5f8 <_Balloc>
 800dc5e:	4604      	mov	r4, r0
 800dc60:	b930      	cbnz	r0, 800dc70 <__d2b+0x24>
 800dc62:	4602      	mov	r2, r0
 800dc64:	4b23      	ldr	r3, [pc, #140]	@ (800dcf4 <__d2b+0xa8>)
 800dc66:	4824      	ldr	r0, [pc, #144]	@ (800dcf8 <__d2b+0xac>)
 800dc68:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc6c:	f7fe fd58 	bl	800c720 <__assert_func>
 800dc70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc78:	b10d      	cbz	r5, 800dc7e <__d2b+0x32>
 800dc7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	f1b8 0300 	subs.w	r3, r8, #0
 800dc84:	d023      	beq.n	800dcce <__d2b+0x82>
 800dc86:	4668      	mov	r0, sp
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	f7ff fd7c 	bl	800d786 <__lo0bits>
 800dc8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc92:	b1d0      	cbz	r0, 800dcca <__d2b+0x7e>
 800dc94:	f1c0 0320 	rsb	r3, r0, #32
 800dc98:	fa02 f303 	lsl.w	r3, r2, r3
 800dc9c:	430b      	orrs	r3, r1
 800dc9e:	40c2      	lsrs	r2, r0
 800dca0:	6163      	str	r3, [r4, #20]
 800dca2:	9201      	str	r2, [sp, #4]
 800dca4:	9b01      	ldr	r3, [sp, #4]
 800dca6:	61a3      	str	r3, [r4, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	bf0c      	ite	eq
 800dcac:	2201      	moveq	r2, #1
 800dcae:	2202      	movne	r2, #2
 800dcb0:	6122      	str	r2, [r4, #16]
 800dcb2:	b1a5      	cbz	r5, 800dcde <__d2b+0x92>
 800dcb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcb8:	4405      	add	r5, r0
 800dcba:	603d      	str	r5, [r7, #0]
 800dcbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcc0:	6030      	str	r0, [r6, #0]
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	b003      	add	sp, #12
 800dcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcca:	6161      	str	r1, [r4, #20]
 800dccc:	e7ea      	b.n	800dca4 <__d2b+0x58>
 800dcce:	a801      	add	r0, sp, #4
 800dcd0:	f7ff fd59 	bl	800d786 <__lo0bits>
 800dcd4:	9b01      	ldr	r3, [sp, #4]
 800dcd6:	6163      	str	r3, [r4, #20]
 800dcd8:	3020      	adds	r0, #32
 800dcda:	2201      	movs	r2, #1
 800dcdc:	e7e8      	b.n	800dcb0 <__d2b+0x64>
 800dcde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dce2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dce6:	6038      	str	r0, [r7, #0]
 800dce8:	6918      	ldr	r0, [r3, #16]
 800dcea:	f7ff fd2d 	bl	800d748 <__hi0bits>
 800dcee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcf2:	e7e5      	b.n	800dcc0 <__d2b+0x74>
 800dcf4:	0809cf78 	.word	0x0809cf78
 800dcf8:	0809cf89 	.word	0x0809cf89

0800dcfc <__ssputs_r>:
 800dcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd00:	688e      	ldr	r6, [r1, #8]
 800dd02:	461f      	mov	r7, r3
 800dd04:	42be      	cmp	r6, r7
 800dd06:	680b      	ldr	r3, [r1, #0]
 800dd08:	4682      	mov	sl, r0
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	4690      	mov	r8, r2
 800dd0e:	d82d      	bhi.n	800dd6c <__ssputs_r+0x70>
 800dd10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd18:	d026      	beq.n	800dd68 <__ssputs_r+0x6c>
 800dd1a:	6965      	ldr	r5, [r4, #20]
 800dd1c:	6909      	ldr	r1, [r1, #16]
 800dd1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd22:	eba3 0901 	sub.w	r9, r3, r1
 800dd26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd2a:	1c7b      	adds	r3, r7, #1
 800dd2c:	444b      	add	r3, r9
 800dd2e:	106d      	asrs	r5, r5, #1
 800dd30:	429d      	cmp	r5, r3
 800dd32:	bf38      	it	cc
 800dd34:	461d      	movcc	r5, r3
 800dd36:	0553      	lsls	r3, r2, #21
 800dd38:	d527      	bpl.n	800dd8a <__ssputs_r+0x8e>
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f7ff fbd0 	bl	800d4e0 <_malloc_r>
 800dd40:	4606      	mov	r6, r0
 800dd42:	b360      	cbz	r0, 800dd9e <__ssputs_r+0xa2>
 800dd44:	6921      	ldr	r1, [r4, #16]
 800dd46:	464a      	mov	r2, r9
 800dd48:	f000 fbee 	bl	800e528 <memcpy>
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd56:	81a3      	strh	r3, [r4, #12]
 800dd58:	6126      	str	r6, [r4, #16]
 800dd5a:	6165      	str	r5, [r4, #20]
 800dd5c:	444e      	add	r6, r9
 800dd5e:	eba5 0509 	sub.w	r5, r5, r9
 800dd62:	6026      	str	r6, [r4, #0]
 800dd64:	60a5      	str	r5, [r4, #8]
 800dd66:	463e      	mov	r6, r7
 800dd68:	42be      	cmp	r6, r7
 800dd6a:	d900      	bls.n	800dd6e <__ssputs_r+0x72>
 800dd6c:	463e      	mov	r6, r7
 800dd6e:	6820      	ldr	r0, [r4, #0]
 800dd70:	4632      	mov	r2, r6
 800dd72:	4641      	mov	r1, r8
 800dd74:	f000 fbae 	bl	800e4d4 <memmove>
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	1b9b      	subs	r3, r3, r6
 800dd7c:	60a3      	str	r3, [r4, #8]
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	4433      	add	r3, r6
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	2000      	movs	r0, #0
 800dd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8a:	462a      	mov	r2, r5
 800dd8c:	f000 fc07 	bl	800e59e <_realloc_r>
 800dd90:	4606      	mov	r6, r0
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d1e0      	bne.n	800dd58 <__ssputs_r+0x5c>
 800dd96:	6921      	ldr	r1, [r4, #16]
 800dd98:	4650      	mov	r0, sl
 800dd9a:	f7ff fb2d 	bl	800d3f8 <_free_r>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	f8ca 3000 	str.w	r3, [sl]
 800dda4:	89a3      	ldrh	r3, [r4, #12]
 800dda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb0:	e7e9      	b.n	800dd86 <__ssputs_r+0x8a>
	...

0800ddb4 <_svfiprintf_r>:
 800ddb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb8:	4698      	mov	r8, r3
 800ddba:	898b      	ldrh	r3, [r1, #12]
 800ddbc:	061b      	lsls	r3, r3, #24
 800ddbe:	b09d      	sub	sp, #116	@ 0x74
 800ddc0:	4607      	mov	r7, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	d510      	bpl.n	800ddea <_svfiprintf_r+0x36>
 800ddc8:	690b      	ldr	r3, [r1, #16]
 800ddca:	b973      	cbnz	r3, 800ddea <_svfiprintf_r+0x36>
 800ddcc:	2140      	movs	r1, #64	@ 0x40
 800ddce:	f7ff fb87 	bl	800d4e0 <_malloc_r>
 800ddd2:	6028      	str	r0, [r5, #0]
 800ddd4:	6128      	str	r0, [r5, #16]
 800ddd6:	b930      	cbnz	r0, 800dde6 <_svfiprintf_r+0x32>
 800ddd8:	230c      	movs	r3, #12
 800ddda:	603b      	str	r3, [r7, #0]
 800dddc:	f04f 30ff 	mov.w	r0, #4294967295
 800dde0:	b01d      	add	sp, #116	@ 0x74
 800dde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde6:	2340      	movs	r3, #64	@ 0x40
 800dde8:	616b      	str	r3, [r5, #20]
 800ddea:	2300      	movs	r3, #0
 800ddec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddee:	2320      	movs	r3, #32
 800ddf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddf8:	2330      	movs	r3, #48	@ 0x30
 800ddfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800df98 <_svfiprintf_r+0x1e4>
 800ddfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de02:	f04f 0901 	mov.w	r9, #1
 800de06:	4623      	mov	r3, r4
 800de08:	469a      	mov	sl, r3
 800de0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de0e:	b10a      	cbz	r2, 800de14 <_svfiprintf_r+0x60>
 800de10:	2a25      	cmp	r2, #37	@ 0x25
 800de12:	d1f9      	bne.n	800de08 <_svfiprintf_r+0x54>
 800de14:	ebba 0b04 	subs.w	fp, sl, r4
 800de18:	d00b      	beq.n	800de32 <_svfiprintf_r+0x7e>
 800de1a:	465b      	mov	r3, fp
 800de1c:	4622      	mov	r2, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff ff6b 	bl	800dcfc <__ssputs_r>
 800de26:	3001      	adds	r0, #1
 800de28:	f000 80a7 	beq.w	800df7a <_svfiprintf_r+0x1c6>
 800de2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de2e:	445a      	add	r2, fp
 800de30:	9209      	str	r2, [sp, #36]	@ 0x24
 800de32:	f89a 3000 	ldrb.w	r3, [sl]
 800de36:	2b00      	cmp	r3, #0
 800de38:	f000 809f 	beq.w	800df7a <_svfiprintf_r+0x1c6>
 800de3c:	2300      	movs	r3, #0
 800de3e:	f04f 32ff 	mov.w	r2, #4294967295
 800de42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de46:	f10a 0a01 	add.w	sl, sl, #1
 800de4a:	9304      	str	r3, [sp, #16]
 800de4c:	9307      	str	r3, [sp, #28]
 800de4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de52:	931a      	str	r3, [sp, #104]	@ 0x68
 800de54:	4654      	mov	r4, sl
 800de56:	2205      	movs	r2, #5
 800de58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5c:	484e      	ldr	r0, [pc, #312]	@ (800df98 <_svfiprintf_r+0x1e4>)
 800de5e:	f7f2 f9cf 	bl	8000200 <memchr>
 800de62:	9a04      	ldr	r2, [sp, #16]
 800de64:	b9d8      	cbnz	r0, 800de9e <_svfiprintf_r+0xea>
 800de66:	06d0      	lsls	r0, r2, #27
 800de68:	bf44      	itt	mi
 800de6a:	2320      	movmi	r3, #32
 800de6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de70:	0711      	lsls	r1, r2, #28
 800de72:	bf44      	itt	mi
 800de74:	232b      	movmi	r3, #43	@ 0x2b
 800de76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de7a:	f89a 3000 	ldrb.w	r3, [sl]
 800de7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de80:	d015      	beq.n	800deae <_svfiprintf_r+0xfa>
 800de82:	9a07      	ldr	r2, [sp, #28]
 800de84:	4654      	mov	r4, sl
 800de86:	2000      	movs	r0, #0
 800de88:	f04f 0c0a 	mov.w	ip, #10
 800de8c:	4621      	mov	r1, r4
 800de8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de92:	3b30      	subs	r3, #48	@ 0x30
 800de94:	2b09      	cmp	r3, #9
 800de96:	d94b      	bls.n	800df30 <_svfiprintf_r+0x17c>
 800de98:	b1b0      	cbz	r0, 800dec8 <_svfiprintf_r+0x114>
 800de9a:	9207      	str	r2, [sp, #28]
 800de9c:	e014      	b.n	800dec8 <_svfiprintf_r+0x114>
 800de9e:	eba0 0308 	sub.w	r3, r0, r8
 800dea2:	fa09 f303 	lsl.w	r3, r9, r3
 800dea6:	4313      	orrs	r3, r2
 800dea8:	9304      	str	r3, [sp, #16]
 800deaa:	46a2      	mov	sl, r4
 800deac:	e7d2      	b.n	800de54 <_svfiprintf_r+0xa0>
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	1d19      	adds	r1, r3, #4
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	9103      	str	r1, [sp, #12]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bfbb      	ittet	lt
 800deba:	425b      	neglt	r3, r3
 800debc:	f042 0202 	orrlt.w	r2, r2, #2
 800dec0:	9307      	strge	r3, [sp, #28]
 800dec2:	9307      	strlt	r3, [sp, #28]
 800dec4:	bfb8      	it	lt
 800dec6:	9204      	strlt	r2, [sp, #16]
 800dec8:	7823      	ldrb	r3, [r4, #0]
 800deca:	2b2e      	cmp	r3, #46	@ 0x2e
 800decc:	d10a      	bne.n	800dee4 <_svfiprintf_r+0x130>
 800dece:	7863      	ldrb	r3, [r4, #1]
 800ded0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ded2:	d132      	bne.n	800df3a <_svfiprintf_r+0x186>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	9203      	str	r2, [sp, #12]
 800dedc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dee0:	3402      	adds	r4, #2
 800dee2:	9305      	str	r3, [sp, #20]
 800dee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dfa8 <_svfiprintf_r+0x1f4>
 800dee8:	7821      	ldrb	r1, [r4, #0]
 800deea:	2203      	movs	r2, #3
 800deec:	4650      	mov	r0, sl
 800deee:	f7f2 f987 	bl	8000200 <memchr>
 800def2:	b138      	cbz	r0, 800df04 <_svfiprintf_r+0x150>
 800def4:	9b04      	ldr	r3, [sp, #16]
 800def6:	eba0 000a 	sub.w	r0, r0, sl
 800defa:	2240      	movs	r2, #64	@ 0x40
 800defc:	4082      	lsls	r2, r0
 800defe:	4313      	orrs	r3, r2
 800df00:	3401      	adds	r4, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df08:	4824      	ldr	r0, [pc, #144]	@ (800df9c <_svfiprintf_r+0x1e8>)
 800df0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df0e:	2206      	movs	r2, #6
 800df10:	f7f2 f976 	bl	8000200 <memchr>
 800df14:	2800      	cmp	r0, #0
 800df16:	d036      	beq.n	800df86 <_svfiprintf_r+0x1d2>
 800df18:	4b21      	ldr	r3, [pc, #132]	@ (800dfa0 <_svfiprintf_r+0x1ec>)
 800df1a:	bb1b      	cbnz	r3, 800df64 <_svfiprintf_r+0x1b0>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	3307      	adds	r3, #7
 800df20:	f023 0307 	bic.w	r3, r3, #7
 800df24:	3308      	adds	r3, #8
 800df26:	9303      	str	r3, [sp, #12]
 800df28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df2a:	4433      	add	r3, r6
 800df2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df2e:	e76a      	b.n	800de06 <_svfiprintf_r+0x52>
 800df30:	fb0c 3202 	mla	r2, ip, r2, r3
 800df34:	460c      	mov	r4, r1
 800df36:	2001      	movs	r0, #1
 800df38:	e7a8      	b.n	800de8c <_svfiprintf_r+0xd8>
 800df3a:	2300      	movs	r3, #0
 800df3c:	3401      	adds	r4, #1
 800df3e:	9305      	str	r3, [sp, #20]
 800df40:	4619      	mov	r1, r3
 800df42:	f04f 0c0a 	mov.w	ip, #10
 800df46:	4620      	mov	r0, r4
 800df48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df4c:	3a30      	subs	r2, #48	@ 0x30
 800df4e:	2a09      	cmp	r2, #9
 800df50:	d903      	bls.n	800df5a <_svfiprintf_r+0x1a6>
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0c6      	beq.n	800dee4 <_svfiprintf_r+0x130>
 800df56:	9105      	str	r1, [sp, #20]
 800df58:	e7c4      	b.n	800dee4 <_svfiprintf_r+0x130>
 800df5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df5e:	4604      	mov	r4, r0
 800df60:	2301      	movs	r3, #1
 800df62:	e7f0      	b.n	800df46 <_svfiprintf_r+0x192>
 800df64:	ab03      	add	r3, sp, #12
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	462a      	mov	r2, r5
 800df6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa4 <_svfiprintf_r+0x1f0>)
 800df6c:	a904      	add	r1, sp, #16
 800df6e:	4638      	mov	r0, r7
 800df70:	f7fd fe66 	bl	800bc40 <_printf_float>
 800df74:	1c42      	adds	r2, r0, #1
 800df76:	4606      	mov	r6, r0
 800df78:	d1d6      	bne.n	800df28 <_svfiprintf_r+0x174>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	065b      	lsls	r3, r3, #25
 800df7e:	f53f af2d 	bmi.w	800dddc <_svfiprintf_r+0x28>
 800df82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df84:	e72c      	b.n	800dde0 <_svfiprintf_r+0x2c>
 800df86:	ab03      	add	r3, sp, #12
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	462a      	mov	r2, r5
 800df8c:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <_svfiprintf_r+0x1f0>)
 800df8e:	a904      	add	r1, sp, #16
 800df90:	4638      	mov	r0, r7
 800df92:	f7fe f8ed 	bl	800c170 <_printf_i>
 800df96:	e7ed      	b.n	800df74 <_svfiprintf_r+0x1c0>
 800df98:	0809d0e0 	.word	0x0809d0e0
 800df9c:	0809d0ea 	.word	0x0809d0ea
 800dfa0:	0800bc41 	.word	0x0800bc41
 800dfa4:	0800dcfd 	.word	0x0800dcfd
 800dfa8:	0809d0e6 	.word	0x0809d0e6

0800dfac <__sfputc_r>:
 800dfac:	6893      	ldr	r3, [r2, #8]
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	b410      	push	{r4}
 800dfb4:	6093      	str	r3, [r2, #8]
 800dfb6:	da08      	bge.n	800dfca <__sfputc_r+0x1e>
 800dfb8:	6994      	ldr	r4, [r2, #24]
 800dfba:	42a3      	cmp	r3, r4
 800dfbc:	db01      	blt.n	800dfc2 <__sfputc_r+0x16>
 800dfbe:	290a      	cmp	r1, #10
 800dfc0:	d103      	bne.n	800dfca <__sfputc_r+0x1e>
 800dfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc6:	f000 b9f1 	b.w	800e3ac <__swbuf_r>
 800dfca:	6813      	ldr	r3, [r2, #0]
 800dfcc:	1c58      	adds	r0, r3, #1
 800dfce:	6010      	str	r0, [r2, #0]
 800dfd0:	7019      	strb	r1, [r3, #0]
 800dfd2:	4608      	mov	r0, r1
 800dfd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <__sfputs_r>:
 800dfda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfdc:	4606      	mov	r6, r0
 800dfde:	460f      	mov	r7, r1
 800dfe0:	4614      	mov	r4, r2
 800dfe2:	18d5      	adds	r5, r2, r3
 800dfe4:	42ac      	cmp	r4, r5
 800dfe6:	d101      	bne.n	800dfec <__sfputs_r+0x12>
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e007      	b.n	800dffc <__sfputs_r+0x22>
 800dfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff0:	463a      	mov	r2, r7
 800dff2:	4630      	mov	r0, r6
 800dff4:	f7ff ffda 	bl	800dfac <__sfputc_r>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	d1f3      	bne.n	800dfe4 <__sfputs_r+0xa>
 800dffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e000 <_vfiprintf_r>:
 800e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e004:	460d      	mov	r5, r1
 800e006:	b09d      	sub	sp, #116	@ 0x74
 800e008:	4614      	mov	r4, r2
 800e00a:	4698      	mov	r8, r3
 800e00c:	4606      	mov	r6, r0
 800e00e:	b118      	cbz	r0, 800e018 <_vfiprintf_r+0x18>
 800e010:	6a03      	ldr	r3, [r0, #32]
 800e012:	b90b      	cbnz	r3, 800e018 <_vfiprintf_r+0x18>
 800e014:	f7fe fa58 	bl	800c4c8 <__sinit>
 800e018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e01a:	07d9      	lsls	r1, r3, #31
 800e01c:	d405      	bmi.n	800e02a <_vfiprintf_r+0x2a>
 800e01e:	89ab      	ldrh	r3, [r5, #12]
 800e020:	059a      	lsls	r2, r3, #22
 800e022:	d402      	bmi.n	800e02a <_vfiprintf_r+0x2a>
 800e024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e026:	f7fe fb78 	bl	800c71a <__retarget_lock_acquire_recursive>
 800e02a:	89ab      	ldrh	r3, [r5, #12]
 800e02c:	071b      	lsls	r3, r3, #28
 800e02e:	d501      	bpl.n	800e034 <_vfiprintf_r+0x34>
 800e030:	692b      	ldr	r3, [r5, #16]
 800e032:	b99b      	cbnz	r3, 800e05c <_vfiprintf_r+0x5c>
 800e034:	4629      	mov	r1, r5
 800e036:	4630      	mov	r0, r6
 800e038:	f000 f9f6 	bl	800e428 <__swsetup_r>
 800e03c:	b170      	cbz	r0, 800e05c <_vfiprintf_r+0x5c>
 800e03e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e040:	07dc      	lsls	r4, r3, #31
 800e042:	d504      	bpl.n	800e04e <_vfiprintf_r+0x4e>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	b01d      	add	sp, #116	@ 0x74
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	0598      	lsls	r0, r3, #22
 800e052:	d4f7      	bmi.n	800e044 <_vfiprintf_r+0x44>
 800e054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e056:	f7fe fb61 	bl	800c71c <__retarget_lock_release_recursive>
 800e05a:	e7f3      	b.n	800e044 <_vfiprintf_r+0x44>
 800e05c:	2300      	movs	r3, #0
 800e05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e060:	2320      	movs	r3, #32
 800e062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e066:	f8cd 800c 	str.w	r8, [sp, #12]
 800e06a:	2330      	movs	r3, #48	@ 0x30
 800e06c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e21c <_vfiprintf_r+0x21c>
 800e070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e074:	f04f 0901 	mov.w	r9, #1
 800e078:	4623      	mov	r3, r4
 800e07a:	469a      	mov	sl, r3
 800e07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e080:	b10a      	cbz	r2, 800e086 <_vfiprintf_r+0x86>
 800e082:	2a25      	cmp	r2, #37	@ 0x25
 800e084:	d1f9      	bne.n	800e07a <_vfiprintf_r+0x7a>
 800e086:	ebba 0b04 	subs.w	fp, sl, r4
 800e08a:	d00b      	beq.n	800e0a4 <_vfiprintf_r+0xa4>
 800e08c:	465b      	mov	r3, fp
 800e08e:	4622      	mov	r2, r4
 800e090:	4629      	mov	r1, r5
 800e092:	4630      	mov	r0, r6
 800e094:	f7ff ffa1 	bl	800dfda <__sfputs_r>
 800e098:	3001      	adds	r0, #1
 800e09a:	f000 80a7 	beq.w	800e1ec <_vfiprintf_r+0x1ec>
 800e09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0a0:	445a      	add	r2, fp
 800e0a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f000 809f 	beq.w	800e1ec <_vfiprintf_r+0x1ec>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0b8:	f10a 0a01 	add.w	sl, sl, #1
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	9307      	str	r3, [sp, #28]
 800e0c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0c6:	4654      	mov	r4, sl
 800e0c8:	2205      	movs	r2, #5
 800e0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ce:	4853      	ldr	r0, [pc, #332]	@ (800e21c <_vfiprintf_r+0x21c>)
 800e0d0:	f7f2 f896 	bl	8000200 <memchr>
 800e0d4:	9a04      	ldr	r2, [sp, #16]
 800e0d6:	b9d8      	cbnz	r0, 800e110 <_vfiprintf_r+0x110>
 800e0d8:	06d1      	lsls	r1, r2, #27
 800e0da:	bf44      	itt	mi
 800e0dc:	2320      	movmi	r3, #32
 800e0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0e2:	0713      	lsls	r3, r2, #28
 800e0e4:	bf44      	itt	mi
 800e0e6:	232b      	movmi	r3, #43	@ 0x2b
 800e0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0f2:	d015      	beq.n	800e120 <_vfiprintf_r+0x120>
 800e0f4:	9a07      	ldr	r2, [sp, #28]
 800e0f6:	4654      	mov	r4, sl
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	f04f 0c0a 	mov.w	ip, #10
 800e0fe:	4621      	mov	r1, r4
 800e100:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e104:	3b30      	subs	r3, #48	@ 0x30
 800e106:	2b09      	cmp	r3, #9
 800e108:	d94b      	bls.n	800e1a2 <_vfiprintf_r+0x1a2>
 800e10a:	b1b0      	cbz	r0, 800e13a <_vfiprintf_r+0x13a>
 800e10c:	9207      	str	r2, [sp, #28]
 800e10e:	e014      	b.n	800e13a <_vfiprintf_r+0x13a>
 800e110:	eba0 0308 	sub.w	r3, r0, r8
 800e114:	fa09 f303 	lsl.w	r3, r9, r3
 800e118:	4313      	orrs	r3, r2
 800e11a:	9304      	str	r3, [sp, #16]
 800e11c:	46a2      	mov	sl, r4
 800e11e:	e7d2      	b.n	800e0c6 <_vfiprintf_r+0xc6>
 800e120:	9b03      	ldr	r3, [sp, #12]
 800e122:	1d19      	adds	r1, r3, #4
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	9103      	str	r1, [sp, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bfbb      	ittet	lt
 800e12c:	425b      	neglt	r3, r3
 800e12e:	f042 0202 	orrlt.w	r2, r2, #2
 800e132:	9307      	strge	r3, [sp, #28]
 800e134:	9307      	strlt	r3, [sp, #28]
 800e136:	bfb8      	it	lt
 800e138:	9204      	strlt	r2, [sp, #16]
 800e13a:	7823      	ldrb	r3, [r4, #0]
 800e13c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e13e:	d10a      	bne.n	800e156 <_vfiprintf_r+0x156>
 800e140:	7863      	ldrb	r3, [r4, #1]
 800e142:	2b2a      	cmp	r3, #42	@ 0x2a
 800e144:	d132      	bne.n	800e1ac <_vfiprintf_r+0x1ac>
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	1d1a      	adds	r2, r3, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	9203      	str	r2, [sp, #12]
 800e14e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e152:	3402      	adds	r4, #2
 800e154:	9305      	str	r3, [sp, #20]
 800e156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e22c <_vfiprintf_r+0x22c>
 800e15a:	7821      	ldrb	r1, [r4, #0]
 800e15c:	2203      	movs	r2, #3
 800e15e:	4650      	mov	r0, sl
 800e160:	f7f2 f84e 	bl	8000200 <memchr>
 800e164:	b138      	cbz	r0, 800e176 <_vfiprintf_r+0x176>
 800e166:	9b04      	ldr	r3, [sp, #16]
 800e168:	eba0 000a 	sub.w	r0, r0, sl
 800e16c:	2240      	movs	r2, #64	@ 0x40
 800e16e:	4082      	lsls	r2, r0
 800e170:	4313      	orrs	r3, r2
 800e172:	3401      	adds	r4, #1
 800e174:	9304      	str	r3, [sp, #16]
 800e176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17a:	4829      	ldr	r0, [pc, #164]	@ (800e220 <_vfiprintf_r+0x220>)
 800e17c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e180:	2206      	movs	r2, #6
 800e182:	f7f2 f83d 	bl	8000200 <memchr>
 800e186:	2800      	cmp	r0, #0
 800e188:	d03f      	beq.n	800e20a <_vfiprintf_r+0x20a>
 800e18a:	4b26      	ldr	r3, [pc, #152]	@ (800e224 <_vfiprintf_r+0x224>)
 800e18c:	bb1b      	cbnz	r3, 800e1d6 <_vfiprintf_r+0x1d6>
 800e18e:	9b03      	ldr	r3, [sp, #12]
 800e190:	3307      	adds	r3, #7
 800e192:	f023 0307 	bic.w	r3, r3, #7
 800e196:	3308      	adds	r3, #8
 800e198:	9303      	str	r3, [sp, #12]
 800e19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e19c:	443b      	add	r3, r7
 800e19e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1a0:	e76a      	b.n	800e078 <_vfiprintf_r+0x78>
 800e1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	e7a8      	b.n	800e0fe <_vfiprintf_r+0xfe>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	3401      	adds	r4, #1
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	f04f 0c0a 	mov.w	ip, #10
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1be:	3a30      	subs	r2, #48	@ 0x30
 800e1c0:	2a09      	cmp	r2, #9
 800e1c2:	d903      	bls.n	800e1cc <_vfiprintf_r+0x1cc>
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d0c6      	beq.n	800e156 <_vfiprintf_r+0x156>
 800e1c8:	9105      	str	r1, [sp, #20]
 800e1ca:	e7c4      	b.n	800e156 <_vfiprintf_r+0x156>
 800e1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e7f0      	b.n	800e1b8 <_vfiprintf_r+0x1b8>
 800e1d6:	ab03      	add	r3, sp, #12
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	462a      	mov	r2, r5
 800e1dc:	4b12      	ldr	r3, [pc, #72]	@ (800e228 <_vfiprintf_r+0x228>)
 800e1de:	a904      	add	r1, sp, #16
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f7fd fd2d 	bl	800bc40 <_printf_float>
 800e1e6:	4607      	mov	r7, r0
 800e1e8:	1c78      	adds	r0, r7, #1
 800e1ea:	d1d6      	bne.n	800e19a <_vfiprintf_r+0x19a>
 800e1ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1ee:	07d9      	lsls	r1, r3, #31
 800e1f0:	d405      	bmi.n	800e1fe <_vfiprintf_r+0x1fe>
 800e1f2:	89ab      	ldrh	r3, [r5, #12]
 800e1f4:	059a      	lsls	r2, r3, #22
 800e1f6:	d402      	bmi.n	800e1fe <_vfiprintf_r+0x1fe>
 800e1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1fa:	f7fe fa8f 	bl	800c71c <__retarget_lock_release_recursive>
 800e1fe:	89ab      	ldrh	r3, [r5, #12]
 800e200:	065b      	lsls	r3, r3, #25
 800e202:	f53f af1f 	bmi.w	800e044 <_vfiprintf_r+0x44>
 800e206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e208:	e71e      	b.n	800e048 <_vfiprintf_r+0x48>
 800e20a:	ab03      	add	r3, sp, #12
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	462a      	mov	r2, r5
 800e210:	4b05      	ldr	r3, [pc, #20]	@ (800e228 <_vfiprintf_r+0x228>)
 800e212:	a904      	add	r1, sp, #16
 800e214:	4630      	mov	r0, r6
 800e216:	f7fd ffab 	bl	800c170 <_printf_i>
 800e21a:	e7e4      	b.n	800e1e6 <_vfiprintf_r+0x1e6>
 800e21c:	0809d0e0 	.word	0x0809d0e0
 800e220:	0809d0ea 	.word	0x0809d0ea
 800e224:	0800bc41 	.word	0x0800bc41
 800e228:	0800dfdb 	.word	0x0800dfdb
 800e22c:	0809d0e6 	.word	0x0809d0e6

0800e230 <__sflush_r>:
 800e230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e238:	0716      	lsls	r6, r2, #28
 800e23a:	4605      	mov	r5, r0
 800e23c:	460c      	mov	r4, r1
 800e23e:	d454      	bmi.n	800e2ea <__sflush_r+0xba>
 800e240:	684b      	ldr	r3, [r1, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc02      	bgt.n	800e24c <__sflush_r+0x1c>
 800e246:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	dd48      	ble.n	800e2de <__sflush_r+0xae>
 800e24c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d045      	beq.n	800e2de <__sflush_r+0xae>
 800e252:	2300      	movs	r3, #0
 800e254:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e258:	682f      	ldr	r7, [r5, #0]
 800e25a:	6a21      	ldr	r1, [r4, #32]
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	d030      	beq.n	800e2c2 <__sflush_r+0x92>
 800e260:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	0759      	lsls	r1, r3, #29
 800e266:	d505      	bpl.n	800e274 <__sflush_r+0x44>
 800e268:	6863      	ldr	r3, [r4, #4]
 800e26a:	1ad2      	subs	r2, r2, r3
 800e26c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e26e:	b10b      	cbz	r3, 800e274 <__sflush_r+0x44>
 800e270:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e272:	1ad2      	subs	r2, r2, r3
 800e274:	2300      	movs	r3, #0
 800e276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b0      	blx	r6
 800e27e:	1c43      	adds	r3, r0, #1
 800e280:	89a3      	ldrh	r3, [r4, #12]
 800e282:	d106      	bne.n	800e292 <__sflush_r+0x62>
 800e284:	6829      	ldr	r1, [r5, #0]
 800e286:	291d      	cmp	r1, #29
 800e288:	d82b      	bhi.n	800e2e2 <__sflush_r+0xb2>
 800e28a:	4a2a      	ldr	r2, [pc, #168]	@ (800e334 <__sflush_r+0x104>)
 800e28c:	410a      	asrs	r2, r1
 800e28e:	07d6      	lsls	r6, r2, #31
 800e290:	d427      	bmi.n	800e2e2 <__sflush_r+0xb2>
 800e292:	2200      	movs	r2, #0
 800e294:	6062      	str	r2, [r4, #4]
 800e296:	04d9      	lsls	r1, r3, #19
 800e298:	6922      	ldr	r2, [r4, #16]
 800e29a:	6022      	str	r2, [r4, #0]
 800e29c:	d504      	bpl.n	800e2a8 <__sflush_r+0x78>
 800e29e:	1c42      	adds	r2, r0, #1
 800e2a0:	d101      	bne.n	800e2a6 <__sflush_r+0x76>
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	b903      	cbnz	r3, 800e2a8 <__sflush_r+0x78>
 800e2a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2aa:	602f      	str	r7, [r5, #0]
 800e2ac:	b1b9      	cbz	r1, 800e2de <__sflush_r+0xae>
 800e2ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2b2:	4299      	cmp	r1, r3
 800e2b4:	d002      	beq.n	800e2bc <__sflush_r+0x8c>
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f7ff f89e 	bl	800d3f8 <_free_r>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2c0:	e00d      	b.n	800e2de <__sflush_r+0xae>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	47b0      	blx	r6
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	1c50      	adds	r0, r2, #1
 800e2cc:	d1c9      	bne.n	800e262 <__sflush_r+0x32>
 800e2ce:	682b      	ldr	r3, [r5, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0c6      	beq.n	800e262 <__sflush_r+0x32>
 800e2d4:	2b1d      	cmp	r3, #29
 800e2d6:	d001      	beq.n	800e2dc <__sflush_r+0xac>
 800e2d8:	2b16      	cmp	r3, #22
 800e2da:	d11e      	bne.n	800e31a <__sflush_r+0xea>
 800e2dc:	602f      	str	r7, [r5, #0]
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e022      	b.n	800e328 <__sflush_r+0xf8>
 800e2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	e01b      	b.n	800e322 <__sflush_r+0xf2>
 800e2ea:	690f      	ldr	r7, [r1, #16]
 800e2ec:	2f00      	cmp	r7, #0
 800e2ee:	d0f6      	beq.n	800e2de <__sflush_r+0xae>
 800e2f0:	0793      	lsls	r3, r2, #30
 800e2f2:	680e      	ldr	r6, [r1, #0]
 800e2f4:	bf08      	it	eq
 800e2f6:	694b      	ldreq	r3, [r1, #20]
 800e2f8:	600f      	str	r7, [r1, #0]
 800e2fa:	bf18      	it	ne
 800e2fc:	2300      	movne	r3, #0
 800e2fe:	eba6 0807 	sub.w	r8, r6, r7
 800e302:	608b      	str	r3, [r1, #8]
 800e304:	f1b8 0f00 	cmp.w	r8, #0
 800e308:	dde9      	ble.n	800e2de <__sflush_r+0xae>
 800e30a:	6a21      	ldr	r1, [r4, #32]
 800e30c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e30e:	4643      	mov	r3, r8
 800e310:	463a      	mov	r2, r7
 800e312:	4628      	mov	r0, r5
 800e314:	47b0      	blx	r6
 800e316:	2800      	cmp	r0, #0
 800e318:	dc08      	bgt.n	800e32c <__sflush_r+0xfc>
 800e31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	4407      	add	r7, r0
 800e32e:	eba8 0800 	sub.w	r8, r8, r0
 800e332:	e7e7      	b.n	800e304 <__sflush_r+0xd4>
 800e334:	dfbffffe 	.word	0xdfbffffe

0800e338 <_fflush_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	690b      	ldr	r3, [r1, #16]
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	b913      	cbnz	r3, 800e348 <_fflush_r+0x10>
 800e342:	2500      	movs	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	b118      	cbz	r0, 800e352 <_fflush_r+0x1a>
 800e34a:	6a03      	ldr	r3, [r0, #32]
 800e34c:	b90b      	cbnz	r3, 800e352 <_fflush_r+0x1a>
 800e34e:	f7fe f8bb 	bl	800c4c8 <__sinit>
 800e352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0f3      	beq.n	800e342 <_fflush_r+0xa>
 800e35a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e35c:	07d0      	lsls	r0, r2, #31
 800e35e:	d404      	bmi.n	800e36a <_fflush_r+0x32>
 800e360:	0599      	lsls	r1, r3, #22
 800e362:	d402      	bmi.n	800e36a <_fflush_r+0x32>
 800e364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e366:	f7fe f9d8 	bl	800c71a <__retarget_lock_acquire_recursive>
 800e36a:	4628      	mov	r0, r5
 800e36c:	4621      	mov	r1, r4
 800e36e:	f7ff ff5f 	bl	800e230 <__sflush_r>
 800e372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e374:	07da      	lsls	r2, r3, #31
 800e376:	4605      	mov	r5, r0
 800e378:	d4e4      	bmi.n	800e344 <_fflush_r+0xc>
 800e37a:	89a3      	ldrh	r3, [r4, #12]
 800e37c:	059b      	lsls	r3, r3, #22
 800e37e:	d4e1      	bmi.n	800e344 <_fflush_r+0xc>
 800e380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e382:	f7fe f9cb 	bl	800c71c <__retarget_lock_release_recursive>
 800e386:	e7dd      	b.n	800e344 <_fflush_r+0xc>

0800e388 <fiprintf>:
 800e388:	b40e      	push	{r1, r2, r3}
 800e38a:	b503      	push	{r0, r1, lr}
 800e38c:	4601      	mov	r1, r0
 800e38e:	ab03      	add	r3, sp, #12
 800e390:	4805      	ldr	r0, [pc, #20]	@ (800e3a8 <fiprintf+0x20>)
 800e392:	f853 2b04 	ldr.w	r2, [r3], #4
 800e396:	6800      	ldr	r0, [r0, #0]
 800e398:	9301      	str	r3, [sp, #4]
 800e39a:	f7ff fe31 	bl	800e000 <_vfiprintf_r>
 800e39e:	b002      	add	sp, #8
 800e3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a4:	b003      	add	sp, #12
 800e3a6:	4770      	bx	lr
 800e3a8:	200400c8 	.word	0x200400c8

0800e3ac <__swbuf_r>:
 800e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ae:	460e      	mov	r6, r1
 800e3b0:	4614      	mov	r4, r2
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	b118      	cbz	r0, 800e3be <__swbuf_r+0x12>
 800e3b6:	6a03      	ldr	r3, [r0, #32]
 800e3b8:	b90b      	cbnz	r3, 800e3be <__swbuf_r+0x12>
 800e3ba:	f7fe f885 	bl	800c4c8 <__sinit>
 800e3be:	69a3      	ldr	r3, [r4, #24]
 800e3c0:	60a3      	str	r3, [r4, #8]
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	071a      	lsls	r2, r3, #28
 800e3c6:	d501      	bpl.n	800e3cc <__swbuf_r+0x20>
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	b943      	cbnz	r3, 800e3de <__swbuf_r+0x32>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f000 f82a 	bl	800e428 <__swsetup_r>
 800e3d4:	b118      	cbz	r0, 800e3de <__swbuf_r+0x32>
 800e3d6:	f04f 37ff 	mov.w	r7, #4294967295
 800e3da:	4638      	mov	r0, r7
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	6922      	ldr	r2, [r4, #16]
 800e3e2:	1a98      	subs	r0, r3, r2
 800e3e4:	6963      	ldr	r3, [r4, #20]
 800e3e6:	b2f6      	uxtb	r6, r6
 800e3e8:	4283      	cmp	r3, r0
 800e3ea:	4637      	mov	r7, r6
 800e3ec:	dc05      	bgt.n	800e3fa <__swbuf_r+0x4e>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7ff ffa1 	bl	800e338 <_fflush_r>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d1ed      	bne.n	800e3d6 <__swbuf_r+0x2a>
 800e3fa:	68a3      	ldr	r3, [r4, #8]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	60a3      	str	r3, [r4, #8]
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	1c5a      	adds	r2, r3, #1
 800e404:	6022      	str	r2, [r4, #0]
 800e406:	701e      	strb	r6, [r3, #0]
 800e408:	6962      	ldr	r2, [r4, #20]
 800e40a:	1c43      	adds	r3, r0, #1
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d004      	beq.n	800e41a <__swbuf_r+0x6e>
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	07db      	lsls	r3, r3, #31
 800e414:	d5e1      	bpl.n	800e3da <__swbuf_r+0x2e>
 800e416:	2e0a      	cmp	r6, #10
 800e418:	d1df      	bne.n	800e3da <__swbuf_r+0x2e>
 800e41a:	4621      	mov	r1, r4
 800e41c:	4628      	mov	r0, r5
 800e41e:	f7ff ff8b 	bl	800e338 <_fflush_r>
 800e422:	2800      	cmp	r0, #0
 800e424:	d0d9      	beq.n	800e3da <__swbuf_r+0x2e>
 800e426:	e7d6      	b.n	800e3d6 <__swbuf_r+0x2a>

0800e428 <__swsetup_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4b29      	ldr	r3, [pc, #164]	@ (800e4d0 <__swsetup_r+0xa8>)
 800e42c:	4605      	mov	r5, r0
 800e42e:	6818      	ldr	r0, [r3, #0]
 800e430:	460c      	mov	r4, r1
 800e432:	b118      	cbz	r0, 800e43c <__swsetup_r+0x14>
 800e434:	6a03      	ldr	r3, [r0, #32]
 800e436:	b90b      	cbnz	r3, 800e43c <__swsetup_r+0x14>
 800e438:	f7fe f846 	bl	800c4c8 <__sinit>
 800e43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e440:	0719      	lsls	r1, r3, #28
 800e442:	d422      	bmi.n	800e48a <__swsetup_r+0x62>
 800e444:	06da      	lsls	r2, r3, #27
 800e446:	d407      	bmi.n	800e458 <__swsetup_r+0x30>
 800e448:	2209      	movs	r2, #9
 800e44a:	602a      	str	r2, [r5, #0]
 800e44c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	f04f 30ff 	mov.w	r0, #4294967295
 800e456:	e033      	b.n	800e4c0 <__swsetup_r+0x98>
 800e458:	0758      	lsls	r0, r3, #29
 800e45a:	d512      	bpl.n	800e482 <__swsetup_r+0x5a>
 800e45c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e45e:	b141      	cbz	r1, 800e472 <__swsetup_r+0x4a>
 800e460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e464:	4299      	cmp	r1, r3
 800e466:	d002      	beq.n	800e46e <__swsetup_r+0x46>
 800e468:	4628      	mov	r0, r5
 800e46a:	f7fe ffc5 	bl	800d3f8 <_free_r>
 800e46e:	2300      	movs	r3, #0
 800e470:	6363      	str	r3, [r4, #52]	@ 0x34
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e478:	81a3      	strh	r3, [r4, #12]
 800e47a:	2300      	movs	r3, #0
 800e47c:	6063      	str	r3, [r4, #4]
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	6023      	str	r3, [r4, #0]
 800e482:	89a3      	ldrh	r3, [r4, #12]
 800e484:	f043 0308 	orr.w	r3, r3, #8
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	6923      	ldr	r3, [r4, #16]
 800e48c:	b94b      	cbnz	r3, 800e4a2 <__swsetup_r+0x7a>
 800e48e:	89a3      	ldrh	r3, [r4, #12]
 800e490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e498:	d003      	beq.n	800e4a2 <__swsetup_r+0x7a>
 800e49a:	4621      	mov	r1, r4
 800e49c:	4628      	mov	r0, r5
 800e49e:	f000 f8df 	bl	800e660 <__smakebuf_r>
 800e4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4a6:	f013 0201 	ands.w	r2, r3, #1
 800e4aa:	d00a      	beq.n	800e4c2 <__swsetup_r+0x9a>
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	60a2      	str	r2, [r4, #8]
 800e4b0:	6962      	ldr	r2, [r4, #20]
 800e4b2:	4252      	negs	r2, r2
 800e4b4:	61a2      	str	r2, [r4, #24]
 800e4b6:	6922      	ldr	r2, [r4, #16]
 800e4b8:	b942      	cbnz	r2, 800e4cc <__swsetup_r+0xa4>
 800e4ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e4be:	d1c5      	bne.n	800e44c <__swsetup_r+0x24>
 800e4c0:	bd38      	pop	{r3, r4, r5, pc}
 800e4c2:	0799      	lsls	r1, r3, #30
 800e4c4:	bf58      	it	pl
 800e4c6:	6962      	ldrpl	r2, [r4, #20]
 800e4c8:	60a2      	str	r2, [r4, #8]
 800e4ca:	e7f4      	b.n	800e4b6 <__swsetup_r+0x8e>
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	e7f7      	b.n	800e4c0 <__swsetup_r+0x98>
 800e4d0:	200400c8 	.word	0x200400c8

0800e4d4 <memmove>:
 800e4d4:	4288      	cmp	r0, r1
 800e4d6:	b510      	push	{r4, lr}
 800e4d8:	eb01 0402 	add.w	r4, r1, r2
 800e4dc:	d902      	bls.n	800e4e4 <memmove+0x10>
 800e4de:	4284      	cmp	r4, r0
 800e4e0:	4623      	mov	r3, r4
 800e4e2:	d807      	bhi.n	800e4f4 <memmove+0x20>
 800e4e4:	1e43      	subs	r3, r0, #1
 800e4e6:	42a1      	cmp	r1, r4
 800e4e8:	d008      	beq.n	800e4fc <memmove+0x28>
 800e4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f2:	e7f8      	b.n	800e4e6 <memmove+0x12>
 800e4f4:	4402      	add	r2, r0
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	428a      	cmp	r2, r1
 800e4fa:	d100      	bne.n	800e4fe <memmove+0x2a>
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e506:	e7f7      	b.n	800e4f8 <memmove+0x24>

0800e508 <_sbrk_r>:
 800e508:	b538      	push	{r3, r4, r5, lr}
 800e50a:	4d06      	ldr	r5, [pc, #24]	@ (800e524 <_sbrk_r+0x1c>)
 800e50c:	2300      	movs	r3, #0
 800e50e:	4604      	mov	r4, r0
 800e510:	4608      	mov	r0, r1
 800e512:	602b      	str	r3, [r5, #0]
 800e514:	f7f4 fc2e 	bl	8002d74 <_sbrk>
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	d102      	bne.n	800e522 <_sbrk_r+0x1a>
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	b103      	cbz	r3, 800e522 <_sbrk_r+0x1a>
 800e520:	6023      	str	r3, [r4, #0]
 800e522:	bd38      	pop	{r3, r4, r5, pc}
 800e524:	20040ac0 	.word	0x20040ac0

0800e528 <memcpy>:
 800e528:	440a      	add	r2, r1
 800e52a:	4291      	cmp	r1, r2
 800e52c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e530:	d100      	bne.n	800e534 <memcpy+0xc>
 800e532:	4770      	bx	lr
 800e534:	b510      	push	{r4, lr}
 800e536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e53a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e53e:	4291      	cmp	r1, r2
 800e540:	d1f9      	bne.n	800e536 <memcpy+0xe>
 800e542:	bd10      	pop	{r4, pc}

0800e544 <abort>:
 800e544:	b508      	push	{r3, lr}
 800e546:	2006      	movs	r0, #6
 800e548:	f000 f8ee 	bl	800e728 <raise>
 800e54c:	2001      	movs	r0, #1
 800e54e:	f7f4 fb99 	bl	8002c84 <_exit>

0800e552 <_calloc_r>:
 800e552:	b570      	push	{r4, r5, r6, lr}
 800e554:	fba1 5402 	umull	r5, r4, r1, r2
 800e558:	b93c      	cbnz	r4, 800e56a <_calloc_r+0x18>
 800e55a:	4629      	mov	r1, r5
 800e55c:	f7fe ffc0 	bl	800d4e0 <_malloc_r>
 800e560:	4606      	mov	r6, r0
 800e562:	b928      	cbnz	r0, 800e570 <_calloc_r+0x1e>
 800e564:	2600      	movs	r6, #0
 800e566:	4630      	mov	r0, r6
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	220c      	movs	r2, #12
 800e56c:	6002      	str	r2, [r0, #0]
 800e56e:	e7f9      	b.n	800e564 <_calloc_r+0x12>
 800e570:	462a      	mov	r2, r5
 800e572:	4621      	mov	r1, r4
 800e574:	f7fe f853 	bl	800c61e <memset>
 800e578:	e7f5      	b.n	800e566 <_calloc_r+0x14>

0800e57a <__ascii_mbtowc>:
 800e57a:	b082      	sub	sp, #8
 800e57c:	b901      	cbnz	r1, 800e580 <__ascii_mbtowc+0x6>
 800e57e:	a901      	add	r1, sp, #4
 800e580:	b142      	cbz	r2, 800e594 <__ascii_mbtowc+0x1a>
 800e582:	b14b      	cbz	r3, 800e598 <__ascii_mbtowc+0x1e>
 800e584:	7813      	ldrb	r3, [r2, #0]
 800e586:	600b      	str	r3, [r1, #0]
 800e588:	7812      	ldrb	r2, [r2, #0]
 800e58a:	1e10      	subs	r0, r2, #0
 800e58c:	bf18      	it	ne
 800e58e:	2001      	movne	r0, #1
 800e590:	b002      	add	sp, #8
 800e592:	4770      	bx	lr
 800e594:	4610      	mov	r0, r2
 800e596:	e7fb      	b.n	800e590 <__ascii_mbtowc+0x16>
 800e598:	f06f 0001 	mvn.w	r0, #1
 800e59c:	e7f8      	b.n	800e590 <__ascii_mbtowc+0x16>

0800e59e <_realloc_r>:
 800e59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a2:	4680      	mov	r8, r0
 800e5a4:	4615      	mov	r5, r2
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	b921      	cbnz	r1, 800e5b4 <_realloc_r+0x16>
 800e5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	f7fe bf96 	b.w	800d4e0 <_malloc_r>
 800e5b4:	b92a      	cbnz	r2, 800e5c2 <_realloc_r+0x24>
 800e5b6:	f7fe ff1f 	bl	800d3f8 <_free_r>
 800e5ba:	2400      	movs	r4, #0
 800e5bc:	4620      	mov	r0, r4
 800e5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c2:	f000 f8ef 	bl	800e7a4 <_malloc_usable_size_r>
 800e5c6:	4285      	cmp	r5, r0
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	d802      	bhi.n	800e5d2 <_realloc_r+0x34>
 800e5cc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e5d0:	d8f4      	bhi.n	800e5bc <_realloc_r+0x1e>
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	4640      	mov	r0, r8
 800e5d6:	f7fe ff83 	bl	800d4e0 <_malloc_r>
 800e5da:	4607      	mov	r7, r0
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d0ec      	beq.n	800e5ba <_realloc_r+0x1c>
 800e5e0:	42b5      	cmp	r5, r6
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	bf28      	it	cs
 800e5e8:	4632      	movcs	r2, r6
 800e5ea:	f7ff ff9d 	bl	800e528 <memcpy>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4640      	mov	r0, r8
 800e5f2:	f7fe ff01 	bl	800d3f8 <_free_r>
 800e5f6:	463c      	mov	r4, r7
 800e5f8:	e7e0      	b.n	800e5bc <_realloc_r+0x1e>

0800e5fa <__ascii_wctomb>:
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	b141      	cbz	r1, 800e612 <__ascii_wctomb+0x18>
 800e600:	2aff      	cmp	r2, #255	@ 0xff
 800e602:	d904      	bls.n	800e60e <__ascii_wctomb+0x14>
 800e604:	228a      	movs	r2, #138	@ 0x8a
 800e606:	601a      	str	r2, [r3, #0]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	4770      	bx	lr
 800e60e:	700a      	strb	r2, [r1, #0]
 800e610:	2001      	movs	r0, #1
 800e612:	4770      	bx	lr

0800e614 <__swhatbuf_r>:
 800e614:	b570      	push	{r4, r5, r6, lr}
 800e616:	460c      	mov	r4, r1
 800e618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61c:	2900      	cmp	r1, #0
 800e61e:	b096      	sub	sp, #88	@ 0x58
 800e620:	4615      	mov	r5, r2
 800e622:	461e      	mov	r6, r3
 800e624:	da0d      	bge.n	800e642 <__swhatbuf_r+0x2e>
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e62c:	f04f 0100 	mov.w	r1, #0
 800e630:	bf14      	ite	ne
 800e632:	2340      	movne	r3, #64	@ 0x40
 800e634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e638:	2000      	movs	r0, #0
 800e63a:	6031      	str	r1, [r6, #0]
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	b016      	add	sp, #88	@ 0x58
 800e640:	bd70      	pop	{r4, r5, r6, pc}
 800e642:	466a      	mov	r2, sp
 800e644:	f000 f878 	bl	800e738 <_fstat_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	dbec      	blt.n	800e626 <__swhatbuf_r+0x12>
 800e64c:	9901      	ldr	r1, [sp, #4]
 800e64e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e656:	4259      	negs	r1, r3
 800e658:	4159      	adcs	r1, r3
 800e65a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e65e:	e7eb      	b.n	800e638 <__swhatbuf_r+0x24>

0800e660 <__smakebuf_r>:
 800e660:	898b      	ldrh	r3, [r1, #12]
 800e662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e664:	079d      	lsls	r5, r3, #30
 800e666:	4606      	mov	r6, r0
 800e668:	460c      	mov	r4, r1
 800e66a:	d507      	bpl.n	800e67c <__smakebuf_r+0x1c>
 800e66c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	6123      	str	r3, [r4, #16]
 800e674:	2301      	movs	r3, #1
 800e676:	6163      	str	r3, [r4, #20]
 800e678:	b003      	add	sp, #12
 800e67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e67c:	ab01      	add	r3, sp, #4
 800e67e:	466a      	mov	r2, sp
 800e680:	f7ff ffc8 	bl	800e614 <__swhatbuf_r>
 800e684:	9f00      	ldr	r7, [sp, #0]
 800e686:	4605      	mov	r5, r0
 800e688:	4639      	mov	r1, r7
 800e68a:	4630      	mov	r0, r6
 800e68c:	f7fe ff28 	bl	800d4e0 <_malloc_r>
 800e690:	b948      	cbnz	r0, 800e6a6 <__smakebuf_r+0x46>
 800e692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e696:	059a      	lsls	r2, r3, #22
 800e698:	d4ee      	bmi.n	800e678 <__smakebuf_r+0x18>
 800e69a:	f023 0303 	bic.w	r3, r3, #3
 800e69e:	f043 0302 	orr.w	r3, r3, #2
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	e7e2      	b.n	800e66c <__smakebuf_r+0xc>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	6020      	str	r0, [r4, #0]
 800e6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6ae:	81a3      	strh	r3, [r4, #12]
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e6b6:	b15b      	cbz	r3, 800e6d0 <__smakebuf_r+0x70>
 800e6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f000 f84d 	bl	800e75c <_isatty_r>
 800e6c2:	b128      	cbz	r0, 800e6d0 <__smakebuf_r+0x70>
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	f023 0303 	bic.w	r3, r3, #3
 800e6ca:	f043 0301 	orr.w	r3, r3, #1
 800e6ce:	81a3      	strh	r3, [r4, #12]
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	431d      	orrs	r5, r3
 800e6d4:	81a5      	strh	r5, [r4, #12]
 800e6d6:	e7cf      	b.n	800e678 <__smakebuf_r+0x18>

0800e6d8 <_raise_r>:
 800e6d8:	291f      	cmp	r1, #31
 800e6da:	b538      	push	{r3, r4, r5, lr}
 800e6dc:	4605      	mov	r5, r0
 800e6de:	460c      	mov	r4, r1
 800e6e0:	d904      	bls.n	800e6ec <_raise_r+0x14>
 800e6e2:	2316      	movs	r3, #22
 800e6e4:	6003      	str	r3, [r0, #0]
 800e6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6ee:	b112      	cbz	r2, 800e6f6 <_raise_r+0x1e>
 800e6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6f4:	b94b      	cbnz	r3, 800e70a <_raise_r+0x32>
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f000 f852 	bl	800e7a0 <_getpid_r>
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	4601      	mov	r1, r0
 800e700:	4628      	mov	r0, r5
 800e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e706:	f000 b839 	b.w	800e77c <_kill_r>
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d00a      	beq.n	800e724 <_raise_r+0x4c>
 800e70e:	1c59      	adds	r1, r3, #1
 800e710:	d103      	bne.n	800e71a <_raise_r+0x42>
 800e712:	2316      	movs	r3, #22
 800e714:	6003      	str	r3, [r0, #0]
 800e716:	2001      	movs	r0, #1
 800e718:	e7e7      	b.n	800e6ea <_raise_r+0x12>
 800e71a:	2100      	movs	r1, #0
 800e71c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e720:	4620      	mov	r0, r4
 800e722:	4798      	blx	r3
 800e724:	2000      	movs	r0, #0
 800e726:	e7e0      	b.n	800e6ea <_raise_r+0x12>

0800e728 <raise>:
 800e728:	4b02      	ldr	r3, [pc, #8]	@ (800e734 <raise+0xc>)
 800e72a:	4601      	mov	r1, r0
 800e72c:	6818      	ldr	r0, [r3, #0]
 800e72e:	f7ff bfd3 	b.w	800e6d8 <_raise_r>
 800e732:	bf00      	nop
 800e734:	200400c8 	.word	0x200400c8

0800e738 <_fstat_r>:
 800e738:	b538      	push	{r3, r4, r5, lr}
 800e73a:	4d07      	ldr	r5, [pc, #28]	@ (800e758 <_fstat_r+0x20>)
 800e73c:	2300      	movs	r3, #0
 800e73e:	4604      	mov	r4, r0
 800e740:	4608      	mov	r0, r1
 800e742:	4611      	mov	r1, r2
 800e744:	602b      	str	r3, [r5, #0]
 800e746:	f7f4 faed 	bl	8002d24 <_fstat>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	d102      	bne.n	800e754 <_fstat_r+0x1c>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	b103      	cbz	r3, 800e754 <_fstat_r+0x1c>
 800e752:	6023      	str	r3, [r4, #0]
 800e754:	bd38      	pop	{r3, r4, r5, pc}
 800e756:	bf00      	nop
 800e758:	20040ac0 	.word	0x20040ac0

0800e75c <_isatty_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4d06      	ldr	r5, [pc, #24]	@ (800e778 <_isatty_r+0x1c>)
 800e760:	2300      	movs	r3, #0
 800e762:	4604      	mov	r4, r0
 800e764:	4608      	mov	r0, r1
 800e766:	602b      	str	r3, [r5, #0]
 800e768:	f7f4 faec 	bl	8002d44 <_isatty>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	d102      	bne.n	800e776 <_isatty_r+0x1a>
 800e770:	682b      	ldr	r3, [r5, #0]
 800e772:	b103      	cbz	r3, 800e776 <_isatty_r+0x1a>
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	bd38      	pop	{r3, r4, r5, pc}
 800e778:	20040ac0 	.word	0x20040ac0

0800e77c <_kill_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d07      	ldr	r5, [pc, #28]	@ (800e79c <_kill_r+0x20>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	4611      	mov	r1, r2
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	f7f4 fa6b 	bl	8002c64 <_kill>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	d102      	bne.n	800e798 <_kill_r+0x1c>
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	b103      	cbz	r3, 800e798 <_kill_r+0x1c>
 800e796:	6023      	str	r3, [r4, #0]
 800e798:	bd38      	pop	{r3, r4, r5, pc}
 800e79a:	bf00      	nop
 800e79c:	20040ac0 	.word	0x20040ac0

0800e7a0 <_getpid_r>:
 800e7a0:	f7f4 ba58 	b.w	8002c54 <_getpid>

0800e7a4 <_malloc_usable_size_r>:
 800e7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a8:	1f18      	subs	r0, r3, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bfbc      	itt	lt
 800e7ae:	580b      	ldrlt	r3, [r1, r0]
 800e7b0:	18c0      	addlt	r0, r0, r3
 800e7b2:	4770      	bx	lr

0800e7b4 <_init>:
 800e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b6:	bf00      	nop
 800e7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ba:	bc08      	pop	{r3}
 800e7bc:	469e      	mov	lr, r3
 800e7be:	4770      	bx	lr

0800e7c0 <_fini>:
 800e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c2:	bf00      	nop
 800e7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c6:	bc08      	pop	{r3}
 800e7c8:	469e      	mov	lr, r3
 800e7ca:	4770      	bx	lr
