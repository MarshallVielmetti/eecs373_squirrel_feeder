
integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5d4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0008ea3c  0800e798  0800e798  0000f798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0809d1d4  0809d1d4  0009f284  2**0
                  CONTENTS
  4 .ARM          00000008  0809d1d4  0809d1d4  0009e1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0809d1dc  0809d1dc  0009f284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0809d1dc  0809d1dc  0009e1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0809d1e0  0809d1e0  0009e1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20040000  0809d1e4  0009f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20040284  0809d468  0009f284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040ad0  0809d468  0009fad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009f284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202f2  00000000  00000000  0009f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004791  00000000  00000000  000bf5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  000c3d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c8  00000000  00000000  000c5838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030944  00000000  00000000  000c6d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000244df  00000000  00000000  000f7644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f7c7  00000000  00000000  0011bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023b2ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e4  00000000  00000000  0023b330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00243514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040284 	.word	0x20040284
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e77c 	.word	0x0800e77c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040288 	.word	0x20040288
 80001fc:	0800e77c 	.word	0x0800e77c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <camera_init>:

/*
 * PUBLIC CAMERA INTERFACE
 */

void camera_init(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	printf("Initializing Camera... ");
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <camera_init+0x4c>)
 8000ece:	f00b fb15 	bl	800c4fc <iprintf>
	image_size = 0;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <camera_init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	cur_image_idx = 0;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <camera_init+0x54>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]

	pic_index = 0;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <camera_init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	801a      	strh	r2, [r3, #0]

	//  has to be mod 100 bcz file names have to be like 8 chars
	rand_seed = rand() % 100;
 8000ee4:	f00a fdb2 	bl	800ba4c <rand>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <camera_init+0x5c>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1151      	asrs	r1, r2, #5
 8000ef2:	17da      	asrs	r2, r3, #31
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	2164      	movs	r1, #100	@ 0x64
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9a      	subs	r2, r3, r2
 8000efe:	b292      	uxth	r2, r2
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <camera_init+0x60>)
 8000f02:	801a      	strh	r2, [r3, #0]
//	VC0706_SetResolution(CAMERA_RES);
//	HAL_Delay(1000);
//	VC0706_Reset();
//	HAL_Delay(2500);

	camera_ready = true;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <camera_init+0x64>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
	printf(" Successful!\n\r");
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <camera_init+0x68>)
 8000f0c:	f00b faf6 	bl	800c4fc <iprintf>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	0800e798 	.word	0x0800e798
 8000f18:	200402a4 	.word	0x200402a4
 8000f1c:	200402a8 	.word	0x200402a8
 8000f20:	200402ac 	.word	0x200402ac
 8000f24:	51eb851f 	.word	0x51eb851f
 8000f28:	200402ae 	.word	0x200402ae
 8000f2c:	200402a0 	.word	0x200402a0
 8000f30:	0800e7b0 	.word	0x0800e7b0

08000f34 <camera_take_photo>:

uint8_t camera_take_photo(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
	if (!camera_ready) {
 8000f3a:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <camera_take_photo+0x9c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <camera_take_photo+0x18>
		return 0; // camera not ready, return failure
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e03c      	b.n	8000fc6 <camera_take_photo+0x92>
	}

	// instruct the physical camera to take a photo
	uint8_t success = VC0706_StopCapture();
 8000f4c:	f001 ffaa 	bl	8002ea4 <VC0706_StopCapture>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

	// Verify success and update state
	if (!success) {
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <camera_take_photo+0x2a>
		return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e033      	b.n	8000fc6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	@ 0x64
 8000f60:	f002 fbd2 	bl	8003708 <HAL_Delay>


	success = VC0706_TakePhoto();
 8000f64:	f001 ff66 	bl	8002e34 <VC0706_TakePhoto>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]

	if (!success) {
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <camera_take_photo+0x42>
		return 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e027      	b.n	8000fc6 <camera_take_photo+0x92>
	}

	HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	@ 0x64
 8000f78:	f002 fbc6 	bl	8003708 <HAL_Delay>

	/*
	 * Read in the length of the image
	 */
	image_size = VC0706_ReadImageDataLength();
 8000f7c:	f001 ffc8 	bl	8002f10 <VC0706_ReadImageDataLength>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <camera_take_photo+0xa0>)
 8000f86:	601a      	str	r2, [r3, #0]

	/*
	 * Now initialize the file handle
	 */
	char img_name[9];
	sprintf(img_name, "%d%d.jpg", pic_index, rand_seed);
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <camera_take_photo+0xa4>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <camera_take_photo+0xa8>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	1d38      	adds	r0, r7, #4
 8000f94:	4912      	ldr	r1, [pc, #72]	@ (8000fe0 <camera_take_photo+0xac>)
 8000f96:	f00b fac3 	bl	800c520 <siprintf>
//	FRESULT fres = f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	f_open(&(file_writer), img_name, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	221a      	movs	r2, #26
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <camera_take_photo+0xb0>)
 8000fa2:	f00a f91f 	bl	800b1e4 <f_open>

	pic_index++;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <camera_take_photo+0xa4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <camera_take_photo+0xa4>)
 8000fb0:	801a      	strh	r2, [r3, #0]

	/*
	 * now must initialize the camera struct to be able to start receiving photos
	 */

	cur_image_idx = 0;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <camera_take_photo+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	camera_ready = 0; // no longer ready to take a new photo
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <camera_take_photo+0x9c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

	READY_TO_REQUEST = true;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <camera_take_photo+0xb8>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
//	__HAL_UART_ENABLE_IT(&CAM_UART_HANDLE, UART_IT_RXNE);

	return 1;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200402a0 	.word	0x200402a0
 8000fd4:	200402a4 	.word	0x200402a4
 8000fd8:	200402ac 	.word	0x200402ac
 8000fdc:	200402ae 	.word	0x200402ae
 8000fe0:	0800e7c0 	.word	0x0800e7c0
 8000fe4:	200402dc 	.word	0x200402dc
 8000fe8:	200402a8 	.word	0x200402a8
 8000fec:	2004050c 	.word	0x2004050c

08000ff0 <finish_image>:

static void finish_image(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
	UINT bytes_wrote;

	for (uint32_t i = 1; i < 32; i++) {
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e016      	b.n	800102a <finish_image+0x3a>
		if (img_read_buf[i-1 + 5] == 0xFF && img_read_buf[i + 5] == 0xD9) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3304      	adds	r3, #4
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <finish_image+0x64>)
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	2bff      	cmp	r3, #255	@ 0xff
 8001006:	d10d      	bne.n	8001024 <finish_image+0x34>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3305      	adds	r3, #5
 800100c:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <finish_image+0x64>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	2bd9      	cmp	r3, #217	@ 0xd9
 8001012:	d107      	bne.n	8001024 <finish_image+0x34>
			// found end sequence
			f_write(&file_writer, img_read_buf + 5, i + 1, &bytes_wrote);
 8001014:	4910      	ldr	r1, [pc, #64]	@ (8001058 <finish_image+0x68>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	463b      	mov	r3, r7
 800101c:	480f      	ldr	r0, [pc, #60]	@ (800105c <finish_image+0x6c>)
 800101e:	f00a fa9b 	bl	800b558 <f_write>
			break;
 8001022:	e005      	b.n	8001030 <finish_image+0x40>
	for (uint32_t i = 1; i < 32; i++) {
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b1f      	cmp	r3, #31
 800102e:	d9e5      	bls.n	8000ffc <finish_image+0xc>
		}
	}

	f_close(&file_writer);
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <finish_image+0x6c>)
 8001032:	f00a fc84 	bl	800b93e <f_close>

	camera_ready = true; // ready to take a new image
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <finish_image+0x70>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
	get_feeder()->needs_to_process_picture = false;
 800103c:	f000 f9d0 	bl	80013e0 <get_feeder>
 8001040:	4603      	mov	r3, r0
 8001042:	2200      	movs	r2, #0
 8001044:	729a      	strb	r2, [r3, #10]

//	__HAL_UART_DISABLE_IT(&CAM_UART_HANDLE, UART_IT_RXNE);

	printf("Camera Processing Completed!\n\r");
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <finish_image+0x74>)
 8001048:	f00b fa58 	bl	800c4fc <iprintf>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200402b0 	.word	0x200402b0
 8001058:	200402b5 	.word	0x200402b5
 800105c:	200402dc 	.word	0x200402dc
 8001060:	200402a0 	.word	0x200402a0
 8001064:	0800e7cc 	.word	0x0800e7cc

08001068 <process_chunk>:

static uint8_t process_chunk(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	if (cur_image_idx >= image_size - CAMERA_READ_IMG_SIZE) {
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <process_chunk+0x58>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <process_chunk+0x5c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d803      	bhi.n	8001086 <process_chunk+0x1e>
		finish_image(); // needs to perform the final processing in this->finish_image
 800107e:	f7ff ffb7 	bl	8000ff0 <finish_image>
		return 1;
 8001082:	2301      	movs	r3, #1
 8001084:	e018      	b.n	80010b8 <process_chunk+0x50>
	}

	uint8_t status = VC0706_ReadImageBlock(img_read_buf, cur_image_idx);
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <process_chunk+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <process_chunk+0x60>)
 800108e:	f001 ff69 	bl	8002f64 <VC0706_ReadImageBlock>
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]

	if (!status) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <process_chunk+0x38>
		return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e00b      	b.n	80010b8 <process_chunk+0x50>
	}

	UINT bytes_wrote;
	f_write(&file_writer, img_read_buf + 5, CAMERA_READ_IMG_SIZE, &bytes_wrote);
 80010a0:	490a      	ldr	r1, [pc, #40]	@ (80010cc <process_chunk+0x64>)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2220      	movs	r2, #32
 80010a6:	480a      	ldr	r0, [pc, #40]	@ (80010d0 <process_chunk+0x68>)
 80010a8:	f00a fa56 	bl	800b558 <f_write>

	cur_image_idx += 0x20;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <process_chunk+0x5c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3320      	adds	r3, #32
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <process_chunk+0x5c>)
 80010b4:	6013      	str	r3, [r2, #0]

	return 0; //normal case
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200402a4 	.word	0x200402a4
 80010c4:	200402a8 	.word	0x200402a8
 80010c8:	200402b0 	.word	0x200402b0
 80010cc:	200402b5 	.word	0x200402b5
 80010d0:	200402dc 	.word	0x200402dc

080010d4 <camera_get_percent_done>:

uint32_t camera_get_percent_done() {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	return (100 * cur_image_idx) / image_size;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <camera_get_percent_done+0x20>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2264      	movs	r2, #100	@ 0x64
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <camera_get_percent_done+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	200402a8 	.word	0x200402a8
 80010f8:	200402a4 	.word	0x200402a4

080010fc <camera_process>:


uint8_t camera_process(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	printf("Camera Processing Image - %d%% Completed\n\r", camera_get_percent_done());
 8001102:	f7ff ffe7 	bl	80010d4 <camera_get_percent_done>
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <camera_process+0x40>)
 800110c:	f00b f9f6 	bl	800c4fc <iprintf>
	uint8_t end_flag = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
	uint8_t num_chunks_processed = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	71bb      	strb	r3, [r7, #6]

	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8001118:	e003      	b.n	8001122 <camera_process+0x26>
		end_flag = process_chunk();
 800111a:	f7ff ffa5 	bl	8001068 <process_chunk>
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	while (!end_flag && num_chunks_processed++ < CAMERA_PROCESS_CHUNKS) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <camera_process+0x36>
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	71ba      	strb	r2, [r7, #6]
 800112e:	2b09      	cmp	r3, #9
 8001130:	d9f3      	bls.n	800111a <camera_process+0x1e>
	}

	return end_flag; // 1 means the last chunk was read
 8001132:	79fb      	ldrb	r3, [r7, #7]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800e7ec 	.word	0x0800e7ec

08001140 <camera_get_ready>:


uint8_t camera_get_ready() {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	return camera_ready;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <camera_get_ready+0x14>)
 8001146:	781b      	ldrb	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	200402a0 	.word	0x200402a0

08001158 <init_peripherals>:

#define MIN_DISPENSE_ITERATIONS 5
#define MAX_DISPENSE_ITERATIONS 10


void init_peripherals() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	HAL_Delay(2500);
 800115c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001160:	f002 fad2 	bl	8003708 <HAL_Delay>

	camera_init();
 8001164:	f7ff feb0 	bl	8000ec8 <camera_init>

	ir_sensor_init();
 8001168:	f000 f944 	bl	80013f4 <ir_sensor_init>
	ps_init();
 800116c:	f000 fc44 	bl	80019f8 <ps_init>

	// shared between the IR sensor and pressure sensor
	HAL_TIM_Base_Start_IT(&IR_SENSOR_TIMER_HANDLE);
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <init_peripherals+0x48>)
 8001172:	f006 f91b 	bl	80073ac <HAL_TIM_Base_Start_IT>

	lcd_init(&feeder);
 8001176:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <init_peripherals+0x4c>)
 8001178:	f000 f9e8 	bl	800154c <lcd_init>

	feeder.state = WAITING_FOR_SQUIRREL;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <init_peripherals+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
	feeder.squirrel_count = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <init_peripherals+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
	feeder.out_of_food = false;
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <init_peripherals+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	721a      	strb	r2, [r3, #8]

	// start main timer
	HAL_TIM_Base_Start_IT(&MAIN_TIMER_HANDLE);
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <init_peripherals+0x50>)
 8001190:	f006 f90c 	bl	80073ac <HAL_TIM_Base_Start_IT>

	// start LCD timer
	HAL_TIM_Base_Start_IT(&LCD_TIMER_HANDLE);
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <init_peripherals+0x54>)
 8001196:	f006 f909 	bl	80073ac <HAL_TIM_Base_Start_IT>

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20040848 	.word	0x20040848
 80011a4:	20040510 	.word	0x20040510
 80011a8:	200408e0 	.word	0x200408e0
 80011ac:	20040894 	.word	0x20040894

080011b0 <main_isr>:
static void dispensing_isr();
static void cooldown_isr();
static void out_of_food_isr();

// main program logic interrupt routine
void main_isr() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	printf("#### Main Service Routine ###\n\r");
 80011b4:	4819      	ldr	r0, [pc, #100]	@ (800121c <main_isr+0x6c>)
 80011b6:	f00b f9a1 	bl	800c4fc <iprintf>

	// send the feeder state to the lcd and update it
	switch (feeder.state) {
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <main_isr+0x70>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d82a      	bhi.n	8001218 <main_isr+0x68>
 80011c2:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <main_isr+0x18>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	080011e9 	.word	0x080011e9
 80011d0:	080011f5 	.word	0x080011f5
 80011d4:	08001201 	.word	0x08001201
 80011d8:	0800120d 	.word	0x0800120d
	case WAITING_FOR_SQUIRREL:
		printf("state -- waiting for squirrel\n\r");
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <main_isr+0x74>)
 80011de:	f00b f98d 	bl	800c4fc <iprintf>
		waiting_for_squirrel_isr();
 80011e2:	f000 f829 	bl	8001238 <waiting_for_squirrel_isr>
		break;
 80011e6:	e017      	b.n	8001218 <main_isr+0x68>
	case DETECTED_SQUIRREL:
		printf("state -- detected squirrel\n\r");
 80011e8:	480f      	ldr	r0, [pc, #60]	@ (8001228 <main_isr+0x78>)
 80011ea:	f00b f987 	bl	800c4fc <iprintf>
		detected_squirrel_isr();
 80011ee:	f000 f84d 	bl	800128c <detected_squirrel_isr>
		break;
 80011f2:	e011      	b.n	8001218 <main_isr+0x68>
	case DISPENSING:
		printf("state -- dispensing\n\r");
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <main_isr+0x7c>)
 80011f6:	f00b f981 	bl	800c4fc <iprintf>
		dispensing_isr();
 80011fa:	f000 f85d 	bl	80012b8 <dispensing_isr>
		break;
 80011fe:	e00b      	b.n	8001218 <main_isr+0x68>
	case COOLDOWN:
		printf("state -- cooldown\n\r");
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <main_isr+0x80>)
 8001202:	f00b f97b 	bl	800c4fc <iprintf>
		cooldown_isr();
 8001206:	f000 f8ab 	bl	8001360 <cooldown_isr>
		break;
 800120a:	e005      	b.n	8001218 <main_isr+0x68>
	case OUT_OF_FOOD:
		printf("state -- out of food\n\r");
 800120c:	4809      	ldr	r0, [pc, #36]	@ (8001234 <main_isr+0x84>)
 800120e:	f00b f975 	bl	800c4fc <iprintf>
		out_of_food_isr();
 8001212:	f000 f8c5 	bl	80013a0 <out_of_food_isr>
		break;
 8001216:	bf00      	nop
	}
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800e82c 	.word	0x0800e82c
 8001220:	20040510 	.word	0x20040510
 8001224:	0800e84c 	.word	0x0800e84c
 8001228:	0800e86c 	.word	0x0800e86c
 800122c:	0800e88c 	.word	0x0800e88c
 8001230:	0800e8a4 	.word	0x0800e8a4
 8001234:	0800e8b8 	.word	0x0800e8b8

08001238 <waiting_for_squirrel_isr>:

static void waiting_for_squirrel_isr() {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	printf("Current Distance Reading: %f", get_cur_distance_average());
 800123c:	f000 f93e 	bl	80014bc <get_cur_distance_average>
 8001240:	ee10 3a10 	vmov	r3, s0
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f997 	bl	8000578 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	480b      	ldr	r0, [pc, #44]	@ (800127c <waiting_for_squirrel_isr+0x44>)
 8001250:	f00b f954 	bl	800c4fc <iprintf>

	if(get_cur_distance_average() > IR_DISTANCE_THRESHOLD) {
 8001254:	f000 f932 	bl	80014bc <get_cur_distance_average>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001280 <waiting_for_squirrel_isr+0x48>
 8001260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	dc00      	bgt.n	800126c <waiting_for_squirrel_isr+0x34>
		printf("DETECTED SQUIRREL!\n\r");
		feeder.state = DETECTED_SQUIRREL;
	}
}
 800126a:	e005      	b.n	8001278 <waiting_for_squirrel_isr+0x40>
		printf("DETECTED SQUIRREL!\n\r");
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <waiting_for_squirrel_isr+0x4c>)
 800126e:	f00b f945 	bl	800c4fc <iprintf>
		feeder.state = DETECTED_SQUIRREL;
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <waiting_for_squirrel_isr+0x50>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0800e8d0 	.word	0x0800e8d0
 8001280:	44960000 	.word	0x44960000
 8001284:	0800e8f0 	.word	0x0800e8f0
 8001288:	20040510 	.word	0x20040510

0800128c <detected_squirrel_isr>:

static void detected_squirrel_isr() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	feeder.squirrel_count++;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <detected_squirrel_isr+0x28>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <detected_squirrel_isr+0x28>)
 8001298:	6053      	str	r3, [r2, #4]

	feeder.needs_to_take_picture = true;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <detected_squirrel_isr+0x28>)
 800129c:	2201      	movs	r2, #1
 800129e:	725a      	strb	r2, [r3, #9]

	motor_start();
 80012a0:	f001 f97e 	bl	80025a0 <motor_start>

	feeder.state = DISPENSING;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <detected_squirrel_isr+0x28>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	701a      	strb	r2, [r3, #0]

	// clear IR camera buffer
	zero_averages();
 80012aa:	f000 f933 	bl	8001514 <zero_averages>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20040510 	.word	0x20040510

080012b8 <dispensing_isr>:

static uint32_t times_dispensed = 0;
static void dispensing_isr() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	printf("Times Dispensed: %d\n\r", times_dispensed);
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <dispensing_isr+0x90>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4822      	ldr	r0, [pc, #136]	@ (800134c <dispensing_isr+0x94>)
 80012c4:	f00b f91a 	bl	800c4fc <iprintf>
	printf("PS reading: %d,  Threshold: %d\n\r", ps_get_reading(), PS_FOOD_THRESHOLD);
 80012c8:	f000 fbae 	bl	8001a28 <ps_get_reading>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80012d2:	4619      	mov	r1, r3
 80012d4:	481e      	ldr	r0, [pc, #120]	@ (8001350 <dispensing_isr+0x98>)
 80012d6:	f00b f911 	bl	800c4fc <iprintf>

	if (ps_get_reading() >= PS_FOOD_THRESHOLD && times_dispensed >= MIN_DISPENSE_ITERATIONS) {
 80012da:	f000 fba5 	bl	8001a28 <ps_get_reading>
 80012de:	4603      	mov	r3, r0
 80012e0:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80012e4:	4293      	cmp	r3, r2
 80012e6:	dd12      	ble.n	800130e <dispensing_isr+0x56>
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <dispensing_isr+0x90>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d90e      	bls.n	800130e <dispensing_isr+0x56>
		printf("Transitioning to COOLDOWN\n\r");
 80012f0:	4818      	ldr	r0, [pc, #96]	@ (8001354 <dispensing_isr+0x9c>)
 80012f2:	f00b f903 	bl	800c4fc <iprintf>
		// Must have dispensed enough food
		motor_stop();
 80012f6:	f001 f967 	bl	80025c8 <motor_stop>
		feeder.needs_to_process_picture = true;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <dispensing_isr+0xa0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	729a      	strb	r2, [r3, #10]

		feeder.state = COOLDOWN;
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <dispensing_isr+0xa0>)
 8001302:	2203      	movs	r2, #3
 8001304:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <dispensing_isr+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

		return;
 800130c:	e01a      	b.n	8001344 <dispensing_isr+0x8c>
	}

	if (times_dispensed >= MAX_DISPENSE_ITERATIONS) {
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <dispensing_isr+0x90>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b09      	cmp	r3, #9
 8001314:	d90e      	bls.n	8001334 <dispensing_isr+0x7c>
		printf("Transitioning to out_of_food state\n\r");
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <dispensing_isr+0xa4>)
 8001318:	f00b f8f0 	bl	800c4fc <iprintf>
		// has dispensed 5 times on this iteration already -- out of food
		motor_stop();
 800131c:	f001 f954 	bl	80025c8 <motor_stop>
		feeder.needs_to_process_picture = true;
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <dispensing_isr+0xa0>)
 8001322:	2201      	movs	r2, #1
 8001324:	729a      	strb	r2, [r3, #10]

		feeder.state = OUT_OF_FOOD;
 8001326:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <dispensing_isr+0xa0>)
 8001328:	2204      	movs	r2, #4
 800132a:	701a      	strb	r2, [r3, #0]
		times_dispensed = 0;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <dispensing_isr+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

		return;
 8001332:	e007      	b.n	8001344 <dispensing_isr+0x8c>
	}

	// Down here is "average" use case -- needs to continue dispensing
	++times_dispensed;
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <dispensing_isr+0x90>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a03      	ldr	r2, [pc, #12]	@ (8001348 <dispensing_isr+0x90>)
 800133c:	6013      	str	r3, [r2, #0]

	// Stay in the same state
	feeder.state = DISPENSING;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <dispensing_isr+0xa0>)
 8001340:	2202      	movs	r2, #2
 8001342:	701a      	strb	r2, [r3, #0]
}
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2004051c 	.word	0x2004051c
 800134c:	0800e908 	.word	0x0800e908
 8001350:	0800e920 	.word	0x0800e920
 8001354:	0800e944 	.word	0x0800e944
 8001358:	20040510 	.word	0x20040510
 800135c:	0800e960 	.word	0x0800e960

08001360 <cooldown_isr>:

/*
 * Prevents the system from dispensing food over and over again
 */
static uint32_t cooldown_cur_iteration = 0;
static void cooldown_isr(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0

	cooldown_cur_iteration += 1;
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <cooldown_isr+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <cooldown_isr+0x34>)
 800136c:	6013      	str	r3, [r2, #0]

	printf("Current cooldown iteration: %d\n\r", cooldown_cur_iteration);
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <cooldown_isr+0x34>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4808      	ldr	r0, [pc, #32]	@ (8001398 <cooldown_isr+0x38>)
 8001376:	f00b f8c1 	bl	800c4fc <iprintf>

	if (cooldown_cur_iteration == COOLDOWN_ISR_ITERATIONS) {
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <cooldown_isr+0x34>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b14      	cmp	r3, #20
 8001380:	d105      	bne.n	800138e <cooldown_isr+0x2e>
		cooldown_cur_iteration = 0;
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <cooldown_isr+0x34>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
		feeder.state = WAITING_FOR_SQUIRREL;
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <cooldown_isr+0x3c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	}
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20040520 	.word	0x20040520
 8001398:	0800e988 	.word	0x0800e988
 800139c:	20040510 	.word	0x20040510

080013a0 <out_of_food_isr>:

// In order to reset the feeder, just put your hand on the pressure sensor
static void out_of_food_isr() {	// We don't have a great way to determine when food is added back
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	feeder.out_of_food = true;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <out_of_food_isr+0x34>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	721a      	strb	r2, [r3, #8]

	printf("Current PS Reading: %d\n\r", ps_get_reading());
 80013aa:	f000 fb3d 	bl	8001a28 <ps_get_reading>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <out_of_food_isr+0x38>)
 80013b4:	f00b f8a2 	bl	800c4fc <iprintf>

	if (ps_get_reading() > PS_RESET_THRESHOLD) {
 80013b8:	f000 fb36 	bl	8001a28 <ps_get_reading>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <out_of_food_isr+0x3c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	dd05      	ble.n	80013d0 <out_of_food_isr+0x30>
		feeder.out_of_food = false;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <out_of_food_isr+0x34>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	721a      	strb	r2, [r3, #8]
		feeder.state = WAITING_FOR_SQUIRREL;
 80013ca:	4b02      	ldr	r3, [pc, #8]	@ (80013d4 <out_of_food_isr+0x34>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	}
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20040510 	.word	0x20040510
 80013d8:	0800e9ac 	.word	0x0800e9ac
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <get_feeder>:

Feeder *get_feeder() {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return &feeder;
 80013e4:	4b02      	ldr	r3, [pc, #8]	@ (80013f0 <get_feeder+0x10>)
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20040510 	.word	0x20040510

080013f4 <ir_sensor_init>:

static float distance_measurements[NUM_MEASUREMENTS_TO_AVG];
static uint8_t distance_idx = 0;


void ir_sensor_init() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	printf("Initializing IR Sensor...");
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <ir_sensor_init+0x3c>)
 80013fc:	f00b f87e 	bl	800c4fc <iprintf>
	// make sure doesn't auto trigger without readings
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	e009      	b.n	800141a <ir_sensor_init+0x26>
		distance_measurements[i] = 0;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <ir_sensor_init+0x40>)
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	3301      	adds	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d9f2      	bls.n	8001406 <ir_sensor_init+0x12>
	}
	printf(" Successful!\n\r");
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <ir_sensor_init+0x44>)
 8001422:	f00b f86b 	bl	800c4fc <iprintf>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	0800e9c8 	.word	0x0800e9c8
 8001434:	20040524 	.word	0x20040524
 8001438:	0800e9e4 	.word	0x0800e9e4

0800143c <read_distance>:

static float read_distance() {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
	 uint32_t ADC_VAL = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]

	 HAL_ADC_Start(&IR_ADC_HANDLE);//start conversion
 8001446:	480b      	ldr	r0, [pc, #44]	@ (8001474 <read_distance+0x38>)
 8001448:	f002 fca2 	bl	8003d90 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&IR_ADC_HANDLE, 0xFFFFFFFF);//wait for conversion to finish
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	4808      	ldr	r0, [pc, #32]	@ (8001474 <read_distance+0x38>)
 8001452:	f002 fd00 	bl	8003e56 <HAL_ADC_PollForConversion>
	 ADC_VAL = HAL_ADC_GetValue(&IR_ADC_HANDLE);//retrieve value
 8001456:	4807      	ldr	r0, [pc, #28]	@ (8001474 <read_distance+0x38>)
 8001458:	f002 fd8c 	bl	8003f74 <HAL_ADC_GetValue>
 800145c:	6078      	str	r0, [r7, #4]

	 return ADC_VAL;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20040558 	.word	0x20040558

08001478 <ir_sensor_interrupt_routine>:

void ir_sensor_interrupt_routine() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	float curr = read_distance();
 800147e:	f7ff ffdd 	bl	800143c <read_distance>
 8001482:	ed87 0a01 	vstr	s0, [r7, #4]

	distance_measurements[distance_idx++] = curr;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <ir_sensor_interrupt_routine+0x3c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <ir_sensor_interrupt_routine+0x3c>)
 8001490:	7011      	strb	r1, [r2, #0]
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <ir_sensor_interrupt_routine+0x40>)
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	601a      	str	r2, [r3, #0]
	distance_idx %= NUM_MEASUREMENTS_TO_AVG;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <ir_sensor_interrupt_routine+0x3c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <ir_sensor_interrupt_routine+0x3c>)
 80014a8:	701a      	strb	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20040544 	.word	0x20040544
 80014b8:	20040524 	.word	0x20040524

080014bc <get_cur_distance_average>:

float get_cur_distance_average() {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
	float ttl = 0;
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	e00e      	b.n	80014ec <get_cur_distance_average+0x30>
		ttl += distance_measurements[i];
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <get_cur_distance_average+0x54>)
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed97 7a01 	vldr	s14, [r7, #4]
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a01 	vstr	s15, [r7, #4]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	3301      	adds	r3, #1
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d9ed      	bls.n	80014ce <get_cur_distance_average+0x12>
	}

	return ttl / NUM_MEASUREMENTS_TO_AVG;
 80014f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80014fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20040524 	.word	0x20040524

08001514 <zero_averages>:

void zero_averages() {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e009      	b.n	8001534 <zero_averages+0x20>
		distance_measurements[i] = 0;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <zero_averages+0x34>)
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_MEASUREMENTS_TO_AVG; i++) {
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b07      	cmp	r3, #7
 8001538:	d9f2      	bls.n	8001520 <zero_averages+0xc>
	}
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20040524 	.word	0x20040524

0800154c <lcd_init>:
	SQUIRREL_CLIP,
	SQUIRREL_HD,
	M_LOGO,
} LcdState;

void lcd_init(const Feeder* feeder) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	ILI9341_Unselect();
 8001554:	f001 fd7e 	bl	8003054 <ILI9341_Unselect>
	ILI9341_Init();
 8001558:	f001 fe2e 	bl	80031b8 <ILI9341_Init>

	lcd_feeder_ref = feeder;
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <lcd_init+0x24>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
	LcdState = SQUIRREL_CLIP;
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <lcd_init+0x28>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20040548 	.word	0x20040548
 8001574:	2004054d 	.word	0x2004054d

08001578 <lcd_between>:

static void lcd_between(){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af02      	add	r7, sp, #8
//	HAL_Delay(1000);
//	ILI9341_FillScreen(ILI9341_WHITE);
	ILI9341_DrawImage(0,0,320,240,(const uint16_t*)white_screen_map);
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <lcd_between+0x20>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	23f0      	movs	r3, #240	@ 0xf0
 8001584:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001588:	2100      	movs	r1, #0
 800158a:	2000      	movs	r0, #0
 800158c:	f001 ffff 	bl	800358e <ILI9341_DrawImage>
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	08075474 	.word	0x08075474

0800159c <squirrel_clip>:




void squirrel_clip() {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-240)/2,320,240,(const uint16_t*)squirrelclip);
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <squirrel_clip+0x24>)
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	23f0      	movs	r3, #240	@ 0xf0
 80015a8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015ac:	2100      	movs	r1, #0
 80015ae:	2000      	movs	r0, #0
 80015b0:	f001 ffed 	bl	800358e <ILI9341_DrawImage>
	LcdState = SQUIRREL_HD;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <squirrel_clip+0x28>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	080300f4 	.word	0x080300f4
 80015c4:	2004054d 	.word	0x2004054d

080015c8 <squirrel_res>:

void squirrel_res() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-213)/2,320,213,(const uint16_t*)squirrelres);
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <squirrel_res+0x24>)
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	23d5      	movs	r3, #213	@ 0xd5
 80015d4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015d8:	210d      	movs	r1, #13
 80015da:	2000      	movs	r0, #0
 80015dc:	f001 ffd7 	bl	800358e <ILI9341_DrawImage>
	LcdState = M_LOGO;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <squirrel_res+0x28>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	701a      	strb	r2, [r3, #0]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800ec74 	.word	0x0800ec74
 80015f0:	2004054d 	.word	0x2004054d

080015f4 <m_logo>:

void m_logo() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af02      	add	r7, sp, #8
	ILI9341_DrawImage((ILI9341_WIDTH - 320)/2,(ILI9341_HEIGHT-203)/2,320,203,(const uint16_t*)MLogo);
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <m_logo+0x24>)
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	23cb      	movs	r3, #203	@ 0xcb
 8001600:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001604:	2112      	movs	r1, #18
 8001606:	2000      	movs	r0, #0
 8001608:	f001 ffc1 	bl	800358e <ILI9341_DrawImage>
	LcdState = SQUIRREL_CLIP;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <m_logo+0x28>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080558f4 	.word	0x080558f4
 800161c:	2004054d 	.word	0x2004054d

08001620 <display_stats>:

void display_stats() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b098      	sub	sp, #96	@ 0x60
 8001624:	af04      	add	r7, sp, #16
	const char* team1 = "FEED";
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <display_stats+0x124>)
 8001628:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const char* team2 = "THE";
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <display_stats+0x128>)
 800162c:	64bb      	str	r3, [r7, #72]	@ 0x48
	const char* team3 = "SQUIRRELS";
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <display_stats+0x12c>)
 8001630:	647b      	str	r3, [r7, #68]	@ 0x44
	const char* class = "FROM EECS 373";
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <display_stats+0x130>)
 8001634:	643b      	str	r3, [r7, #64]	@ 0x40
	const char* linebrk = "-*-*-*-*-*-";
 8001636:	4b47      	ldr	r3, [pc, #284]	@ (8001754 <display_stats+0x134>)
 8001638:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Needs help
	char str_squirrels_fed[20];
	sprintf(str_squirrels_fed, "Squirrels Fed: %lu", lcd_feeder_ref->squirrel_count);
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <display_stats+0x138>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001644:	4945      	ldr	r1, [pc, #276]	@ (800175c <display_stats+0x13c>)
 8001646:	4618      	mov	r0, r3
 8001648:	f00a ff6a 	bl	800c520 <siprintf>

//	const char* squcount = strcat("Squirrels Fed: ", strSquirrels);
//	const char* flevels = strcat("Food Dispensed: ", strWeight);

	// FEED THE SQUIRRELS FROM EECS 383 -*-*-*-*-*
	ILI9341_WriteString(10, 10, team1, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 800164c:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <display_stats+0x140>)
 800164e:	221f      	movs	r2, #31
 8001650:	9202      	str	r2, [sp, #8]
 8001652:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	9200      	str	r2, [sp, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001660:	210a      	movs	r1, #10
 8001662:	200a      	movs	r0, #10
 8001664:	f001 ff48 	bl	80034f8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 40, team2, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 8001668:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <display_stats+0x140>)
 800166a:	221f      	movs	r2, #31
 800166c:	9202      	str	r2, [sp, #8]
 800166e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800167c:	2128      	movs	r1, #40	@ 0x28
 800167e:	200a      	movs	r0, #10
 8001680:	f001 ff3a 	bl	80034f8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 70, team3, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <display_stats+0x140>)
 8001686:	221f      	movs	r2, #31
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001698:	2146      	movs	r1, #70	@ 0x46
 800169a:	200a      	movs	r0, #10
 800169c:	f001 ff2c 	bl	80034f8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 100, class, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <display_stats+0x144>)
 80016a2:	221f      	movs	r2, #31
 80016a4:	9202      	str	r2, [sp, #8]
 80016a6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	9200      	str	r2, [sp, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016b4:	2164      	movs	r1, #100	@ 0x64
 80016b6:	200a      	movs	r0, #10
 80016b8:	f001 ff1e 	bl	80034f8 <ILI9341_WriteString>
	ILI9341_WriteString(10, 130, linebrk, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80016bc:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <display_stats+0x144>)
 80016be:	221f      	movs	r2, #31
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016d0:	2182      	movs	r1, #130	@ 0x82
 80016d2:	200a      	movs	r0, #10
 80016d4:	f001 ff10 	bl	80034f8 <ILI9341_WriteString>

	// Squirrels Fed: squcount
	// Food Dispensed: strWeight
	ILI9341_WriteString(10, 160, str_squirrels_fed, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <display_stats+0x144>)
 80016da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80016de:	221f      	movs	r2, #31
 80016e0:	9202      	str	r2, [sp, #8]
 80016e2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80016e6:	9201      	str	r2, [sp, #4]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	460a      	mov	r2, r1
 80016f0:	21a0      	movs	r1, #160	@ 0xa0
 80016f2:	200a      	movs	r0, #10
 80016f4:	f001 ff00 	bl	80034f8 <ILI9341_WriteString>
//	ILI9341_WriteString(10, 190, flevels, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);

	// DISPLAY CAMERA STATUS
	char camera_ready[40];
	if (camera_get_ready()) {
 80016f8:	f7ff fd22 	bl	8001140 <camera_get_ready>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <display_stats+0xee>
		sprintf(camera_ready, "Camera: Ready");
 8001702:	463b      	mov	r3, r7
 8001704:	4918      	ldr	r1, [pc, #96]	@ (8001768 <display_stats+0x148>)
 8001706:	4618      	mov	r0, r3
 8001708:	f00a ff0a 	bl	800c520 <siprintf>
 800170c:	e007      	b.n	800171e <display_stats+0xfe>
	} else {
		sprintf(camera_ready, "Camera: %lu%% Done", camera_get_percent_done());
 800170e:	f7ff fce1 	bl	80010d4 <camera_get_percent_done>
 8001712:	4602      	mov	r2, r0
 8001714:	463b      	mov	r3, r7
 8001716:	4915      	ldr	r1, [pc, #84]	@ (800176c <display_stats+0x14c>)
 8001718:	4618      	mov	r0, r3
 800171a:	f00a ff01 	bl	800c520 <siprintf>
	}

	ILI9341_WriteString(10, 190, camera_ready, Font_11x18, ILI9341_YELLOW, ILI9341_BLUE);
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <display_stats+0x144>)
 8001720:	4639      	mov	r1, r7
 8001722:	221f      	movs	r2, #31
 8001724:	9202      	str	r2, [sp, #8]
 8001726:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800172a:	9201      	str	r2, [sp, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	9200      	str	r2, [sp, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	460a      	mov	r2, r1
 8001734:	21be      	movs	r1, #190	@ 0xbe
 8001736:	200a      	movs	r0, #10
 8001738:	f001 fede 	bl	80034f8 <ILI9341_WriteString>
}
 800173c:	bf00      	nop
 800173e:	3750      	adds	r7, #80	@ 0x50
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800e9f4 	.word	0x0800e9f4
 8001748:	0800e9fc 	.word	0x0800e9fc
 800174c:	0800ea00 	.word	0x0800ea00
 8001750:	0800ea0c 	.word	0x0800ea0c
 8001754:	0800ea1c 	.word	0x0800ea1c
 8001758:	20040548 	.word	0x20040548
 800175c:	0800ea28 	.word	0x0800ea28
 8001760:	20040094 	.word	0x20040094
 8001764:	2004008c 	.word	0x2004008c
 8001768:	0800ea3c 	.word	0x0800ea3c
 800176c:	0800ea4c 	.word	0x0800ea4c

08001770 <display_out_of_food>:

// DISPLAY OUT OF FOOD WARNING
void display_out_of_food() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af04      	add	r7, sp, #16
	const char* out_of_food_str = "!! OUT OF FOOD !!";
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <display_out_of_food+0x30>)
 8001778:	607b      	str	r3, [r7, #4]
	ILI9341_WriteString(10, 70, out_of_food_str, Font_16x26, ILI9341_YELLOW, ILI9341_BLUE);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <display_out_of_food+0x34>)
 800177c:	221f      	movs	r2, #31
 800177e:	9202      	str	r2, [sp, #8]
 8001780:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	2146      	movs	r1, #70	@ 0x46
 8001790:	200a      	movs	r0, #10
 8001792:	f001 feb1 	bl	80034f8 <ILI9341_WriteString>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0800ea60 	.word	0x0800ea60
 80017a4:	20040094 	.word	0x20040094

080017a8 <lcd_update>:

static bool LCD_UPDATE = false;

// MAIN LCD SERVICE ROUTINE
void lcd_update() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	IS_STATS = !IS_STATS;
 80017ac:	4b23      	ldr	r3, [pc, #140]	@ (800183c <lcd_update+0x94>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf14      	ite	ne
 80017b4:	2301      	movne	r3, #1
 80017b6:	2300      	moveq	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <lcd_update+0x94>)
 80017c8:	701a      	strb	r2, [r3, #0]

	lcd_between();
 80017ca:	f7ff fed5 	bl	8001578 <lcd_between>

	if (IS_STATS) {
 80017ce:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <lcd_update+0x94>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <lcd_update+0x3a>
		printf("lcd - transition to statistics\n\r");
 80017d6:	481a      	ldr	r0, [pc, #104]	@ (8001840 <lcd_update+0x98>)
 80017d8:	f00a fe90 	bl	800c4fc <iprintf>
		display_stats();
 80017dc:	f7ff ff20 	bl	8001620 <display_stats>
 80017e0:	e027      	b.n	8001832 <lcd_update+0x8a>
	} else if (lcd_feeder_ref->state == OUT_OF_FOOD) {
 80017e2:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <lcd_update+0x9c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d105      	bne.n	80017f8 <lcd_update+0x50>
		printf("lcd - transition to no food warning\n\r");
 80017ec:	4816      	ldr	r0, [pc, #88]	@ (8001848 <lcd_update+0xa0>)
 80017ee:	f00a fe85 	bl	800c4fc <iprintf>
		display_out_of_food();
 80017f2:	f7ff ffbd 	bl	8001770 <display_out_of_food>
 80017f6:	e01c      	b.n	8001832 <lcd_update+0x8a>
	} else {
		switch(LcdState) {
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <lcd_update+0xa4>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d012      	beq.n	8001826 <lcd_update+0x7e>
 8001800:	2b02      	cmp	r3, #2
 8001802:	dc16      	bgt.n	8001832 <lcd_update+0x8a>
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <lcd_update+0x66>
 8001808:	2b01      	cmp	r3, #1
 800180a:	d006      	beq.n	800181a <lcd_update+0x72>
 800180c:	e011      	b.n	8001832 <lcd_update+0x8a>
		case SQUIRREL_CLIP:
			printf("lcd - transition to squirrel clip\n\r");
 800180e:	4810      	ldr	r0, [pc, #64]	@ (8001850 <lcd_update+0xa8>)
 8001810:	f00a fe74 	bl	800c4fc <iprintf>
			squirrel_clip();
 8001814:	f7ff fec2 	bl	800159c <squirrel_clip>
			break;
 8001818:	e00b      	b.n	8001832 <lcd_update+0x8a>
		case SQUIRREL_HD:
			printf("lcd - transition to squirrel res\n\r");
 800181a:	480e      	ldr	r0, [pc, #56]	@ (8001854 <lcd_update+0xac>)
 800181c:	f00a fe6e 	bl	800c4fc <iprintf>
			squirrel_res();
 8001820:	f7ff fed2 	bl	80015c8 <squirrel_res>
			break;
 8001824:	e005      	b.n	8001832 <lcd_update+0x8a>
		case M_LOGO:
			printf("lcd - transition to M logo\n\r");
 8001826:	480c      	ldr	r0, [pc, #48]	@ (8001858 <lcd_update+0xb0>)
 8001828:	f00a fe68 	bl	800c4fc <iprintf>
			m_logo();
 800182c:	f7ff fee2 	bl	80015f4 <m_logo>
			break;
 8001830:	bf00      	nop
		}
	}

	LCD_UPDATE = false;
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <lcd_update+0xb4>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2004054c 	.word	0x2004054c
 8001840:	0800ea74 	.word	0x0800ea74
 8001844:	20040548 	.word	0x20040548
 8001848:	0800ea98 	.word	0x0800ea98
 800184c:	2004054d 	.word	0x2004054d
 8001850:	0800eac0 	.word	0x0800eac0
 8001854:	0800eae4 	.word	0x0800eae4
 8001858:	0800eb08 	.word	0x0800eb08
 800185c:	2004054e 	.word	0x2004054e

08001860 <lcd_trigger_update>:

void lcd_trigger_update() {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
	LCD_UPDATE = true;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <lcd_trigger_update+0x14>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	2004054e 	.word	0x2004054e

08001878 <lcd_needs_update>:

bool lcd_needs_update() {
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	return LCD_UPDATE;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <lcd_needs_update+0x14>)
 800187e:	781b      	ldrb	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2004054e 	.word	0x2004054e

08001890 <microDelay>:

/*
 * Really short delay function
 */
static void microDelay(uint16_t delay)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
	return;
 800189a:	bf00      	nop
  __HAL_TIM_SET_COUNTER(&PS_TIMER_HANDLE, 0);
  while (__HAL_TIM_GET_COUNTER(&PS_TIMER_HANDLE) < delay);
}
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <getHX711>:

/*
 * reads in data value from HX711
 */
static int32_t getHX711(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ae:	b672      	cpsid	i
}
 80018b0:	bf00      	nop
	__disable_irq(); // ENTER CRITICAL SECTION
  uint32_t data = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 80018b6:	f001 ff1b 	bl	80036f0 <HAL_GetTick>
 80018ba:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80018bc:	e00a      	b.n	80018d4 <getHX711+0x2c>
  {
	// weird
    if(HAL_GetTick() - startTime > 200) {
 80018be:	f001 ff17 	bl	80036f0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80018ca:	d903      	bls.n	80018d4 <getHX711+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 80018cc:	b662      	cpsie	i
}
 80018ce:	bf00      	nop
      __enable_irq();
      return 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e047      	b.n	8001964 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 80018d4:	2108      	movs	r1, #8
 80018d6:	4825      	ldr	r0, [pc, #148]	@ (800196c <getHX711+0xc4>)
 80018d8:	f003 fa80 	bl	8004ddc <HAL_GPIO_ReadPin>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d0ed      	beq.n	80018be <getHX711+0x16>
    }
  }

  for(int8_t len=0; len<24 ; len++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	72fb      	strb	r3, [r7, #11]
 80018e6:	e022      	b.n	800192e <getHX711+0x86>
  {
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	481f      	ldr	r0, [pc, #124]	@ (800196c <getHX711+0xc4>)
 80018ee:	f003 fa8d 	bl	8004e0c <HAL_GPIO_WritePin>
    microDelay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff ffcc 	bl	8001890 <microDelay>
    data = data << 1;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2102      	movs	r1, #2
 8001902:	481a      	ldr	r0, [pc, #104]	@ (800196c <getHX711+0xc4>)
 8001904:	f003 fa82 	bl	8004e0c <HAL_GPIO_WritePin>
    microDelay(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff ffc1 	bl	8001890 <microDelay>
    if(HAL_GPIO_ReadPin(PS0_DATA_GPIO_Port, PS0_DATA_Pin) == GPIO_PIN_SET)
 800190e:	2108      	movs	r1, #8
 8001910:	4816      	ldr	r0, [pc, #88]	@ (800196c <getHX711+0xc4>)
 8001912:	f003 fa63 	bl	8004ddc <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <getHX711+0x7a>
      data ++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8001922:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	72fb      	strb	r3, [r7, #11]
 800192e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001932:	2b17      	cmp	r3, #23
 8001934:	ddd8      	ble.n	80018e8 <getHX711+0x40>
  }

  data = data ^ 0x800000;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 800193c:	60fb      	str	r3, [r7, #12]

  /*
   * END BIT
   */
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2102      	movs	r1, #2
 8001942:	480a      	ldr	r0, [pc, #40]	@ (800196c <getHX711+0xc4>)
 8001944:	f003 fa62 	bl	8004e0c <HAL_GPIO_WritePin>
  microDelay(1);
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff ffa1 	bl	8001890 <microDelay>
  HAL_GPIO_WritePin(PS0_CLK_GPIO_Port, PS0_CLK_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2102      	movs	r1, #2
 8001952:	4806      	ldr	r0, [pc, #24]	@ (800196c <getHX711+0xc4>)
 8001954:	f003 fa5a 	bl	8004e0c <HAL_GPIO_WritePin>
  microDelay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ff99 	bl	8001890 <microDelay>
  __ASM volatile ("cpsie i" : : : "memory");
 800195e:	b662      	cpsie	i
}
 8001960:	bf00      	nop

  __enable_irq();

  return data;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	48000800 	.word	0x48000800

08001970 <weigh>:


static int weigh()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
  int32_t  total = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  int milligram;
  float coefficient;

  // average out NUM_PS_SAMPLES
  for(uint16_t i=0 ; i<NUM_PS_SAMPLES ; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	827b      	strh	r3, [r7, #18]
 800197e:	e008      	b.n	8001992 <weigh+0x22>
  {
      total += getHX711();
 8001980:	f7ff ff92 	bl	80018a8 <getHX711>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4413      	add	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
  for(uint16_t i=0 ; i<NUM_PS_SAMPLES ; i++)
 800198c:	8a7b      	ldrh	r3, [r7, #18]
 800198e:	3301      	adds	r3, #1
 8001990:	827b      	strh	r3, [r7, #18]
 8001992:	8a7b      	ldrh	r3, [r7, #18]
 8001994:	2b04      	cmp	r3, #4
 8001996:	d9f3      	bls.n	8001980 <weigh+0x10>
  }

  int32_t average = (int32_t)(total / NUM_PS_SAMPLES);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <weigh+0x78>)
 800199c:	fb82 1203 	smull	r1, r2, r2, r3
 80019a0:	1052      	asrs	r2, r2, #1
 80019a2:	17db      	asrs	r3, r3, #31
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
  coefficient = knownOriginal / knownHX711;
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <weigh+0x7c>)
 80019aa:	edd3 6a00 	vldr	s13, [r3]
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <weigh+0x80>)
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b8:	edc7 7a02 	vstr	s15, [r7, #8]
  milligram = (int)(average-PS0_TARE)*coefficient;
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <weigh+0x84>)
 80019c0:	4413      	add	r3, r2
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d6:	ee17 3a90 	vmov	r3, s15
 80019da:	607b      	str	r3, [r7, #4]
  return milligram;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	66666667 	.word	0x66666667
 80019ec:	20040000 	.word	0x20040000
 80019f0:	20040004 	.word	0x20040004
 80019f4:	ff7dcfe0 	.word	0xff7dcfe0

080019f8 <ps_init>:


void ps_init() {};
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <ps_take_reading>:

static bool NEEDS_READING = false;

void ps_take_reading() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	NEEDS_READING = false;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <ps_take_reading+0x18>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
	CURRENT_READING = weigh();
 8001a12:	f7ff ffad 	bl	8001970 <weigh>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a02      	ldr	r2, [pc, #8]	@ (8001a24 <ps_take_reading+0x1c>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20040554 	.word	0x20040554
 8001a24:	20040550 	.word	0x20040550

08001a28 <ps_get_reading>:

int ps_get_reading() {
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	return CURRENT_READING;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <ps_get_reading+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20040550 	.word	0x20040550

08001a40 <ps_set_needs_reading>:


// sets whether or not the pressure sensor needs to take a reading
void ps_set_needs_reading(bool val) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	NEEDS_READING = val;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <ps_set_needs_reading+0x1c>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	7013      	strb	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	20040554 	.word	0x20040554

08001a60 <ps_needs_reading>:

// returns whether or not the pressure sensor needs to take a reading
bool ps_needs_reading() {
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	return NEEDS_READING;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <ps_needs_reading+0x14>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20040554 	.word	0x20040554

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a80:	f001 fdcd 	bl	800361e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a84:	f000 f8a0 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a88:	f000 fbbe 	bl	8002208 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a8c:	f000 f992 	bl	8001db4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001a90:	f000 f9dc 	bl	8001e4c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a94:	f007 f8d8 	bl	8008c48 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001a98:	f000 fa16 	bl	8001ec8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001a9c:	f000 f8da 	bl	8001c54 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001aa0:	f000 fa50 	bl	8001f44 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001aa4:	f000 fa9c 	bl	8001fe0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001aa8:	f000 fae8 	bl	800207c <MX_TIM5_Init>
  MX_TIM15_Init();
 8001aac:	f000 fb34 	bl	8002118 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001ab0:	f000 fb84 	bl	80021bc <MX_TIM16_Init>
  MX_LPUART1_UART_Init();
 8001ab4:	f000 f932 	bl	8001d1c <MX_LPUART1_UART_Init>

  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  printf("\n\r#########################################################\n\r");
 8001ab8:	483b      	ldr	r0, [pc, #236]	@ (8001ba8 <main+0x130>)
 8001aba:	f00a fd1f 	bl	800c4fc <iprintf>
  printf("                INITIALIZING SQURREL FEEDER . . .        \n\r");
 8001abe:	483b      	ldr	r0, [pc, #236]	@ (8001bac <main+0x134>)
 8001ac0:	f00a fd1c 	bl	800c4fc <iprintf>
  printf("#########################################################\n\r");
 8001ac4:	483a      	ldr	r0, [pc, #232]	@ (8001bb0 <main+0x138>)
 8001ac6:	f00a fd19 	bl	800c4fc <iprintf>
  printf("\n\r\n\r");
 8001aca:	483a      	ldr	r0, [pc, #232]	@ (8001bb4 <main+0x13c>)
 8001acc:	f00a fd16 	bl	800c4fc <iprintf>

  HAL_GPIO_WritePin(SD_FROCK_GPIO_Port, SD_FROCK_Pin, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ad6:	4838      	ldr	r0, [pc, #224]	@ (8001bb8 <main+0x140>)
 8001ad8:	f003 f998 	bl	8004e0c <HAL_GPIO_WritePin>

  // 10 second startup delay to perform the SD card magic
  HAL_Delay(3000);
 8001adc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ae0:	f001 fe12 	bl	8003708 <HAL_Delay>

  HAL_GPIO_WritePin(SD_FROCK_GPIO_Port, SD_FROCK_Pin, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aea:	4833      	ldr	r0, [pc, #204]	@ (8001bb8 <main+0x140>)
 8001aec:	f003 f98e 	bl	8004e0c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af4:	f001 fe08 	bl	8003708 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001af8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001afc:	2201      	movs	r2, #1
 8001afe:	492f      	ldr	r1, [pc, #188]	@ (8001bbc <main+0x144>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f009 fb29 	bl	800b158 <f_mount>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f887 3467 	strb.w	r3, [r7, #1127]	@ 0x467
  while (fres != FR_OK) {
 8001b0c:	e002      	b.n	8001b14 <main+0x9c>
	  printf("FRUCK\n\r");
 8001b0e:	482c      	ldr	r0, [pc, #176]	@ (8001bc0 <main+0x148>)
 8001b10:	f00a fcf4 	bl	800c4fc <iprintf>
  while (fres != FR_OK) {
 8001b14:	f897 3467 	ldrb.w	r3, [r7, #1127]	@ 0x467
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f8      	bne.n	8001b0e <main+0x96>
  }

  printf("FROCK\n\r");
 8001b1c:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <main+0x14c>)
 8001b1e:	f00a fced 	bl	800c4fc <iprintf>

  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 3, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2103      	movs	r1, #3
 8001b26:	2018      	movs	r0, #24
 8001b28:	f002 ff8f 	bl	8004a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 3, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2103      	movs	r1, #3
 8001b30:	2019      	movs	r0, #25
 8001b32:	f002 ff8a 	bl	8004a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2103      	movs	r1, #3
 8001b3a:	201e      	movs	r0, #30
 8001b3c:	f002 ff85 	bl	8004a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2103      	movs	r1, #3
 8001b44:	2032      	movs	r0, #50	@ 0x32
 8001b46:	f002 ff80 	bl	8004a4a <HAL_NVIC_SetPriority>

  init_peripherals();
 8001b4a:	f7ff fb05 	bl	8001158 <init_peripherals>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (get_feeder()->needs_to_take_picture) {
 8001b4e:	f7ff fc47 	bl	80013e0 <get_feeder>
 8001b52:	4603      	mov	r3, r0
 8001b54:	7a5b      	ldrb	r3, [r3, #9]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <main+0xf6>
		if (camera_take_photo()) {
 8001b5a:	f7ff f9eb 	bl	8000f34 <camera_take_photo>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <main+0xf6>
			get_feeder()->needs_to_take_picture = false;
 8001b64:	f7ff fc3c 	bl	80013e0 <get_feeder>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	725a      	strb	r2, [r3, #9]

//	if (!camera_get_ready() && camera_is_ready_to_request()) {
//		camera_request_chunk();
//	}

	if (!camera_get_ready() && get_feeder()->needs_to_process_picture) {
 8001b6e:	f7ff fae7 	bl	8001140 <camera_get_ready>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <main+0x110>
 8001b78:	f7ff fc32 	bl	80013e0 <get_feeder>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	7a9b      	ldrb	r3, [r3, #10]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <main+0x110>
		camera_process();
 8001b84:	f7ff faba 	bl	80010fc <camera_process>
	}

	if (ps_needs_reading()) {
 8001b88:	f7ff ff6a 	bl	8001a60 <ps_needs_reading>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <main+0x11e>
		ps_take_reading();
 8001b92:	f7ff ff39 	bl	8001a08 <ps_take_reading>
	}

	if (lcd_needs_update()) {
 8001b96:	f7ff fe6f 	bl	8001878 <lcd_needs_update>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0d6      	beq.n	8001b4e <main+0xd6>
		lcd_update();
 8001ba0:	f7ff fe02 	bl	80017a8 <lcd_update>
	if (get_feeder()->needs_to_take_picture) {
 8001ba4:	e7d3      	b.n	8001b4e <main+0xd6>
 8001ba6:	bf00      	nop
 8001ba8:	0800eb28 	.word	0x0800eb28
 8001bac:	0800eb68 	.word	0x0800eb68
 8001bb0:	0800eba4 	.word	0x0800eba4
 8001bb4:	0800ebe0 	.word	0x0800ebe0
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	0800ebe8 	.word	0x0800ebe8
 8001bc0:	0800ebec 	.word	0x0800ebec
 8001bc4:	0800ebf4 	.word	0x0800ebf4

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b096      	sub	sp, #88	@ 0x58
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	2244      	movs	r2, #68	@ 0x44
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00a fd05 	bl	800c5e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bee:	f003 f945 	bl	8004e7c <HAL_PWREx_ControlVoltageScaling>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bf8:	f000 fc7e 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c08:	2360      	movs	r3, #96	@ 0x60
 8001c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f9e5 	bl	8004fe4 <HAL_RCC_OscConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001c20:	f000 fc6a 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c24:	230f      	movs	r3, #15
 8001c26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fdeb 	bl	8005818 <HAL_RCC_ClockConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001c48:	f000 fc56 	bl	80024f8 <Error_Handler>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3758      	adds	r7, #88	@ 0x58
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c6c:	4a29      	ldr	r2, [pc, #164]	@ (8001d14 <MX_ADC1_Init+0xc0>)
 8001c6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c82:	4b23      	ldr	r3, [pc, #140]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c88:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cca:	4811      	ldr	r0, [pc, #68]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001ccc:	f001 ff1a 	bl	8003b04 <HAL_ADC_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001cd6:	f000 fc0f 	bl	80024f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <MX_ADC1_Init+0xc4>)
 8001cdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cde:	2306      	movs	r3, #6
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ce6:	237f      	movs	r3, #127	@ 0x7f
 8001ce8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cea:	2304      	movs	r3, #4
 8001cec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <MX_ADC1_Init+0xbc>)
 8001cf8:	f002 f94a 	bl	8003f90 <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001d02:	f000 fbf9 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20040558 	.word	0x20040558
 8001d14:	50040000 	.word	0x50040000
 8001d18:	36902000 	.word	0x36902000

08001d1c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d22:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <MX_LPUART1_UART_Init+0x94>)
 8001d24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d64:	4811      	ldr	r0, [pc, #68]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d66:	f005 ffa9 	bl	8007cbc <HAL_UART_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d70:	f000 fbc2 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d78:	f006 fe9c 	bl	8008ab4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d82:	f000 fbb9 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4808      	ldr	r0, [pc, #32]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d8a:	f006 fed1 	bl	8008b30 <HAL_UARTEx_SetRxFifoThreshold>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d94:	f000 fbb0 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <MX_LPUART1_UART_Init+0x90>)
 8001d9a:	f006 fe52 	bl	8008a42 <HAL_UARTEx_DisableFifoMode>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f000 fba8 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200405c0 	.word	0x200405c0
 8001db0:	40008000 	.word	0x40008000

08001db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dba:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <MX_USART3_UART_Init+0x94>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dea:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dfc:	4811      	ldr	r0, [pc, #68]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001dfe:	f005 ff5d 	bl	8007cbc <HAL_UART_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e08:	f000 fb76 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001e10:	f006 fe50 	bl	8008ab4 <HAL_UARTEx_SetTxFifoThreshold>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e1a:	f000 fb6d 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4808      	ldr	r0, [pc, #32]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001e22:	f006 fe85 	bl	8008b30 <HAL_UARTEx_SetRxFifoThreshold>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e2c:	f000 fb64 	bl	80024f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <MX_USART3_UART_Init+0x90>)
 8001e32:	f006 fe06 	bl	8008a42 <HAL_UARTEx_DisableFifoMode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e3c:	f000 fb5c 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20040654 	.word	0x20040654
 8001e48:	40004800 	.word	0x40004800

08001e4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <MX_SPI1_Init+0x78>)
 8001e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e64:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e66:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e82:	2218      	movs	r2, #24
 8001e84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_SPI1_Init+0x74>)
 8001eac:	f004 fc8a 	bl	80067c4 <HAL_SPI_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001eb6:	f000 fb1f 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200406e8 	.word	0x200406e8
 8001ec4:	40013000 	.word	0x40013000

08001ec8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001ece:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <MX_SPI3_Init+0x78>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ed8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee0:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001ee2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ee6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f16:	2207      	movs	r2, #7
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f22:	2208      	movs	r2, #8
 8001f24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <MX_SPI3_Init+0x74>)
 8001f28:	f004 fc4c 	bl	80067c4 <HAL_SPI_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001f32:	f000 fae1 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2004074c 	.word	0x2004074c
 8001f40:	40003c00 	.word	0x40003c00

08001f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f6c:	2247      	movs	r2, #71	@ 0x47
 8001f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8a:	4814      	ldr	r0, [pc, #80]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001f8c:	f005 f9b6 	bl	80072fc <HAL_TIM_Base_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f96:	f000 faaf 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001fa8:	f005 fba6 	bl	80076f8 <HAL_TIM_ConfigClockSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fb2:	f000 faa1 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	@ (8001fdc <MX_TIM2_Init+0x98>)
 8001fc4:	f005 fdd4 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fce:	f000 fa93 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200407b0 	.word	0x200407b0

08001fe0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <MX_TIM4_Init+0x98>)
 8002002:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002006:	227f      	movs	r2, #127	@ 0x7f
 8002008:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_TIM4_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62;
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002012:	223e      	movs	r2, #62	@ 0x3e
 8002014:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <MX_TIM4_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002022:	4814      	ldr	r0, [pc, #80]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002024:	f005 f96a 	bl	80072fc <HAL_TIM_Base_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800202e:	f000 fa63 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002032:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002036:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4619      	mov	r1, r3
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <MX_TIM4_Init+0x94>)
 8002040:	f005 fb5a 	bl	80076f8 <HAL_TIM_ConfigClockSource>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800204a:	f000 fa55 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	@ (8002074 <MX_TIM4_Init+0x94>)
 800205c:	f005 fd88 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002066:	f000 fa47 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200407fc 	.word	0x200407fc
 8002078:	40000800 	.word	0x40000800

0800207c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_TIM5_Init+0x94>)
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <MX_TIM5_Init+0x98>)
 800209e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020a2:	220f      	movs	r2, #15
 80020a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020c2:	f005 f91b 	bl	80072fc <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80020cc:	f000 fa14 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020de:	f005 fb0b 	bl	80076f8 <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80020e8:	f000 fa06 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_TIM5_Init+0x94>)
 80020fa:	f005 fd39 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002104:	f000 f9f8 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20040848 	.word	0x20040848
 8002114:	40000c00 	.word	0x40000c00

08002118 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002136:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002138:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <MX_TIM15_Init+0xa0>)
 800213a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 255;
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 800214a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800214e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002156:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002162:	4814      	ldr	r0, [pc, #80]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002164:	f005 f8ca 	bl	80072fc <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800216e:	f000 f9c3 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	480d      	ldr	r0, [pc, #52]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 8002180:	f005 faba 	bl	80076f8 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800218a:	f000 f9b5 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4806      	ldr	r0, [pc, #24]	@ (80021b4 <MX_TIM15_Init+0x9c>)
 800219c:	f005 fce8 	bl	8007b70 <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80021a6:	f000 f9a7 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20040894 	.word	0x20040894
 80021b8:	40014000 	.word	0x40014000

080021bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <MX_TIM16_Init+0x48>)
 80021c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 128;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021c8:	2280      	movs	r2, #128	@ 0x80
 80021ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <MX_TIM16_Init+0x44>)
 80021ee:	f005 f885 	bl	80072fc <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80021f8:	f000 f97e 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200408e0 	.word	0x200408e0
 8002204:	40014400 	.word	0x40014400

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221e:	4ba7      	ldr	r3, [pc, #668]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	4aa6      	ldr	r2, [pc, #664]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222a:	4ba4      	ldr	r3, [pc, #656]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4ba1      	ldr	r3, [pc, #644]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4aa0      	ldr	r2, [pc, #640]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b9e      	ldr	r3, [pc, #632]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b9b      	ldr	r3, [pc, #620]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	4a9a      	ldr	r2, [pc, #616]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225a:	4b98      	ldr	r3, [pc, #608]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002266:	4b95      	ldr	r3, [pc, #596]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	4a94      	ldr	r2, [pc, #592]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002272:	4b92      	ldr	r3, [pc, #584]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b8f      	ldr	r3, [pc, #572]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a8e      	ldr	r2, [pc, #568]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b8c      	ldr	r3, [pc, #560]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b89      	ldr	r3, [pc, #548]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	4a88      	ldr	r2, [pc, #544]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022a2:	4b86      	ldr	r3, [pc, #536]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ae:	4b83      	ldr	r3, [pc, #524]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	4a82      	ldr	r2, [pc, #520]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ba:	4b80      	ldr	r3, [pc, #512]	@ (80024bc <MX_GPIO_Init+0x2b4>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80022c6:	f002 fe7d 	bl	8004fc4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|ILI9341_CS_Pin
 80022ca:	2200      	movs	r2, #0
 80022cc:	f24c 0129 	movw	r1, #49193	@ 0xc029
 80022d0:	487b      	ldr	r0, [pc, #492]	@ (80024c0 <MX_GPIO_Init+0x2b8>)
 80022d2:	f002 fd9b 	bl	8004e0c <HAL_GPIO_WritePin>
                          |ILI9341_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 80022d6:	2200      	movs	r2, #0
 80022d8:	f641 7102 	movw	r1, #7938	@ 0x1f02
 80022dc:	4879      	ldr	r0, [pc, #484]	@ (80024c4 <MX_GPIO_Init+0x2bc>)
 80022de:	f002 fd95 	bl	8004e0c <HAL_GPIO_WritePin>
                          |M0_3_Pin|M1_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e8:	4877      	ldr	r0, [pc, #476]	@ (80024c8 <MX_GPIO_Init+0x2c0>)
 80022ea:	f002 fd8f 	bl	8004e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_FROCK_GPIO_Port, SD_FROCK_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022f4:	4875      	ldr	r0, [pc, #468]	@ (80024cc <MX_GPIO_Init+0x2c4>)
 80022f6:	f002 fd89 	bl	8004e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_CS_Pin|M1_1_Pin, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f244 0104 	movw	r1, #16388	@ 0x4004
 8002300:	4873      	ldr	r0, [pc, #460]	@ (80024d0 <MX_GPIO_Init+0x2c8>)
 8002302:	f002 fd83 	bl	8004e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PS1_CLK_Pin M1_2_Pin M1_3_Pin ILI9341_CS_Pin
                           ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = PS1_CLK_Pin|M1_2_Pin|M1_3_Pin|ILI9341_CS_Pin
 8002306:	f24c 0329 	movw	r3, #49193	@ 0xc029
 800230a:	61fb      	str	r3, [r7, #28]
                          |ILI9341_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4868      	ldr	r0, [pc, #416]	@ (80024c0 <MX_GPIO_Init+0x2b8>)
 8002320:	f002 fbca 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS1_DATA_Pin */
  GPIO_InitStruct.Pin = PS1_DATA_Pin;
 8002324:	2302      	movs	r3, #2
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS1_DATA_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	4862      	ldr	r0, [pc, #392]	@ (80024c0 <MX_GPIO_Init+0x2b8>)
 8002338:	f002 fbbe 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS0_CLK_Pin M0_0_Pin M0_1_Pin M0_2_Pin
                           M0_3_Pin M1_0_Pin */
  GPIO_InitStruct.Pin = PS0_CLK_Pin|M0_0_Pin|M0_1_Pin|M0_2_Pin
 800233c:	f641 7302 	movw	r3, #7938	@ 0x1f02
 8002340:	61fb      	str	r3, [r7, #28]
                          |M0_3_Pin|M1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	485b      	ldr	r0, [pc, #364]	@ (80024c4 <MX_GPIO_Init+0x2bc>)
 8002356:	f002 fbaf 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS0_DATA_Pin */
  GPIO_InitStruct.Pin = PS0_DATA_Pin;
 800235a:	2308      	movs	r3, #8
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PS0_DATA_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4855      	ldr	r0, [pc, #340]	@ (80024c4 <MX_GPIO_Init+0x2bc>)
 800236e:	f002 fba3 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002372:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8002376:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002384:	2301      	movs	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	484e      	ldr	r0, [pc, #312]	@ (80024c8 <MX_GPIO_Init+0x2c0>)
 8002390:	f002 fb92 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_RES_Pin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin;
 8002394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ILI9341_RES_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4846      	ldr	r0, [pc, #280]	@ (80024c8 <MX_GPIO_Init+0x2c0>)
 80023ae:	f002 fb83 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80023c4:	2303      	movs	r3, #3
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	483e      	ldr	r0, [pc, #248]	@ (80024c8 <MX_GPIO_Init+0x2c0>)
 80023d0:	f002 fb72 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80023d4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80023d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80023e6:	230d      	movs	r3, #13
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4836      	ldr	r0, [pc, #216]	@ (80024cc <MX_GPIO_Init+0x2c4>)
 80023f2:	f002 fb61 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_FROCK_Pin */
  GPIO_InitStruct.Pin = SD_FROCK_Pin;
 80023f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002400:	2301      	movs	r3, #1
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_FROCK_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	482f      	ldr	r0, [pc, #188]	@ (80024cc <MX_GPIO_Init+0x2c4>)
 8002410:	f002 fb52 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin M1_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|M1_1_Pin;
 8002414:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4828      	ldr	r0, [pc, #160]	@ (80024d0 <MX_GPIO_Init+0x2c8>)
 800242e:	f002 fb43 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002432:	2340      	movs	r3, #64	@ 0x40
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002442:	230d      	movs	r3, #13
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	481d      	ldr	r0, [pc, #116]	@ (80024c4 <MX_GPIO_Init+0x2bc>)
 800244e:	f002 fb33 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002462:	2302      	movs	r3, #2
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	4815      	ldr	r0, [pc, #84]	@ (80024c4 <MX_GPIO_Init+0x2bc>)
 800246e:	f002 fb23 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002472:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002484:	230a      	movs	r3, #10
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002492:	f002 fb11 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800249a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ae:	f002 fb03 	bl	8004ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024b2:	bf00      	nop
 80024b4:	3730      	adds	r7, #48	@ 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48001400 	.word	0x48001400
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	48000c00 	.word	0x48000c00

080024d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80024dc:	1d39      	adds	r1, r7, #4
 80024de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e2:	2201      	movs	r2, #1
 80024e4:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <__io_putchar+0x20>)
 80024e6:	f005 fc39 	bl	8007d5c <HAL_UART_Transmit>
  return ch;
 80024ea:	687b      	ldr	r3, [r7, #4]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200405c0 	.word	0x200405c0

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <stepper_rotate_clockwise_ir>:
	{1, 0, 0, 1} };

static bool motor_running = false;
static uint32_t cur_rotation_idx = 0;

void stepper_rotate_clockwise_ir() {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(M0_0_GPIO_Port, M0_0_Pin, steps[cur_rotation_idx][0]);
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <stepper_rotate_clockwise_ir+0x94>)
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800251c:	481f      	ldr	r0, [pc, #124]	@ (800259c <stepper_rotate_clockwise_ir+0x98>)
 800251e:	f002 fc75 	bl	8004e0c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_1_GPIO_Port, M0_1_Pin, steps[cur_rotation_idx][1]);
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <stepper_rotate_clockwise_ir+0x94>)
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002538:	4818      	ldr	r0, [pc, #96]	@ (800259c <stepper_rotate_clockwise_ir+0x98>)
 800253a:	f002 fc67 	bl	8004e0c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_2_GPIO_Port, M0_2_Pin, steps[cur_rotation_idx][2]);
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <stepper_rotate_clockwise_ir+0x94>)
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4413      	add	r3, r2
 8002548:	3308      	adds	r3, #8
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002554:	4811      	ldr	r0, [pc, #68]	@ (800259c <stepper_rotate_clockwise_ir+0x98>)
 8002556:	f002 fc59 	bl	8004e0c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(M0_3_GPIO_Port, M0_3_Pin, steps[cur_rotation_idx][3]);
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <stepper_rotate_clockwise_ir+0x94>)
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	330c      	adds	r3, #12
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002570:	480a      	ldr	r0, [pc, #40]	@ (800259c <stepper_rotate_clockwise_ir+0x98>)
 8002572:	f002 fc4b 	bl	8004e0c <HAL_GPIO_WritePin>

	 // ALSO M1 TODO

	 cur_rotation_idx++;
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a05      	ldr	r2, [pc, #20]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 800257e:	6013      	str	r3, [r2, #0]
	 if (cur_rotation_idx == 8) {
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d102      	bne.n	800258e <stepper_rotate_clockwise_ir+0x8a>
		 cur_rotation_idx = 0;
 8002588:	4b02      	ldr	r3, [pc, #8]	@ (8002594 <stepper_rotate_clockwise_ir+0x90>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
	 }
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20040930 	.word	0x20040930
 8002598:	20040008 	.word	0x20040008
 800259c:	48000800 	.word	0x48000800

080025a0 <motor_start>:
//
//	// enable motor timer interrupt
//	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
//}

void motor_start() {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	if (motor_running) {
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <motor_start+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <motor_start+0x1a>
		return;
	}

	motor_running = true;
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <motor_start+0x20>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&MOTOR_TIMER_HANDLE);
 80025b2:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <motor_start+0x24>)
 80025b4:	f004 fefa 	bl	80073ac <HAL_TIM_Base_Start_IT>
 80025b8:	e000      	b.n	80025bc <motor_start+0x1c>
		return;
 80025ba:	bf00      	nop
}
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2004092c 	.word	0x2004092c
 80025c4:	200407fc 	.word	0x200407fc

080025c8 <motor_stop>:

void motor_stop() {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
	if (!motor_running) {
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <motor_stop+0x24>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <motor_stop+0x20>
		return;
	}

	motor_running = false;
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <motor_stop+0x24>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&MOTOR_TIMER_HANDLE);
 80025e0:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <motor_stop+0x28>)
 80025e2:	f004 ff53 	bl	800748c <HAL_TIM_Base_Stop_IT>
 80025e6:	e000      	b.n	80025ea <motor_stop+0x22>
		return;
 80025e8:	bf00      	nop
}
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2004092c 	.word	0x2004092c
 80025f0:	200407fc 	.word	0x200407fc

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_MspInit+0x44>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002638 <HAL_MspInit+0x44>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6613      	str	r3, [r2, #96]	@ 0x60
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_MspInit+0x44>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_MspInit+0x44>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_MspInit+0x44>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_MspInit+0x44>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0b0      	sub	sp, #192	@ 0xc0
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	2294      	movs	r2, #148	@ 0x94
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f009 ffc2 	bl	800c5e6 <memset>
  if(hadc->Instance==ADC1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a35      	ldr	r2, [pc, #212]	@ (800273c <HAL_ADC_MspInit+0x100>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d162      	bne.n	8002732 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800266c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002670:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002672:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002676:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800267a:	2301      	movs	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002682:	2310      	movs	r3, #16
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002686:	2302      	movs	r3, #2
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800268a:	2302      	movs	r3, #2
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800268e:	2302      	movs	r3, #2
 8002690:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002692:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fb79 	bl	8005d94 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80026a8:	f7ff ff26 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80026ac:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b0:	4a23      	ldr	r2, [pc, #140]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b8:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e0:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e8:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_ADC_MspInit+0x104>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f4:	2308      	movs	r3, #8
 80026f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026fa:	230b      	movs	r3, #11
 80026fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002710:	f002 f9d2 	bl	8004ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IR0_ADC_Pin|IR1_ADC_Pin;
 8002714:	2330      	movs	r3, #48	@ 0x30
 8002716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800271a:	230b      	movs	r3, #11
 800271c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <HAL_ADC_MspInit+0x108>)
 800272e:	f002 f9c3 	bl	8004ab8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002732:	bf00      	nop
 8002734:	37c0      	adds	r7, #192	@ 0xc0
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	50040000 	.word	0x50040000
 8002740:	40021000 	.word	0x40021000
 8002744:	48000800 	.word	0x48000800

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0b0      	sub	sp, #192	@ 0xc0
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002760:	f107 0318 	add.w	r3, r7, #24
 8002764:	2294      	movs	r2, #148	@ 0x94
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f009 ff3c 	bl	800c5e6 <memset>
  if(huart->Instance==LPUART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a43      	ldr	r2, [pc, #268]	@ (8002880 <HAL_UART_MspInit+0x138>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d13e      	bne.n	80027f6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002778:	2320      	movs	r3, #32
 800277a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800277c:	2300      	movs	r3, #0
 800277e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fb05 	bl	8005d94 <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002790:	f7ff feb2 	bl	80024f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002794:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	4a3a      	ldr	r2, [pc, #232]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 80027a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ac:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 80027ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b0:	4a34      	ldr	r2, [pc, #208]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 80027b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b8:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 80027ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80027c4:	f002 fbfe 	bl	8004fc4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80027c8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80027e2:	2308      	movs	r3, #8
 80027e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027ec:	4619      	mov	r1, r3
 80027ee:	4826      	ldr	r0, [pc, #152]	@ (8002888 <HAL_UART_MspInit+0x140>)
 80027f0:	f002 f962 	bl	8004ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f4:	e040      	b.n	8002878 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a24      	ldr	r2, [pc, #144]	@ (800288c <HAL_UART_MspInit+0x144>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d13b      	bne.n	8002878 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002800:	2304      	movs	r3, #4
 8002802:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002804:	2300      	movs	r3, #0
 8002806:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002808:	f107 0318 	add.w	r3, r7, #24
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fac1 	bl	8005d94 <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002818:	f7ff fe6e 	bl	80024f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <HAL_UART_MspInit+0x13c>)
 8002842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 800284c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002866:	2307      	movs	r3, #7
 8002868:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002870:	4619      	mov	r1, r3
 8002872:	4807      	ldr	r0, [pc, #28]	@ (8002890 <HAL_UART_MspInit+0x148>)
 8002874:	f002 f920 	bl	8004ab8 <HAL_GPIO_Init>
}
 8002878:	bf00      	nop
 800287a:	37c0      	adds	r7, #192	@ 0xc0
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40008000 	.word	0x40008000
 8002884:	40021000 	.word	0x40021000
 8002888:	48001800 	.word	0x48001800
 800288c:	40004800 	.word	0x40004800
 8002890:	48000c00 	.word	0x48000c00

08002894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_SPI_MspInit+0xd8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d129      	bne.n	800290a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a27      	ldr	r2, [pc, #156]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028da:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80028e6:	23e0      	movs	r3, #224	@ 0xe0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f6:	2305      	movs	r3, #5
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 031c 	add.w	r3, r7, #28
 80028fe:	4619      	mov	r1, r3
 8002900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002904:	f002 f8d8 	bl	8004ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002908:	e02c      	b.n	8002964 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a19      	ldr	r2, [pc, #100]	@ (8002974 <HAL_SPI_MspInit+0xe0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d127      	bne.n	8002964 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002914:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	4a15      	ldr	r2, [pc, #84]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 800291a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_SPI_MspInit+0xdc>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8002944:	2328      	movs	r3, #40	@ 0x28
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002954:	2306      	movs	r3, #6
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	@ (8002978 <HAL_SPI_MspInit+0xe4>)
 8002960:	f002 f8aa 	bl	8004ab8 <HAL_GPIO_Init>
}
 8002964:	bf00      	nop
 8002966:	3730      	adds	r7, #48	@ 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40013000 	.word	0x40013000
 8002970:	40021000 	.word	0x40021000
 8002974:	40003c00 	.word	0x40003c00
 8002978:	48000400 	.word	0x48000400

0800297c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	@ 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299c:	d129      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299e:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a2:	4a66      	ldr	r2, [pc, #408]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029aa:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	4a60      	ldr	r2, [pc, #384]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c2:	4b5e      	ldr	r3, [pc, #376]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e0:	2301      	movs	r3, #1
 80029e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029e8:	4619      	mov	r1, r3
 80029ea:	4855      	ldr	r0, [pc, #340]	@ (8002b40 <HAL_TIM_Base_MspInit+0x1c4>)
 80029ec:	f002 f864 	bl	8004ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80029f0:	e0a0      	b.n	8002b34 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM4)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a53      	ldr	r2, [pc, #332]	@ (8002b44 <HAL_TIM_Base_MspInit+0x1c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d131      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029fc:	4b4f      	ldr	r3, [pc, #316]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	4a4e      	ldr	r2, [pc, #312]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a08:	4b4c      	ldr	r3, [pc, #304]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a18:	4a48      	ldr	r2, [pc, #288]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a20:	4b46      	ldr	r3, [pc, #280]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	483f      	ldr	r0, [pc, #252]	@ (8002b48 <HAL_TIM_Base_MspInit+0x1cc>)
 8002a4a:	f002 f835 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	201e      	movs	r0, #30
 8002a54:	f001 fff9 	bl	8004a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a58:	201e      	movs	r0, #30
 8002a5a:	f002 f812 	bl	8004a82 <HAL_NVIC_EnableIRQ>
}
 8002a5e:	e069      	b.n	8002b34 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM5)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a39      	ldr	r2, [pc, #228]	@ (8002b4c <HAL_TIM_Base_MspInit+0x1d0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d114      	bne.n	8002a94 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a6a:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	4a33      	ldr	r2, [pc, #204]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2032      	movs	r0, #50	@ 0x32
 8002a88:	f001 ffdf 	bl	8004a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a8c:	2032      	movs	r0, #50	@ 0x32
 8002a8e:	f001 fff8 	bl	8004a82 <HAL_NVIC_EnableIRQ>
}
 8002a92:	e04f      	b.n	8002b34 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM15)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2d      	ldr	r2, [pc, #180]	@ (8002b50 <HAL_TIM_Base_MspInit+0x1d4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d131      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002a9e:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	4a26      	ldr	r2, [pc, #152]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aaa:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	4a20      	ldr	r2, [pc, #128]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ace:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002ae0:	230e      	movs	r3, #14
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4815      	ldr	r0, [pc, #84]	@ (8002b40 <HAL_TIM_Base_MspInit+0x1c4>)
 8002aec:	f001 ffe4 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2018      	movs	r0, #24
 8002af6:	f001 ffa8 	bl	8004a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002afa:	2018      	movs	r0, #24
 8002afc:	f001 ffc1 	bl	8004a82 <HAL_NVIC_EnableIRQ>
}
 8002b00:	e018      	b.n	8002b34 <HAL_TIM_Base_MspInit+0x1b8>
  else if(htim_base->Instance==TIM16)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <HAL_TIM_Base_MspInit+0x1d8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d113      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b10:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <HAL_TIM_Base_MspInit+0x1c0>)
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2019      	movs	r0, #25
 8002b2a:	f001 ff8e 	bl	8004a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b2e:	2019      	movs	r0, #25
 8002b30:	f001 ffa7 	bl	8004a82 <HAL_NVIC_EnableIRQ>
}
 8002b34:	bf00      	nop
 8002b36:	3740      	adds	r7, #64	@ 0x40
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	48000400 	.word	0x48000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	48000c00 	.word	0x48000c00
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40014400 	.word	0x40014400

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <NMI_Handler+0x4>

08002b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <MemManage_Handler+0x4>

08002b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bae:	f000 fd8b 	bl	80036c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002bbc:	4803      	ldr	r0, [pc, #12]	@ (8002bcc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002bbe:	f004 fc94 	bl	80074ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  lcd_trigger_update();
 8002bc2:	f7fe fe4d 	bl	8001860 <lcd_trigger_update>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20040894 	.word	0x20040894

08002bd0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002bd4:	4803      	ldr	r0, [pc, #12]	@ (8002be4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002bd6:	f004 fc88 	bl	80074ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  main_isr();
 8002bda:	f7fe fae9 	bl	80011b0 <main_isr>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200408e0 	.word	0x200408e0

08002be8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bec:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <TIM4_IRQHandler+0x14>)
 8002bee:	f004 fc7c 	bl	80074ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  stepper_rotate_clockwise_ir();
 8002bf2:	f7ff fc87 	bl	8002504 <stepper_rotate_clockwise_ir>

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200407fc 	.word	0x200407fc

08002c00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c04:	4804      	ldr	r0, [pc, #16]	@ (8002c18 <TIM5_IRQHandler+0x18>)
 8002c06:	f004 fc70 	bl	80074ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  ir_sensor_interrupt_routine();
 8002c0a:	f7fe fc35 	bl	8001478 <ir_sensor_interrupt_routine>
  ps_set_needs_reading(true);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7fe ff16 	bl	8001a40 <ps_set_needs_reading>
//  ps_isr();

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20040848 	.word	0x20040848

08002c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return 1;
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_kill>:

int _kill(int pid, int sig)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c36:	f009 fd29 	bl	800c68c <__errno>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2216      	movs	r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_exit>:

void _exit (int status)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffe7 	bl	8002c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c5e:	bf00      	nop
 8002c60:	e7fd      	b.n	8002c5e <_exit+0x12>

08002c62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e00a      	b.n	8002c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c74:	f3af 8000 	nop.w
 8002c78:	4601      	mov	r1, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	60ba      	str	r2, [r7, #8]
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dbf0      	blt.n	8002c74 <_read+0x12>
  }

  return len;
 8002c92:	687b      	ldr	r3, [r7, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e009      	b.n	8002cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	60ba      	str	r2, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc0c 	bl	80024d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	dbf1      	blt.n	8002cae <_write+0x12>
  }
  return len;
 8002cca:	687b      	ldr	r3, [r7, #4]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_close>:

int _close(int file)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_isatty>:

int _isatty(int file)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	@ (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f009 fc8e 	bl	800c68c <__errno>
 8002d70:	4603      	mov	r3, r0
 8002d72:	220c      	movs	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200a0000 	.word	0x200a0000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	20040934 	.word	0x20040934
 8002da4:	20040ad0 	.word	0x20040ad0

08002da8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <SystemInit+0x20>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <SystemInit+0x20>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <VC0706_SendCommand>:
/* VC0706_SendCommand
 * cmd - one of the command a data bytes
 * params - array of additional command bytes
 * params_len - length of parameters array
 */
void VC0706_SendCommand(uint8_t cmd, uint8_t *params, uint8_t params_len) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[16];

    /*
     * Universal Command Prefix
     */
    buffer[0] = VC0706_CMD_PREFIX;
 8002ddc:	2356      	movs	r3, #86	@ 0x56
 8002dde:	733b      	strb	r3, [r7, #12]
    buffer[1] = VC0706_SERIAL_NUM;
 8002de0:	2300      	movs	r3, #0
 8002de2:	737b      	strb	r3, [r7, #13]

    // Insert the command ID byte
    buffer[2] = cmd;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	73bb      	strb	r3, [r7, #14]

    /*
     * Copy params into command buffer
     */
    for (uint8_t i = 0; i < params_len; i++) {
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e00c      	b.n	8002e08 <VC0706_SendCommand+0x3c>
        buffer[3 + i] = params[i];
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	441a      	add	r2, r3
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	3303      	adds	r3, #3
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	3320      	adds	r3, #32
 8002dfc:	443b      	add	r3, r7
 8002dfe:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < params_len; i++) {
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	3301      	adds	r3, #1
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	7ffa      	ldrb	r2, [r7, #31]
 8002e0a:	79bb      	ldrb	r3, [r7, #6]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3ee      	bcc.n	8002dee <VC0706_SendCommand+0x22>
    }

    HAL_UART_Transmit(&CAM_UART_HANDLE, buffer, 3 + params_len, HAL_MAX_DELAY);
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3303      	adds	r3, #3
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	f107 010c 	add.w	r1, r7, #12
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	4803      	ldr	r0, [pc, #12]	@ (8002e30 <VC0706_SendCommand+0x64>)
 8002e22:	f004 ff9b 	bl	8007d5c <HAL_UART_Transmit>
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20040654 	.word	0x20040654

08002e34 <VC0706_TakePhoto>:

/* VC0706_TakePhoto
 *
 * Sends take photo command and verifies response ACK
 */
uint8_t VC0706_TakePhoto(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
    uint8_t takePhotoCommand[] = {0x01, 0x00}; // Parameters for taking a photo
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	81bb      	strh	r3, [r7, #12]
    VC0706_SendCommand(VC0706_CMD_TAKE_PHOTO, takePhotoCommand, sizeof(takePhotoCommand));
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	2202      	movs	r2, #2
 8002e44:	4619      	mov	r1, r3
 8002e46:	2036      	movs	r0, #54	@ 0x36
 8002e48:	f7ff ffc0 	bl	8002dcc <VC0706_SendCommand>

    // response array
    uint8_t response[5]={0};
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	2300      	movs	r3, #0
 8002e52:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT); // 1-second timeout
 8002e54:	1d39      	adds	r1, r7, #4
 8002e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	4810      	ldr	r0, [pc, #64]	@ (8002ea0 <VC0706_TakePhoto+0x6c>)
 8002e5e:	f005 f80b 	bl	8007e78 <HAL_UART_Receive>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <VC0706_TakePhoto+0x3c>
        // Timeout or error occurred, handle accordingly
        return 0; // Indicate failure to receive acknowledgment
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e012      	b.n	8002e96 <VC0706_TakePhoto+0x62>
    }

    // Check if the received response is as expected: 0x76 0x00 0x36 0x00 0x00
    return response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00;
 8002e70:	793b      	ldrb	r3, [r7, #4]
 8002e72:	2b76      	cmp	r3, #118	@ 0x76
 8002e74:	d10d      	bne.n	8002e92 <VC0706_TakePhoto+0x5e>
 8002e76:	797b      	ldrb	r3, [r7, #5]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <VC0706_TakePhoto+0x5e>
 8002e7c:	79bb      	ldrb	r3, [r7, #6]
 8002e7e:	2b36      	cmp	r3, #54	@ 0x36
 8002e80:	d107      	bne.n	8002e92 <VC0706_TakePhoto+0x5e>
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <VC0706_TakePhoto+0x5e>
 8002e88:	7a3b      	ldrb	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <VC0706_TakePhoto+0x5e>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <VC0706_TakePhoto+0x60>
 8002e92:	2300      	movs	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20040654 	.word	0x20040654

08002ea4 <VC0706_StopCapture>:

/* VC0706_StopCapture
 * Sends the stop capture command, and verifies the ack
 *
 */
uint8_t VC0706_StopCapture(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
    uint8_t stopCaptureCommand[] = {0x01, 0x03};
 8002eaa:	f240 3301 	movw	r3, #769	@ 0x301
 8002eae:	81bb      	strh	r3, [r7, #12]
    uint8_t response[5] = {0}; // Expected response: 0x76 0x00 0x36 0x00 0x00
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	723b      	strb	r3, [r7, #8]

    // Send the Stop Capture command
    VC0706_SendCommand(VC0706_CMD_STOP_CAPTURE, stopCaptureCommand, sizeof(stopCaptureCommand));
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	2036      	movs	r0, #54	@ 0x36
 8002ec2:	f7ff ff83 	bl	8002dcc <VC0706_SendCommand>

    // Receive the response
    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002ec6:	1d39      	adds	r1, r7, #4
 8002ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ecc:	2205      	movs	r2, #5
 8002ece:	480f      	ldr	r0, [pc, #60]	@ (8002f0c <VC0706_StopCapture+0x68>)
 8002ed0:	f004 ffd2 	bl	8007e78 <HAL_UART_Receive>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	73fb      	strb	r3, [r7, #15]

    // Check if the response is as expected
    return (status == HAL_OK) && (response[0] == 0x76 && response[1] == 0x00 && response[2] == 0x36 && response[3] == 0x00 && response[4] == 0x00);
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d110      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002ede:	793b      	ldrb	r3, [r7, #4]
 8002ee0:	2b76      	cmp	r3, #118	@ 0x76
 8002ee2:	d10d      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002ee4:	797b      	ldrb	r3, [r7, #5]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	2b36      	cmp	r3, #54	@ 0x36
 8002eee:	d107      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002ef6:	7a3b      	ldrb	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <VC0706_StopCapture+0x5c>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <VC0706_StopCapture+0x5e>
 8002f00:	2300      	movs	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20040654 	.word	0x20040654

08002f10 <VC0706_ReadImageDataLength>:
 *
 * Sends read image data length command returns correctly formated uint16_t containing
 * the length of the most recently taken image in bytes
 *
 */
uint16_t VC0706_ReadImageDataLength(void) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
	uint8_t read_image_len_cmd[] = {0x01, 0x00};
 8002f16:	2301      	movs	r3, #1
 8002f18:	823b      	strh	r3, [r7, #16]
	VC0706_SendCommand(VC0706_CMD_READ_DATA_LEN, read_image_len_cmd, sizeof(read_image_len_cmd));
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4619      	mov	r1, r3
 8002f22:	2034      	movs	r0, #52	@ 0x34
 8002f24:	f7ff ff52 	bl	8002dcc <VC0706_SendCommand>

	uint8_t response[9]; // repsonse buffer
	HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, response, sizeof(response), VC0706_RESPONSE_TIMEOUT);
 8002f28:	1d39      	adds	r1, r7, #4
 8002f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2e:	2209      	movs	r2, #9
 8002f30:	480b      	ldr	r0, [pc, #44]	@ (8002f60 <VC0706_ReadImageDataLength+0x50>)
 8002f32:	f004 ffa1 	bl	8007e78 <HAL_UART_Receive>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]


    if (status != HAL_OK) {
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <VC0706_ReadImageDataLength+0x34>
    	return 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e008      	b.n	8002f56 <VC0706_ReadImageDataLength+0x46>
    }

    uint16_t image_len = (response[7] << 8) | response[8];
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	b21a      	sxth	r2, r3
 8002f4a:	7b3b      	ldrb	r3, [r7, #12]
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	82bb      	strh	r3, [r7, #20]

    return image_len;
 8002f54:	8abb      	ldrh	r3, [r7, #20]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20040654 	.word	0x20040654

08002f64 <VC0706_ReadImageBlock>:
/* VC0706_ReadImageBlock
 * Sends the read image command, and then receives one block of image data into the provided buffer
 *
 * feeds the entire response into the image_buffer, which is at least 42 bytes
 */
uint8_t VC0706_ReadImageBlock(uint8_t *image_buffer, uint32_t start_address) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
    uint8_t readCommand[13];

    readCommand[0] = 0x0C;
 8002f6e:	230c      	movs	r3, #12
 8002f70:	723b      	strb	r3, [r7, #8]
    readCommand[1] = 0x00;
 8002f72:	2300      	movs	r3, #0
 8002f74:	727b      	strb	r3, [r7, #9]
    readCommand[2] = 0x0A; // was 0D
 8002f76:	230a      	movs	r3, #10
 8002f78:	72bb      	strb	r3, [r7, #10]
    readCommand[3] = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	72fb      	strb	r3, [r7, #11]
    readCommand[4] = 0x00;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	733b      	strb	r3, [r7, #12]

    readCommand[5] = (start_address >> 8) & 0xFF;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	737b      	strb	r3, [r7, #13]
    readCommand[6] = start_address & 0xFF;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	73bb      	strb	r3, [r7, #14]

    readCommand[7] = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
    readCommand[8] = 0x00;
 8002f94:	2300      	movs	r3, #0
 8002f96:	743b      	strb	r3, [r7, #16]

    readCommand[9] = 0x00;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	747b      	strb	r3, [r7, #17]
    readCommand[10] = 0x20;
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	74bb      	strb	r3, [r7, #18]

    readCommand[11] = 0x00;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	74fb      	strb	r3, [r7, #19]
    readCommand[12] = 0xFF;
 8002fa4:	23ff      	movs	r3, #255	@ 0xff
 8002fa6:	753b      	strb	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa8:	b672      	cpsid	i
}
 8002faa:	bf00      	nop

    __disable_irq();

    VC0706_SendCommand(VC0706_CMD_READ_DATA, readCommand, sizeof(readCommand));
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	220d      	movs	r2, #13
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	2032      	movs	r0, #50	@ 0x32
 8002fb6:	f7ff ff09 	bl	8002dcc <VC0706_SendCommand>

    HAL_StatusTypeDef status = HAL_UART_Receive(&CAM_UART_HANDLE, image_buffer, VC0706_IMAGE_BLOCK_SIZE + 10, VC0706_RESPONSE_TIMEOUT);
 8002fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fbe:	222a      	movs	r2, #42	@ 0x2a
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4808      	ldr	r0, [pc, #32]	@ (8002fe4 <VC0706_ReadImageBlock+0x80>)
 8002fc4:	f004 ff58 	bl	8007e78 <HAL_UART_Receive>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fcc:	b662      	cpsie	i
}
 8002fce:	bf00      	nop

    __enable_irq();

    return status == HAL_OK;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf0c      	ite	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	2300      	movne	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20040654 	.word	0x20040654

08002fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fec:	f7ff fedc 	bl	8002da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff0:	480c      	ldr	r0, [pc, #48]	@ (8003024 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ff2:	490d      	ldr	r1, [pc, #52]	@ (8003028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <LoopForever+0xe>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003008:	4c0a      	ldr	r4, [pc, #40]	@ (8003034 <LoopForever+0x16>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003016:	f009 fb3f 	bl	800c698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800301a:	f7fe fd2d 	bl	8001a78 <main>

0800301e <LoopForever>:

LoopForever:
    b LoopForever
 800301e:	e7fe      	b.n	800301e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003020:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003024:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8003028:	20040284 	.word	0x20040284
  ldr r2, =_sidata
 800302c:	0809d1e4 	.word	0x0809d1e4
  ldr r2, =_sbss
 8003030:	20040284 	.word	0x20040284
  ldr r4, =_ebss
 8003034:	20040ad0 	.word	0x20040ad0

08003038 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC1_IRQHandler>
	...

0800303c <ILI9341_Select>:
 */

#include "stm32l4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003046:	4802      	ldr	r0, [pc, #8]	@ (8003050 <ILI9341_Select+0x14>)
 8003048:	f001 fee0 	bl	8004e0c <HAL_GPIO_WritePin>
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	48001400 	.word	0x48001400

08003054 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800305e:	4802      	ldr	r0, [pc, #8]	@ (8003068 <ILI9341_Unselect+0x14>)
 8003060:	f001 fed4 	bl	8004e0c <HAL_GPIO_WritePin>
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	48001400 	.word	0x48001400

0800306c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003076:	4807      	ldr	r0, [pc, #28]	@ (8003094 <ILI9341_Reset+0x28>)
 8003078:	f001 fec8 	bl	8004e0c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800307c:	2005      	movs	r0, #5
 800307e:	f000 fb43 	bl	8003708 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <ILI9341_Reset+0x28>)
 800308a:	f001 febf 	bl	8004e0c <HAL_GPIO_WritePin>
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	48001000 	.word	0x48001000

08003098 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a8:	4806      	ldr	r0, [pc, #24]	@ (80030c4 <ILI9341_WriteCommand+0x2c>)
 80030aa:	f001 feaf 	bl	8004e0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80030ae:	1df9      	adds	r1, r7, #7
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	2201      	movs	r2, #1
 80030b6:	4804      	ldr	r0, [pc, #16]	@ (80030c8 <ILI9341_WriteCommand+0x30>)
 80030b8:	f003 fc27 	bl	800690a <HAL_SPI_Transmit>

}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	48001400 	.word	0x48001400
 80030c8:	2004074c 	.word	0x2004074c

080030cc <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030dc:	4810      	ldr	r0, [pc, #64]	@ (8003120 <ILI9341_WriteData+0x54>)
 80030de:	f001 fe95 	bl	8004e0c <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80030e2:	e015      	b.n	8003110 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ea:	bf28      	it	cs
 80030ec:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80030f0:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80030f2:	89fa      	ldrh	r2, [r7, #14]
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	480a      	ldr	r0, [pc, #40]	@ (8003124 <ILI9341_WriteData+0x58>)
 80030fc:	f003 fc05 	bl	800690a <HAL_SPI_Transmit>

        buff += chunk_size;
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8003108:	89fb      	ldrh	r3, [r7, #14]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e6      	bne.n	80030e4 <ILI9341_WriteData+0x18>
    }
}
 8003116:	bf00      	nop
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	48001400 	.word	0x48001400
 8003124:	2004074c 	.word	0x2004074c

08003128 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	4604      	mov	r4, r0
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4623      	mov	r3, r4
 8003138:	80fb      	strh	r3, [r7, #6]
 800313a:	4603      	mov	r3, r0
 800313c:	80bb      	strh	r3, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]
 8003142:	4613      	mov	r3, r2
 8003144:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8003146:	202a      	movs	r0, #42	@ 0x2a
 8003148:	f7ff ffa6 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	733b      	strb	r3, [r7, #12]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	737b      	strb	r3, [r7, #13]
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b29b      	uxth	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	73bb      	strb	r3, [r7, #14]
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2104      	movs	r1, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ffaa 	bl	80030cc <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8003178:	202b      	movs	r0, #43	@ 0x2b
 800317a:	f7ff ff8d 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800317e:	88bb      	ldrh	r3, [r7, #4]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	b29b      	uxth	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	723b      	strb	r3, [r7, #8]
 8003188:	88bb      	ldrh	r3, [r7, #4]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	727b      	strb	r3, [r7, #9]
 800318e:	883b      	ldrh	r3, [r7, #0]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	b29b      	uxth	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	72bb      	strb	r3, [r7, #10]
 8003198:	883b      	ldrh	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	2104      	movs	r1, #4
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff91 	bl	80030cc <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80031aa:	202c      	movs	r0, #44	@ 0x2c
 80031ac:	f7ff ff74 	bl	8003098 <ILI9341_WriteCommand>
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <ILI9341_Init>:

void ILI9341_Init() {
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b09b      	sub	sp, #108	@ 0x6c
 80031bc:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80031be:	f7ff ff3d 	bl	800303c <ILI9341_Select>
    ILI9341_Reset();
 80031c2:	f7ff ff53 	bl	800306c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f7ff ff66 	bl	8003098 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80031cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031d0:	f000 fa9a 	bl	8003708 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80031d4:	20cb      	movs	r0, #203	@ 0xcb
 80031d6:	f7ff ff5f 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80031da:	4a87      	ldr	r2, [pc, #540]	@ (80033f8 <ILI9341_Init+0x240>)
 80031dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031e4:	6018      	str	r0, [r3, #0]
 80031e6:	3304      	adds	r3, #4
 80031e8:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80031ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031ee:	2105      	movs	r1, #5
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff6b 	bl	80030cc <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80031f6:	20cf      	movs	r0, #207	@ 0xcf
 80031f8:	f7ff ff4e 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80031fc:	4a7f      	ldr	r2, [pc, #508]	@ (80033fc <ILI9341_Init+0x244>)
 80031fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4611      	mov	r1, r2
 8003206:	8019      	strh	r1, [r3, #0]
 8003208:	3302      	adds	r3, #2
 800320a:	0c12      	lsrs	r2, r2, #16
 800320c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800320e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003212:	2103      	movs	r1, #3
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff59 	bl	80030cc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 800321a:	20e8      	movs	r0, #232	@ 0xe8
 800321c:	f7ff ff3c 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8003220:	4a77      	ldr	r2, [pc, #476]	@ (8003400 <ILI9341_Init+0x248>)
 8003222:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4611      	mov	r1, r2
 800322a:	8019      	strh	r1, [r3, #0]
 800322c:	3302      	adds	r3, #2
 800322e:	0c12      	lsrs	r2, r2, #16
 8003230:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003232:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003236:	2103      	movs	r1, #3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff47 	bl	80030cc <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800323e:	20ea      	movs	r0, #234	@ 0xea
 8003240:	f7ff ff2a 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8003244:	2300      	movs	r3, #0
 8003246:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 800324a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff3b 	bl	80030cc <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8003256:	20ed      	movs	r0, #237	@ 0xed
 8003258:	f7ff ff1e 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800325c:	4b69      	ldr	r3, [pc, #420]	@ (8003404 <ILI9341_Init+0x24c>)
 800325e:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8003260:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003264:	2104      	movs	r1, #4
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff30 	bl	80030cc <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 800326c:	20f7      	movs	r0, #247	@ 0xf7
 800326e:	f7ff ff13 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8003272:	2320      	movs	r3, #32
 8003274:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8003278:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff24 	bl	80030cc <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8003284:	20c0      	movs	r0, #192	@ 0xc0
 8003286:	f7ff ff07 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800328a:	2323      	movs	r3, #35	@ 0x23
 800328c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8003290:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ff18 	bl	80030cc <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 800329c:	20c1      	movs	r0, #193	@ 0xc1
 800329e:	f7ff fefb 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80032a2:	2310      	movs	r3, #16
 80032a4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80032a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff0c 	bl	80030cc <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80032b4:	20c5      	movs	r0, #197	@ 0xc5
 80032b6:	f7ff feef 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80032ba:	f642 033e 	movw	r3, #10302	@ 0x283e
 80032be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80032c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff feff 	bl	80030cc <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80032ce:	20c7      	movs	r0, #199	@ 0xc7
 80032d0:	f7ff fee2 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80032d4:	2386      	movs	r3, #134	@ 0x86
 80032d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80032da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032de:	2101      	movs	r1, #1
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fef3 	bl	80030cc <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80032e6:	2036      	movs	r0, #54	@ 0x36
 80032e8:	f7ff fed6 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80032ec:	2348      	movs	r3, #72	@ 0x48
 80032ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80032f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fee7 	bl	80030cc <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80032fe:	203a      	movs	r0, #58	@ 0x3a
 8003300:	f7ff feca 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8003304:	2355      	movs	r3, #85	@ 0x55
 8003306:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800330a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fedb 	bl	80030cc <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8003316:	20b1      	movs	r0, #177	@ 0xb1
 8003318:	f7ff febe 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800331c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003320:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8003322:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fecf 	bl	80030cc <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800332e:	20b6      	movs	r0, #182	@ 0xb6
 8003330:	f7ff feb2 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8003334:	4a34      	ldr	r2, [pc, #208]	@ (8003408 <ILI9341_Init+0x250>)
 8003336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	4611      	mov	r1, r2
 800333e:	8019      	strh	r1, [r3, #0]
 8003340:	3302      	adds	r3, #2
 8003342:	0c12      	lsrs	r2, r2, #16
 8003344:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8003346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800334a:	2103      	movs	r1, #3
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff febd 	bl	80030cc <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8003352:	20f2      	movs	r0, #242	@ 0xf2
 8003354:	f7ff fea0 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800335e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff feb1 	bl	80030cc <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800336a:	2026      	movs	r0, #38	@ 0x26
 800336c:	f7ff fe94 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8003376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fea5 	bl	80030cc <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8003382:	20e0      	movs	r0, #224	@ 0xe0
 8003384:	f7ff fe88 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8003388:	4b20      	ldr	r3, [pc, #128]	@ (800340c <ILI9341_Init+0x254>)
 800338a:	f107 0414 	add.w	r4, r7, #20
 800338e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003390:	c407      	stmia	r4!, {r0, r1, r2}
 8003392:	8023      	strh	r3, [r4, #0]
 8003394:	3402      	adds	r4, #2
 8003396:	0c1b      	lsrs	r3, r3, #16
 8003398:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	210f      	movs	r1, #15
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe93 	bl	80030cc <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80033a6:	20e1      	movs	r0, #225	@ 0xe1
 80033a8:	f7ff fe76 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80033ac:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <ILI9341_Init+0x258>)
 80033ae:	1d3c      	adds	r4, r7, #4
 80033b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b2:	c407      	stmia	r4!, {r0, r1, r2}
 80033b4:	8023      	strh	r3, [r4, #0]
 80033b6:	3402      	adds	r4, #2
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	210f      	movs	r1, #15
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe83 	bl	80030cc <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80033c6:	2011      	movs	r0, #17
 80033c8:	f7ff fe66 	bl	8003098 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80033cc:	2078      	movs	r0, #120	@ 0x78
 80033ce:	f000 f99b 	bl	8003708 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80033d2:	2029      	movs	r0, #41	@ 0x29
 80033d4:	f7ff fe60 	bl	8003098 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80033d8:	2036      	movs	r0, #54	@ 0x36
 80033da:	f7ff fe5d 	bl	8003098 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80033de:	23e8      	movs	r3, #232	@ 0xe8
 80033e0:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80033e2:	463b      	mov	r3, r7
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fe70 	bl	80030cc <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80033ec:	f7ff fe32 	bl	8003054 <ILI9341_Unselect>
}
 80033f0:	bf00      	nop
 80033f2:	376c      	adds	r7, #108	@ 0x6c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}
 80033f8:	0800ebfc 	.word	0x0800ebfc
 80033fc:	0800ec04 	.word	0x0800ec04
 8003400:	0800ec08 	.word	0x0800ec08
 8003404:	81120364 	.word	0x81120364
 8003408:	0800ec0c 	.word	0x0800ec0c
 800340c:	0800ec10 	.word	0x0800ec10
 8003410:	0800ec20 	.word	0x0800ec20

08003414 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003414:	b082      	sub	sp, #8
 8003416:	b580      	push	{r7, lr}
 8003418:	b088      	sub	sp, #32
 800341a:	af00      	add	r7, sp, #0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
 8003422:	460b      	mov	r3, r1
 8003424:	80bb      	strh	r3, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800342a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800342e:	461a      	mov	r2, r3
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	4413      	add	r3, r2
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800343e:	4619      	mov	r1, r3
 8003440:	88bb      	ldrh	r3, [r7, #4]
 8003442:	440b      	add	r3, r1
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29b      	uxth	r3, r3
 800344a:	88b9      	ldrh	r1, [r7, #4]
 800344c:	88f8      	ldrh	r0, [r7, #6]
 800344e:	f7ff fe6b 	bl	8003128 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e041      	b.n	80034dc <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8003458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	3b20      	subs	r3, #32
 800345e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4619      	mov	r1, r3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	440b      	add	r3, r1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	e027      	b.n	80034ca <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800348a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	743b      	strb	r3, [r7, #16]
 8003494:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003496:	b2db      	uxtb	r3, r3
 8003498:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800349a:	f107 0310 	add.w	r3, r7, #16
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fe13 	bl	80030cc <ILI9341_WriteData>
 80034a6:	e00d      	b.n	80034c4 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80034a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	733b      	strb	r3, [r7, #12]
 80034b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fe04 	bl	80030cc <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80034ce:	461a      	mov	r2, r3
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d3d1      	bcc.n	800347a <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3301      	adds	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80034e0:	461a      	mov	r2, r3
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d3b7      	bcc.n	8003458 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f4:	b002      	add	sp, #8
 80034f6:	4770      	bx	lr

080034f8 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80034f8:	b082      	sub	sp, #8
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af04      	add	r7, sp, #16
 8003500:	603a      	str	r2, [r7, #0]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	4603      	mov	r3, r0
 8003506:	80fb      	strh	r3, [r7, #6]
 8003508:	460b      	mov	r3, r1
 800350a:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800350c:	f7ff fd96 	bl	800303c <ILI9341_Select>

    while(*str) {
 8003510:	e02e      	b.n	8003570 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	7d3a      	ldrb	r2, [r7, #20]
 8003516:	4413      	add	r3, r2
 8003518:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800351c:	db13      	blt.n	8003546 <ILI9341_WriteString+0x4e>
            x = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003522:	7d7b      	ldrb	r3, [r7, #21]
 8003524:	461a      	mov	r2, r3
 8003526:	88bb      	ldrh	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800352c:	88bb      	ldrh	r3, [r7, #4]
 800352e:	7d7a      	ldrb	r2, [r7, #21]
 8003530:	4413      	add	r3, r2
 8003532:	2bef      	cmp	r3, #239	@ 0xef
 8003534:	dc21      	bgt.n	800357a <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b20      	cmp	r3, #32
 800353c:	d103      	bne.n	8003546 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	603b      	str	r3, [r7, #0]
                continue;
 8003544:	e014      	b.n	8003570 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	88b9      	ldrh	r1, [r7, #4]
 800354c:	88f8      	ldrh	r0, [r7, #6]
 800354e:	8c3b      	ldrh	r3, [r7, #32]
 8003550:	9302      	str	r3, [sp, #8]
 8003552:	8bbb      	ldrh	r3, [r7, #28]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f7ff ff5a 	bl	8003414 <ILI9341_WriteChar>
        x += font.width;
 8003560:	7d3b      	ldrb	r3, [r7, #20]
 8003562:	461a      	mov	r2, r3
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	4413      	add	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
        str++;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1cc      	bne.n	8003512 <ILI9341_WriteString+0x1a>
 8003578:	e000      	b.n	800357c <ILI9341_WriteString+0x84>
                break;
 800357a:	bf00      	nop
    }

    ILI9341_Unselect();
 800357c:	f7ff fd6a 	bl	8003054 <ILI9341_Unselect>
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800358a:	b002      	add	sp, #8
 800358c:	4770      	bx	lr

0800358e <ILI9341_DrawImage>:

void ILI9341_FillScreen(uint16_t color) {
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
}

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800358e:	b590      	push	{r4, r7, lr}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	4604      	mov	r4, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	80fb      	strh	r3, [r7, #6]
 80035a0:	4603      	mov	r3, r0
 80035a2:	80bb      	strh	r3, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035b2:	d22c      	bcs.n	800360e <ILI9341_DrawImage+0x80>
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	2bef      	cmp	r3, #239	@ 0xef
 80035b8:	d829      	bhi.n	800360e <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	4413      	add	r3, r2
 80035c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80035c4:	dc25      	bgt.n	8003612 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80035c6:	88ba      	ldrh	r2, [r7, #4]
 80035c8:	883b      	ldrh	r3, [r7, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	2bf0      	cmp	r3, #240	@ 0xf0
 80035ce:	dc22      	bgt.n	8003616 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 80035d0:	f7ff fd34 	bl	800303c <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	4413      	add	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29c      	uxth	r4, r3
 80035e0:	88ba      	ldrh	r2, [r7, #4]
 80035e2:	883b      	ldrh	r3, [r7, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	88b9      	ldrh	r1, [r7, #4]
 80035ee:	88f8      	ldrh	r0, [r7, #6]
 80035f0:	4622      	mov	r2, r4
 80035f2:	f7ff fd99 	bl	8003128 <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	883a      	ldrh	r2, [r7, #0]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4619      	mov	r1, r3
 8003602:	69b8      	ldr	r0, [r7, #24]
 8003604:	f7ff fd62 	bl	80030cc <ILI9341_WriteData>
    ILI9341_Unselect();
 8003608:	f7ff fd24 	bl	8003054 <ILI9341_Unselect>
 800360c:	e004      	b.n	8003618 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8003616:	bf00      	nop
}
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}

0800361e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003628:	2003      	movs	r0, #3
 800362a:	f001 fa03 	bl	8004a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800362e:	2000      	movs	r0, #0
 8003630:	f000 f80e 	bl	8003650 <HAL_InitTick>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	71fb      	strb	r3, [r7, #7]
 800363e:	e001      	b.n	8003644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003640:	f7fe ffd8 	bl	80025f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003644:	79fb      	ldrb	r3, [r7, #7]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_InitTick+0x6c>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d023      	beq.n	80036ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003664:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <HAL_InitTick+0x70>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b14      	ldr	r3, [pc, #80]	@ (80036bc <HAL_InitTick+0x6c>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003672:	fbb3 f3f1 	udiv	r3, r3, r1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fa0f 	bl	8004a9e <HAL_SYSTICK_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b0f      	cmp	r3, #15
 800368a:	d809      	bhi.n	80036a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800368c:	2200      	movs	r2, #0
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f001 f9d9 	bl	8004a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <HAL_InitTick+0x74>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e007      	b.n	80036b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e004      	b.n	80036b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e001      	b.n	80036b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200400a0 	.word	0x200400a0
 80036c0:	20040088 	.word	0x20040088
 80036c4:	2004009c 	.word	0x2004009c

080036c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200400a0 	.word	0x200400a0
 80036ec:	20040938 	.word	0x20040938

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20040938 	.word	0x20040938

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200400a0 	.word	0x200400a0

08003750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3360      	adds	r3, #96	@ 0x60
 80037ca:	461a      	mov	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <LL_ADC_SetOffset+0x44>)
 80037da:	4013      	ands	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	03fff000 	.word	0x03fff000

08003800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3360      	adds	r3, #96	@ 0x60
 800380e:	461a      	mov	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3360      	adds	r3, #96	@ 0x60
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	615a      	str	r2, [r3, #20]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3330      	adds	r3, #48	@ 0x30
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	4413      	add	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	211f      	movs	r1, #31
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	401a      	ands	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	f003 011f 	and.w	r1, r3, #31
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003906:	b480      	push	{r7}
 8003908:	b087      	sub	sp, #28
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3314      	adds	r3, #20
 8003916:	461a      	mov	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0e5b      	lsrs	r3, r3, #25
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	4413      	add	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	0d1b      	lsrs	r3, r3, #20
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2107      	movs	r1, #7
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	401a      	ands	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	0d1b      	lsrs	r3, r3, #20
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	431a      	orrs	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0318 	and.w	r3, r3, #24
 800397e:	4908      	ldr	r1, [pc, #32]	@ (80039a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003980:	40d9      	lsrs	r1, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	400b      	ands	r3, r1
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	431a      	orrs	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	0007ffff 	.word	0x0007ffff

080039a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80039b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6093      	str	r3, [r2, #8]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039dc:	d101      	bne.n	80039e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a2c:	d101      	bne.n	8003a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <LL_ADC_IsEnabled+0x18>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <LL_ADC_IsEnabled+0x1a>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d101      	bne.n	8003ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d101      	bne.n	8003af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e129      	b.n	8003d72 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fe fd85 	bl	800263c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff3f 	bl	80039c8 <LL_ADC_IsDeepPowerDownEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff25 	bl	80039a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff5a 	bl	8003a18 <LL_ADC_IsInternalRegulatorEnabled>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d115      	bne.n	8003b96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff3e 	bl	80039f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b74:	4b81      	ldr	r3, [pc, #516]	@ (8003d7c <HAL_ADC_Init+0x278>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	4a81      	ldr	r2, [pc, #516]	@ (8003d80 <HAL_ADC_Init+0x27c>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	3301      	adds	r3, #1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b88:	e002      	b.n	8003b90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f9      	bne.n	8003b8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff3c 	bl	8003a18 <LL_ADC_IsInternalRegulatorEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	f043 0210 	orr.w	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff75 	bl	8003ab6 <LL_ADC_REG_IsConversionOngoing>
 8003bcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 80c2 	bne.w	8003d60 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80be 	bne.w	8003d60 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bec:	f043 0202 	orr.w	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff35 	bl	8003a68 <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c04:	485f      	ldr	r0, [pc, #380]	@ (8003d84 <HAL_ADC_Init+0x280>)
 8003c06:	f7ff ff2f 	bl	8003a68 <LL_ADC_IsEnabled>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4619      	mov	r1, r3
 8003c16:	485c      	ldr	r0, [pc, #368]	@ (8003d88 <HAL_ADC_Init+0x284>)
 8003c18:	f7ff fd9a 	bl	8003750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7e5b      	ldrb	r3, [r3, #25]
 8003c20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003c2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003c32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d106      	bne.n	8003c58 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	045b      	lsls	r3, r3, #17
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b44      	ldr	r3, [pc, #272]	@ (8003d8c <HAL_ADC_Init+0x288>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff25 	bl	8003adc <LL_ADC_INJ_IsConversionOngoing>
 8003c92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d140      	bne.n	8003d1c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13d      	bne.n	8003d1c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003caa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cc2:	f023 0306 	bic.w	r3, r3, #6
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d118      	bne.n	8003d0c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003cf6:	4311      	orrs	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	611a      	str	r2, [r3, #16]
 8003d0a:	e007      	b.n	8003d1c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f023 010f 	bic.w	r1, r3, #15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d3c:	e007      	b.n	8003d4e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020f 	bic.w	r2, r2, #15
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d5e:	e007      	b.n	8003d70 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f043 0210 	orr.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20040088 	.word	0x20040088
 8003d80:	053e2d63 	.word	0x053e2d63
 8003d84:	50040000 	.word	0x50040000
 8003d88:	50040300 	.word	0x50040300
 8003d8c:	fff0c007 	.word	0xfff0c007

08003d90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fe8a 	bl	8003ab6 <LL_ADC_REG_IsConversionOngoing>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d14f      	bne.n	8003e48 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_Start+0x26>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e04b      	b.n	8003e4e <HAL_ADC_Start+0xbe>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fce2 	bl	8004788 <ADC_Enable>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d137      	bne.n	8003e3e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dee:	d106      	bne.n	8003dfe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	f023 0206 	bic.w	r2, r3, #6
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dfc:	e002      	b.n	8003e04 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	221c      	movs	r2, #28
 8003e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fe29 	bl	8003a8e <LL_ADC_REG_StartConversion>
 8003e3c:	e006      	b.n	8003e4c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e46:	e001      	b.n	8003e4c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d102      	bne.n	8003e6e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003e68:	2308      	movs	r3, #8
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e010      	b.n	8003e90 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e06f      	b.n	8003f6c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e90:	f7ff fc2e 	bl	80036f0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e96:	e021      	b.n	8003edc <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d01d      	beq.n	8003edc <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ea0:	f7ff fc26 	bl	80036f0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <HAL_ADC_PollForConversion+0x60>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d112      	bne.n	8003edc <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	f043 0204 	orr.w	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e047      	b.n	8003f6c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0d6      	beq.n	8003e98 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fcc4 	bl	8003888 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d111      	bne.n	8003f40 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d104      	bne.n	8003f58 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2208      	movs	r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e008      	b.n	8003f6a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	220c      	movs	r2, #12
 8003f68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b0b6      	sub	sp, #216	@ 0xd8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x22>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e3d5      	b.n	800475e <HAL_ADC_ConfigChannel+0x7ce>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fd79 	bl	8003ab6 <LL_ADC_REG_IsConversionOngoing>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 83ba 	bne.w	8004740 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d824      	bhi.n	8004026 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	3b02      	subs	r3, #2
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d81b      	bhi.n	800401e <HAL_ADC_ConfigChannel+0x8e>
 8003fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <HAL_ADC_ConfigChannel+0x5c>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004005 	.word	0x08004005
 8003ff4:	0800400d 	.word	0x0800400d
 8003ff8:	08004015 	.word	0x08004015
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004002:	e010      	b.n	8004026 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004004:	2312      	movs	r3, #18
 8004006:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800400a:	e00c      	b.n	8004026 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800400c:	2318      	movs	r3, #24
 800400e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004012:	e008      	b.n	8004026 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800401c:	e003      	b.n	8004026 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800401e:	2306      	movs	r3, #6
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004024:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004034:	f7ff fc3b 	bl	80038ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fd3a 	bl	8003ab6 <LL_ADC_REG_IsConversionOngoing>
 8004042:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fd46 	bl	8003adc <LL_ADC_INJ_IsConversionOngoing>
 8004050:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 81bf 	bne.w	80043dc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800405e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 81ba 	bne.w	80043dc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004070:	d10f      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	4619      	mov	r1, r3
 800407e:	f7ff fc42 	bl	8003906 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fbe9 	bl	8003862 <LL_ADC_SetSamplingTimeCommonConfig>
 8004090:	e00e      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	461a      	mov	r2, r3
 80040a0:	f7ff fc31 	bl	8003906 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fbd9 	bl	8003862 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	08db      	lsrs	r3, r3, #3
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d00a      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040e2:	f7ff fb69 	bl	80037b8 <LL_ADC_SetOffset>
 80040e6:	e179      	b.n	80043dc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb86 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x184>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fb7b 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	0e9b      	lsrs	r3, r3, #26
 800410e:	f003 021f 	and.w	r2, r3, #31
 8004112:	e01e      	b.n	8004152 <HAL_ADC_ConfigChannel+0x1c2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fb70 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004120:	4603      	mov	r3, r0
 8004122:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004136:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800413a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004142:	2320      	movs	r3, #32
 8004144:	e004      	b.n	8004150 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <HAL_ADC_ConfigChannel+0x1da>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0e9b      	lsrs	r3, r3, #26
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	e018      	b.n	800419c <HAL_ADC_ConfigChannel+0x20c>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800417e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004182:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004186:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800418e:	2320      	movs	r3, #32
 8004190:	e004      	b.n	800419c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800419c:	429a      	cmp	r2, r3
 800419e:	d106      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fb3f 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fb23 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_ADC_ConfigChannel+0x24a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fb18 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	0e9b      	lsrs	r3, r3, #26
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	e01e      	b.n	8004218 <HAL_ADC_ConfigChannel+0x288>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb0d 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80041f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e004      	b.n	8004216 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800420c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x2a0>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	e018      	b.n	8004262 <HAL_ADC_ConfigChannel+0x2d2>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004244:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800424c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e004      	b.n	8004262 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004262:	429a      	cmp	r2, r3
 8004264:	d106      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fadc 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2102      	movs	r1, #2
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fac0 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004280:	4603      	mov	r3, r0
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x310>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fab5 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	f003 021f 	and.w	r2, r3, #31
 800429e:	e01e      	b.n	80042de <HAL_ADC_ConfigChannel+0x34e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff faaa 	bl	8003800 <LL_ADC_GetOffsetChannel>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80042be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80042c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80042ce:	2320      	movs	r3, #32
 80042d0:	e004      	b.n	80042dc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x366>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	e014      	b.n	8004320 <HAL_ADC_ConfigChannel+0x390>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004306:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800430a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e004      	b.n	8004320 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004316:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004320:	429a      	cmp	r2, r3
 8004322:	d106      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fa7d 	bl	800382c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2103      	movs	r1, #3
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fa61 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800433e:	4603      	mov	r3, r0
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_ADC_ConfigChannel+0x3ce>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2103      	movs	r1, #3
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fa56 	bl	8003800 <LL_ADC_GetOffsetChannel>
 8004354:	4603      	mov	r3, r0
 8004356:	0e9b      	lsrs	r3, r3, #26
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	e017      	b.n	800438e <HAL_ADC_ConfigChannel+0x3fe>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2103      	movs	r1, #3
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fa4b 	bl	8003800 <LL_ADC_GetOffsetChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004378:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800437a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x416>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0e9b      	lsrs	r3, r3, #26
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	e011      	b.n	80043ca <HAL_ADC_ConfigChannel+0x43a>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80043b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80043b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e003      	b.n	80043ca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80043c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d106      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2103      	movs	r1, #3
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fa28 	bl	800382c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fb41 	bl	8003a68 <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 813f 	bne.w	800466c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7ff faae 	bl	800395c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a8e      	ldr	r2, [pc, #568]	@ (8004640 <HAL_ADC_ConfigChannel+0x6b0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	f040 8130 	bne.w	800466c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x4a4>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0e9b      	lsrs	r3, r3, #26
 8004422:	3301      	adds	r3, #1
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2b09      	cmp	r3, #9
 800442a:	bf94      	ite	ls
 800442c:	2301      	movls	r3, #1
 800442e:	2300      	movhi	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e019      	b.n	8004468 <HAL_ADC_ConfigChannel+0x4d8>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800444c:	2320      	movs	r3, #32
 800444e:	e003      	b.n	8004458 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2b09      	cmp	r3, #9
 8004460:	bf94      	ite	ls
 8004462:	2301      	movls	r3, #1
 8004464:	2300      	movhi	r3, #0
 8004466:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004468:	2b00      	cmp	r3, #0
 800446a:	d079      	beq.n	8004560 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x4f8>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	3301      	adds	r3, #1
 8004480:	069b      	lsls	r3, r3, #26
 8004482:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004486:	e015      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x524>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004498:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800449a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80044a0:	2320      	movs	r3, #32
 80044a2:	e003      	b.n	80044ac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80044a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	069b      	lsls	r3, r3, #26
 80044b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x544>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0e9b      	lsrs	r3, r3, #26
 80044c6:	3301      	adds	r3, #1
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	e017      	b.n	8004504 <HAL_ADC_ConfigChannel+0x574>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80044e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80044e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80044ec:	2320      	movs	r3, #32
 80044ee:	e003      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	fab3 f383 	clz	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	ea42 0103 	orr.w	r1, r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_ADC_ConfigChannel+0x59a>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0e9b      	lsrs	r3, r3, #26
 800451a:	3301      	adds	r3, #1
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	051b      	lsls	r3, r3, #20
 8004528:	e018      	b.n	800455c <HAL_ADC_ConfigChannel+0x5cc>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e003      	b.n	800454e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800455c:	430b      	orrs	r3, r1
 800455e:	e080      	b.n	8004662 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_ADC_ConfigChannel+0x5ec>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	0e9b      	lsrs	r3, r3, #26
 8004572:	3301      	adds	r3, #1
 8004574:	069b      	lsls	r3, r3, #26
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800457a:	e015      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x618>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e003      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x638>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	3301      	adds	r3, #1
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	e017      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x668>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	61bb      	str	r3, [r7, #24]
  return result;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e003      	b.n	80045ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	f003 031f 	and.w	r3, r3, #31
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x694>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0e9b      	lsrs	r3, r3, #26
 800460e:	3301      	adds	r3, #1
 8004610:	f003 021f 	and.w	r2, r3, #31
 8004614:	4613      	mov	r3, r2
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	4413      	add	r3, r2
 800461a:	3b1e      	subs	r3, #30
 800461c:	051b      	lsls	r3, r3, #20
 800461e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004622:	e01d      	b.n	8004660 <HAL_ADC_ConfigChannel+0x6d0>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	60fb      	str	r3, [r7, #12]
  return result;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800463c:	2320      	movs	r3, #32
 800463e:	e005      	b.n	800464c <HAL_ADC_ConfigChannel+0x6bc>
 8004640:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	f003 021f 	and.w	r2, r3, #31
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	3b1e      	subs	r3, #30
 800465a:	051b      	lsls	r3, r3, #20
 800465c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004660:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004666:	4619      	mov	r1, r3
 8004668:	f7ff f94d 	bl	8003906 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <HAL_ADC_ConfigChannel+0x7d8>)
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d06c      	beq.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004678:	483c      	ldr	r0, [pc, #240]	@ (800476c <HAL_ADC_ConfigChannel+0x7dc>)
 800467a:	f7ff f88f 	bl	800379c <LL_ADC_GetCommonPathInternalCh>
 800467e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3a      	ldr	r2, [pc, #232]	@ (8004770 <HAL_ADC_ConfigChannel+0x7e0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d127      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800468c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d121      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a35      	ldr	r2, [pc, #212]	@ (8004774 <HAL_ADC_ConfigChannel+0x7e4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d157      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046aa:	4619      	mov	r1, r3
 80046ac:	482f      	ldr	r0, [pc, #188]	@ (800476c <HAL_ADC_ConfigChannel+0x7dc>)
 80046ae:	f7ff f862 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046b2:	4b31      	ldr	r3, [pc, #196]	@ (8004778 <HAL_ADC_ConfigChannel+0x7e8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	4a30      	ldr	r2, [pc, #192]	@ (800477c <HAL_ADC_ConfigChannel+0x7ec>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80046cc:	e002      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f9      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046da:	e03a      	b.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a27      	ldr	r2, [pc, #156]	@ (8004780 <HAL_ADC_ConfigChannel+0x7f0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d113      	bne.n	800470e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <HAL_ADC_ConfigChannel+0x7e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d12a      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004704:	4619      	mov	r1, r3
 8004706:	4819      	ldr	r0, [pc, #100]	@ (800476c <HAL_ADC_ConfigChannel+0x7dc>)
 8004708:	f7ff f835 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470c:	e021      	b.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <HAL_ADC_ConfigChannel+0x7f4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d11c      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800471c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <HAL_ADC_ConfigChannel+0x7e4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d111      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800472e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004732:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004736:	4619      	mov	r1, r3
 8004738:	480c      	ldr	r0, [pc, #48]	@ (800476c <HAL_ADC_ConfigChannel+0x7dc>)
 800473a:	f7ff f81c 	bl	8003776 <LL_ADC_SetCommonPathInternalCh>
 800473e:	e008      	b.n	8004752 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800475a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800475e:	4618      	mov	r0, r3
 8004760:	37d8      	adds	r7, #216	@ 0xd8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	80080000 	.word	0x80080000
 800476c:	50040300 	.word	0x50040300
 8004770:	c7520000 	.word	0xc7520000
 8004774:	50040000 	.word	0x50040000
 8004778:	20040088 	.word	0x20040088
 800477c:	053e2d63 	.word	0x053e2d63
 8004780:	cb840000 	.word	0xcb840000
 8004784:	80000001 	.word	0x80000001

08004788 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f965 	bl	8003a68 <LL_ADC_IsEnabled>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d169      	bne.n	8004878 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	4b36      	ldr	r3, [pc, #216]	@ (8004884 <ADC_Enable+0xfc>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	f043 0201 	orr.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e055      	b.n	800487a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff f934 	bl	8003a40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047d8:	482b      	ldr	r0, [pc, #172]	@ (8004888 <ADC_Enable+0x100>)
 80047da:	f7fe ffdf 	bl	800379c <LL_ADC_GetCommonPathInternalCh>
 80047de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80047e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d013      	beq.n	8004810 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <ADC_Enable+0x104>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	4a28      	ldr	r2, [pc, #160]	@ (8004890 <ADC_Enable+0x108>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	4613      	mov	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004802:	e002      	b.n	800480a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	3b01      	subs	r3, #1
 8004808:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f9      	bne.n	8004804 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004810:	f7fe ff6e 	bl	80036f0 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004816:	e028      	b.n	800486a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f923 	bl	8003a68 <LL_ADC_IsEnabled>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff f907 	bl	8003a40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004832:	f7fe ff5d 	bl	80036f0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d914      	bls.n	800486a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d00d      	beq.n	800486a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	f043 0210 	orr.w	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	f043 0201 	orr.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e007      	b.n	800487a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d1cf      	bne.n	8004818 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	8000003f 	.word	0x8000003f
 8004888:	50040300 	.word	0x50040300
 800488c:	20040088 	.word	0x20040088
 8004890:	053e2d63 	.word	0x053e2d63

08004894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a4:	4b0c      	ldr	r3, [pc, #48]	@ (80048d8 <__NVIC_SetPriorityGrouping+0x44>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048b0:	4013      	ands	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048c6:	4a04      	ldr	r2, [pc, #16]	@ (80048d8 <__NVIC_SetPriorityGrouping+0x44>)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	60d3      	str	r3, [r2, #12]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <__NVIC_GetPriorityGrouping+0x18>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	f003 0307 	and.w	r3, r3, #7
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004906:	2b00      	cmp	r3, #0
 8004908:	db0b      	blt.n	8004922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	f003 021f 	and.w	r2, r3, #31
 8004910:	4907      	ldr	r1, [pc, #28]	@ (8004930 <__NVIC_EnableIRQ+0x38>)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2001      	movs	r0, #1
 800491a:	fa00 f202 	lsl.w	r2, r0, r2
 800491e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e100 	.word	0xe000e100

08004934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	2b00      	cmp	r3, #0
 8004946:	db0a      	blt.n	800495e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	490c      	ldr	r1, [pc, #48]	@ (8004980 <__NVIC_SetPriority+0x4c>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	0112      	lsls	r2, r2, #4
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	440b      	add	r3, r1
 8004958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800495c:	e00a      	b.n	8004974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	4908      	ldr	r1, [pc, #32]	@ (8004984 <__NVIC_SetPriority+0x50>)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	3b04      	subs	r3, #4
 800496c:	0112      	lsls	r2, r2, #4
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	440b      	add	r3, r1
 8004972:	761a      	strb	r2, [r3, #24]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000e100 	.word	0xe000e100
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	@ 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f1c3 0307 	rsb	r3, r3, #7
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	bf28      	it	cs
 80049a6:	2304      	movcs	r3, #4
 80049a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d902      	bls.n	80049b8 <NVIC_EncodePriority+0x30>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3b03      	subs	r3, #3
 80049b6:	e000      	b.n	80049ba <NVIC_EncodePriority+0x32>
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43da      	mvns	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	401a      	ands	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	43d9      	mvns	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e0:	4313      	orrs	r3, r2
         );
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3724      	adds	r7, #36	@ 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a00:	d301      	bcc.n	8004a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00f      	b.n	8004a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a06:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <SysTick_Config+0x40>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a0e:	210f      	movs	r1, #15
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	f7ff ff8e 	bl	8004934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <SysTick_Config+0x40>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a1e:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <SysTick_Config+0x40>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010

08004a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff29 	bl	8004894 <__NVIC_SetPriorityGrouping>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a5c:	f7ff ff3e 	bl	80048dc <__NVIC_GetPriorityGrouping>
 8004a60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	f7ff ff8e 	bl	8004988 <NVIC_EncodePriority>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a72:	4611      	mov	r1, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff5d 	bl	8004934 <__NVIC_SetPriority>
}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	4603      	mov	r3, r0
 8004a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff31 	bl	80048f8 <__NVIC_EnableIRQ>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ffa2 	bl	80049f0 <SysTick_Config>
 8004aac:	4603      	mov	r3, r0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac6:	e166      	b.n	8004d96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2101      	movs	r1, #1
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 8158 	beq.w	8004d90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d005      	beq.n	8004af8 <HAL_GPIO_Init+0x40>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d130      	bne.n	8004b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	2203      	movs	r2, #3
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b2e:	2201      	movs	r2, #1
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 0201 	and.w	r2, r3, #1
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d017      	beq.n	8004b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	2203      	movs	r2, #3
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43db      	mvns	r3, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d123      	bne.n	8004bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	08da      	lsrs	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3208      	adds	r2, #8
 8004baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	220f      	movs	r2, #15
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	08da      	lsrs	r2, r3, #3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3208      	adds	r2, #8
 8004be4:	6939      	ldr	r1, [r7, #16]
 8004be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0203 	and.w	r2, r3, #3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80b2 	beq.w	8004d90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c2c:	4b61      	ldr	r3, [pc, #388]	@ (8004db4 <HAL_GPIO_Init+0x2fc>)
 8004c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c30:	4a60      	ldr	r2, [pc, #384]	@ (8004db4 <HAL_GPIO_Init+0x2fc>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c38:	4b5e      	ldr	r3, [pc, #376]	@ (8004db4 <HAL_GPIO_Init+0x2fc>)
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c44:	4a5c      	ldr	r2, [pc, #368]	@ (8004db8 <HAL_GPIO_Init+0x300>)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4013      	ands	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c6e:	d02b      	beq.n	8004cc8 <HAL_GPIO_Init+0x210>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a52      	ldr	r2, [pc, #328]	@ (8004dbc <HAL_GPIO_Init+0x304>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d025      	beq.n	8004cc4 <HAL_GPIO_Init+0x20c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a51      	ldr	r2, [pc, #324]	@ (8004dc0 <HAL_GPIO_Init+0x308>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01f      	beq.n	8004cc0 <HAL_GPIO_Init+0x208>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a50      	ldr	r2, [pc, #320]	@ (8004dc4 <HAL_GPIO_Init+0x30c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d019      	beq.n	8004cbc <HAL_GPIO_Init+0x204>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a4f      	ldr	r2, [pc, #316]	@ (8004dc8 <HAL_GPIO_Init+0x310>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <HAL_GPIO_Init+0x200>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4e      	ldr	r2, [pc, #312]	@ (8004dcc <HAL_GPIO_Init+0x314>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00d      	beq.n	8004cb4 <HAL_GPIO_Init+0x1fc>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8004dd0 <HAL_GPIO_Init+0x318>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <HAL_GPIO_Init+0x1f8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a4c      	ldr	r2, [pc, #304]	@ (8004dd4 <HAL_GPIO_Init+0x31c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_GPIO_Init+0x1f4>
 8004ca8:	2307      	movs	r3, #7
 8004caa:	e00e      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cac:	2308      	movs	r3, #8
 8004cae:	e00c      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	e00a      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cb4:	2305      	movs	r3, #5
 8004cb6:	e008      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e006      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e004      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e002      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_GPIO_Init+0x212>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	f002 0203 	and.w	r2, r2, #3
 8004cd0:	0092      	lsls	r2, r2, #2
 8004cd2:	4093      	lsls	r3, r2
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cda:	4937      	ldr	r1, [pc, #220]	@ (8004db8 <HAL_GPIO_Init+0x300>)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	3302      	adds	r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d0c:	4a32      	ldr	r2, [pc, #200]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d12:	4b31      	ldr	r3, [pc, #196]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d36:	4a28      	ldr	r2, [pc, #160]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d3c:	4b26      	ldr	r3, [pc, #152]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d60:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d66:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d8a:	4a13      	ldr	r2, [pc, #76]	@ (8004dd8 <HAL_GPIO_Init+0x320>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f ae91 	bne.w	8004ac8 <HAL_GPIO_Init+0x10>
  }
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	48000400 	.word	0x48000400
 8004dc0:	48000800 	.word	0x48000800
 8004dc4:	48000c00 	.word	0x48000c00
 8004dc8:	48001000 	.word	0x48001000
 8004dcc:	48001400 	.word	0x48001400
 8004dd0:	48001800 	.word	0x48001800
 8004dd4:	48001c00 	.word	0x48001c00
 8004dd8:	40010400 	.word	0x40010400

08004ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	887b      	ldrh	r3, [r7, #2]
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
 8004df8:	e001      	b.n	8004dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	807b      	strh	r3, [r7, #2]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e1c:	787b      	ldrb	r3, [r7, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e28:	e002      	b.n	8004e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e2a:	887a      	ldrh	r2, [r7, #2]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e40:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4c:	d102      	bne.n	8004e54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e52:	e00b      	b.n	8004e6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004e54:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e62:	d102      	bne.n	8004e6a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e68:	e000      	b.n	8004e6c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004e6a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40007000 	.word	0x40007000

08004e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d141      	bne.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d131      	bne.n	8004efc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e98:	4b47      	ldr	r3, [pc, #284]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9e:	4a46      	ldr	r2, [pc, #280]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eb0:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004eb8:	4b40      	ldr	r3, [pc, #256]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2232      	movs	r2, #50	@ 0x32
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	0c9b      	lsrs	r3, r3, #18
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ece:	e002      	b.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ed6:	4b38      	ldr	r3, [pc, #224]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee2:	d102      	bne.n	8004eea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f2      	bne.n	8004ed0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eea:	4b33      	ldr	r3, [pc, #204]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef6:	d158      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e057      	b.n	8004fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004efc:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f02:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f0c:	e04d      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d141      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f16:	4b28      	ldr	r3, [pc, #160]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d131      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f24:	4b24      	ldr	r3, [pc, #144]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f2a:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f34:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2232      	movs	r2, #50	@ 0x32
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	0c9b      	lsrs	r3, r3, #18
 8004f56:	3301      	adds	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5a:	e002      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f62:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d102      	bne.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f2      	bne.n	8004f5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f76:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f82:	d112      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e011      	b.n	8004fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f98:	e007      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f9a:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fa2:	4a05      	ldr	r2, [pc, #20]	@ (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fa8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	20040088 	.word	0x20040088
 8004fc0:	431bde83 	.word	0x431bde83

08004fc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd2:	6053      	str	r3, [r2, #4]
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000

08004fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f000 bc08 	b.w	8005808 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff8:	4b96      	ldr	r3, [pc, #600]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005002:	4b94      	ldr	r3, [pc, #592]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80e4 	beq.w	80051e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_RCC_OscConfig+0x4c>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b0c      	cmp	r3, #12
 8005024:	f040 808b 	bne.w	800513e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b01      	cmp	r3, #1
 800502c:	f040 8087 	bne.w	800513e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005030:	4b88      	ldr	r3, [pc, #544]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_OscConfig+0x64>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e3df      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	4b81      	ldr	r3, [pc, #516]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <HAL_RCC_OscConfig+0x7e>
 8005058:	4b7e      	ldr	r3, [pc, #504]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005060:	e005      	b.n	800506e <HAL_RCC_OscConfig+0x8a>
 8005062:	4b7c      	ldr	r3, [pc, #496]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800506e:	4293      	cmp	r3, r2
 8005070:	d223      	bcs.n	80050ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fdcc 	bl	8005c14 <RCC_SetFlashLatencyFromMSIRange>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e3c0      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005086:	4b73      	ldr	r3, [pc, #460]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a72      	ldr	r2, [pc, #456]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800508c:	f043 0308 	orr.w	r3, r3, #8
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	4b70      	ldr	r3, [pc, #448]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	496d      	ldr	r1, [pc, #436]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	4968      	ldr	r1, [pc, #416]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	e025      	b.n	8005106 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ba:	4b66      	ldr	r3, [pc, #408]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a65      	ldr	r2, [pc, #404]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050c0:	f043 0308 	orr.w	r3, r3, #8
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b63      	ldr	r3, [pc, #396]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4960      	ldr	r1, [pc, #384]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	495b      	ldr	r1, [pc, #364]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fd8c 	bl	8005c14 <RCC_SetFlashLatencyFromMSIRange>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e380      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005106:	f000 fcc1 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b51      	ldr	r3, [pc, #324]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	4950      	ldr	r1, [pc, #320]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	4a4e      	ldr	r2, [pc, #312]	@ (800525c <HAL_RCC_OscConfig+0x278>)
 8005124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005126:	4b4e      	ldr	r3, [pc, #312]	@ (8005260 <HAL_RCC_OscConfig+0x27c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe fa90 	bl	8003650 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d052      	beq.n	80051e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	e364      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d032      	beq.n	80051ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005146:	4b43      	ldr	r3, [pc, #268]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a42      	ldr	r2, [pc, #264]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005152:	f7fe facd 	bl	80036f0 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515a:	f7fe fac9 	bl	80036f0 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e34d      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800516c:	4b39      	ldr	r3, [pc, #228]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005178:	4b36      	ldr	r3, [pc, #216]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a35      	ldr	r2, [pc, #212]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b33      	ldr	r3, [pc, #204]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4930      	ldr	r1, [pc, #192]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005196:	4b2f      	ldr	r3, [pc, #188]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	492b      	ldr	r1, [pc, #172]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	604b      	str	r3, [r1, #4]
 80051aa:	e01a      	b.n	80051e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051ac:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a28      	ldr	r2, [pc, #160]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80051b2:	f023 0301 	bic.w	r3, r3, #1
 80051b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051b8:	f7fe fa9a 	bl	80036f0 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051c0:	f7fe fa96 	bl	80036f0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e31a      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051d2:	4b20      	ldr	r3, [pc, #128]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1dc>
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d073      	beq.n	80052d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_OscConfig+0x21c>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d10e      	bne.n	8005218 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d10b      	bne.n	8005218 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d063      	beq.n	80052d4 <HAL_RCC_OscConfig+0x2f0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d15f      	bne.n	80052d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e2f7      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005220:	d106      	bne.n	8005230 <HAL_RCC_OscConfig+0x24c>
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a0b      	ldr	r2, [pc, #44]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e025      	b.n	800527c <HAL_RCC_OscConfig+0x298>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005238:	d114      	bne.n	8005264 <HAL_RCC_OscConfig+0x280>
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a05      	ldr	r2, [pc, #20]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	4b03      	ldr	r3, [pc, #12]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a02      	ldr	r2, [pc, #8]	@ (8005254 <HAL_RCC_OscConfig+0x270>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e013      	b.n	800527c <HAL_RCC_OscConfig+0x298>
 8005254:	40021000 	.word	0x40021000
 8005258:	0809ac74 	.word	0x0809ac74
 800525c:	20040088 	.word	0x20040088
 8005260:	2004009c 	.word	0x2004009c
 8005264:	4ba0      	ldr	r3, [pc, #640]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a9f      	ldr	r2, [pc, #636]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800526a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	4b9d      	ldr	r3, [pc, #628]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a9c      	ldr	r2, [pc, #624]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800527a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d013      	beq.n	80052ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fe fa34 	bl	80036f0 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fe fa30 	bl	80036f0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	@ 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e2b4      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529e:	4b92      	ldr	r3, [pc, #584]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x2a8>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fe fa20 	bl	80036f0 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fe fa1c 	bl	80036f0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	@ 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e2a0      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c6:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2d0>
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d060      	beq.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_OscConfig+0x310>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d119      	bne.n	8005322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d116      	bne.n	8005322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f4:	4b7c      	ldr	r3, [pc, #496]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_OscConfig+0x328>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e27d      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b76      	ldr	r3, [pc, #472]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	4973      	ldr	r1, [pc, #460]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	e040      	b.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800532a:	4b6f      	ldr	r3, [pc, #444]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a6e      	ldr	r2, [pc, #440]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fe f9db 	bl	80036f0 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533e:	f7fe f9d7 	bl	80036f0 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e25b      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b65      	ldr	r3, [pc, #404]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b62      	ldr	r3, [pc, #392]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	495f      	ldr	r1, [pc, #380]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
 8005370:	e018      	b.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b5d      	ldr	r3, [pc, #372]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a5c      	ldr	r2, [pc, #368]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800537c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537e:	f7fe f9b7 	bl	80036f0 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005386:	f7fe f9b3 	bl	80036f0 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e237      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d03c      	beq.n	800542a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01c      	beq.n	80053f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b8:	4b4b      	ldr	r3, [pc, #300]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053be:	4a4a      	ldr	r2, [pc, #296]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fe f992 	bl	80036f0 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d0:	f7fe f98e 	bl	80036f0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e212      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053e2:	4b41      	ldr	r3, [pc, #260]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ef      	beq.n	80053d0 <HAL_RCC_OscConfig+0x3ec>
 80053f0:	e01b      	b.n	800542a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f2:	4b3d      	ldr	r3, [pc, #244]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80053f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f8:	4a3b      	ldr	r2, [pc, #236]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fe f975 	bl	80036f0 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540a:	f7fe f971 	bl	80036f0 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1f5      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800541c:	4b32      	ldr	r3, [pc, #200]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800541e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ef      	bne.n	800540a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80a6 	beq.w	8005584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800543c:	4b2a      	ldr	r3, [pc, #168]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10d      	bne.n	8005464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005448:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544c:	4a26      	ldr	r2, [pc, #152]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005452:	6593      	str	r3, [r2, #88]	@ 0x58
 8005454:	4b24      	ldr	r3, [pc, #144]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 8005456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005464:	4b21      	ldr	r3, [pc, #132]	@ (80054ec <HAL_RCC_OscConfig+0x508>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d118      	bne.n	80054a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005470:	4b1e      	ldr	r3, [pc, #120]	@ (80054ec <HAL_RCC_OscConfig+0x508>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_RCC_OscConfig+0x508>)
 8005476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800547c:	f7fe f938 	bl	80036f0 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005484:	f7fe f934 	bl	80036f0 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e1b8      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005496:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <HAL_RCC_OscConfig+0x508>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d108      	bne.n	80054bc <HAL_RCC_OscConfig+0x4d8>
 80054aa:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b0:	4a0d      	ldr	r2, [pc, #52]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ba:	e029      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d115      	bne.n	80054f0 <HAL_RCC_OscConfig+0x50c>
 80054c4:	4b08      	ldr	r3, [pc, #32]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	4a07      	ldr	r2, [pc, #28]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054cc:	f043 0304 	orr.w	r3, r3, #4
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054d4:	4b04      	ldr	r3, [pc, #16]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	4a03      	ldr	r2, [pc, #12]	@ (80054e8 <HAL_RCC_OscConfig+0x504>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054e4:	e014      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
 80054f0:	4b9d      	ldr	r3, [pc, #628]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	4a9c      	ldr	r2, [pc, #624]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005500:	4b99      	ldr	r3, [pc, #612]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	4a98      	ldr	r2, [pc, #608]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d016      	beq.n	8005546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe f8ea 	bl	80036f0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fe f8e6 	bl	80036f0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e168      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005536:	4b8c      	ldr	r3, [pc, #560]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ed      	beq.n	8005520 <HAL_RCC_OscConfig+0x53c>
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005546:	f7fe f8d3 	bl	80036f0 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800554c:	e00a      	b.n	8005564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554e:	f7fe f8cf 	bl	80036f0 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555c:	4293      	cmp	r3, r2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e151      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005564:	4b80      	ldr	r3, [pc, #512]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ed      	bne.n	800554e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005578:	4b7b      	ldr	r3, [pc, #492]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	4a7a      	ldr	r2, [pc, #488]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 800557e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005582:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d03c      	beq.n	800560a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01c      	beq.n	80055d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005598:	4b73      	ldr	r3, [pc, #460]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 800559a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800559e:	4a72      	ldr	r2, [pc, #456]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fe f8a2 	bl	80036f0 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055b0:	f7fe f89e 	bl	80036f0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e122      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055c2:	4b69      	ldr	r3, [pc, #420]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80055c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0ef      	beq.n	80055b0 <HAL_RCC_OscConfig+0x5cc>
 80055d0:	e01b      	b.n	800560a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055d2:	4b65      	ldr	r3, [pc, #404]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80055d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d8:	4a63      	ldr	r2, [pc, #396]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fe f885 	bl	80036f0 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ea:	f7fe f881 	bl	80036f0 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e105      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80055fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ef      	bne.n	80055ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80f9 	beq.w	8005806 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	2b02      	cmp	r3, #2
 800561a:	f040 80cf 	bne.w	80057bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800561e:	4b52      	ldr	r3, [pc, #328]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f003 0203 	and.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	429a      	cmp	r2, r3
 8005630:	d12c      	bne.n	800568c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	3b01      	subs	r3, #1
 800563e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d123      	bne.n	800568c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d11b      	bne.n	800568c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005660:	429a      	cmp	r2, r3
 8005662:	d113      	bne.n	800568c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	3b01      	subs	r3, #1
 8005672:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d109      	bne.n	800568c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	3b01      	subs	r3, #1
 8005686:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d071      	beq.n	8005770 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d068      	beq.n	8005764 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005692:	4b35      	ldr	r3, [pc, #212]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800569e:	4b32      	ldr	r3, [pc, #200]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0ac      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80056b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056ba:	f7fe f819 	bl	80036f0 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fe f815 	bl	80036f0 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e099      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d4:	4b24      	ldr	r3, [pc, #144]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e0:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	4b21      	ldr	r3, [pc, #132]	@ (800576c <HAL_RCC_OscConfig+0x788>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056f0:	3a01      	subs	r2, #1
 80056f2:	0112      	lsls	r2, r2, #4
 80056f4:	4311      	orrs	r1, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056fa:	0212      	lsls	r2, r2, #8
 80056fc:	4311      	orrs	r1, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005702:	0852      	lsrs	r2, r2, #1
 8005704:	3a01      	subs	r2, #1
 8005706:	0552      	lsls	r2, r2, #21
 8005708:	4311      	orrs	r1, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800570e:	0852      	lsrs	r2, r2, #1
 8005710:	3a01      	subs	r2, #1
 8005712:	0652      	lsls	r2, r2, #25
 8005714:	4311      	orrs	r1, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800571a:	06d2      	lsls	r2, r2, #27
 800571c:	430a      	orrs	r2, r1
 800571e:	4912      	ldr	r1, [pc, #72]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005720:	4313      	orrs	r3, r2
 8005722:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005724:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0f      	ldr	r2, [pc, #60]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 800572a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800572e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005730:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4a0c      	ldr	r2, [pc, #48]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800573a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800573c:	f7fd ffd8 	bl	80036f0 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005744:	f7fd ffd4 	bl	80036f0 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e058      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <HAL_RCC_OscConfig+0x784>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005762:	e050      	b.n	8005806 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04f      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
 8005768:	40021000 	.word	0x40021000
 800576c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005770:	4b27      	ldr	r3, [pc, #156]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d144      	bne.n	8005806 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800577c:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a23      	ldr	r2, [pc, #140]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 8005782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005788:	4b21      	ldr	r3, [pc, #132]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a20      	ldr	r2, [pc, #128]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 800578e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005794:	f7fd ffac 	bl	80036f0 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579c:	f7fd ffa8 	bl	80036f0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e02c      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ae:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x7b8>
 80057ba:	e024      	b.n	8005806 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d01f      	beq.n	8005802 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c2:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a12      	ldr	r2, [pc, #72]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fd ff8f 	bl	80036f0 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fd ff8b 	bl	80036f0 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e00f      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e8:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057f4:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	4905      	ldr	r1, [pc, #20]	@ (8005810 <HAL_RCC_OscConfig+0x82c>)
 80057fa:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <HAL_RCC_OscConfig+0x830>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	60cb      	str	r3, [r1, #12]
 8005800:	e001      	b.n	8005806 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40021000 	.word	0x40021000
 8005814:	feeefffc 	.word	0xfeeefffc

08005818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e11d      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005830:	4b90      	ldr	r3, [pc, #576]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d910      	bls.n	8005860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 020f 	bic.w	r2, r3, #15
 8005846:	498b      	ldr	r1, [pc, #556]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b89      	ldr	r3, [pc, #548]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e105      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d010      	beq.n	800588e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	4b81      	ldr	r3, [pc, #516]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005878:	429a      	cmp	r2, r3
 800587a:	d908      	bls.n	800588e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800587c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	497b      	ldr	r1, [pc, #492]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d079      	beq.n	800598e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d11e      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a2:	4b75      	ldr	r3, [pc, #468]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e0dc      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80058b2:	f000 fa09 	bl	8005cc8 <RCC_GetSysClockFreqFromPLLSource>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4a70      	ldr	r2, [pc, #448]	@ (8005a7c <HAL_RCC_ClockConfig+0x264>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d946      	bls.n	800594c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058be:	4b6e      	ldr	r3, [pc, #440]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d140      	bne.n	800594c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058ca:	4b6b      	ldr	r3, [pc, #428]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d2:	4a69      	ldr	r2, [pc, #420]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e035      	b.n	800594c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058e8:	4b63      	ldr	r3, [pc, #396]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d115      	bne.n	8005920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0b9      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005900:	4b5d      	ldr	r3, [pc, #372]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0ad      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005910:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0a5      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005920:	f000 f8b4 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005924:	4603      	mov	r3, r0
 8005926:	4a55      	ldr	r2, [pc, #340]	@ (8005a7c <HAL_RCC_ClockConfig+0x264>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d90f      	bls.n	800594c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800592c:	4b52      	ldr	r3, [pc, #328]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005938:	4b4f      	ldr	r3, [pc, #316]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005940:	4a4d      	ldr	r2, [pc, #308]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005946:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800594c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4947      	ldr	r1, [pc, #284]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595e:	f7fd fec7 	bl	80036f0 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005964:	e00a      	b.n	800597c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005966:	f7fd fec3 	bl	80036f0 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e077      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 020c 	and.w	r2, r3, #12
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	429a      	cmp	r2, r3
 800598c:	d1eb      	bne.n	8005966 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b80      	cmp	r3, #128	@ 0x80
 8005992:	d105      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005994:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a37      	ldr	r2, [pc, #220]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 800599a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800599e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d208      	bcs.n	80059ce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	492b      	ldr	r1, [pc, #172]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d210      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059dc:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 020f 	bic.w	r2, r3, #15
 80059e4:	4923      	ldr	r1, [pc, #140]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ec:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <HAL_RCC_ClockConfig+0x25c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e036      	b.n	8005a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4918      	ldr	r1, [pc, #96]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a28:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4910      	ldr	r1, [pc, #64]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a3c:	f000 f826 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <HAL_RCC_ClockConfig+0x260>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	490c      	ldr	r1, [pc, #48]	@ (8005a80 <HAL_RCC_ClockConfig+0x268>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	4a0a      	ldr	r2, [pc, #40]	@ (8005a84 <HAL_RCC_ClockConfig+0x26c>)
 8005a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <HAL_RCC_ClockConfig+0x270>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fd fdf5 	bl	8003650 <HAL_InitTick>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40022000 	.word	0x40022000
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	04c4b400 	.word	0x04c4b400
 8005a80:	0809ac74 	.word	0x0809ac74
 8005a84:	20040088 	.word	0x20040088
 8005a88:	2004009c 	.word	0x2004009c

08005a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d121      	bne.n	8005afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d11e      	bne.n	8005afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ac0:	4b34      	ldr	r3, [pc, #208]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005acc:	4b31      	ldr	r3, [pc, #196]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e005      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10d      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d102      	bne.n	8005b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b04:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e004      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d134      	bne.n	8005b84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_GetSysClockFreq+0xa6>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCC_GetSysClockFreq+0xac>
 8005b30:	e005      	b.n	8005b3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b32:	4b1a      	ldr	r3, [pc, #104]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8005b34:	617b      	str	r3, [r7, #20]
      break;
 8005b36:	e005      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b3a:	617b      	str	r3, [r7, #20]
      break;
 8005b3c:	e002      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	617b      	str	r3, [r7, #20]
      break;
 8005b42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b44:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3301      	adds	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b52:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	fb03 f202 	mul.w	r2, r3, r2
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	0e5b      	lsrs	r3, r3, #25
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	3301      	adds	r3, #1
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b84:	69bb      	ldr	r3, [r7, #24]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3724      	adds	r7, #36	@ 0x24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000
 8005b98:	0809ac8c 	.word	0x0809ac8c
 8005b9c:	00f42400 	.word	0x00f42400
 8005ba0:	007a1200 	.word	0x007a1200

08005ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	@ (8005bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20040088 	.word	0x20040088

08005bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bc0:	f7ff fff0 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4904      	ldr	r1, [pc, #16]	@ (8005be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40021000 	.word	0x40021000
 8005be4:	0809ac84 	.word	0x0809ac84

08005be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bec:	f7ff ffda 	bl	8005ba4 <HAL_RCC_GetHCLKFreq>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	0adb      	lsrs	r3, r3, #11
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	4904      	ldr	r1, [pc, #16]	@ (8005c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bfe:	5ccb      	ldrb	r3, [r1, r3]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	0809ac84 	.word	0x0809ac84

08005c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c20:	4b27      	ldr	r3, [pc, #156]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c2c:	f7ff f906 	bl	8004e3c <HAL_PWREx_GetVoltageRange>
 8005c30:	6178      	str	r0, [r7, #20]
 8005c32:	e014      	b.n	8005c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b22      	ldr	r3, [pc, #136]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c38:	4a21      	ldr	r2, [pc, #132]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c40:	4b1f      	ldr	r3, [pc, #124]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c4c:	f7ff f8f6 	bl	8004e3c <HAL_PWREx_GetVoltageRange>
 8005c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c52:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c56:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c64:	d10b      	bne.n	8005c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b80      	cmp	r3, #128	@ 0x80
 8005c6a:	d913      	bls.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c70:	d902      	bls.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c72:	2302      	movs	r3, #2
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e00d      	b.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c78:	2301      	movs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	e00a      	b.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c82:	d902      	bls.n	8005c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005c84:	2302      	movs	r3, #2
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	e004      	b.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b70      	cmp	r3, #112	@ 0x70
 8005c8e:	d101      	bne.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c90:	2301      	movs	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c94:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 020f 	bic.w	r2, r3, #15
 8005c9c:	4909      	ldr	r1, [pc, #36]	@ (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ca4:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d001      	beq.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40022000 	.word	0x40022000

08005cc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cce:	4b2d      	ldr	r3, [pc, #180]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d00b      	beq.n	8005cf6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d825      	bhi.n	8005d30 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d008      	beq.n	8005cfc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d11f      	bne.n	8005d30 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005cf0:	4b25      	ldr	r3, [pc, #148]	@ (8005d88 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005cf2:	613b      	str	r3, [r7, #16]
    break;
 8005cf4:	e01f      	b.n	8005d36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005cf6:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005cf8:	613b      	str	r3, [r7, #16]
    break;
 8005cfa:	e01c      	b.n	8005d36 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cfc:	4b21      	ldr	r3, [pc, #132]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d107      	bne.n	8005d18 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d08:	4b1e      	ldr	r3, [pc, #120]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e005      	b.n	8005d24 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d18:	4b1a      	ldr	r3, [pc, #104]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d24:	4a1a      	ldr	r2, [pc, #104]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	613b      	str	r3, [r7, #16]
    break;
 8005d2e:	e002      	b.n	8005d36 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
    break;
 8005d34:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d36:	4b13      	ldr	r3, [pc, #76]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	3301      	adds	r3, #1
 8005d42:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d44:	4b0f      	ldr	r3, [pc, #60]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	0a1b      	lsrs	r3, r3, #8
 8005d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	fb03 f202 	mul.w	r2, r3, r2
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0e5b      	lsrs	r3, r3, #25
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d76:	683b      	ldr	r3, [r7, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40021000 	.word	0x40021000
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	007a1200 	.word	0x007a1200
 8005d90:	0809ac8c 	.word	0x0809ac8c

08005d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da0:	2300      	movs	r3, #0
 8005da2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d040      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db4:	2b80      	cmp	r3, #128	@ 0x80
 8005db6:	d02a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005db8:	2b80      	cmp	r3, #128	@ 0x80
 8005dba:	d825      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dbc:	2b60      	cmp	r3, #96	@ 0x60
 8005dbe:	d026      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005dc0:	2b60      	cmp	r3, #96	@ 0x60
 8005dc2:	d821      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dc4:	2b40      	cmp	r3, #64	@ 0x40
 8005dc6:	d006      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005dc8:	2b40      	cmp	r3, #64	@ 0x40
 8005dca:	d81d      	bhi.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d010      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005dd4:	e018      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005dd6:	4b89      	ldr	r3, [pc, #548]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	4a88      	ldr	r2, [pc, #544]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005de2:	e015      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fb02 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005df4:	e00c      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3320      	adds	r3, #32
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fbed 	bl	80065dc <RCCEx_PLLSAI2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e06:	e003      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	74fb      	strb	r3, [r7, #19]
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7cfb      	ldrb	r3, [r7, #19]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e16:	4b79      	ldr	r3, [pc, #484]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e1c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e24:	4975      	ldr	r1, [pc, #468]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005e2c:	e001      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d047      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	d030      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4c:	d82a      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e52:	d02a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e58:	d824      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e64:	d81e      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e6e:	d010      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e70:	e018      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e72:	4b62      	ldr	r3, [pc, #392]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4a61      	ldr	r2, [pc, #388]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e7e:	e015      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fab4 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3320      	adds	r3, #32
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fb9f 	bl	80065dc <RCCEx_PLLSAI2_Config>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	74fb      	strb	r3, [r7, #19]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005eb2:	4b52      	ldr	r3, [pc, #328]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec0:	494e      	ldr	r1, [pc, #312]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005ec8:	e001      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	7cfb      	ldrb	r3, [r7, #19]
 8005ecc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 809f 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005edc:	2300      	movs	r3, #0
 8005ede:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ee0:	4b46      	ldr	r3, [pc, #280]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef6:	4b41      	ldr	r3, [pc, #260]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efa:	4a40      	ldr	r2, [pc, #256]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f02:	4b3e      	ldr	r3, [pc, #248]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f12:	4b3b      	ldr	r3, [pc, #236]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a3a      	ldr	r2, [pc, #232]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f1e:	f7fd fbe7 	bl	80036f0 <HAL_GetTick>
 8005f22:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f24:	e009      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f26:	f7fd fbe3 	bl	80036f0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d902      	bls.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	74fb      	strb	r3, [r7, #19]
        break;
 8005f38:	e005      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f3a:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ef      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d15b      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f56:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d019      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f6a:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f76:	4b21      	ldr	r3, [pc, #132]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f86:	4b1d      	ldr	r3, [pc, #116]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f96:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d016      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fd fba2 	bl	80036f0 <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb0:	f7fd fb9e 	bl	80036f0 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d902      	bls.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	74fb      	strb	r3, [r7, #19]
            break;
 8005fc6:	e006      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0ec      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10c      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fec:	4903      	ldr	r1, [pc, #12]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ff4:	e008      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	74bb      	strb	r3, [r7, #18]
 8005ffa:	e005      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006008:	7c7b      	ldrb	r3, [r7, #17]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d105      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600e:	4ba0      	ldr	r3, [pc, #640]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006012:	4a9f      	ldr	r2, [pc, #636]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006018:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006026:	4b9a      	ldr	r3, [pc, #616]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602c:	f023 0203 	bic.w	r2, r3, #3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006034:	4996      	ldr	r1, [pc, #600]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006048:	4b91      	ldr	r3, [pc, #580]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f023 020c 	bic.w	r2, r3, #12
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	498e      	ldr	r1, [pc, #568]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800606a:	4b89      	ldr	r3, [pc, #548]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006070:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006078:	4985      	ldr	r1, [pc, #532]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800607a:	4313      	orrs	r3, r2
 800607c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800608c:	4b80      	ldr	r3, [pc, #512]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800609a:	497d      	ldr	r1, [pc, #500]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060ae:	4b78      	ldr	r3, [pc, #480]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060bc:	4974      	ldr	r1, [pc, #464]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060de:	496c      	ldr	r1, [pc, #432]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f2:	4b67      	ldr	r3, [pc, #412]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006100:	4963      	ldr	r1, [pc, #396]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006114:	4b5e      	ldr	r3, [pc, #376]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006122:	495b      	ldr	r1, [pc, #364]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006136:	4b56      	ldr	r3, [pc, #344]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	4952      	ldr	r1, [pc, #328]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006158:	4b4d      	ldr	r3, [pc, #308]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	494a      	ldr	r1, [pc, #296]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800617a:	4b45      	ldr	r3, [pc, #276]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006180:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006188:	4941      	ldr	r1, [pc, #260]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800619c:	4b3c      	ldr	r3, [pc, #240]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061a2:	f023 0203 	bic.w	r2, r3, #3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061aa:	4939      	ldr	r1, [pc, #228]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d028      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061be:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061cc:	4930      	ldr	r1, [pc, #192]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061dc:	d106      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061de:	4b2c      	ldr	r3, [pc, #176]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061e8:	60d3      	str	r3, [r2, #12]
 80061ea:	e011      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061f4:	d10c      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	2101      	movs	r1, #1
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 f8f9 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006206:	7cfb      	ldrb	r3, [r7, #19]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800620c:	7cfb      	ldrb	r3, [r7, #19]
 800620e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d04d      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006224:	d108      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006226:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006228:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800622c:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800622e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006232:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006236:	e012      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006238:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800623e:	4a14      	ldr	r2, [pc, #80]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006244:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006248:	4b11      	ldr	r3, [pc, #68]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006256:	490e      	ldr	r1, [pc, #56]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006262:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006266:	d106      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006268:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a08      	ldr	r2, [pc, #32]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006272:	60d3      	str	r3, [r2, #12]
 8006274:	e020      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800627e:	d109      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006280:	4b03      	ldr	r3, [pc, #12]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4a02      	ldr	r2, [pc, #8]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628a:	60d3      	str	r3, [r2, #12]
 800628c:	e014      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800629c:	d10c      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2101      	movs	r1, #1
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f8a5 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80062b4:	7cfb      	ldrb	r3, [r7, #19]
 80062b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d028      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062c4:	4b4a      	ldr	r3, [pc, #296]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062d2:	4947      	ldr	r1, [pc, #284]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e2:	d106      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e4:	4b42      	ldr	r3, [pc, #264]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a41      	ldr	r2, [pc, #260]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ee:	60d3      	str	r3, [r2, #12]
 80062f0:	e011      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062fa:	d10c      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f876 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006312:	7cfb      	ldrb	r3, [r7, #19]
 8006314:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d01e      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006322:	4b33      	ldr	r3, [pc, #204]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006332:	492f      	ldr	r1, [pc, #188]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2102      	movs	r1, #2
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f851 	bl	80063f4 <RCCEx_PLLSAI1_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006356:	7cfb      	ldrb	r3, [r7, #19]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800636c:	4b20      	ldr	r3, [pc, #128]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006372:	f023 0204 	bic.w	r2, r3, #4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800637c:	491c      	ldr	r1, [pc, #112]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006390:	4b17      	ldr	r3, [pc, #92]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006396:	f023 0218 	bic.w	r2, r3, #24
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	4913      	ldr	r1, [pc, #76]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063b4:	4b0e      	ldr	r3, [pc, #56]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063c4:	490a      	ldr	r1, [pc, #40]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063d6:	d105      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000

080063f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006402:	4b72      	ldr	r3, [pc, #456]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00e      	beq.n	800642c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800640e:	4b6f      	ldr	r3, [pc, #444]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0203 	and.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d103      	bne.n	8006426 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
       ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d142      	bne.n	80064ac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
 800642a:	e03f      	b.n	80064ac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d018      	beq.n	8006466 <RCCEx_PLLSAI1_Config+0x72>
 8006434:	2b03      	cmp	r3, #3
 8006436:	d825      	bhi.n	8006484 <RCCEx_PLLSAI1_Config+0x90>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d002      	beq.n	8006442 <RCCEx_PLLSAI1_Config+0x4e>
 800643c:	2b02      	cmp	r3, #2
 800643e:	d009      	beq.n	8006454 <RCCEx_PLLSAI1_Config+0x60>
 8006440:	e020      	b.n	8006484 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006442:	4b62      	ldr	r3, [pc, #392]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d11d      	bne.n	800648a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006452:	e01a      	b.n	800648a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006454:	4b5d      	ldr	r3, [pc, #372]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645c:	2b00      	cmp	r3, #0
 800645e:	d116      	bne.n	800648e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006464:	e013      	b.n	800648e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006466:	4b59      	ldr	r3, [pc, #356]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10f      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006472:	4b56      	ldr	r3, [pc, #344]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006482:	e006      	b.n	8006492 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e004      	b.n	8006494 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800648a:	bf00      	nop
 800648c:	e002      	b.n	8006494 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006492:	bf00      	nop
    }

    if(status == HAL_OK)
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800649a:	4b4c      	ldr	r3, [pc, #304]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f023 0203 	bic.w	r2, r3, #3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4949      	ldr	r1, [pc, #292]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 8086 	bne.w	80065c0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b4:	4b45      	ldr	r3, [pc, #276]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a44      	ldr	r2, [pc, #272]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c0:	f7fd f916 	bl	80036f0 <HAL_GetTick>
 80064c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064c6:	e009      	b.n	80064dc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064c8:	f7fd f912 	bl	80036f0 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d902      	bls.n	80064dc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	73fb      	strb	r3, [r7, #15]
        break;
 80064da:	e005      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064dc:	4b3b      	ldr	r3, [pc, #236]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ef      	bne.n	80064c8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d168      	bne.n	80065c0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d113      	bne.n	800651c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f4:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	4b35      	ldr	r3, [pc, #212]	@ (80065d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6892      	ldr	r2, [r2, #8]
 8006500:	0211      	lsls	r1, r2, #8
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	06d2      	lsls	r2, r2, #27
 8006508:	4311      	orrs	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	3a01      	subs	r2, #1
 8006510:	0112      	lsls	r2, r2, #4
 8006512:	430a      	orrs	r2, r1
 8006514:	492d      	ldr	r1, [pc, #180]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]
 800651a:	e02d      	b.n	8006578 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d115      	bne.n	800654e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006522:	4b2a      	ldr	r3, [pc, #168]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	4b2b      	ldr	r3, [pc, #172]	@ (80065d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006528:	4013      	ands	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6892      	ldr	r2, [r2, #8]
 800652e:	0211      	lsls	r1, r2, #8
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6912      	ldr	r2, [r2, #16]
 8006534:	0852      	lsrs	r2, r2, #1
 8006536:	3a01      	subs	r2, #1
 8006538:	0552      	lsls	r2, r2, #21
 800653a:	4311      	orrs	r1, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6852      	ldr	r2, [r2, #4]
 8006540:	3a01      	subs	r2, #1
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	430a      	orrs	r2, r1
 8006546:	4921      	ldr	r1, [pc, #132]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006548:	4313      	orrs	r3, r2
 800654a:	610b      	str	r3, [r1, #16]
 800654c:	e014      	b.n	8006578 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800654e:	4b1f      	ldr	r3, [pc, #124]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	4b21      	ldr	r3, [pc, #132]	@ (80065d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6892      	ldr	r2, [r2, #8]
 800655a:	0211      	lsls	r1, r2, #8
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6952      	ldr	r2, [r2, #20]
 8006560:	0852      	lsrs	r2, r2, #1
 8006562:	3a01      	subs	r2, #1
 8006564:	0652      	lsls	r2, r2, #25
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6852      	ldr	r2, [r2, #4]
 800656c:	3a01      	subs	r2, #1
 800656e:	0112      	lsls	r2, r2, #4
 8006570:	430a      	orrs	r2, r1
 8006572:	4916      	ldr	r1, [pc, #88]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006574:	4313      	orrs	r3, r2
 8006576:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006578:	4b14      	ldr	r3, [pc, #80]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a13      	ldr	r2, [pc, #76]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 800657e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006584:	f7fd f8b4 	bl	80036f0 <HAL_GetTick>
 8006588:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800658a:	e009      	b.n	80065a0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800658c:	f7fd f8b0 	bl	80036f0 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d902      	bls.n	80065a0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	73fb      	strb	r3, [r7, #15]
          break;
 800659e:	e005      	b.n	80065ac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065a0:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ef      	beq.n	800658c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065b2:	4b06      	ldr	r3, [pc, #24]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	4904      	ldr	r1, [pc, #16]	@ (80065cc <RCCEx_PLLSAI1_Config+0x1d8>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	07ff800f 	.word	0x07ff800f
 80065d4:	ff9f800f 	.word	0xff9f800f
 80065d8:	f9ff800f 	.word	0xf9ff800f

080065dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ea:	4b72      	ldr	r3, [pc, #456]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065f6:	4b6f      	ldr	r3, [pc, #444]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0203 	and.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d103      	bne.n	800660e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
       ||
 800660a:	2b00      	cmp	r3, #0
 800660c:	d142      	bne.n	8006694 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
 8006612:	e03f      	b.n	8006694 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d018      	beq.n	800664e <RCCEx_PLLSAI2_Config+0x72>
 800661c:	2b03      	cmp	r3, #3
 800661e:	d825      	bhi.n	800666c <RCCEx_PLLSAI2_Config+0x90>
 8006620:	2b01      	cmp	r3, #1
 8006622:	d002      	beq.n	800662a <RCCEx_PLLSAI2_Config+0x4e>
 8006624:	2b02      	cmp	r3, #2
 8006626:	d009      	beq.n	800663c <RCCEx_PLLSAI2_Config+0x60>
 8006628:	e020      	b.n	800666c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800662a:	4b62      	ldr	r3, [pc, #392]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d11d      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800663a:	e01a      	b.n	8006672 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800663c:	4b5d      	ldr	r3, [pc, #372]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800664c:	e013      	b.n	8006676 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800664e:	4b59      	ldr	r3, [pc, #356]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10f      	bne.n	800667a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800665a:	4b56      	ldr	r3, [pc, #344]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800666a:	e006      	b.n	800667a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e004      	b.n	800667c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006672:	bf00      	nop
 8006674:	e002      	b.n	800667c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006676:	bf00      	nop
 8006678:	e000      	b.n	800667c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800667a:	bf00      	nop
    }

    if(status == HAL_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d108      	bne.n	8006694 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006682:	4b4c      	ldr	r3, [pc, #304]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 0203 	bic.w	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4949      	ldr	r1, [pc, #292]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006690:	4313      	orrs	r3, r2
 8006692:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 8086 	bne.w	80067a8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800669c:	4b45      	ldr	r3, [pc, #276]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a44      	ldr	r2, [pc, #272]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a8:	f7fd f822 	bl	80036f0 <HAL_GetTick>
 80066ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ae:	e009      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066b0:	f7fd f81e 	bl	80036f0 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d902      	bls.n	80066c4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	73fb      	strb	r3, [r7, #15]
        break;
 80066c2:	e005      	b.n	80066d0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066c4:	4b3b      	ldr	r3, [pc, #236]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ef      	bne.n	80066b0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d168      	bne.n	80067a8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d113      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066dc:	4b35      	ldr	r3, [pc, #212]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	4b35      	ldr	r3, [pc, #212]	@ (80067b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6892      	ldr	r2, [r2, #8]
 80066e8:	0211      	lsls	r1, r2, #8
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68d2      	ldr	r2, [r2, #12]
 80066ee:	06d2      	lsls	r2, r2, #27
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6852      	ldr	r2, [r2, #4]
 80066f6:	3a01      	subs	r2, #1
 80066f8:	0112      	lsls	r2, r2, #4
 80066fa:	430a      	orrs	r2, r1
 80066fc:	492d      	ldr	r1, [pc, #180]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	614b      	str	r3, [r1, #20]
 8006702:	e02d      	b.n	8006760 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d115      	bne.n	8006736 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800670a:	4b2a      	ldr	r3, [pc, #168]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	4b2b      	ldr	r3, [pc, #172]	@ (80067bc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6892      	ldr	r2, [r2, #8]
 8006716:	0211      	lsls	r1, r2, #8
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6912      	ldr	r2, [r2, #16]
 800671c:	0852      	lsrs	r2, r2, #1
 800671e:	3a01      	subs	r2, #1
 8006720:	0552      	lsls	r2, r2, #21
 8006722:	4311      	orrs	r1, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6852      	ldr	r2, [r2, #4]
 8006728:	3a01      	subs	r2, #1
 800672a:	0112      	lsls	r2, r2, #4
 800672c:	430a      	orrs	r2, r1
 800672e:	4921      	ldr	r1, [pc, #132]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006730:	4313      	orrs	r3, r2
 8006732:	614b      	str	r3, [r1, #20]
 8006734:	e014      	b.n	8006760 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006736:	4b1f      	ldr	r3, [pc, #124]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	4b21      	ldr	r3, [pc, #132]	@ (80067c0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800673c:	4013      	ands	r3, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6892      	ldr	r2, [r2, #8]
 8006742:	0211      	lsls	r1, r2, #8
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6952      	ldr	r2, [r2, #20]
 8006748:	0852      	lsrs	r2, r2, #1
 800674a:	3a01      	subs	r2, #1
 800674c:	0652      	lsls	r2, r2, #25
 800674e:	4311      	orrs	r1, r2
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6852      	ldr	r2, [r2, #4]
 8006754:	3a01      	subs	r2, #1
 8006756:	0112      	lsls	r2, r2, #4
 8006758:	430a      	orrs	r2, r1
 800675a:	4916      	ldr	r1, [pc, #88]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006760:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a13      	ldr	r2, [pc, #76]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800676a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676c:	f7fc ffc0 	bl	80036f0 <HAL_GetTick>
 8006770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006772:	e009      	b.n	8006788 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006774:	f7fc ffbc 	bl	80036f0 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d902      	bls.n	8006788 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	73fb      	strb	r3, [r7, #15]
          break;
 8006786:	e005      	b.n	8006794 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ef      	beq.n	8006774 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	4904      	ldr	r1, [pc, #16]	@ (80067b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40021000 	.word	0x40021000
 80067b8:	07ff800f 	.word	0x07ff800f
 80067bc:	ff9f800f 	.word	0xff9f800f
 80067c0:	f9ff800f 	.word	0xf9ff800f

080067c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e095      	b.n	8006902 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d108      	bne.n	80067f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e6:	d009      	beq.n	80067fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	61da      	str	r2, [r3, #28]
 80067ee:	e005      	b.n	80067fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fc f83c 	bl	8002894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006832:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800683c:	d902      	bls.n	8006844 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e002      	b.n	800684a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006848:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006852:	d007      	beq.n	8006864 <HAL_SPI_Init+0xa0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a6:	ea42 0103 	orr.w	r1, r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	0c1b      	lsrs	r3, r3, #16
 80068c0:	f003 0204 	and.w	r2, r3, #4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80068e0:	ea42 0103 	orr.w	r1, r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b088      	sub	sp, #32
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691a:	f7fc fee9 	bl	80036f0 <HAL_GetTick>
 800691e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
 8006932:	e15c      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Transmit+0x36>
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e154      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_SPI_Transmit+0x48>
 800694e:	2302      	movs	r3, #2
 8006950:	e14d      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2203      	movs	r2, #3
 800695e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a4:	d10f      	bne.n	80069c6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	d007      	beq.n	80069e4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069ec:	d952      	bls.n	8006a94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Transmit+0xf2>
 80069f6:	8b7b      	ldrh	r3, [r7, #26]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d145      	bne.n	8006a88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a20:	e032      	b.n	8006a88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d112      	bne.n	8006a56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a54:	e018      	b.n	8006a88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a56:	f7fc fe4b 	bl	80036f0 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d803      	bhi.n	8006a6e <HAL_SPI_Transmit+0x164>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d102      	bne.n	8006a74 <HAL_SPI_Transmit+0x16a>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e0b2      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1c7      	bne.n	8006a22 <HAL_SPI_Transmit+0x118>
 8006a92:	e083      	b.n	8006b9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Transmit+0x198>
 8006a9c:	8b7b      	ldrh	r3, [r7, #26]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d177      	bne.n	8006b92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d912      	bls.n	8006ad2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b02      	subs	r3, #2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ad0:	e05f      	b.n	8006b92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006af8:	e04b      	b.n	8006b92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d12b      	bne.n	8006b60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d912      	bls.n	8006b38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	881a      	ldrh	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b02      	subs	r3, #2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b36:	e02c      	b.n	8006b92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	330c      	adds	r3, #12
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b5e:	e018      	b.n	8006b92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b60:	f7fc fdc6 	bl	80036f0 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d803      	bhi.n	8006b78 <HAL_SPI_Transmit+0x26e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d102      	bne.n	8006b7e <HAL_SPI_Transmit+0x274>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e02d      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1ae      	bne.n	8006afa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fb65 	bl	8007270 <SPI_EndRxTxTransaction>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006bec:	2300      	movs	r3, #0
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08a      	sub	sp, #40	@ 0x28
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c04:	2301      	movs	r3, #1
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c08:	f7fc fd72 	bl	80036f0 <HAL_GetTick>
 8006c0c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c14:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c24:	7ffb      	ldrb	r3, [r7, #31]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d00c      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x4e>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c30:	d106      	bne.n	8006c40 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <HAL_SPI_TransmitReceive+0x4a>
 8006c3a:	7ffb      	ldrb	r3, [r7, #31]
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d001      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
 8006c42:	e1f3      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x60>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x60>
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e1e8      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x72>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e1e1      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2205      	movs	r2, #5
 8006c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	887a      	ldrh	r2, [r7, #2]
 8006c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	887a      	ldrh	r2, [r7, #2]
 8006c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cc6:	d802      	bhi.n	8006cce <HAL_SPI_TransmitReceive+0xd8>
 8006cc8:	8abb      	ldrh	r3, [r7, #20]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d908      	bls.n	8006ce0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e007      	b.n	8006cf0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006cee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfa:	2b40      	cmp	r3, #64	@ 0x40
 8006cfc:	d007      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d16:	f240 8083 	bls.w	8006e20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x132>
 8006d22:	8afb      	ldrh	r3, [r7, #22]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d16f      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	881a      	ldrh	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4c:	e05c      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d11b      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x19e>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x19e>
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d113      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	881a      	ldrh	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d11c      	bne.n	8006ddc <HAL_SPI_TransmitReceive+0x1e6>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d016      	beq.n	8006ddc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db8:	b292      	uxth	r2, r2
 8006dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ddc:	f7fc fc88 	bl	80036f0 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d80d      	bhi.n	8006e08 <HAL_SPI_TransmitReceive+0x212>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d009      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e111      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d19d      	bne.n	8006d4e <HAL_SPI_TransmitReceive+0x158>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d197      	bne.n	8006d4e <HAL_SPI_TransmitReceive+0x158>
 8006e1e:	e0e5      	b.n	8006fec <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x23a>
 8006e28:	8afb      	ldrh	r3, [r7, #22]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	f040 80d1 	bne.w	8006fd2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d912      	bls.n	8006e60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e3e:	881a      	ldrh	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	1c9a      	adds	r2, r3, #2
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b02      	subs	r3, #2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e5e:	e0b8      	b.n	8006fd2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e86:	e0a4      	b.n	8006fd2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d134      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x30a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02f      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x30a>
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d12c      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d912      	bls.n	8006ed6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b02      	subs	r3, #2
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ed4:	e012      	b.n	8006efc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d148      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x3aa>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d042      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d923      	bls.n	8006f6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	b292      	uxth	r2, r2
 8006f32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b02      	subs	r3, #2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d81f      	bhi.n	8006f9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f6a:	605a      	str	r2, [r3, #4]
 8006f6c:	e016      	b.n	8006f9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f103 020c 	add.w	r2, r3, #12
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fa0:	f7fc fba6 	bl	80036f0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d803      	bhi.n	8006fb8 <HAL_SPI_TransmitReceive+0x3c2>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d102      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x3c8>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e02c      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f af55 	bne.w	8006e88 <HAL_SPI_TransmitReceive+0x292>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f af4e 	bne.w	8006e88 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fec:	6a3a      	ldr	r2, [r7, #32]
 8006fee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f93d 	bl	8007270 <SPI_EndRxTxTransaction>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e00e      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800702a:	2300      	movs	r3, #0
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	@ 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007044:	f7fc fb54 	bl	80036f0 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4413      	add	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007054:	f7fc fb4c 	bl	80036f0 <HAL_GetTick>
 8007058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800705a:	4b39      	ldr	r3, [pc, #228]	@ (8007140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	015b      	lsls	r3, r3, #5
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	fb02 f303 	mul.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800706a:	e054      	b.n	8007116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d050      	beq.n	8007116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007074:	f7fc fb3c 	bl	80036f0 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	429a      	cmp	r2, r3
 8007082:	d902      	bls.n	800708a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d13d      	bne.n	8007106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070a2:	d111      	bne.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ac:	d004      	beq.n	80070b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b6:	d107      	bne.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d0:	d10f      	bne.n	80070f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e017      	b.n	8007136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3b01      	subs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d19b      	bne.n	800706c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20040088 	.word	0x20040088

08007144 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	@ 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007156:	f7fc facb 	bl	80036f0 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4413      	add	r3, r2
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007166:	f7fc fac3 	bl	80036f0 <HAL_GetTick>
 800716a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007174:	4b3d      	ldr	r3, [pc, #244]	@ (800726c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	0d1b      	lsrs	r3, r3, #20
 8007184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800718c:	e060      	b.n	8007250 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007194:	d107      	bne.n	80071a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d050      	beq.n	8007250 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071ae:	f7fc fa9f 	bl	80036f0 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d902      	bls.n	80071c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d13d      	bne.n	8007240 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071dc:	d111      	bne.n	8007202 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e6:	d004      	beq.n	80071f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f0:	d107      	bne.n	8007202 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007200:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800720a:	d10f      	bne.n	800722c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800722a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e010      	b.n	8007262 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	3b01      	subs	r3, #1
 800724e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4013      	ands	r3, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d196      	bne.n	800718e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3728      	adds	r7, #40	@ 0x28
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20040088 	.word	0x20040088

08007270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7ff ff5b 	bl	8007144 <SPI_WaitFifoStateUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007298:	f043 0220 	orr.w	r2, r3, #32
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e027      	b.n	80072f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2180      	movs	r1, #128	@ 0x80
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fec0 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072be:	f043 0220 	orr.w	r2, r3, #32
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e014      	b.n	80072f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff ff34 	bl	8007144 <SPI_WaitFifoStateUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e6:	f043 0220 	orr.w	r2, r3, #32
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e000      	b.n	80072f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e049      	b.n	80073a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fb fb2a 	bl	800297c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f000 fad8 	bl	80078f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d001      	beq.n	80073c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e04f      	b.n	8007464 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a23      	ldr	r2, [pc, #140]	@ (8007470 <HAL_TIM_Base_Start_IT+0xc4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01d      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ee:	d018      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007474 <HAL_TIM_Base_Start_IT+0xc8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007478 <HAL_TIM_Base_Start_IT+0xcc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1c      	ldr	r2, [pc, #112]	@ (800747c <HAL_TIM_Base_Start_IT+0xd0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1b      	ldr	r2, [pc, #108]	@ (8007480 <HAL_TIM_Base_Start_IT+0xd4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIM_Base_Start_IT+0x76>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	@ (8007484 <HAL_TIM_Base_Start_IT+0xd8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d115      	bne.n	800744e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	4b17      	ldr	r3, [pc, #92]	@ (8007488 <HAL_TIM_Base_Start_IT+0xdc>)
 800742a:	4013      	ands	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b06      	cmp	r3, #6
 8007432:	d015      	beq.n	8007460 <HAL_TIM_Base_Start_IT+0xb4>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743a:	d011      	beq.n	8007460 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744c:	e008      	b.n	8007460 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e000      	b.n	8007462 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007460:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800
 800747c:	40000c00 	.word	0x40000c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40014000 	.word	0x40014000
 8007488:	00010007 	.word	0x00010007

0800748c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0201 	bic.w	r2, r2, #1
 80074a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10f      	bne.n	80074d4 <HAL_TIM_Base_Stop_IT+0x48>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_TIM_Base_Stop_IT+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d020      	beq.n	800754e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01b      	beq.n	800754e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f06f 0202 	mvn.w	r2, #2
 800751e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9bc 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 800753a:	e005      	b.n	8007548 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9ae 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f9bf 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d020      	beq.n	800759a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01b      	beq.n	800759a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0204 	mvn.w	r2, #4
 800756a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f996 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 8007586:	e005      	b.n	8007594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f988 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f999 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d020      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0208 	mvn.w	r2, #8
 80075b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2204      	movs	r2, #4
 80075bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f970 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f962 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f973 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d020      	beq.n	8007632 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0310 	and.w	r3, r3, #16
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01b      	beq.n	8007632 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f06f 0210 	mvn.w	r2, #16
 8007602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2208      	movs	r2, #8
 8007608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f94a 	bl	80078b2 <HAL_TIM_IC_CaptureCallback>
 800761e:	e005      	b.n	800762c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f93c 	bl	800789e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f94d 	bl	80078c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00c      	beq.n	8007656 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0201 	mvn.w	r2, #1
 800764e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f91a 	bl	800788a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00c      	beq.n	8007684 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fb08 	bl	8007c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00c      	beq.n	80076a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80076a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb00 	bl	8007ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00c      	beq.n	80076cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d007      	beq.n	80076cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f907 	bl	80078da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00c      	beq.n	80076f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0220 	mvn.w	r2, #32
 80076e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fac8 	bl	8007c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_TIM_ConfigClockSource+0x1c>
 8007710:	2302      	movs	r3, #2
 8007712:	e0b6      	b.n	8007882 <HAL_TIM_ConfigClockSource+0x18a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800773e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007750:	d03e      	beq.n	80077d0 <HAL_TIM_ConfigClockSource+0xd8>
 8007752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007756:	f200 8087 	bhi.w	8007868 <HAL_TIM_ConfigClockSource+0x170>
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775e:	f000 8086 	beq.w	800786e <HAL_TIM_ConfigClockSource+0x176>
 8007762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007766:	d87f      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007768:	2b70      	cmp	r3, #112	@ 0x70
 800776a:	d01a      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0xaa>
 800776c:	2b70      	cmp	r3, #112	@ 0x70
 800776e:	d87b      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007770:	2b60      	cmp	r3, #96	@ 0x60
 8007772:	d050      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x11e>
 8007774:	2b60      	cmp	r3, #96	@ 0x60
 8007776:	d877      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007778:	2b50      	cmp	r3, #80	@ 0x50
 800777a:	d03c      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0xfe>
 800777c:	2b50      	cmp	r3, #80	@ 0x50
 800777e:	d873      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007780:	2b40      	cmp	r3, #64	@ 0x40
 8007782:	d058      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x13e>
 8007784:	2b40      	cmp	r3, #64	@ 0x40
 8007786:	d86f      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007788:	2b30      	cmp	r3, #48	@ 0x30
 800778a:	d064      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x15e>
 800778c:	2b30      	cmp	r3, #48	@ 0x30
 800778e:	d86b      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007790:	2b20      	cmp	r3, #32
 8007792:	d060      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x15e>
 8007794:	2b20      	cmp	r3, #32
 8007796:	d867      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d05c      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x15e>
 800779c:	2b10      	cmp	r3, #16
 800779e:	d05a      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x15e>
 80077a0:	e062      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077b2:	f000 f9bd 	bl	8007b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	609a      	str	r2, [r3, #8]
      break;
 80077ce:	e04f      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077e0:	f000 f9a6 	bl	8007b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f2:	609a      	str	r2, [r3, #8]
      break;
 80077f4:	e03c      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007802:	461a      	mov	r2, r3
 8007804:	f000 f91a 	bl	8007a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2150      	movs	r1, #80	@ 0x50
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f973 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 8007814:	e02c      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007822:	461a      	mov	r2, r3
 8007824:	f000 f939 	bl	8007a9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2160      	movs	r1, #96	@ 0x60
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f963 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 8007834:	e01c      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007842:	461a      	mov	r2, r3
 8007844:	f000 f8fa 	bl	8007a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2140      	movs	r1, #64	@ 0x40
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f953 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 8007854:	e00c      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f000 f94a 	bl	8007afa <TIM_ITRx_SetConfig>
      break;
 8007866:	e003      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
      break;
 800786c:	e000      	b.n	8007870 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800786e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a46      	ldr	r2, [pc, #280]	@ (8007a1c <TIM_Base_SetConfig+0x12c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790e:	d00f      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a43      	ldr	r2, [pc, #268]	@ (8007a20 <TIM_Base_SetConfig+0x130>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00b      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a42      	ldr	r2, [pc, #264]	@ (8007a24 <TIM_Base_SetConfig+0x134>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d007      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a41      	ldr	r2, [pc, #260]	@ (8007a28 <TIM_Base_SetConfig+0x138>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a40      	ldr	r2, [pc, #256]	@ (8007a2c <TIM_Base_SetConfig+0x13c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a35      	ldr	r2, [pc, #212]	@ (8007a1c <TIM_Base_SetConfig+0x12c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d01f      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d01b      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a32      	ldr	r2, [pc, #200]	@ (8007a20 <TIM_Base_SetConfig+0x130>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d017      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a31      	ldr	r2, [pc, #196]	@ (8007a24 <TIM_Base_SetConfig+0x134>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a30      	ldr	r2, [pc, #192]	@ (8007a28 <TIM_Base_SetConfig+0x138>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00f      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2f      	ldr	r2, [pc, #188]	@ (8007a2c <TIM_Base_SetConfig+0x13c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00b      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2e      	ldr	r2, [pc, #184]	@ (8007a30 <TIM_Base_SetConfig+0x140>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d007      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a34 <TIM_Base_SetConfig+0x144>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_Base_SetConfig+0x9a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a2c      	ldr	r2, [pc, #176]	@ (8007a38 <TIM_Base_SetConfig+0x148>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a16      	ldr	r2, [pc, #88]	@ (8007a1c <TIM_Base_SetConfig+0x12c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00f      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a18      	ldr	r2, [pc, #96]	@ (8007a2c <TIM_Base_SetConfig+0x13c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a17      	ldr	r2, [pc, #92]	@ (8007a30 <TIM_Base_SetConfig+0x140>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d007      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a16      	ldr	r2, [pc, #88]	@ (8007a34 <TIM_Base_SetConfig+0x144>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_Base_SetConfig+0xf8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a15      	ldr	r2, [pc, #84]	@ (8007a38 <TIM_Base_SetConfig+0x148>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d103      	bne.n	80079f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d105      	bne.n	8007a0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f023 0201 	bic.w	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	611a      	str	r2, [r3, #16]
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40012c00 	.word	0x40012c00
 8007a20:	40000400 	.word	0x40000400
 8007a24:	40000800 	.word	0x40000800
 8007a28:	40000c00 	.word	0x40000c00
 8007a2c:	40013400 	.word	0x40013400
 8007a30:	40014000 	.word	0x40014000
 8007a34:	40014400 	.word	0x40014400
 8007a38:	40014800 	.word	0x40014800

08007a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 030a 	bic.w	r3, r3, #10
 8007a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	371c      	adds	r7, #28
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b087      	sub	sp, #28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	f023 0210 	bic.w	r2, r3, #16
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	031b      	lsls	r3, r3, #12
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	621a      	str	r2, [r3, #32]
}
 8007aee:	bf00      	nop
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f043 0307 	orr.w	r3, r3, #7
 8007b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	609a      	str	r2, [r3, #8]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	021a      	lsls	r2, r3, #8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	609a      	str	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e068      	b.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a2e      	ldr	r2, [pc, #184]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007bc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1e      	ldr	r2, [pc, #120]	@ (8007c68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfa:	d018      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a18      	ldr	r2, [pc, #96]	@ (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a13      	ldr	r2, [pc, #76]	@ (8007c6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a14      	ldr	r2, [pc, #80]	@ (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d10c      	bne.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40013400 	.word	0x40013400
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40000800 	.word	0x40000800
 8007c78:	40000c00 	.word	0x40000c00
 8007c7c:	40014000 	.word	0x40014000

08007c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e042      	b.n	8007d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fa fd31 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2224      	movs	r2, #36	@ 0x24
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0201 	bic.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc7c 	bl	8008604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f97d 	bl	800800c <UART_SetConfig>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e01b      	b.n	8007d54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fcfb 	bl	8008748 <UART_CheckIdleState>
 8007d52:	4603      	mov	r3, r0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	@ 0x28
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	d17b      	bne.n	8007e6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <HAL_UART_Transmit+0x26>
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e074      	b.n	8007e70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2221      	movs	r2, #33	@ 0x21
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d96:	f7fb fcab 	bl	80036f0 <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007db4:	d108      	bne.n	8007dc8 <HAL_UART_Transmit+0x6c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d104      	bne.n	8007dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	e003      	b.n	8007dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dd0:	e030      	b.n	8007e34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2180      	movs	r1, #128	@ 0x80
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fd5d 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e03d      	b.n	8007e70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e06:	b292      	uxth	r2, r2
 8007e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e007      	b.n	8007e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1c8      	bne.n	8007dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2200      	movs	r2, #0
 8007e48:	2140      	movs	r1, #64	@ 0x40
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fd26 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e006      	b.n	8007e70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e000      	b.n	8007e70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e6e:	2302      	movs	r3, #2
  }
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08a      	sub	sp, #40	@ 0x28
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	f040 80b6 	bne.w	8008000 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_UART_Receive+0x28>
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e0ae      	b.n	8008002 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2222      	movs	r2, #34	@ 0x22
 8007eb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eba:	f7fb fc19 	bl	80036f0 <HAL_GetTick>
 8007ebe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_UART_Receive+0x80>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <HAL_UART_Receive+0x76>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007eec:	e02d      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	22ff      	movs	r2, #255	@ 0xff
 8007ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ef6:	e028      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10d      	bne.n	8007f1c <HAL_UART_Receive+0xa4>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d104      	bne.n	8007f12 <HAL_UART_Receive+0x9a>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	22ff      	movs	r2, #255	@ 0xff
 8007f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f10:	e01b      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	227f      	movs	r2, #127	@ 0x7f
 8007f16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f1a:	e016      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f24:	d10d      	bne.n	8007f42 <HAL_UART_Receive+0xca>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <HAL_UART_Receive+0xc0>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	227f      	movs	r2, #127	@ 0x7f
 8007f32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f36:	e008      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	223f      	movs	r2, #63	@ 0x3f
 8007f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007f40:	e003      	b.n	8007f4a <HAL_UART_Receive+0xd2>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f5a:	d108      	bne.n	8007f6e <HAL_UART_Receive+0xf6>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e003      	b.n	8007f76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f76:	e037      	b.n	8007fe8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2120      	movs	r1, #32
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fc8a 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e033      	b.n	8008002 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10c      	bne.n	8007fba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	8a7b      	ldrh	r3, [r7, #18]
 8007faa:	4013      	ands	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	e00d      	b.n	8007fd6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	8a7b      	ldrh	r3, [r7, #18]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	4013      	ands	r3, r2
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1c1      	bne.n	8007f78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b08c      	sub	sp, #48	@ 0x30
 8008012:	af00      	add	r7, sp, #0
 8008014:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	431a      	orrs	r2, r3
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	431a      	orrs	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	4313      	orrs	r3, r2
 8008032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	4baa      	ldr	r3, [pc, #680]	@ (80082e4 <UART_SetConfig+0x2d8>)
 800803c:	4013      	ands	r3, r2
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008044:	430b      	orrs	r3, r1
 8008046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a9f      	ldr	r2, [pc, #636]	@ (80082e8 <UART_SetConfig+0x2dc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008074:	4313      	orrs	r3, r2
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008082:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800808c:	430b      	orrs	r3, r1
 800808e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	f023 010f 	bic.w	r1, r3, #15
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a90      	ldr	r2, [pc, #576]	@ (80082ec <UART_SetConfig+0x2e0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d125      	bne.n	80080fc <UART_SetConfig+0xf0>
 80080b0:	4b8f      	ldr	r3, [pc, #572]	@ (80082f0 <UART_SetConfig+0x2e4>)
 80080b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d81a      	bhi.n	80080f4 <UART_SetConfig+0xe8>
 80080be:	a201      	add	r2, pc, #4	@ (adr r2, 80080c4 <UART_SetConfig+0xb8>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080d5 	.word	0x080080d5
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e116      	b.n	800830a <UART_SetConfig+0x2fe>
 80080dc:	2302      	movs	r3, #2
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e112      	b.n	800830a <UART_SetConfig+0x2fe>
 80080e4:	2304      	movs	r3, #4
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e10e      	b.n	800830a <UART_SetConfig+0x2fe>
 80080ec:	2308      	movs	r3, #8
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f2:	e10a      	b.n	800830a <UART_SetConfig+0x2fe>
 80080f4:	2310      	movs	r3, #16
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e106      	b.n	800830a <UART_SetConfig+0x2fe>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a7c      	ldr	r2, [pc, #496]	@ (80082f4 <UART_SetConfig+0x2e8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d138      	bne.n	8008178 <UART_SetConfig+0x16c>
 8008106:	4b7a      	ldr	r3, [pc, #488]	@ (80082f0 <UART_SetConfig+0x2e4>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800810c:	f003 030c 	and.w	r3, r3, #12
 8008110:	2b0c      	cmp	r3, #12
 8008112:	d82d      	bhi.n	8008170 <UART_SetConfig+0x164>
 8008114:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <UART_SetConfig+0x110>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	08008151 	.word	0x08008151
 8008120:	08008171 	.word	0x08008171
 8008124:	08008171 	.word	0x08008171
 8008128:	08008171 	.word	0x08008171
 800812c:	08008161 	.word	0x08008161
 8008130:	08008171 	.word	0x08008171
 8008134:	08008171 	.word	0x08008171
 8008138:	08008171 	.word	0x08008171
 800813c:	08008159 	.word	0x08008159
 8008140:	08008171 	.word	0x08008171
 8008144:	08008171 	.word	0x08008171
 8008148:	08008171 	.word	0x08008171
 800814c:	08008169 	.word	0x08008169
 8008150:	2300      	movs	r3, #0
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008156:	e0d8      	b.n	800830a <UART_SetConfig+0x2fe>
 8008158:	2302      	movs	r3, #2
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800815e:	e0d4      	b.n	800830a <UART_SetConfig+0x2fe>
 8008160:	2304      	movs	r3, #4
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008166:	e0d0      	b.n	800830a <UART_SetConfig+0x2fe>
 8008168:	2308      	movs	r3, #8
 800816a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816e:	e0cc      	b.n	800830a <UART_SetConfig+0x2fe>
 8008170:	2310      	movs	r3, #16
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008176:	e0c8      	b.n	800830a <UART_SetConfig+0x2fe>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5e      	ldr	r2, [pc, #376]	@ (80082f8 <UART_SetConfig+0x2ec>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d125      	bne.n	80081ce <UART_SetConfig+0x1c2>
 8008182:	4b5b      	ldr	r3, [pc, #364]	@ (80082f0 <UART_SetConfig+0x2e4>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008188:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800818c:	2b30      	cmp	r3, #48	@ 0x30
 800818e:	d016      	beq.n	80081be <UART_SetConfig+0x1b2>
 8008190:	2b30      	cmp	r3, #48	@ 0x30
 8008192:	d818      	bhi.n	80081c6 <UART_SetConfig+0x1ba>
 8008194:	2b20      	cmp	r3, #32
 8008196:	d00a      	beq.n	80081ae <UART_SetConfig+0x1a2>
 8008198:	2b20      	cmp	r3, #32
 800819a:	d814      	bhi.n	80081c6 <UART_SetConfig+0x1ba>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <UART_SetConfig+0x19a>
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	d008      	beq.n	80081b6 <UART_SetConfig+0x1aa>
 80081a4:	e00f      	b.n	80081c6 <UART_SetConfig+0x1ba>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ac:	e0ad      	b.n	800830a <UART_SetConfig+0x2fe>
 80081ae:	2302      	movs	r3, #2
 80081b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b4:	e0a9      	b.n	800830a <UART_SetConfig+0x2fe>
 80081b6:	2304      	movs	r3, #4
 80081b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081bc:	e0a5      	b.n	800830a <UART_SetConfig+0x2fe>
 80081be:	2308      	movs	r3, #8
 80081c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081c4:	e0a1      	b.n	800830a <UART_SetConfig+0x2fe>
 80081c6:	2310      	movs	r3, #16
 80081c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081cc:	e09d      	b.n	800830a <UART_SetConfig+0x2fe>
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a4a      	ldr	r2, [pc, #296]	@ (80082fc <UART_SetConfig+0x2f0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d125      	bne.n	8008224 <UART_SetConfig+0x218>
 80081d8:	4b45      	ldr	r3, [pc, #276]	@ (80082f0 <UART_SetConfig+0x2e4>)
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80081e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80081e4:	d016      	beq.n	8008214 <UART_SetConfig+0x208>
 80081e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80081e8:	d818      	bhi.n	800821c <UART_SetConfig+0x210>
 80081ea:	2b80      	cmp	r3, #128	@ 0x80
 80081ec:	d00a      	beq.n	8008204 <UART_SetConfig+0x1f8>
 80081ee:	2b80      	cmp	r3, #128	@ 0x80
 80081f0:	d814      	bhi.n	800821c <UART_SetConfig+0x210>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <UART_SetConfig+0x1f0>
 80081f6:	2b40      	cmp	r3, #64	@ 0x40
 80081f8:	d008      	beq.n	800820c <UART_SetConfig+0x200>
 80081fa:	e00f      	b.n	800821c <UART_SetConfig+0x210>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008202:	e082      	b.n	800830a <UART_SetConfig+0x2fe>
 8008204:	2302      	movs	r3, #2
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820a:	e07e      	b.n	800830a <UART_SetConfig+0x2fe>
 800820c:	2304      	movs	r3, #4
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008212:	e07a      	b.n	800830a <UART_SetConfig+0x2fe>
 8008214:	2308      	movs	r3, #8
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821a:	e076      	b.n	800830a <UART_SetConfig+0x2fe>
 800821c:	2310      	movs	r3, #16
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008222:	e072      	b.n	800830a <UART_SetConfig+0x2fe>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a35      	ldr	r2, [pc, #212]	@ (8008300 <UART_SetConfig+0x2f4>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d12a      	bne.n	8008284 <UART_SetConfig+0x278>
 800822e:	4b30      	ldr	r3, [pc, #192]	@ (80082f0 <UART_SetConfig+0x2e4>)
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800823c:	d01a      	beq.n	8008274 <UART_SetConfig+0x268>
 800823e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008242:	d81b      	bhi.n	800827c <UART_SetConfig+0x270>
 8008244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008248:	d00c      	beq.n	8008264 <UART_SetConfig+0x258>
 800824a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800824e:	d815      	bhi.n	800827c <UART_SetConfig+0x270>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <UART_SetConfig+0x250>
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d008      	beq.n	800826c <UART_SetConfig+0x260>
 800825a:	e00f      	b.n	800827c <UART_SetConfig+0x270>
 800825c:	2300      	movs	r3, #0
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008262:	e052      	b.n	800830a <UART_SetConfig+0x2fe>
 8008264:	2302      	movs	r3, #2
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800826a:	e04e      	b.n	800830a <UART_SetConfig+0x2fe>
 800826c:	2304      	movs	r3, #4
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008272:	e04a      	b.n	800830a <UART_SetConfig+0x2fe>
 8008274:	2308      	movs	r3, #8
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800827a:	e046      	b.n	800830a <UART_SetConfig+0x2fe>
 800827c:	2310      	movs	r3, #16
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008282:	e042      	b.n	800830a <UART_SetConfig+0x2fe>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a17      	ldr	r2, [pc, #92]	@ (80082e8 <UART_SetConfig+0x2dc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d13a      	bne.n	8008304 <UART_SetConfig+0x2f8>
 800828e:	4b18      	ldr	r3, [pc, #96]	@ (80082f0 <UART_SetConfig+0x2e4>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008294:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008298:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800829c:	d01a      	beq.n	80082d4 <UART_SetConfig+0x2c8>
 800829e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082a2:	d81b      	bhi.n	80082dc <UART_SetConfig+0x2d0>
 80082a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082a8:	d00c      	beq.n	80082c4 <UART_SetConfig+0x2b8>
 80082aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ae:	d815      	bhi.n	80082dc <UART_SetConfig+0x2d0>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <UART_SetConfig+0x2b0>
 80082b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b8:	d008      	beq.n	80082cc <UART_SetConfig+0x2c0>
 80082ba:	e00f      	b.n	80082dc <UART_SetConfig+0x2d0>
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c2:	e022      	b.n	800830a <UART_SetConfig+0x2fe>
 80082c4:	2302      	movs	r3, #2
 80082c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ca:	e01e      	b.n	800830a <UART_SetConfig+0x2fe>
 80082cc:	2304      	movs	r3, #4
 80082ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082d2:	e01a      	b.n	800830a <UART_SetConfig+0x2fe>
 80082d4:	2308      	movs	r3, #8
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082da:	e016      	b.n	800830a <UART_SetConfig+0x2fe>
 80082dc:	2310      	movs	r3, #16
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e2:	e012      	b.n	800830a <UART_SetConfig+0x2fe>
 80082e4:	cfff69f3 	.word	0xcfff69f3
 80082e8:	40008000 	.word	0x40008000
 80082ec:	40013800 	.word	0x40013800
 80082f0:	40021000 	.word	0x40021000
 80082f4:	40004400 	.word	0x40004400
 80082f8:	40004800 	.word	0x40004800
 80082fc:	40004c00 	.word	0x40004c00
 8008300:	40005000 	.word	0x40005000
 8008304:	2310      	movs	r3, #16
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4aae      	ldr	r2, [pc, #696]	@ (80085c8 <UART_SetConfig+0x5bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	f040 8097 	bne.w	8008444 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008316:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800831a:	2b08      	cmp	r3, #8
 800831c:	d823      	bhi.n	8008366 <UART_SetConfig+0x35a>
 800831e:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <UART_SetConfig+0x318>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008349 	.word	0x08008349
 8008328:	08008367 	.word	0x08008367
 800832c:	08008351 	.word	0x08008351
 8008330:	08008367 	.word	0x08008367
 8008334:	08008357 	.word	0x08008357
 8008338:	08008367 	.word	0x08008367
 800833c:	08008367 	.word	0x08008367
 8008340:	08008367 	.word	0x08008367
 8008344:	0800835f 	.word	0x0800835f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008348:	f7fd fc38 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834e:	e010      	b.n	8008372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008350:	4b9e      	ldr	r3, [pc, #632]	@ (80085cc <UART_SetConfig+0x5c0>)
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008354:	e00d      	b.n	8008372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008356:	f7fd fb99 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800835a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8130 	beq.w	80085da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	4a94      	ldr	r2, [pc, #592]	@ (80085d0 <UART_SetConfig+0x5c4>)
 8008380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008384:	461a      	mov	r2, r3
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	fbb3 f3f2 	udiv	r3, r3, r2
 800838c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	4413      	add	r3, r2
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	429a      	cmp	r2, r3
 800839c:	d305      	bcc.n	80083aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d903      	bls.n	80083b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083b0:	e113      	b.n	80085da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	2200      	movs	r2, #0
 80083b6:	60bb      	str	r3, [r7, #8]
 80083b8:	60fa      	str	r2, [r7, #12]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083be:	4a84      	ldr	r2, [pc, #528]	@ (80085d0 <UART_SetConfig+0x5c4>)
 80083c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2200      	movs	r2, #0
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083d4:	f7f8 fc00 	bl	8000bd8 <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	020b      	lsls	r3, r1, #8
 80083ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083ee:	0202      	lsls	r2, r0, #8
 80083f0:	6979      	ldr	r1, [r7, #20]
 80083f2:	6849      	ldr	r1, [r1, #4]
 80083f4:	0849      	lsrs	r1, r1, #1
 80083f6:	2000      	movs	r0, #0
 80083f8:	460c      	mov	r4, r1
 80083fa:	4605      	mov	r5, r0
 80083fc:	eb12 0804 	adds.w	r8, r2, r4
 8008400:	eb43 0905 	adc.w	r9, r3, r5
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	469a      	mov	sl, r3
 800840c:	4693      	mov	fp, r2
 800840e:	4652      	mov	r2, sl
 8008410:	465b      	mov	r3, fp
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 fbdf 	bl	8000bd8 <__aeabi_uldivmod>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4613      	mov	r3, r2
 8008420:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008428:	d308      	bcc.n	800843c <UART_SetConfig+0x430>
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008430:	d204      	bcs.n	800843c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6a3a      	ldr	r2, [r7, #32]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	e0ce      	b.n	80085da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008442:	e0ca      	b.n	80085da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800844c:	d166      	bne.n	800851c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800844e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008452:	2b08      	cmp	r3, #8
 8008454:	d827      	bhi.n	80084a6 <UART_SetConfig+0x49a>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <UART_SetConfig+0x450>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	08008481 	.word	0x08008481
 8008460:	08008489 	.word	0x08008489
 8008464:	08008491 	.word	0x08008491
 8008468:	080084a7 	.word	0x080084a7
 800846c:	08008497 	.word	0x08008497
 8008470:	080084a7 	.word	0x080084a7
 8008474:	080084a7 	.word	0x080084a7
 8008478:	080084a7 	.word	0x080084a7
 800847c:	0800849f 	.word	0x0800849f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008480:	f7fd fb9c 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 8008484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008486:	e014      	b.n	80084b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008488:	f7fd fbae 	bl	8005be8 <HAL_RCC_GetPCLK2Freq>
 800848c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800848e:	e010      	b.n	80084b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008490:	4b4e      	ldr	r3, [pc, #312]	@ (80085cc <UART_SetConfig+0x5c0>)
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008494:	e00d      	b.n	80084b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008496:	f7fd faf9 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800849a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800849c:	e009      	b.n	80084b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800849e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a4:	e005      	b.n	80084b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8090 	beq.w	80085da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	4a44      	ldr	r2, [pc, #272]	@ (80085d0 <UART_SetConfig+0x5c4>)
 80084c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084cc:	005a      	lsls	r2, r3, #1
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	085b      	lsrs	r3, r3, #1
 80084d4:	441a      	add	r2, r3
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d916      	bls.n	8008514 <UART_SetConfig+0x508>
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ec:	d212      	bcs.n	8008514 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f023 030f 	bic.w	r3, r3, #15
 80084f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	b29a      	uxth	r2, r3
 8008504:	8bfb      	ldrh	r3, [r7, #30]
 8008506:	4313      	orrs	r3, r2
 8008508:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	8bfa      	ldrh	r2, [r7, #30]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e062      	b.n	80085da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800851a:	e05e      	b.n	80085da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800851c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008520:	2b08      	cmp	r3, #8
 8008522:	d828      	bhi.n	8008576 <UART_SetConfig+0x56a>
 8008524:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <UART_SetConfig+0x520>)
 8008526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852a:	bf00      	nop
 800852c:	08008551 	.word	0x08008551
 8008530:	08008559 	.word	0x08008559
 8008534:	08008561 	.word	0x08008561
 8008538:	08008577 	.word	0x08008577
 800853c:	08008567 	.word	0x08008567
 8008540:	08008577 	.word	0x08008577
 8008544:	08008577 	.word	0x08008577
 8008548:	08008577 	.word	0x08008577
 800854c:	0800856f 	.word	0x0800856f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008550:	f7fd fb34 	bl	8005bbc <HAL_RCC_GetPCLK1Freq>
 8008554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008556:	e014      	b.n	8008582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008558:	f7fd fb46 	bl	8005be8 <HAL_RCC_GetPCLK2Freq>
 800855c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800855e:	e010      	b.n	8008582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008560:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <UART_SetConfig+0x5c0>)
 8008562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008564:	e00d      	b.n	8008582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008566:	f7fd fa91 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800856a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800856c:	e009      	b.n	8008582 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008574:	e005      	b.n	8008582 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008580:	bf00      	nop
    }

    if (pclk != 0U)
 8008582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	d028      	beq.n	80085da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858c:	4a10      	ldr	r2, [pc, #64]	@ (80085d0 <UART_SetConfig+0x5c4>)
 800858e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008592:	461a      	mov	r2, r3
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	fbb3 f2f2 	udiv	r2, r3, r2
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	441a      	add	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2b0f      	cmp	r3, #15
 80085b0:	d910      	bls.n	80085d4 <UART_SetConfig+0x5c8>
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085b8:	d20c      	bcs.n	80085d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	b29a      	uxth	r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60da      	str	r2, [r3, #12]
 80085c4:	e009      	b.n	80085da <UART_SetConfig+0x5ce>
 80085c6:	bf00      	nop
 80085c8:	40008000 	.word	0x40008000
 80085cc:	00f42400 	.word	0x00f42400
 80085d0:	0809cd64 	.word	0x0809cd64
      }
      else
      {
        ret = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2201      	movs	r2, #1
 80085de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2200      	movs	r2, #0
 80085f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3730      	adds	r7, #48	@ 0x30
 80085fe:	46bd      	mov	sp, r7
 8008600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	430a      	orrs	r2, r1
 800864e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01a      	beq.n	800871a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008702:	d10a      	bne.n	800871a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800871e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	605a      	str	r2, [r3, #4]
  }
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b098      	sub	sp, #96	@ 0x60
 800874c:	af02      	add	r7, sp, #8
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008758:	f7fa ffca 	bl	80036f0 <HAL_GetTick>
 800875c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b08      	cmp	r3, #8
 800876a:	d12f      	bne.n	80087cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800876c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008774:	2200      	movs	r2, #0
 8008776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f88e 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d022      	beq.n	80087cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800879a:	653b      	str	r3, [r7, #80]	@ 0x50
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80087a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e6      	bne.n	8008786 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e063      	b.n	8008894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d149      	bne.n	800886e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e2:	2200      	movs	r2, #0
 80087e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f857 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d03c      	beq.n	800886e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	623b      	str	r3, [r7, #32]
   return(result);
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008812:	633b      	str	r3, [r7, #48]	@ 0x30
 8008814:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	60fb      	str	r3, [r7, #12]
   return(result);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008846:	61fa      	str	r2, [r7, #28]
 8008848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	69b9      	ldr	r1, [r7, #24]
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	617b      	str	r3, [r7, #20]
   return(result);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e012      	b.n	8008894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3758      	adds	r7, #88	@ 0x58
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ac:	e04f      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d04b      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b6:	f7fa ff1b 	bl	80036f0 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <UART_WaitOnFlagUntilTimeout+0x30>
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e04e      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d037      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b80      	cmp	r3, #128	@ 0x80
 80088e2:	d034      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b40      	cmp	r3, #64	@ 0x40
 80088e8:	d031      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d110      	bne.n	800891a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2208      	movs	r2, #8
 80088fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f838 	bl	8008976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2208      	movs	r2, #8
 800890a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e029      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d111      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f81e 	bl	8008976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e00f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d0a0      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008976:	b480      	push	{r7}
 8008978:	b095      	sub	sp, #84	@ 0x54
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800899c:	643b      	str	r3, [r7, #64]	@ 0x40
 800899e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e6      	bne.n	800897e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e3      	bne.n	80089b0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d118      	bne.n	8008a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0310 	bic.w	r3, r3, #16
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a36:	bf00      	nop
 8008a38:	3754      	adds	r7, #84	@ 0x54
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e027      	b.n	8008aa8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2224      	movs	r2, #36	@ 0x24
 8008a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0201 	bic.w	r2, r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e02d      	b.n	8008b28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2224      	movs	r2, #36	@ 0x24
 8008ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f84f 	bl	8008bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e02d      	b.n	8008ba4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2224      	movs	r2, #36	@ 0x24
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 0201 	bic.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f811 	bl	8008bac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d108      	bne.n	8008bce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bcc:	e031      	b.n	8008c32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bce:	2308      	movs	r3, #8
 8008bd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	0e5b      	lsrs	r3, r3, #25
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	0f5b      	lsrs	r3, r3, #29
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	7b3a      	ldrb	r2, [r7, #12]
 8008bfa:	4911      	ldr	r1, [pc, #68]	@ (8008c40 <UARTEx_SetNbDataToProcess+0x94>)
 8008bfc:	5c8a      	ldrb	r2, [r1, r2]
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c02:	7b3a      	ldrb	r2, [r7, #12]
 8008c04:	490f      	ldr	r1, [pc, #60]	@ (8008c44 <UARTEx_SetNbDataToProcess+0x98>)
 8008c06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c08:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	7b7a      	ldrb	r2, [r7, #13]
 8008c18:	4909      	ldr	r1, [pc, #36]	@ (8008c40 <UARTEx_SetNbDataToProcess+0x94>)
 8008c1a:	5c8a      	ldrb	r2, [r1, r2]
 8008c1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c20:	7b7a      	ldrb	r2, [r7, #13]
 8008c22:	4908      	ldr	r1, [pc, #32]	@ (8008c44 <UARTEx_SetNbDataToProcess+0x98>)
 8008c24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	0809cd7c 	.word	0x0809cd7c
 8008c44:	0809cd84 	.word	0x0809cd84

08008c48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008c4c:	4904      	ldr	r1, [pc, #16]	@ (8008c60 <MX_FATFS_Init+0x18>)
 8008c4e:	4805      	ldr	r0, [pc, #20]	@ (8008c64 <MX_FATFS_Init+0x1c>)
 8008c50:	f002 feec 	bl	800ba2c <FATFS_LinkDriver>
 8008c54:	4603      	mov	r3, r0
 8008c56:	461a      	mov	r2, r3
 8008c58:	4b03      	ldr	r3, [pc, #12]	@ (8008c68 <MX_FATFS_Init+0x20>)
 8008c5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c5c:	bf00      	nop
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20040940 	.word	0x20040940
 8008c64:	200400a4 	.word	0x200400a4
 8008c68:	2004093c 	.word	0x2004093c

08008c6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008c70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f9d7 	bl	800903c <USER_SPI_initialize>
 8008c8e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fab5 	bl	8009214 <USER_SPI_status>
 8008caa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008cc4:	7bf8      	ldrb	r0, [r7, #15]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	f000 fab8 	bl	8009240 <USER_SPI_read>
 8008cd0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008cea:	7bf8      	ldrb	r0, [r7, #15]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	f000 fb0b 	bl	800930c <USER_SPI_write>
 8008cf6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	603a      	str	r2, [r7, #0]
 8008d0a:	71fb      	strb	r3, [r7, #7]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008d10:	79b9      	ldrb	r1, [r7, #6]
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fb74 	bl	8009404 <USER_SPI_ioctl>
 8008d1c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008d30:	f7fa fcde 	bl	80036f0 <HAL_GetTick>
 8008d34:	4603      	mov	r3, r0
 8008d36:	4a04      	ldr	r2, [pc, #16]	@ (8008d48 <SPI_Timer_On+0x20>)
 8008d38:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008d3a:	4a04      	ldr	r2, [pc, #16]	@ (8008d4c <SPI_Timer_On+0x24>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6013      	str	r3, [r2, #0]
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20040948 	.word	0x20040948
 8008d4c:	2004094c 	.word	0x2004094c

08008d50 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008d54:	f7fa fccc 	bl	80036f0 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <SPI_Timer_Status+0x24>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <SPI_Timer_Status+0x28>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	bf34      	ite	cc
 8008d68:	2301      	movcc	r3, #1
 8008d6a:	2300      	movcs	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20040948 	.word	0x20040948
 8008d78:	2004094c 	.word	0x2004094c

08008d7c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	4603      	mov	r3, r0
 8008d84:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008d86:	f107 020f 	add.w	r2, r7, #15
 8008d8a:	1df9      	adds	r1, r7, #7
 8008d8c:	2332      	movs	r3, #50	@ 0x32
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	2301      	movs	r3, #1
 8008d92:	4804      	ldr	r0, [pc, #16]	@ (8008da4 <xchg_spi+0x28>)
 8008d94:	f7fd ff2f 	bl	8006bf6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200406e8 	.word	0x200406e8

08008da8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e00a      	b.n	8008dce <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	18d4      	adds	r4, r2, r3
 8008dbe:	20ff      	movs	r0, #255	@ 0xff
 8008dc0:	f7ff ffdc 	bl	8008d7c <xchg_spi>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3f0      	bcc.n	8008db8 <rcvr_spi_multi+0x10>
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd90      	pop	{r4, r7, pc}

08008de0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f04f 33ff 	mov.w	r3, #4294967295
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4803      	ldr	r0, [pc, #12]	@ (8008e04 <xmit_spi_multi+0x24>)
 8008df6:	f7fd fd88 	bl	800690a <HAL_SPI_Transmit>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200406e8 	.word	0x200406e8

08008e08 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008e10:	f7fa fc6e 	bl	80036f0 <HAL_GetTick>
 8008e14:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008e1a:	20ff      	movs	r0, #255	@ 0xff
 8008e1c:	f7ff ffae 	bl	8008d7c <xchg_spi>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	2bff      	cmp	r3, #255	@ 0xff
 8008e28:	d007      	beq.n	8008e3a <wait_ready+0x32>
 8008e2a:	f7fa fc61 	bl	80036f0 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d8ef      	bhi.n	8008e1a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2bff      	cmp	r3, #255	@ 0xff
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008e54:	2201      	movs	r2, #1
 8008e56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008e5a:	4804      	ldr	r0, [pc, #16]	@ (8008e6c <despiselect+0x1c>)
 8008e5c:	f7fb ffd6 	bl	8004e0c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008e60:	20ff      	movs	r0, #255	@ 0xff
 8008e62:	f7ff ff8b 	bl	8008d7c <xchg_spi>

}
 8008e66:	bf00      	nop
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	48000c00 	.word	0x48000c00

08008e70 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008e74:	2200      	movs	r2, #0
 8008e76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008e7a:	480a      	ldr	r0, [pc, #40]	@ (8008ea4 <spiselect+0x34>)
 8008e7c:	f7fb ffc6 	bl	8004e0c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008e80:	20ff      	movs	r0, #255	@ 0xff
 8008e82:	f7ff ff7b 	bl	8008d7c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008e86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e8a:	f7ff ffbd 	bl	8008e08 <wait_ready>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <spiselect+0x28>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e002      	b.n	8008e9e <spiselect+0x2e>

	despiselect();
 8008e98:	f7ff ffda 	bl	8008e50 <despiselect>
	return 0;	/* Timeout */
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	48000c00 	.word	0x48000c00

08008ea8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008eb2:	20c8      	movs	r0, #200	@ 0xc8
 8008eb4:	f7ff ff38 	bl	8008d28 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008eb8:	20ff      	movs	r0, #255	@ 0xff
 8008eba:	f7ff ff5f 	bl	8008d7c <xchg_spi>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	2bff      	cmp	r3, #255	@ 0xff
 8008ec6:	d104      	bne.n	8008ed2 <rcvr_datablock+0x2a>
 8008ec8:	f7ff ff42 	bl	8008d50 <SPI_Timer_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f2      	bne.n	8008eb8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ed6:	d001      	beq.n	8008edc <rcvr_datablock+0x34>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e00a      	b.n	8008ef2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ff62 	bl	8008da8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008ee4:	20ff      	movs	r0, #255	@ 0xff
 8008ee6:	f7ff ff49 	bl	8008d7c <xchg_spi>
 8008eea:	20ff      	movs	r0, #255	@ 0xff
 8008eec:	f7ff ff46 	bl	8008d7c <xchg_spi>

	return 1;						/* Function succeeded */
 8008ef0:	2301      	movs	r3, #1
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f0a:	f7ff ff7d 	bl	8008e08 <wait_ready>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <xmit_datablock+0x1e>
 8008f14:	2300      	movs	r3, #0
 8008f16:	e01e      	b.n	8008f56 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008f18:	78fb      	ldrb	r3, [r7, #3]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff ff2e 	bl	8008d7c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	2bfd      	cmp	r3, #253	@ 0xfd
 8008f24:	d016      	beq.n	8008f54 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008f26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ff58 	bl	8008de0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f30:	20ff      	movs	r0, #255	@ 0xff
 8008f32:	f7ff ff23 	bl	8008d7c <xchg_spi>
 8008f36:	20ff      	movs	r0, #255	@ 0xff
 8008f38:	f7ff ff20 	bl	8008d7c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008f3c:	20ff      	movs	r0, #255	@ 0xff
 8008f3e:	f7ff ff1d 	bl	8008d7c <xchg_spi>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d001      	beq.n	8008f54 <xmit_datablock+0x5a>
 8008f50:	2300      	movs	r3, #0
 8008f52:	e000      	b.n	8008f56 <xmit_datablock+0x5c>
	}
	return 1;
 8008f54:	2301      	movs	r3, #1
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	4603      	mov	r3, r0
 8008f66:	6039      	str	r1, [r7, #0]
 8008f68:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	da0e      	bge.n	8008f90 <send_cmd+0x32>
		cmd &= 0x7F;
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f78:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	2037      	movs	r0, #55	@ 0x37
 8008f7e:	f7ff ffee 	bl	8008f5e <send_cmd>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d901      	bls.n	8008f90 <send_cmd+0x32>
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	e051      	b.n	8009034 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	2b0c      	cmp	r3, #12
 8008f94:	d008      	beq.n	8008fa8 <send_cmd+0x4a>
		despiselect();
 8008f96:	f7ff ff5b 	bl	8008e50 <despiselect>
		if (!spiselect()) return 0xFF;
 8008f9a:	f7ff ff69 	bl	8008e70 <spiselect>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <send_cmd+0x4a>
 8008fa4:	23ff      	movs	r3, #255	@ 0xff
 8008fa6:	e045      	b.n	8009034 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fee3 	bl	8008d7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	0e1b      	lsrs	r3, r3, #24
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7ff fedd 	bl	8008d7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	0c1b      	lsrs	r3, r3, #16
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fed7 	bl	8008d7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	0a1b      	lsrs	r3, r3, #8
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fed1 	bl	8008d7c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fecc 	bl	8008d7c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <send_cmd+0x94>
 8008fee:	2395      	movs	r3, #149	@ 0x95
 8008ff0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008ff2:	79fb      	ldrb	r3, [r7, #7]
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d101      	bne.n	8008ffc <send_cmd+0x9e>
 8008ff8:	2387      	movs	r3, #135	@ 0x87
 8008ffa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff febc 	bl	8008d7c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b0c      	cmp	r3, #12
 8009008:	d102      	bne.n	8009010 <send_cmd+0xb2>
 800900a:	20ff      	movs	r0, #255	@ 0xff
 800900c:	f7ff feb6 	bl	8008d7c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009010:	230a      	movs	r3, #10
 8009012:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009014:	20ff      	movs	r0, #255	@ 0xff
 8009016:	f7ff feb1 	bl	8008d7c <xchg_spi>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800901e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009022:	2b00      	cmp	r3, #0
 8009024:	da05      	bge.n	8009032 <send_cmd+0xd4>
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	3b01      	subs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f0      	bne.n	8009014 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009032:	7bbb      	ldrb	r3, [r7, #14]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <USER_SPI_initialize+0x14>
 800904c:	2301      	movs	r3, #1
 800904e:	e0d6      	b.n	80091fe <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009050:	4b6d      	ldr	r3, [pc, #436]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <USER_SPI_initialize+0x2a>
 800905e:	4b6a      	ldr	r3, [pc, #424]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	e0cb      	b.n	80091fe <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009066:	4b69      	ldr	r3, [pc, #420]	@ (800920c <USER_SPI_initialize+0x1d0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8009070:	4b66      	ldr	r3, [pc, #408]	@ (800920c <USER_SPI_initialize+0x1d0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0218 	orr.w	r2, r2, #24
 8009078:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800907a:	230a      	movs	r3, #10
 800907c:	73fb      	strb	r3, [r7, #15]
 800907e:	e005      	b.n	800908c <USER_SPI_initialize+0x50>
 8009080:	20ff      	movs	r0, #255	@ 0xff
 8009082:	f7ff fe7b 	bl	8008d7c <xchg_spi>
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	3b01      	subs	r3, #1
 800908a:	73fb      	strb	r3, [r7, #15]
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f6      	bne.n	8009080 <USER_SPI_initialize+0x44>

	ty = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009096:	2100      	movs	r1, #0
 8009098:	2000      	movs	r0, #0
 800909a:	f7ff ff60 	bl	8008f5e <send_cmd>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	f040 808b 	bne.w	80091bc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80090a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80090aa:	f7ff fe3d 	bl	8008d28 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80090ae:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80090b2:	2008      	movs	r0, #8
 80090b4:	f7ff ff53 	bl	8008f5e <send_cmd>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d151      	bne.n	8009162 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e00d      	b.n	80090e0 <USER_SPI_initialize+0xa4>
 80090c4:	7bfc      	ldrb	r4, [r7, #15]
 80090c6:	20ff      	movs	r0, #255	@ 0xff
 80090c8:	f7ff fe58 	bl	8008d7c <xchg_spi>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	f104 0310 	add.w	r3, r4, #16
 80090d4:	443b      	add	r3, r7
 80090d6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	3301      	adds	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d9ee      	bls.n	80090c4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80090e6:	7abb      	ldrb	r3, [r7, #10]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d167      	bne.n	80091bc <USER_SPI_initialize+0x180>
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	2baa      	cmp	r3, #170	@ 0xaa
 80090f0:	d164      	bne.n	80091bc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80090f2:	bf00      	nop
 80090f4:	f7ff fe2c 	bl	8008d50 <SPI_Timer_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <USER_SPI_initialize+0xd2>
 80090fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009102:	20a9      	movs	r0, #169	@ 0xa9
 8009104:	f7ff ff2b 	bl	8008f5e <send_cmd>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f2      	bne.n	80090f4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800910e:	f7ff fe1f 	bl	8008d50 <SPI_Timer_Status>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d051      	beq.n	80091bc <USER_SPI_initialize+0x180>
 8009118:	2100      	movs	r1, #0
 800911a:	203a      	movs	r0, #58	@ 0x3a
 800911c:	f7ff ff1f 	bl	8008f5e <send_cmd>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d14a      	bne.n	80091bc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]
 800912a:	e00d      	b.n	8009148 <USER_SPI_initialize+0x10c>
 800912c:	7bfc      	ldrb	r4, [r7, #15]
 800912e:	20ff      	movs	r0, #255	@ 0xff
 8009130:	f7ff fe24 	bl	8008d7c <xchg_spi>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	f104 0310 	add.w	r3, r4, #16
 800913c:	443b      	add	r3, r7
 800913e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	3301      	adds	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b03      	cmp	r3, #3
 800914c:	d9ee      	bls.n	800912c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800914e:	7a3b      	ldrb	r3, [r7, #8]
 8009150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <USER_SPI_initialize+0x120>
 8009158:	230c      	movs	r3, #12
 800915a:	e000      	b.n	800915e <USER_SPI_initialize+0x122>
 800915c:	2304      	movs	r3, #4
 800915e:	737b      	strb	r3, [r7, #13]
 8009160:	e02c      	b.n	80091bc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009162:	2100      	movs	r1, #0
 8009164:	20a9      	movs	r0, #169	@ 0xa9
 8009166:	f7ff fefa 	bl	8008f5e <send_cmd>
 800916a:	4603      	mov	r3, r0
 800916c:	2b01      	cmp	r3, #1
 800916e:	d804      	bhi.n	800917a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009170:	2302      	movs	r3, #2
 8009172:	737b      	strb	r3, [r7, #13]
 8009174:	23a9      	movs	r3, #169	@ 0xa9
 8009176:	73bb      	strb	r3, [r7, #14]
 8009178:	e003      	b.n	8009182 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800917a:	2301      	movs	r3, #1
 800917c:	737b      	strb	r3, [r7, #13]
 800917e:	2301      	movs	r3, #1
 8009180:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009182:	bf00      	nop
 8009184:	f7ff fde4 	bl	8008d50 <SPI_Timer_Status>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <USER_SPI_initialize+0x162>
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fee3 	bl	8008f5e <send_cmd>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f2      	bne.n	8009184 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800919e:	f7ff fdd7 	bl	8008d50 <SPI_Timer_Status>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <USER_SPI_initialize+0x17c>
 80091a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80091ac:	2010      	movs	r0, #16
 80091ae:	f7ff fed6 	bl	8008f5e <send_cmd>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <USER_SPI_initialize+0x180>
				ty = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80091bc:	4a14      	ldr	r2, [pc, #80]	@ (8009210 <USER_SPI_initialize+0x1d4>)
 80091be:	7b7b      	ldrb	r3, [r7, #13]
 80091c0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80091c2:	f7ff fe45 	bl	8008e50 <despiselect>

	if (ty) {			/* OK */
 80091c6:	7b7b      	ldrb	r3, [r7, #13]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d012      	beq.n	80091f2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80091cc:	4b0f      	ldr	r3, [pc, #60]	@ (800920c <USER_SPI_initialize+0x1d0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80091d6:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <USER_SPI_initialize+0x1d0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0210 	orr.w	r2, r2, #16
 80091de:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80091e0:	4b09      	ldr	r3, [pc, #36]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f023 0301 	bic.w	r3, r3, #1
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	e002      	b.n	80091f8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80091f8:	4b03      	ldr	r3, [pc, #12]	@ (8009208 <USER_SPI_initialize+0x1cc>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	b2db      	uxtb	r3, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	bd90      	pop	{r4, r7, pc}
 8009206:	bf00      	nop
 8009208:	200400b8 	.word	0x200400b8
 800920c:	200406e8 	.word	0x200406e8
 8009210:	20040944 	.word	0x20040944

08009214 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USER_SPI_status+0x14>
 8009224:	2301      	movs	r3, #1
 8009226:	e002      	b.n	800922e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <USER_SPI_status+0x28>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b2db      	uxtb	r3, r3
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	200400b8 	.word	0x200400b8

08009240 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <USER_SPI_read+0x1c>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <USER_SPI_read+0x20>
 800925c:	2304      	movs	r3, #4
 800925e:	e04d      	b.n	80092fc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009260:	4b28      	ldr	r3, [pc, #160]	@ (8009304 <USER_SPI_read+0xc4>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <USER_SPI_read+0x32>
 800926e:	2303      	movs	r3, #3
 8009270:	e044      	b.n	80092fc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009272:	4b25      	ldr	r3, [pc, #148]	@ (8009308 <USER_SPI_read+0xc8>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	f003 0308 	and.w	r3, r3, #8
 800927a:	2b00      	cmp	r3, #0
 800927c:	d102      	bne.n	8009284 <USER_SPI_read+0x44>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	025b      	lsls	r3, r3, #9
 8009282:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d111      	bne.n	80092ae <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	2011      	movs	r0, #17
 800928e:	f7ff fe66 	bl	8008f5e <send_cmd>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d129      	bne.n	80092ec <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800929c:	68b8      	ldr	r0, [r7, #8]
 800929e:	f7ff fe03 	bl	8008ea8 <rcvr_datablock>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d021      	beq.n	80092ec <USER_SPI_read+0xac>
			count = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	e01e      	b.n	80092ec <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	2012      	movs	r0, #18
 80092b2:	f7ff fe54 	bl	8008f5e <send_cmd>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d117      	bne.n	80092ec <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80092bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092c0:	68b8      	ldr	r0, [r7, #8]
 80092c2:	f7ff fdf1 	bl	8008ea8 <rcvr_datablock>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00a      	beq.n	80092e2 <USER_SPI_read+0xa2>
				buff += 512;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80092d2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	603b      	str	r3, [r7, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1ed      	bne.n	80092bc <USER_SPI_read+0x7c>
 80092e0:	e000      	b.n	80092e4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80092e2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80092e4:	2100      	movs	r1, #0
 80092e6:	200c      	movs	r0, #12
 80092e8:	f7ff fe39 	bl	8008f5e <send_cmd>
		}
	}
	despiselect();
 80092ec:	f7ff fdb0 	bl	8008e50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bf14      	ite	ne
 80092f6:	2301      	movne	r3, #1
 80092f8:	2300      	moveq	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200400b8 	.word	0x200400b8
 8009308:	20040944 	.word	0x20040944

0800930c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d102      	bne.n	8009328 <USER_SPI_write+0x1c>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <USER_SPI_write+0x20>
 8009328:	2304      	movs	r3, #4
 800932a:	e063      	b.n	80093f4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800932c:	4b33      	ldr	r3, [pc, #204]	@ (80093fc <USER_SPI_write+0xf0>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <USER_SPI_write+0x32>
 800933a:	2303      	movs	r3, #3
 800933c:	e05a      	b.n	80093f4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800933e:	4b2f      	ldr	r3, [pc, #188]	@ (80093fc <USER_SPI_write+0xf0>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USER_SPI_write+0x44>
 800934c:	2302      	movs	r3, #2
 800934e:	e051      	b.n	80093f4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009350:	4b2b      	ldr	r3, [pc, #172]	@ (8009400 <USER_SPI_write+0xf4>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <USER_SPI_write+0x56>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	025b      	lsls	r3, r3, #9
 8009360:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d110      	bne.n	800938a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	2018      	movs	r0, #24
 800936c:	f7ff fdf7 	bl	8008f5e <send_cmd>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d136      	bne.n	80093e4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009376:	21fe      	movs	r1, #254	@ 0xfe
 8009378:	68b8      	ldr	r0, [r7, #8]
 800937a:	f7ff fdbe 	bl	8008efa <xmit_datablock>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d02f      	beq.n	80093e4 <USER_SPI_write+0xd8>
			count = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	e02c      	b.n	80093e4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800938a:	4b1d      	ldr	r3, [pc, #116]	@ (8009400 <USER_SPI_write+0xf4>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	f003 0306 	and.w	r3, r3, #6
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <USER_SPI_write+0x92>
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	2097      	movs	r0, #151	@ 0x97
 800939a:	f7ff fde0 	bl	8008f5e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	2019      	movs	r0, #25
 80093a2:	f7ff fddc 	bl	8008f5e <send_cmd>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11b      	bne.n	80093e4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80093ac:	21fc      	movs	r1, #252	@ 0xfc
 80093ae:	68b8      	ldr	r0, [r7, #8]
 80093b0:	f7ff fda3 	bl	8008efa <xmit_datablock>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <USER_SPI_write+0xc4>
				buff += 512;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80093c0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1ee      	bne.n	80093ac <USER_SPI_write+0xa0>
 80093ce:	e000      	b.n	80093d2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80093d0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80093d2:	21fd      	movs	r1, #253	@ 0xfd
 80093d4:	2000      	movs	r0, #0
 80093d6:	f7ff fd90 	bl	8008efa <xmit_datablock>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <USER_SPI_write+0xd8>
 80093e0:	2301      	movs	r3, #1
 80093e2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80093e4:	f7ff fd34 	bl	8008e50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	bf14      	ite	ne
 80093ee:	2301      	movne	r3, #1
 80093f0:	2300      	moveq	r3, #0
 80093f2:	b2db      	uxtb	r3, r3
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	200400b8 	.word	0x200400b8
 8009400:	20040944 	.word	0x20040944

08009404 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08c      	sub	sp, #48	@ 0x30
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	603a      	str	r2, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
 8009410:	460b      	mov	r3, r1
 8009412:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <USER_SPI_ioctl+0x1a>
 800941a:	2304      	movs	r3, #4
 800941c:	e15a      	b.n	80096d4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800941e:	4baf      	ldr	r3, [pc, #700]	@ (80096dc <USER_SPI_ioctl+0x2d8>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <USER_SPI_ioctl+0x2c>
 800942c:	2303      	movs	r3, #3
 800942e:	e151      	b.n	80096d4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8009436:	79bb      	ldrb	r3, [r7, #6]
 8009438:	2b04      	cmp	r3, #4
 800943a:	f200 8136 	bhi.w	80096aa <USER_SPI_ioctl+0x2a6>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <USER_SPI_ioctl+0x40>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009459 	.word	0x08009459
 8009448:	0800946d 	.word	0x0800946d
 800944c:	080096ab 	.word	0x080096ab
 8009450:	08009519 	.word	0x08009519
 8009454:	0800960f 	.word	0x0800960f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009458:	f7ff fd0a 	bl	8008e70 <spiselect>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 8127 	beq.w	80096b2 <USER_SPI_ioctl+0x2ae>
 8009464:	2300      	movs	r3, #0
 8009466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800946a:	e122      	b.n	80096b2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800946c:	2100      	movs	r1, #0
 800946e:	2009      	movs	r0, #9
 8009470:	f7ff fd75 	bl	8008f5e <send_cmd>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	f040 811d 	bne.w	80096b6 <USER_SPI_ioctl+0x2b2>
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	2110      	movs	r1, #16
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fd10 	bl	8008ea8 <rcvr_datablock>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 8113 	beq.w	80096b6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009490:	7b3b      	ldrb	r3, [r7, #12]
 8009492:	099b      	lsrs	r3, r3, #6
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b01      	cmp	r3, #1
 8009498:	d111      	bne.n	80094be <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800949a:	7d7b      	ldrb	r3, [r7, #21]
 800949c:	461a      	mov	r2, r3
 800949e:	7d3b      	ldrb	r3, [r7, #20]
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	4413      	add	r3, r2
 80094a4:	461a      	mov	r2, r3
 80094a6:	7cfb      	ldrb	r3, [r7, #19]
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80094ae:	4413      	add	r3, r2
 80094b0:	3301      	adds	r3, #1
 80094b2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	029a      	lsls	r2, r3, #10
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e028      	b.n	8009510 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80094be:	7c7b      	ldrb	r3, [r7, #17]
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	7dbb      	ldrb	r3, [r7, #22]
 80094c8:	09db      	lsrs	r3, r3, #7
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	7d7b      	ldrb	r3, [r7, #21]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0306 	and.w	r3, r3, #6
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	4413      	add	r3, r2
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	3302      	adds	r3, #2
 80094e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80094e6:	7d3b      	ldrb	r3, [r7, #20]
 80094e8:	099b      	lsrs	r3, r3, #6
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	7cfb      	ldrb	r3, [r7, #19]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	7cbb      	ldrb	r3, [r7, #18]
 80094f6:	029b      	lsls	r3, r3, #10
 80094f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80094fc:	4413      	add	r3, r2
 80094fe:	3301      	adds	r3, #1
 8009500:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009502:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009506:	3b09      	subs	r3, #9
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	409a      	lsls	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009516:	e0ce      	b.n	80096b6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009518:	4b71      	ldr	r3, [pc, #452]	@ (80096e0 <USER_SPI_ioctl+0x2dc>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	d031      	beq.n	8009588 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009524:	2100      	movs	r1, #0
 8009526:	208d      	movs	r0, #141	@ 0x8d
 8009528:	f7ff fd19 	bl	8008f5e <send_cmd>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 80c3 	bne.w	80096ba <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009534:	20ff      	movs	r0, #255	@ 0xff
 8009536:	f7ff fc21 	bl	8008d7c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	2110      	movs	r1, #16
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff fcb1 	bl	8008ea8 <rcvr_datablock>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80b6 	beq.w	80096ba <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800954e:	2330      	movs	r3, #48	@ 0x30
 8009550:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009554:	e007      	b.n	8009566 <USER_SPI_ioctl+0x162>
 8009556:	20ff      	movs	r0, #255	@ 0xff
 8009558:	f7ff fc10 	bl	8008d7c <xchg_spi>
 800955c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009560:	3b01      	subs	r3, #1
 8009562:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009566:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f3      	bne.n	8009556 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800956e:	7dbb      	ldrb	r3, [r7, #22]
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	b2db      	uxtb	r3, r3
 8009574:	461a      	mov	r2, r3
 8009576:	2310      	movs	r3, #16
 8009578:	fa03 f202 	lsl.w	r2, r3, r2
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009586:	e098      	b.n	80096ba <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009588:	2100      	movs	r1, #0
 800958a:	2009      	movs	r0, #9
 800958c:	f7ff fce7 	bl	8008f5e <send_cmd>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	f040 8091 	bne.w	80096ba <USER_SPI_ioctl+0x2b6>
 8009598:	f107 030c 	add.w	r3, r7, #12
 800959c:	2110      	movs	r1, #16
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fc82 	bl	8008ea8 <rcvr_datablock>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8087 	beq.w	80096ba <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80095ac:	4b4c      	ldr	r3, [pc, #304]	@ (80096e0 <USER_SPI_ioctl+0x2dc>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d012      	beq.n	80095de <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80095b8:	7dbb      	ldrb	r3, [r7, #22]
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80095c0:	7dfa      	ldrb	r2, [r7, #23]
 80095c2:	09d2      	lsrs	r2, r2, #7
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	4413      	add	r3, r2
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	7e7b      	ldrb	r3, [r7, #25]
 80095cc:	099b      	lsrs	r3, r3, #6
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	e013      	b.n	8009606 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80095de:	7dbb      	ldrb	r3, [r7, #22]
 80095e0:	109b      	asrs	r3, r3, #2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	3301      	adds	r3, #1
 80095ea:	7dfa      	ldrb	r2, [r7, #23]
 80095ec:	00d2      	lsls	r2, r2, #3
 80095ee:	f002 0218 	and.w	r2, r2, #24
 80095f2:	7df9      	ldrb	r1, [r7, #23]
 80095f4:	0949      	lsrs	r1, r1, #5
 80095f6:	b2c9      	uxtb	r1, r1
 80095f8:	440a      	add	r2, r1
 80095fa:	3201      	adds	r2, #1
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
 8009600:	461a      	mov	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800960c:	e055      	b.n	80096ba <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800960e:	4b34      	ldr	r3, [pc, #208]	@ (80096e0 <USER_SPI_ioctl+0x2dc>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 0306 	and.w	r3, r3, #6
 8009616:	2b00      	cmp	r3, #0
 8009618:	d051      	beq.n	80096be <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800961a:	f107 020c 	add.w	r2, r7, #12
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	210b      	movs	r1, #11
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff feee 	bl	8009404 <USER_SPI_ioctl>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d149      	bne.n	80096c2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800962e:	7b3b      	ldrb	r3, [r7, #12]
 8009630:	099b      	lsrs	r3, r3, #6
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <USER_SPI_ioctl+0x23e>
 8009638:	7dbb      	ldrb	r3, [r7, #22]
 800963a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d041      	beq.n	80096c6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009652:	4b23      	ldr	r3, [pc, #140]	@ (80096e0 <USER_SPI_ioctl+0x2dc>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800965e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009660:	025b      	lsls	r3, r3, #9
 8009662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009666:	025b      	lsls	r3, r3, #9
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800966a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800966c:	2020      	movs	r0, #32
 800966e:	f7ff fc76 	bl	8008f5e <send_cmd>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d128      	bne.n	80096ca <USER_SPI_ioctl+0x2c6>
 8009678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800967a:	2021      	movs	r0, #33	@ 0x21
 800967c:	f7ff fc6f 	bl	8008f5e <send_cmd>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d121      	bne.n	80096ca <USER_SPI_ioctl+0x2c6>
 8009686:	2100      	movs	r1, #0
 8009688:	2026      	movs	r0, #38	@ 0x26
 800968a:	f7ff fc68 	bl	8008f5e <send_cmd>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d11a      	bne.n	80096ca <USER_SPI_ioctl+0x2c6>
 8009694:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009698:	f7ff fbb6 	bl	8008e08 <wait_ready>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d013      	beq.n	80096ca <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80096a8:	e00f      	b.n	80096ca <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80096aa:	2304      	movs	r3, #4
 80096ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80096b0:	e00c      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		break;
 80096b2:	bf00      	nop
 80096b4:	e00a      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		break;
 80096b6:	bf00      	nop
 80096b8:	e008      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		break;
 80096ba:	bf00      	nop
 80096bc:	e006      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80096be:	bf00      	nop
 80096c0:	e004      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80096c2:	bf00      	nop
 80096c4:	e002      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80096c6:	bf00      	nop
 80096c8:	e000      	b.n	80096cc <USER_SPI_ioctl+0x2c8>
		break;
 80096ca:	bf00      	nop
	}

	despiselect();
 80096cc:	f7ff fbc0 	bl	8008e50 <despiselect>

	return res;
 80096d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3730      	adds	r7, #48	@ 0x30
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	200400b8 	.word	0x200400b8
 80096e0:	20040944 	.word	0x20040944

080096e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	4a08      	ldr	r2, [pc, #32]	@ (8009714 <disk_status+0x30>)
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	79fa      	ldrb	r2, [r7, #7]
 80096fc:	4905      	ldr	r1, [pc, #20]	@ (8009714 <disk_status+0x30>)
 80096fe:	440a      	add	r2, r1
 8009700:	7a12      	ldrb	r2, [r2, #8]
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	73fb      	strb	r3, [r7, #15]
  return stat;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20040978 	.word	0x20040978

08009718 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009726:	79fb      	ldrb	r3, [r7, #7]
 8009728:	4a0d      	ldr	r2, [pc, #52]	@ (8009760 <disk_initialize+0x48>)
 800972a:	5cd3      	ldrb	r3, [r2, r3]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d111      	bne.n	8009754 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009730:	79fb      	ldrb	r3, [r7, #7]
 8009732:	4a0b      	ldr	r2, [pc, #44]	@ (8009760 <disk_initialize+0x48>)
 8009734:	2101      	movs	r1, #1
 8009736:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	4a09      	ldr	r2, [pc, #36]	@ (8009760 <disk_initialize+0x48>)
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	79fa      	ldrb	r2, [r7, #7]
 8009746:	4906      	ldr	r1, [pc, #24]	@ (8009760 <disk_initialize+0x48>)
 8009748:	440a      	add	r2, r1
 800974a:	7a12      	ldrb	r2, [r2, #8]
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20040978 	.word	0x20040978

08009764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4a0a      	ldr	r2, [pc, #40]	@ (80097a0 <disk_read+0x3c>)
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	689c      	ldr	r4, [r3, #8]
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4a07      	ldr	r2, [pc, #28]	@ (80097a0 <disk_read+0x3c>)
 8009784:	4413      	add	r3, r2
 8009786:	7a18      	ldrb	r0, [r3, #8]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	47a0      	blx	r4
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]
  return res;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd90      	pop	{r4, r7, pc}
 800979e:	bf00      	nop
 80097a0:	20040978 	.word	0x20040978

080097a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4a0a      	ldr	r2, [pc, #40]	@ (80097e0 <disk_write+0x3c>)
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	68dc      	ldr	r4, [r3, #12]
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4a07      	ldr	r2, [pc, #28]	@ (80097e0 <disk_write+0x3c>)
 80097c4:	4413      	add	r3, r2
 80097c6:	7a18      	ldrb	r0, [r3, #8]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	47a0      	blx	r4
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd90      	pop	{r4, r7, pc}
 80097de:	bf00      	nop
 80097e0:	20040978 	.word	0x20040978

080097e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	603a      	str	r2, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
 80097f0:	460b      	mov	r3, r1
 80097f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	4a09      	ldr	r2, [pc, #36]	@ (800981c <disk_ioctl+0x38>)
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	79fa      	ldrb	r2, [r7, #7]
 8009802:	4906      	ldr	r1, [pc, #24]	@ (800981c <disk_ioctl+0x38>)
 8009804:	440a      	add	r2, r1
 8009806:	7a10      	ldrb	r0, [r2, #8]
 8009808:	79b9      	ldrb	r1, [r7, #6]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
  return res;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20040978 	.word	0x20040978

08009820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	b21a      	sxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b21b      	sxth	r3, r3
 800983c:	4313      	orrs	r3, r2
 800983e:	b21b      	sxth	r3, r3
 8009840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009842:	89fb      	ldrh	r3, [r7, #14]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3303      	adds	r3, #3
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	3202      	adds	r2, #2
 8009868:	7812      	ldrb	r2, [r2, #0]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	3201      	adds	r2, #1
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	4313      	orrs	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
	return rv;
 8009888:	68fb      	ldr	r3, [r7, #12]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	1c5a      	adds	r2, r3, #1
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	887a      	ldrh	r2, [r7, #2]
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	0a1b      	lsrs	r3, r3, #8
 80098b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	887a      	ldrh	r2, [r7, #2]
 80098bc:	b2d2      	uxtb	r2, r2
 80098be:	701a      	strb	r2, [r3, #0]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	0a1b      	lsrs	r3, r3, #8
 80098e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	b2d2      	uxtb	r2, r2
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	0a1b      	lsrs	r3, r3, #8
 800990a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00d      	beq.n	800995a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	1c53      	adds	r3, r2, #1
 8009942:	613b      	str	r3, [r7, #16]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	6179      	str	r1, [r7, #20]
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f1      	bne.n	800993e <mem_cpy+0x1a>
	}
}
 800995a:	bf00      	nop
 800995c:	371c      	adds	r7, #28
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009966:	b480      	push	{r7}
 8009968:	b087      	sub	sp, #28
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	617a      	str	r2, [r7, #20]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1f3      	bne.n	8009976 <mem_set+0x10>
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	371c      	adds	r7, #28
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	@ 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	61fb      	str	r3, [r7, #28]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	61fa      	str	r2, [r7, #28]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	4619      	mov	r1, r3
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	61ba      	str	r2, [r7, #24]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	1acb      	subs	r3, r1, r3
 80099c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <mem_cmp+0x40>
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0eb      	beq.n	80099b4 <mem_cmp+0x18>

	return r;
 80099dc:	697b      	ldr	r3, [r7, #20]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3724      	adds	r7, #36	@ 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099f4:	e002      	b.n	80099fc <chk_chr+0x12>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3301      	adds	r3, #1
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <chk_chr+0x26>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d1f2      	bne.n	80099f6 <chk_chr+0xc>
	return *str;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e029      	b.n	8009a88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009a34:	4a27      	ldr	r2, [pc, #156]	@ (8009ad4 <chk_lock+0xb4>)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	011b      	lsls	r3, r3, #4
 8009a3a:	4413      	add	r3, r2
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d01d      	beq.n	8009a7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a42:	4a24      	ldr	r2, [pc, #144]	@ (8009ad4 <chk_lock+0xb4>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	011b      	lsls	r3, r3, #4
 8009a48:	4413      	add	r3, r2
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d116      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a54:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad4 <chk_lock+0xb4>)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d10c      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a68:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad4 <chk_lock+0xb4>)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	4413      	add	r3, r2
 8009a70:	3308      	adds	r3, #8
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d102      	bne.n	8009a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a7c:	e007      	b.n	8009a8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d9d2      	bls.n	8009a34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d109      	bne.n	8009aa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <chk_lock+0x80>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d101      	bne.n	8009aa4 <chk_lock+0x84>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e010      	b.n	8009ac6 <chk_lock+0xa6>
 8009aa4:	2312      	movs	r3, #18
 8009aa6:	e00e      	b.n	8009ac6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <chk_lock+0xa0>
 8009aae:	4a09      	ldr	r2, [pc, #36]	@ (8009ad4 <chk_lock+0xb4>)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	4413      	add	r3, r2
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009abe:	d101      	bne.n	8009ac4 <chk_lock+0xa4>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	e000      	b.n	8009ac6 <chk_lock+0xa6>
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20040958 	.word	0x20040958

08009ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	e002      	b.n	8009aea <enq_lock+0x12>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d806      	bhi.n	8009afe <enq_lock+0x26>
 8009af0:	4a09      	ldr	r2, [pc, #36]	@ (8009b18 <enq_lock+0x40>)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	4413      	add	r3, r2
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1f2      	bne.n	8009ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	bf14      	ite	ne
 8009b04:	2301      	movne	r3, #1
 8009b06:	2300      	moveq	r3, #0
 8009b08:	b2db      	uxtb	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	20040958 	.word	0x20040958

08009b1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e01f      	b.n	8009b6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009b2c:	4a41      	ldr	r2, [pc, #260]	@ (8009c34 <inc_lock+0x118>)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	4413      	add	r3, r2
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d113      	bne.n	8009b66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c34 <inc_lock+0x118>)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d109      	bne.n	8009b66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b52:	4a38      	ldr	r2, [pc, #224]	@ (8009c34 <inc_lock+0x118>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	4413      	add	r3, r2
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d006      	beq.n	8009b74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d9dc      	bls.n	8009b2c <inc_lock+0x10>
 8009b72:	e000      	b.n	8009b76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d132      	bne.n	8009be2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	e002      	b.n	8009b88 <inc_lock+0x6c>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d806      	bhi.n	8009b9c <inc_lock+0x80>
 8009b8e:	4a29      	ldr	r2, [pc, #164]	@ (8009c34 <inc_lock+0x118>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	4413      	add	r3, r2
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f2      	bne.n	8009b82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d101      	bne.n	8009ba6 <inc_lock+0x8a>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e040      	b.n	8009c28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4922      	ldr	r1, [pc, #136]	@ (8009c34 <inc_lock+0x118>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	440b      	add	r3, r1
 8009bb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	491e      	ldr	r1, [pc, #120]	@ (8009c34 <inc_lock+0x118>)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	695a      	ldr	r2, [r3, #20]
 8009bc8:	491a      	ldr	r1, [pc, #104]	@ (8009c34 <inc_lock+0x118>)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	440b      	add	r3, r1
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bd4:	4a17      	ldr	r2, [pc, #92]	@ (8009c34 <inc_lock+0x118>)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	4413      	add	r3, r2
 8009bdc:	330c      	adds	r3, #12
 8009bde:	2200      	movs	r2, #0
 8009be0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <inc_lock+0xe0>
 8009be8:	4a12      	ldr	r2, [pc, #72]	@ (8009c34 <inc_lock+0x118>)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	011b      	lsls	r3, r3, #4
 8009bee:	4413      	add	r3, r2
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <inc_lock+0xe0>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e015      	b.n	8009c28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d108      	bne.n	8009c14 <inc_lock+0xf8>
 8009c02:	4a0c      	ldr	r2, [pc, #48]	@ (8009c34 <inc_lock+0x118>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	e001      	b.n	8009c18 <inc_lock+0xfc>
 8009c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c18:	4906      	ldr	r1, [pc, #24]	@ (8009c34 <inc_lock+0x118>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	440b      	add	r3, r1
 8009c20:	330c      	adds	r3, #12
 8009c22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20040958 	.word	0x20040958

08009c38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d825      	bhi.n	8009c98 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c4c:	4a17      	ldr	r2, [pc, #92]	@ (8009cac <dec_lock+0x74>)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	011b      	lsls	r3, r3, #4
 8009c52:	4413      	add	r3, r2
 8009c54:	330c      	adds	r3, #12
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c5a:	89fb      	ldrh	r3, [r7, #14]
 8009c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c60:	d101      	bne.n	8009c66 <dec_lock+0x2e>
 8009c62:	2300      	movs	r3, #0
 8009c64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <dec_lock+0x3a>
 8009c6c:	89fb      	ldrh	r3, [r7, #14]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c72:	4a0e      	ldr	r2, [pc, #56]	@ (8009cac <dec_lock+0x74>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	330c      	adds	r3, #12
 8009c7c:	89fa      	ldrh	r2, [r7, #14]
 8009c7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <dec_lock+0x5a>
 8009c86:	4a09      	ldr	r2, [pc, #36]	@ (8009cac <dec_lock+0x74>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	737b      	strb	r3, [r7, #13]
 8009c96:	e001      	b.n	8009c9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c98:	2302      	movs	r3, #2
 8009c9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20040958 	.word	0x20040958

08009cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e010      	b.n	8009ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8009cf4 <clear_lock+0x44>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d105      	bne.n	8009cda <clear_lock+0x2a>
 8009cce:	4a09      	ldr	r2, [pc, #36]	@ (8009cf4 <clear_lock+0x44>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	4413      	add	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d9eb      	bls.n	8009cbe <clear_lock+0xe>
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	20040958 	.word	0x20040958

08009cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	78db      	ldrb	r3, [r3, #3]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d034      	beq.n	8009d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7858      	ldrb	r0, [r3, #1]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	f7ff fd40 	bl	80097a4 <disk_write>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	73fb      	strb	r3, [r7, #15]
 8009d2e:	e022      	b.n	8009d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	1ad2      	subs	r2, r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d217      	bcs.n	8009d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	789b      	ldrb	r3, [r3, #2]
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	e010      	b.n	8009d70 <sync_window+0x78>
					wsect += fs->fsize;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4413      	add	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7858      	ldrb	r0, [r3, #1]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d62:	2301      	movs	r3, #1
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	f7ff fd1d 	bl	80097a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d8eb      	bhi.n	8009d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d01b      	beq.n	8009dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ffad 	bl	8009cf8 <sync_window>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d113      	bne.n	8009dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7858      	ldrb	r0, [r3, #1]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009db2:	2301      	movs	r3, #1
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	f7ff fcd5 	bl	8009764 <disk_read>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff87 	bl	8009cf8 <sync_window>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d158      	bne.n	8009ea6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d148      	bne.n	8009e8e <sync_fs+0xb2>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d144      	bne.n	8009e8e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3330      	adds	r3, #48	@ 0x30
 8009e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff fda9 	bl	8009966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3330      	adds	r3, #48	@ 0x30
 8009e18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009e1c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff fd38 	bl	8009896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3330      	adds	r3, #48	@ 0x30
 8009e2a:	4921      	ldr	r1, [pc, #132]	@ (8009eb0 <sync_fs+0xd4>)
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fd4d 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3330      	adds	r3, #48	@ 0x30
 8009e36:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009e3a:	491e      	ldr	r1, [pc, #120]	@ (8009eb4 <sync_fs+0xd8>)
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fd45 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3330      	adds	r3, #48	@ 0x30
 8009e46:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	4610      	mov	r0, r2
 8009e52:	f7ff fd3b 	bl	80098cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3330      	adds	r3, #48	@ 0x30
 8009e5a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7ff fd31 	bl	80098cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7858      	ldrb	r0, [r3, #1]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e82:	2301      	movs	r3, #1
 8009e84:	f7ff fc8e 	bl	80097a4 <disk_write>
			fs->fsi_flag = 0;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2200      	movs	r2, #0
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff fca4 	bl	80097e4 <disk_ioctl>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <sync_fs+0xca>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	41615252 	.word	0x41615252
 8009eb4:	61417272 	.word	0x61417272

08009eb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	3b02      	subs	r3, #2
 8009ec6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	3b02      	subs	r3, #2
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d301      	bcc.n	8009ed8 <clust2sect+0x20>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e008      	b.n	8009eea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	895b      	ldrh	r3, [r3, #10]
 8009edc:	461a      	mov	r2, r3
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	fb03 f202 	mul.w	r2, r3, r2
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	4413      	add	r3, r2
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b086      	sub	sp, #24
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d904      	bls.n	8009f16 <get_fat+0x20>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f16:	2301      	movs	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	e08e      	b.n	800a03a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d061      	beq.n	8009fee <get_fat+0xf8>
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	dc7b      	bgt.n	800a026 <get_fat+0x130>
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d002      	beq.n	8009f38 <get_fat+0x42>
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d041      	beq.n	8009fba <get_fat+0xc4>
 8009f36:	e076      	b.n	800a026 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	085b      	lsrs	r3, r3, #1
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6a1a      	ldr	r2, [r3, #32]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	0a5b      	lsrs	r3, r3, #9
 8009f4e:	4413      	add	r3, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	6938      	ldr	r0, [r7, #16]
 8009f54:	f7ff ff14 	bl	8009d80 <move_window>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d166      	bne.n	800a02c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	60fa      	str	r2, [r7, #12]
 8009f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6a1a      	ldr	r2, [r3, #32]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	0a5b      	lsrs	r3, r3, #9
 8009f7a:	4413      	add	r3, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6938      	ldr	r0, [r7, #16]
 8009f80:	f7ff fefe 	bl	8009d80 <move_window>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d152      	bne.n	800a030 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	4413      	add	r3, r2
 8009f94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f98:	021b      	lsls	r3, r3, #8
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <get_fat+0xba>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	091b      	lsrs	r3, r3, #4
 8009fae:	e002      	b.n	8009fb6 <get_fat+0xc0>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fb6:	617b      	str	r3, [r7, #20]
			break;
 8009fb8:	e03f      	b.n	800a03a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	6a1a      	ldr	r2, [r3, #32]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	4413      	add	r3, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6938      	ldr	r0, [r7, #16]
 8009fc8:	f7ff feda 	bl	8009d80 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d130      	bne.n	800a034 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009fe0:	4413      	add	r3, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fc1c 	bl	8009820 <ld_word>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	617b      	str	r3, [r7, #20]
			break;
 8009fec:	e025      	b.n	800a03a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	6a1a      	ldr	r2, [r3, #32]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	09db      	lsrs	r3, r3, #7
 8009ff6:	4413      	add	r3, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6938      	ldr	r0, [r7, #16]
 8009ffc:	f7ff fec0 	bl	8009d80 <move_window>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d118      	bne.n	800a038 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a014:	4413      	add	r3, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fc1a 	bl	8009850 <ld_dword>
 800a01c:	4603      	mov	r3, r0
 800a01e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a022:	617b      	str	r3, [r7, #20]
			break;
 800a024:	e009      	b.n	800a03a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a026:	2301      	movs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	e006      	b.n	800a03a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a02c:	bf00      	nop
 800a02e:	e004      	b.n	800a03a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a030:	bf00      	nop
 800a032:	e002      	b.n	800a03a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a034:	bf00      	nop
 800a036:	e000      	b.n	800a03a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a038:	bf00      	nop
		}
	}

	return val;
 800a03a:	697b      	ldr	r3, [r7, #20]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a044:	b590      	push	{r4, r7, lr}
 800a046:	b089      	sub	sp, #36	@ 0x24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a050:	2302      	movs	r3, #2
 800a052:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b01      	cmp	r3, #1
 800a058:	f240 80d9 	bls.w	800a20e <put_fat+0x1ca>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	429a      	cmp	r2, r3
 800a064:	f080 80d3 	bcs.w	800a20e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	f000 8096 	beq.w	800a19e <put_fat+0x15a>
 800a072:	2b03      	cmp	r3, #3
 800a074:	f300 80cb 	bgt.w	800a20e <put_fat+0x1ca>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d002      	beq.n	800a082 <put_fat+0x3e>
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d06e      	beq.n	800a15e <put_fat+0x11a>
 800a080:	e0c5      	b.n	800a20e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	61bb      	str	r3, [r7, #24]
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	085b      	lsrs	r3, r3, #1
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4413      	add	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6a1a      	ldr	r2, [r3, #32]
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	0a5b      	lsrs	r3, r3, #9
 800a098:	4413      	add	r3, r2
 800a09a:	4619      	mov	r1, r3
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7ff fe6f 	bl	8009d80 <move_window>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0a6:	7ffb      	ldrb	r3, [r7, #31]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 80a9 	bne.w	800a200 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	61b9      	str	r1, [r7, #24]
 800a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0be:	4413      	add	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00d      	beq.n	800a0e8 <put_fat+0xa4>
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b25b      	sxtb	r3, r3
 800a0d2:	f003 030f 	and.w	r3, r3, #15
 800a0d6:	b25a      	sxtb	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	011b      	lsls	r3, r3, #4
 800a0de:	b25b      	sxtb	r3, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b25b      	sxtb	r3, r3
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	e001      	b.n	800a0ec <put_fat+0xa8>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a1a      	ldr	r2, [r3, #32]
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	0a5b      	lsrs	r3, r3, #9
 800a0fe:	4413      	add	r3, r2
 800a100:	4619      	mov	r1, r3
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fe3c 	bl	8009d80 <move_window>
 800a108:	4603      	mov	r3, r0
 800a10a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a10c:	7ffb      	ldrb	r3, [r7, #31]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d178      	bne.n	800a204 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11e:	4413      	add	r3, r2
 800a120:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <put_fat+0xf0>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	091b      	lsrs	r3, r3, #4
 800a130:	b2db      	uxtb	r3, r3
 800a132:	e00e      	b.n	800a152 <put_fat+0x10e>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b25b      	sxtb	r3, r3
 800a13a:	f023 030f 	bic.w	r3, r3, #15
 800a13e:	b25a      	sxtb	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	b25b      	sxtb	r3, r3
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	b25b      	sxtb	r3, r3
 800a14c:	4313      	orrs	r3, r2
 800a14e:	b25b      	sxtb	r3, r3
 800a150:	b2db      	uxtb	r3, r3
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	70da      	strb	r2, [r3, #3]
			break;
 800a15c:	e057      	b.n	800a20e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a1a      	ldr	r2, [r3, #32]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	4413      	add	r3, r2
 800a168:	4619      	mov	r1, r3
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7ff fe08 	bl	8009d80 <move_window>
 800a170:	4603      	mov	r3, r0
 800a172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a174:	7ffb      	ldrb	r3, [r7, #31]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d146      	bne.n	800a208 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a188:	4413      	add	r3, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	b292      	uxth	r2, r2
 800a18e:	4611      	mov	r1, r2
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fb80 	bl	8009896 <st_word>
			fs->wflag = 1;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	70da      	strb	r2, [r3, #3]
			break;
 800a19c:	e037      	b.n	800a20e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a1a      	ldr	r2, [r3, #32]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	09db      	lsrs	r3, r3, #7
 800a1a6:	4413      	add	r3, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fde8 	bl	8009d80 <move_window>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1b4:	7ffb      	ldrb	r3, [r7, #31]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d128      	bne.n	800a20c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a1ce:	4413      	add	r3, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fb3d 	bl	8009850 <ld_dword>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a1dc:	4323      	orrs	r3, r4
 800a1de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a1ee:	4413      	add	r3, r2
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff fb6a 	bl	80098cc <st_dword>
			fs->wflag = 1;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	70da      	strb	r2, [r3, #3]
			break;
 800a1fe:	e006      	b.n	800a20e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a200:	bf00      	nop
 800a202:	e004      	b.n	800a20e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a204:	bf00      	nop
 800a206:	e002      	b.n	800a20e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a208:	bf00      	nop
 800a20a:	e000      	b.n	800a20e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a20c:	bf00      	nop
		}
	}
	return res;
 800a20e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3724      	adds	r7, #36	@ 0x24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd90      	pop	{r4, r7, pc}

0800a218 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d904      	bls.n	800a23e <remove_chain+0x26>
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d301      	bcc.n	800a242 <remove_chain+0x2a>
 800a23e:	2302      	movs	r3, #2
 800a240:	e04b      	b.n	800a2da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00c      	beq.n	800a262 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a248:	f04f 32ff 	mov.w	r2, #4294967295
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	69b8      	ldr	r0, [r7, #24]
 800a250:	f7ff fef8 	bl	800a044 <put_fat>
 800a254:	4603      	mov	r3, r0
 800a256:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a258:	7ffb      	ldrb	r3, [r7, #31]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <remove_chain+0x4a>
 800a25e:	7ffb      	ldrb	r3, [r7, #31]
 800a260:	e03b      	b.n	800a2da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff fe46 	bl	8009ef6 <get_fat>
 800a26a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d031      	beq.n	800a2d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d101      	bne.n	800a27c <remove_chain+0x64>
 800a278:	2302      	movs	r3, #2
 800a27a:	e02e      	b.n	800a2da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d101      	bne.n	800a288 <remove_chain+0x70>
 800a284:	2301      	movs	r3, #1
 800a286:	e028      	b.n	800a2da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a288:	2200      	movs	r2, #0
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	69b8      	ldr	r0, [r7, #24]
 800a28e:	f7ff fed9 	bl	800a044 <put_fat>
 800a292:	4603      	mov	r3, r0
 800a294:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a296:	7ffb      	ldrb	r3, [r7, #31]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <remove_chain+0x88>
 800a29c:	7ffb      	ldrb	r3, [r7, #31]
 800a29e:	e01c      	b.n	800a2da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	691a      	ldr	r2, [r3, #16]
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	3b02      	subs	r3, #2
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d20b      	bcs.n	800a2c6 <remove_chain+0xae>
			fs->free_clst++;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	791b      	ldrb	r3, [r3, #4]
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d3c6      	bcc.n	800a262 <remove_chain+0x4a>
 800a2d4:	e000      	b.n	800a2d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a2d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3720      	adds	r7, #32
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b088      	sub	sp, #32
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10d      	bne.n	800a314 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <create_chain+0x2c>
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d31b      	bcc.n	800a346 <create_chain+0x64>
 800a30e:	2301      	movs	r3, #1
 800a310:	61bb      	str	r3, [r7, #24]
 800a312:	e018      	b.n	800a346 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fded 	bl	8009ef6 <get_fat>
 800a31c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d801      	bhi.n	800a328 <create_chain+0x46>
 800a324:	2301      	movs	r3, #1
 800a326:	e070      	b.n	800a40a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d101      	bne.n	800a334 <create_chain+0x52>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	e06a      	b.n	800a40a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d201      	bcs.n	800a342 <create_chain+0x60>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	e063      	b.n	800a40a <create_chain+0x128>
		scl = clst;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	69fa      	ldr	r2, [r7, #28]
 800a356:	429a      	cmp	r2, r3
 800a358:	d307      	bcc.n	800a36a <create_chain+0x88>
				ncl = 2;
 800a35a:	2302      	movs	r3, #2
 800a35c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	429a      	cmp	r2, r3
 800a364:	d901      	bls.n	800a36a <create_chain+0x88>
 800a366:	2300      	movs	r3, #0
 800a368:	e04f      	b.n	800a40a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a36a:	69f9      	ldr	r1, [r7, #28]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff fdc2 	bl	8009ef6 <get_fat>
 800a372:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d003      	beq.n	800a388 <create_chain+0xa6>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d101      	bne.n	800a38c <create_chain+0xaa>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	e03e      	b.n	800a40a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	429a      	cmp	r2, r3
 800a392:	d1da      	bne.n	800a34a <create_chain+0x68>
 800a394:	2300      	movs	r3, #0
 800a396:	e038      	b.n	800a40a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a398:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a39a:	f04f 32ff 	mov.w	r2, #4294967295
 800a39e:	69f9      	ldr	r1, [r7, #28]
 800a3a0:	6938      	ldr	r0, [r7, #16]
 800a3a2:	f7ff fe4f 	bl	800a044 <put_fat>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <create_chain+0xe2>
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d006      	beq.n	800a3c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6938      	ldr	r0, [r7, #16]
 800a3bc:	f7ff fe42 	bl	800a044 <put_fat>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d116      	bne.n	800a3f8 <create_chain+0x116>
		fs->last_clst = ncl;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	3b02      	subs	r3, #2
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d804      	bhi.n	800a3e8 <create_chain+0x106>
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	1e5a      	subs	r2, r3, #1
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	791b      	ldrb	r3, [r3, #4]
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	711a      	strb	r2, [r3, #4]
 800a3f6:	e007      	b.n	800a408 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d102      	bne.n	800a404 <create_chain+0x122>
 800a3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a402:	e000      	b.n	800a406 <create_chain+0x124>
 800a404:	2301      	movs	r3, #1
 800a406:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a408:	69fb      	ldr	r3, [r7, #28]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a412:	b480      	push	{r7}
 800a414:	b087      	sub	sp, #28
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a426:	3304      	adds	r3, #4
 800a428:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	0a5b      	lsrs	r3, r3, #9
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	8952      	ldrh	r2, [r2, #10]
 800a432:	fbb3 f3f2 	udiv	r3, r3, r2
 800a436:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	613a      	str	r2, [r7, #16]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <clmt_clust+0x3a>
 800a448:	2300      	movs	r3, #0
 800a44a:	e010      	b.n	800a46e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	429a      	cmp	r2, r3
 800a452:	d307      	bcc.n	800a464 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	3304      	adds	r3, #4
 800a460:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a462:	e7e9      	b.n	800a438 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a464:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a490:	d204      	bcs.n	800a49c <dir_sdi+0x22>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	f003 031f 	and.w	r3, r3, #31
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a49c:	2302      	movs	r3, #2
 800a49e:	e063      	b.n	800a568 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d106      	bne.n	800a4c0 <dir_sdi+0x46>
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d902      	bls.n	800a4c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10c      	bne.n	800a4e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	095b      	lsrs	r3, r3, #5
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	8912      	ldrh	r2, [r2, #8]
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d301      	bcc.n	800a4d6 <dir_sdi+0x5c>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e048      	b.n	800a568 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	61da      	str	r2, [r3, #28]
 800a4de:	e029      	b.n	800a534 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	895b      	ldrh	r3, [r3, #10]
 800a4e4:	025b      	lsls	r3, r3, #9
 800a4e6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4e8:	e019      	b.n	800a51e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6979      	ldr	r1, [r7, #20]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fd01 	bl	8009ef6 <get_fat>
 800a4f4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d101      	bne.n	800a502 <dir_sdi+0x88>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e032      	b.n	800a568 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d904      	bls.n	800a512 <dir_sdi+0x98>
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d301      	bcc.n	800a516 <dir_sdi+0x9c>
 800a512:	2302      	movs	r3, #2
 800a514:	e028      	b.n	800a568 <dir_sdi+0xee>
			ofs -= csz;
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	429a      	cmp	r2, r3
 800a524:	d2e1      	bcs.n	800a4ea <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a526:	6979      	ldr	r1, [r7, #20]
 800a528:	6938      	ldr	r0, [r7, #16]
 800a52a:	f7ff fcc5 	bl	8009eb8 <clust2sect>
 800a52e:	4602      	mov	r2, r0
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <dir_sdi+0xcc>
 800a542:	2302      	movs	r3, #2
 800a544:	e010      	b.n	800a568 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	69da      	ldr	r2, [r3, #28]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	0a5b      	lsrs	r3, r3, #9
 800a54e:	441a      	add	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a560:	441a      	add	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	3320      	adds	r3, #32
 800a586:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <dir_next+0x28>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a596:	d301      	bcc.n	800a59c <dir_next+0x2c>
 800a598:	2304      	movs	r3, #4
 800a59a:	e0aa      	b.n	800a6f2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f040 8098 	bne.w	800a6d8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	095b      	lsrs	r3, r3, #5
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	8912      	ldrh	r2, [r2, #8]
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	f0c0 8088 	bcc.w	800a6d8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	61da      	str	r2, [r3, #28]
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	e08f      	b.n	800a6f2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	0a5b      	lsrs	r3, r3, #9
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	8952      	ldrh	r2, [r2, #10]
 800a5da:	3a01      	subs	r2, #1
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d17a      	bne.n	800a6d8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	f7ff fc83 	bl	8009ef6 <get_fat>
 800a5f0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d801      	bhi.n	800a5fc <dir_next+0x8c>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e07a      	b.n	800a6f2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a602:	d101      	bne.n	800a608 <dir_next+0x98>
 800a604:	2301      	movs	r3, #1
 800a606:	e074      	b.n	800a6f2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d358      	bcc.n	800a6c4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d104      	bne.n	800a622 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	61da      	str	r2, [r3, #28]
 800a61e:	2304      	movs	r3, #4
 800a620:	e067      	b.n	800a6f2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7ff fe59 	bl	800a2e2 <create_chain>
 800a630:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <dir_next+0xcc>
 800a638:	2307      	movs	r3, #7
 800a63a:	e05a      	b.n	800a6f2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <dir_next+0xd6>
 800a642:	2302      	movs	r3, #2
 800a644:	e055      	b.n	800a6f2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64c:	d101      	bne.n	800a652 <dir_next+0xe2>
 800a64e:	2301      	movs	r3, #1
 800a650:	e04f      	b.n	800a6f2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff fb50 	bl	8009cf8 <sync_window>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <dir_next+0xf2>
 800a65e:	2301      	movs	r3, #1
 800a660:	e047      	b.n	800a6f2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3330      	adds	r3, #48	@ 0x30
 800a666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a66a:	2100      	movs	r1, #0
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff f97a 	bl	8009966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	6979      	ldr	r1, [r7, #20]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff fc1d 	bl	8009eb8 <clust2sect>
 800a67e:	4602      	mov	r2, r0
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a684:	e012      	b.n	800a6ac <dir_next+0x13c>
						fs->wflag = 1;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7ff fb33 	bl	8009cf8 <sync_window>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <dir_next+0x12c>
 800a698:	2301      	movs	r3, #1
 800a69a:	e02a      	b.n	800a6f2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	895b      	ldrh	r3, [r3, #10]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d3e6      	bcc.n	800a686 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	1ad2      	subs	r2, r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a6ca:	6979      	ldr	r1, [r7, #20]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7ff fbf3 	bl	8009eb8 <clust2sect>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ea:	441a      	add	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a70a:	2100      	movs	r1, #0
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff feb4 	bl	800a47a <dir_sdi>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d12b      	bne.n	800a774 <dir_alloc+0x7a>
		n = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	4619      	mov	r1, r3
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fb2a 	bl	8009d80 <move_window>
 800a72c:	4603      	mov	r3, r0
 800a72e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d11d      	bne.n	800a772 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2be5      	cmp	r3, #229	@ 0xe5
 800a73e:	d004      	beq.n	800a74a <dir_alloc+0x50>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d107      	bne.n	800a75a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3301      	adds	r3, #1
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	d102      	bne.n	800a75e <dir_alloc+0x64>
 800a758:	e00c      	b.n	800a774 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a75a:	2300      	movs	r3, #0
 800a75c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a75e:	2101      	movs	r1, #1
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff ff05 	bl	800a570 <dir_next>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0d7      	beq.n	800a720 <dir_alloc+0x26>
 800a770:	e000      	b.n	800a774 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a772:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b04      	cmp	r3, #4
 800a778:	d101      	bne.n	800a77e <dir_alloc+0x84>
 800a77a:	2307      	movs	r3, #7
 800a77c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	331a      	adds	r3, #26
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff f842 	bl	8009820 <ld_word>
 800a79c:	4603      	mov	r3, r0
 800a79e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d109      	bne.n	800a7bc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	3314      	adds	r3, #20
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7ff f837 	bl	8009820 <ld_word>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	041b      	lsls	r3, r3, #16
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	331a      	adds	r3, #26
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	b292      	uxth	r2, r2
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff f85a 	bl	8009896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d109      	bne.n	800a7fe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f103 0214 	add.w	r2, r3, #20
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	0c1b      	lsrs	r3, r3, #16
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	f7ff f84c 	bl	8009896 <st_word>
	}
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b086      	sub	sp, #24
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fe2f 	bl	800a47a <dir_sdi>
 800a81c:	4603      	mov	r3, r0
 800a81e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <dir_find+0x24>
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	e03e      	b.n	800a8a8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	4619      	mov	r1, r3
 800a830:	6938      	ldr	r0, [r7, #16]
 800a832:	f7ff faa5 	bl	8009d80 <move_window>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d12f      	bne.n	800a8a0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <dir_find+0x4e>
 800a84e:	2304      	movs	r3, #4
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e028      	b.n	800a8a6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	330b      	adds	r3, #11
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a860:	b2da      	uxtb	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	330b      	adds	r3, #11
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10a      	bne.n	800a88c <dir_find+0x86>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a18      	ldr	r0, [r3, #32]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3324      	adds	r3, #36	@ 0x24
 800a87e:	220b      	movs	r2, #11
 800a880:	4619      	mov	r1, r3
 800a882:	f7ff f88b 	bl	800999c <mem_cmp>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a88c:	2100      	movs	r1, #0
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff fe6e 	bl	800a570 <dir_next>
 800a894:	4603      	mov	r3, r0
 800a896:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0c5      	beq.n	800a82a <dir_find+0x24>
 800a89e:	e002      	b.n	800a8a6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a8a0:	bf00      	nop
 800a8a2:	e000      	b.n	800a8a6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a8a4:	bf00      	nop

	return res;
 800a8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a8be:	2101      	movs	r1, #1
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ff1a 	bl	800a6fa <dir_alloc>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d11c      	bne.n	800a90a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	68b8      	ldr	r0, [r7, #8]
 800a8d8:	f7ff fa52 	bl	8009d80 <move_window>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d111      	bne.n	800a90a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff f839 	bl	8009966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a18      	ldr	r0, [r3, #32]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3324      	adds	r3, #36	@ 0x24
 800a8fc:	220b      	movs	r2, #11
 800a8fe:	4619      	mov	r1, r3
 800a900:	f7ff f810 	bl	8009924 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2201      	movs	r2, #1
 800a908:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3324      	adds	r3, #36	@ 0x24
 800a928:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a92a:	220b      	movs	r2, #11
 800a92c:	2120      	movs	r1, #32
 800a92e:	68b8      	ldr	r0, [r7, #8]
 800a930:	f7ff f819 	bl	8009966 <mem_set>
	si = i = 0; ni = 8;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	61fb      	str	r3, [r7, #28]
 800a93c:	2308      	movs	r3, #8
 800a93e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	61fa      	str	r2, [r7, #28]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a94e:	7efb      	ldrb	r3, [r7, #27]
 800a950:	2b20      	cmp	r3, #32
 800a952:	d94e      	bls.n	800a9f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a954:	7efb      	ldrb	r3, [r7, #27]
 800a956:	2b2f      	cmp	r3, #47	@ 0x2f
 800a958:	d006      	beq.n	800a968 <create_name+0x54>
 800a95a:	7efb      	ldrb	r3, [r7, #27]
 800a95c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a95e:	d110      	bne.n	800a982 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a960:	e002      	b.n	800a968 <create_name+0x54>
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	3301      	adds	r3, #1
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	4413      	add	r3, r2
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b2f      	cmp	r3, #47	@ 0x2f
 800a972:	d0f6      	beq.n	800a962 <create_name+0x4e>
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a97e:	d0f0      	beq.n	800a962 <create_name+0x4e>
			break;
 800a980:	e038      	b.n	800a9f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a982:	7efb      	ldrb	r3, [r7, #27]
 800a984:	2b2e      	cmp	r3, #46	@ 0x2e
 800a986:	d003      	beq.n	800a990 <create_name+0x7c>
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d30c      	bcc.n	800a9aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	2b0b      	cmp	r3, #11
 800a994:	d002      	beq.n	800a99c <create_name+0x88>
 800a996:	7efb      	ldrb	r3, [r7, #27]
 800a998:	2b2e      	cmp	r3, #46	@ 0x2e
 800a99a:	d001      	beq.n	800a9a0 <create_name+0x8c>
 800a99c:	2306      	movs	r3, #6
 800a99e:	e044      	b.n	800aa2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a9a0:	2308      	movs	r3, #8
 800a9a2:	613b      	str	r3, [r7, #16]
 800a9a4:	230b      	movs	r3, #11
 800a9a6:	617b      	str	r3, [r7, #20]
			continue;
 800a9a8:	e022      	b.n	800a9f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a9aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	da04      	bge.n	800a9bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a9b2:	7efb      	ldrb	r3, [r7, #27]
 800a9b4:	3b80      	subs	r3, #128	@ 0x80
 800a9b6:	4a1f      	ldr	r2, [pc, #124]	@ (800aa34 <create_name+0x120>)
 800a9b8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a9bc:	7efb      	ldrb	r3, [r7, #27]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	481d      	ldr	r0, [pc, #116]	@ (800aa38 <create_name+0x124>)
 800a9c2:	f7ff f812 	bl	80099ea <chk_chr>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <create_name+0xbc>
 800a9cc:	2306      	movs	r3, #6
 800a9ce:	e02c      	b.n	800aa2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a9d0:	7efb      	ldrb	r3, [r7, #27]
 800a9d2:	2b60      	cmp	r3, #96	@ 0x60
 800a9d4:	d905      	bls.n	800a9e2 <create_name+0xce>
 800a9d6:	7efb      	ldrb	r3, [r7, #27]
 800a9d8:	2b7a      	cmp	r3, #122	@ 0x7a
 800a9da:	d802      	bhi.n	800a9e2 <create_name+0xce>
 800a9dc:	7efb      	ldrb	r3, [r7, #27]
 800a9de:	3b20      	subs	r3, #32
 800a9e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	613a      	str	r2, [r7, #16]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	7efa      	ldrb	r2, [r7, #27]
 800a9ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a9f0:	e7a6      	b.n	800a940 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a9f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	441a      	add	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <create_name+0xf4>
 800aa04:	2306      	movs	r3, #6
 800aa06:	e010      	b.n	800aa2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2be5      	cmp	r3, #229	@ 0xe5
 800aa0e:	d102      	bne.n	800aa16 <create_name+0x102>
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2205      	movs	r2, #5
 800aa14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa16:	7efb      	ldrb	r3, [r7, #27]
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d801      	bhi.n	800aa20 <create_name+0x10c>
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	e000      	b.n	800aa22 <create_name+0x10e>
 800aa20:	2200      	movs	r2, #0
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	330b      	adds	r3, #11
 800aa26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3720      	adds	r7, #32
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	0809cd8c 	.word	0x0809cd8c
 800aa38:	0800ec30 	.word	0x0800ec30

0800aa3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa50:	e002      	b.n	800aa58 <follow_path+0x1c>
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800aa5e:	d0f8      	beq.n	800aa52 <follow_path+0x16>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b5c      	cmp	r3, #92	@ 0x5c
 800aa66:	d0f4      	beq.n	800aa52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b1f      	cmp	r3, #31
 800aa74:	d80a      	bhi.n	800aa8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2280      	movs	r2, #128	@ 0x80
 800aa7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800aa7e:	2100      	movs	r1, #0
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff fcfa 	bl	800a47a <dir_sdi>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]
 800aa8a:	e043      	b.n	800ab14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff ff3f 	bl	800a914 <create_name>
 800aa96:	4603      	mov	r3, r0
 800aa98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d134      	bne.n	800ab0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff feb0 	bl	800a806 <dir_find>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aab0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00a      	beq.n	800aace <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d127      	bne.n	800ab0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aabe:	7afb      	ldrb	r3, [r7, #11]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d122      	bne.n	800ab0e <follow_path+0xd2>
 800aac8:	2305      	movs	r3, #5
 800aaca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aacc:	e01f      	b.n	800ab0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aace:	7afb      	ldrb	r3, [r7, #11]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11c      	bne.n	800ab12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	799b      	ldrb	r3, [r3, #6]
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aae4:	2305      	movs	r3, #5
 800aae6:	75fb      	strb	r3, [r7, #23]
 800aae8:	e014      	b.n	800ab14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf8:	4413      	add	r3, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7ff fe43 	bl	800a788 <ld_clust>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab08:	e7c0      	b.n	800aa8c <follow_path+0x50>
			if (res != FR_OK) break;
 800ab0a:	bf00      	nop
 800ab0c:	e002      	b.n	800ab14 <follow_path+0xd8>
				break;
 800ab0e:	bf00      	nop
 800ab10:	e000      	b.n	800ab14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab12:	bf00      	nop
			}
		}
	}

	return res;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab26:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d031      	beq.n	800ab98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e002      	b.n	800ab42 <get_ldnumber+0x24>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	d903      	bls.n	800ab52 <get_ldnumber+0x34>
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ab50:	d1f4      	bne.n	800ab3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b3a      	cmp	r3, #58	@ 0x3a
 800ab58:	d11c      	bne.n	800ab94 <get_ldnumber+0x76>
			tp = *path;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	60fa      	str	r2, [r7, #12]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	3b30      	subs	r3, #48	@ 0x30
 800ab6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b09      	cmp	r3, #9
 800ab70:	d80e      	bhi.n	800ab90 <get_ldnumber+0x72>
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d10a      	bne.n	800ab90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d107      	bne.n	800ab90 <get_ldnumber+0x72>
					vol = (int)i;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	3301      	adds	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	e002      	b.n	800ab9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ab94:	2300      	movs	r3, #0
 800ab96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ab98:	693b      	ldr	r3, [r7, #16]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
	...

0800aba8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	70da      	strb	r2, [r3, #3]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f04f 32ff 	mov.w	r2, #4294967295
 800abbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7ff f8dc 	bl	8009d80 <move_window>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <check_fs+0x2a>
 800abce:	2304      	movs	r3, #4
 800abd0:	e038      	b.n	800ac44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3330      	adds	r3, #48	@ 0x30
 800abd6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fe20 	bl	8009820 <ld_word>
 800abe0:	4603      	mov	r3, r0
 800abe2:	461a      	mov	r2, r3
 800abe4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800abe8:	429a      	cmp	r2, r3
 800abea:	d001      	beq.n	800abf0 <check_fs+0x48>
 800abec:	2303      	movs	r3, #3
 800abee:	e029      	b.n	800ac44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abf6:	2be9      	cmp	r3, #233	@ 0xe9
 800abf8:	d009      	beq.n	800ac0e <check_fs+0x66>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac00:	2beb      	cmp	r3, #235	@ 0xeb
 800ac02:	d11e      	bne.n	800ac42 <check_fs+0x9a>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ac0a:	2b90      	cmp	r3, #144	@ 0x90
 800ac0c:	d119      	bne.n	800ac42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3330      	adds	r3, #48	@ 0x30
 800ac12:	3336      	adds	r3, #54	@ 0x36
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fe1b 	bl	8009850 <ld_dword>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ac20:	4a0a      	ldr	r2, [pc, #40]	@ (800ac4c <check_fs+0xa4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d101      	bne.n	800ac2a <check_fs+0x82>
 800ac26:	2300      	movs	r3, #0
 800ac28:	e00c      	b.n	800ac44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3330      	adds	r3, #48	@ 0x30
 800ac2e:	3352      	adds	r3, #82	@ 0x52
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe fe0d 	bl	8009850 <ld_dword>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4a05      	ldr	r2, [pc, #20]	@ (800ac50 <check_fs+0xa8>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d101      	bne.n	800ac42 <check_fs+0x9a>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e000      	b.n	800ac44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac42:	2302      	movs	r3, #2
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	00544146 	.word	0x00544146
 800ac50:	33544146 	.word	0x33544146

0800ac54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b096      	sub	sp, #88	@ 0x58
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff ff58 	bl	800ab1e <get_ldnumber>
 800ac6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da01      	bge.n	800ac7a <find_volume+0x26>
 800ac76:	230b      	movs	r3, #11
 800ac78:	e22d      	b.n	800b0d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ac7a:	4aa1      	ldr	r2, [pc, #644]	@ (800af00 <find_volume+0x2ac>)
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <find_volume+0x3a>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	e223      	b.n	800b0d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01a      	beq.n	800acda <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca6:	785b      	ldrb	r3, [r3, #1]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fd1b 	bl	80096e4 <disk_status>
 800acae:	4603      	mov	r3, r0
 800acb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10c      	bne.n	800acda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800acc0:	79fb      	ldrb	r3, [r7, #7]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <find_volume+0x82>
 800acc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acca:	f003 0304 	and.w	r3, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800acd2:	230a      	movs	r3, #10
 800acd4:	e1ff      	b.n	800b0d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800acd6:	2300      	movs	r3, #0
 800acd8:	e1fd      	b.n	800b0d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ace0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe fd13 	bl	8009718 <disk_initialize>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800acf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad04:	2303      	movs	r3, #3
 800ad06:	e1e6      	b.n	800b0d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d007      	beq.n	800ad1e <find_volume+0xca>
 800ad0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad1a:	230a      	movs	r3, #10
 800ad1c:	e1db      	b.n	800b0d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ad22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad26:	f7ff ff3f 	bl	800aba8 <check_fs>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ad30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d149      	bne.n	800adcc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad38:	2300      	movs	r3, #0
 800ad3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad3c:	e01e      	b.n	800ad7c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ad4c:	4413      	add	r3, r2
 800ad4e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ad50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad52:	3304      	adds	r3, #4
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d006      	beq.n	800ad68 <find_volume+0x114>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe fd76 	bl	8009850 <ld_dword>
 800ad64:	4602      	mov	r2, r0
 800ad66:	e000      	b.n	800ad6a <find_volume+0x116>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	3358      	adds	r3, #88	@ 0x58
 800ad70:	443b      	add	r3, r7
 800ad72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ad76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad78:	3301      	adds	r3, #1
 800ad7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d9dd      	bls.n	800ad3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ad82:	2300      	movs	r3, #0
 800ad84:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ad86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <find_volume+0x13e>
 800ad8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ad92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	3358      	adds	r3, #88	@ 0x58
 800ad98:	443b      	add	r3, r7
 800ad9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ad9e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ada0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <find_volume+0x15e>
 800ada6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ada8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800adaa:	f7ff fefd 	bl	800aba8 <check_fs>
 800adae:	4603      	mov	r3, r0
 800adb0:	e000      	b.n	800adb4 <find_volume+0x160>
 800adb2:	2303      	movs	r3, #3
 800adb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800adb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d905      	bls.n	800adcc <find_volume+0x178>
 800adc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc2:	3301      	adds	r3, #1
 800adc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800adc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d9e2      	bls.n	800ad92 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800adcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800add0:	2b04      	cmp	r3, #4
 800add2:	d101      	bne.n	800add8 <find_volume+0x184>
 800add4:	2301      	movs	r3, #1
 800add6:	e17e      	b.n	800b0d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800add8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800addc:	2b01      	cmp	r3, #1
 800adde:	d901      	bls.n	800ade4 <find_volume+0x190>
 800ade0:	230d      	movs	r3, #13
 800ade2:	e178      	b.n	800b0d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	3330      	adds	r3, #48	@ 0x30
 800ade8:	330b      	adds	r3, #11
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fd18 	bl	8009820 <ld_word>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adf6:	d001      	beq.n	800adfc <find_volume+0x1a8>
 800adf8:	230d      	movs	r3, #13
 800adfa:	e16c      	b.n	800b0d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	3330      	adds	r3, #48	@ 0x30
 800ae00:	3316      	adds	r3, #22
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fe fd0c 	bl	8009820 <ld_word>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <find_volume+0x1cc>
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	3330      	adds	r3, #48	@ 0x30
 800ae16:	3324      	adds	r3, #36	@ 0x24
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fd19 	bl	8009850 <ld_dword>
 800ae1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae24:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	789b      	ldrb	r3, [r3, #2]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d005      	beq.n	800ae44 <find_volume+0x1f0>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	789b      	ldrb	r3, [r3, #2]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d001      	beq.n	800ae44 <find_volume+0x1f0>
 800ae40:	230d      	movs	r3, #13
 800ae42:	e148      	b.n	800b0d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae46:	789b      	ldrb	r3, [r3, #2]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae4c:	fb02 f303 	mul.w	r3, r2, r3
 800ae50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae58:	461a      	mov	r2, r3
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	895b      	ldrh	r3, [r3, #10]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d008      	beq.n	800ae78 <find_volume+0x224>
 800ae66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae68:	895b      	ldrh	r3, [r3, #10]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6e:	895b      	ldrh	r3, [r3, #10]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	4013      	ands	r3, r2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <find_volume+0x228>
 800ae78:	230d      	movs	r3, #13
 800ae7a:	e12c      	b.n	800b0d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7e:	3330      	adds	r3, #48	@ 0x30
 800ae80:	3311      	adds	r3, #17
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe fccc 	bl	8009820 <ld_word>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	891b      	ldrh	r3, [r3, #8]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <find_volume+0x24e>
 800ae9e:	230d      	movs	r3, #13
 800aea0:	e119      	b.n	800b0d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	3330      	adds	r3, #48	@ 0x30
 800aea6:	3313      	adds	r3, #19
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe fcb9 	bl	8009820 <ld_word>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aeb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <find_volume+0x272>
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeba:	3330      	adds	r3, #48	@ 0x30
 800aebc:	3320      	adds	r3, #32
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fcc6 	bl	8009850 <ld_dword>
 800aec4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	3330      	adds	r3, #48	@ 0x30
 800aeca:	330e      	adds	r3, #14
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fca7 	bl	8009820 <ld_word>
 800aed2:	4603      	mov	r3, r0
 800aed4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aed6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <find_volume+0x28c>
 800aedc:	230d      	movs	r3, #13
 800aede:	e0fa      	b.n	800b0d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aee0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800aee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee4:	4413      	add	r3, r2
 800aee6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aee8:	8912      	ldrh	r2, [r2, #8]
 800aeea:	0912      	lsrs	r2, r2, #4
 800aeec:	b292      	uxth	r2, r2
 800aeee:	4413      	add	r3, r2
 800aef0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d204      	bcs.n	800af04 <find_volume+0x2b0>
 800aefa:	230d      	movs	r3, #13
 800aefc:	e0eb      	b.n	800b0d6 <find_volume+0x482>
 800aefe:	bf00      	nop
 800af00:	20040950 	.word	0x20040950
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af0c:	8952      	ldrh	r2, [r2, #10]
 800af0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <find_volume+0x2ca>
 800af1a:	230d      	movs	r3, #13
 800af1c:	e0db      	b.n	800b0d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800af1e:	2303      	movs	r3, #3
 800af20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d802      	bhi.n	800af34 <find_volume+0x2e0>
 800af2e:	2302      	movs	r3, #2
 800af30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d802      	bhi.n	800af44 <find_volume+0x2f0>
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800af4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af50:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af56:	441a      	add	r2, r3
 800af58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800af5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af60:	441a      	add	r2, r3
 800af62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af64:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800af66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d11e      	bne.n	800afac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	3330      	adds	r3, #48	@ 0x30
 800af72:	332a      	adds	r3, #42	@ 0x2a
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe fc53 	bl	8009820 <ld_word>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <find_volume+0x330>
 800af80:	230d      	movs	r3, #13
 800af82:	e0a8      	b.n	800b0d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af86:	891b      	ldrh	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <find_volume+0x33c>
 800af8c:	230d      	movs	r3, #13
 800af8e:	e0a2      	b.n	800b0d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800af90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af92:	3330      	adds	r3, #48	@ 0x30
 800af94:	332c      	adds	r3, #44	@ 0x2c
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fc5a 	bl	8009850 <ld_dword>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	647b      	str	r3, [r7, #68]	@ 0x44
 800afaa:	e01f      	b.n	800afec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800afac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afae:	891b      	ldrh	r3, [r3, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <find_volume+0x364>
 800afb4:	230d      	movs	r3, #13
 800afb6:	e08e      	b.n	800b0d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	6a1a      	ldr	r2, [r3, #32]
 800afbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afbe:	441a      	add	r2, r3
 800afc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d103      	bne.n	800afd4 <find_volume+0x380>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	695b      	ldr	r3, [r3, #20]
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	e00a      	b.n	800afea <find_volume+0x396>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	695a      	ldr	r2, [r3, #20]
 800afd8:	4613      	mov	r3, r2
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	4413      	add	r3, r2
 800afde:	085a      	lsrs	r2, r3, #1
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800afea:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	699a      	ldr	r2, [r3, #24]
 800aff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aff2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800aff6:	0a5b      	lsrs	r3, r3, #9
 800aff8:	429a      	cmp	r2, r3
 800affa:	d201      	bcs.n	800b000 <find_volume+0x3ac>
 800affc:	230d      	movs	r3, #13
 800affe:	e06a      	b.n	800b0d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b002:	f04f 32ff 	mov.w	r2, #4294967295
 800b006:	611a      	str	r2, [r3, #16]
 800b008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b00e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	2280      	movs	r2, #128	@ 0x80
 800b014:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b016:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d149      	bne.n	800b0b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b020:	3330      	adds	r3, #48	@ 0x30
 800b022:	3330      	adds	r3, #48	@ 0x30
 800b024:	4618      	mov	r0, r3
 800b026:	f7fe fbfb 	bl	8009820 <ld_word>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d140      	bne.n	800b0b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b032:	3301      	adds	r3, #1
 800b034:	4619      	mov	r1, r3
 800b036:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b038:	f7fe fea2 	bl	8009d80 <move_window>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d137      	bne.n	800b0b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	2200      	movs	r2, #0
 800b046:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	3330      	adds	r3, #48	@ 0x30
 800b04c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe fbe5 	bl	8009820 <ld_word>
 800b056:	4603      	mov	r3, r0
 800b058:	461a      	mov	r2, r3
 800b05a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b05e:	429a      	cmp	r2, r3
 800b060:	d127      	bne.n	800b0b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b064:	3330      	adds	r3, #48	@ 0x30
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fbf2 	bl	8009850 <ld_dword>
 800b06c:	4603      	mov	r3, r0
 800b06e:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e0 <find_volume+0x48c>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d11e      	bne.n	800b0b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b076:	3330      	adds	r3, #48	@ 0x30
 800b078:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fe fbe7 	bl	8009850 <ld_dword>
 800b082:	4603      	mov	r3, r0
 800b084:	4a17      	ldr	r2, [pc, #92]	@ (800b0e4 <find_volume+0x490>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d113      	bne.n	800b0b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08c:	3330      	adds	r3, #48	@ 0x30
 800b08e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe fbdc 	bl	8009850 <ld_dword>
 800b098:	4602      	mov	r2, r0
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	3330      	adds	r3, #48	@ 0x30
 800b0a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fbd2 	bl	8009850 <ld_dword>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b0b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e8 <find_volume+0x494>)
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	4b09      	ldr	r3, [pc, #36]	@ (800b0e8 <find_volume+0x494>)
 800b0c4:	801a      	strh	r2, [r3, #0]
 800b0c6:	4b08      	ldr	r3, [pc, #32]	@ (800b0e8 <find_volume+0x494>)
 800b0c8:	881a      	ldrh	r2, [r3, #0]
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b0ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0d0:	f7fe fdee 	bl	8009cb0 <clear_lock>
#endif
	return FR_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3758      	adds	r7, #88	@ 0x58
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	41615252 	.word	0x41615252
 800b0e4:	61417272 	.word	0x61417272
 800b0e8:	20040954 	.word	0x20040954

0800b0ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b0f6:	2309      	movs	r3, #9
 800b0f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01c      	beq.n	800b13a <validate+0x4e>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d018      	beq.n	800b13a <validate+0x4e>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d013      	beq.n	800b13a <validate+0x4e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	889a      	ldrh	r2, [r3, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	88db      	ldrh	r3, [r3, #6]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d10c      	bne.n	800b13a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fadc 	bl	80096e4 <disk_status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <validate+0x4e>
			res = FR_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <validate+0x5a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	e000      	b.n	800b148 <validate+0x5c>
 800b146:	2300      	movs	r3, #0
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	6013      	str	r3, [r2, #0]
	return res;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b16a:	f107 0310 	add.w	r3, r7, #16
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fcd5 	bl	800ab1e <get_ldnumber>
 800b174:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	da01      	bge.n	800b180 <f_mount+0x28>
 800b17c:	230b      	movs	r3, #11
 800b17e:	e02b      	b.n	800b1d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b180:	4a17      	ldr	r2, [pc, #92]	@ (800b1e0 <f_mount+0x88>)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b188:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d005      	beq.n	800b19c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b190:	69b8      	ldr	r0, [r7, #24]
 800b192:	f7fe fd8d 	bl	8009cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	490d      	ldr	r1, [pc, #52]	@ (800b1e0 <f_mount+0x88>)
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <f_mount+0x66>
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d001      	beq.n	800b1c2 <f_mount+0x6a>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e00a      	b.n	800b1d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1c2:	f107 010c 	add.w	r1, r7, #12
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fd41 	bl	800ac54 <find_volume>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3720      	adds	r7, #32
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	20040950 	.word	0x20040950

0800b1e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b098      	sub	sp, #96	@ 0x60
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <f_open+0x18>
 800b1f8:	2309      	movs	r3, #9
 800b1fa:	e1a9      	b.n	800b550 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b202:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b204:	79fa      	ldrb	r2, [r7, #7]
 800b206:	f107 0110 	add.w	r1, r7, #16
 800b20a:	f107 0308 	add.w	r3, r7, #8
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff fd20 	bl	800ac54 <find_volume>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b21a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 818d 	bne.w	800b53e <f_open+0x35a>
		dj.obj.fs = fs;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	f107 0314 	add.w	r3, r7, #20
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fc03 	bl	800aa3c <follow_path>
 800b236:	4603      	mov	r3, r0
 800b238:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b23c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b240:	2b00      	cmp	r3, #0
 800b242:	d118      	bne.n	800b276 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b244:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b248:	b25b      	sxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da03      	bge.n	800b256 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b24e:	2306      	movs	r3, #6
 800b250:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b254:	e00f      	b.n	800b276 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	bf8c      	ite	hi
 800b25c:	2301      	movhi	r3, #1
 800b25e:	2300      	movls	r3, #0
 800b260:	b2db      	uxtb	r3, r3
 800b262:	461a      	mov	r2, r3
 800b264:	f107 0314 	add.w	r3, r7, #20
 800b268:	4611      	mov	r1, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fbd8 	bl	8009a20 <chk_lock>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	f003 031c 	and.w	r3, r3, #28
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d07f      	beq.n	800b380 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b280:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b284:	2b00      	cmp	r3, #0
 800b286:	d017      	beq.n	800b2b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b288:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	d10e      	bne.n	800b2ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b290:	f7fe fc22 	bl	8009ad8 <enq_lock>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d006      	beq.n	800b2a8 <f_open+0xc4>
 800b29a:	f107 0314 	add.w	r3, r7, #20
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff fb06 	bl	800a8b0 <dir_register>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	e000      	b.n	800b2aa <f_open+0xc6>
 800b2a8:	2312      	movs	r3, #18
 800b2aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	f043 0308 	orr.w	r3, r3, #8
 800b2b4:	71fb      	strb	r3, [r7, #7]
 800b2b6:	e010      	b.n	800b2da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b2b8:	7ebb      	ldrb	r3, [r7, #26]
 800b2ba:	f003 0311 	and.w	r3, r3, #17
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <f_open+0xe6>
					res = FR_DENIED;
 800b2c2:	2307      	movs	r3, #7
 800b2c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b2c8:	e007      	b.n	800b2da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b2ca:	79fb      	ldrb	r3, [r7, #7]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <f_open+0xf6>
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b2da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d168      	bne.n	800b3b4 <f_open+0x1d0>
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d063      	beq.n	800b3b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b2ec:	f7fd fcbe 	bl	8008c6c <get_fattime>
 800b2f0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2f4:	330e      	adds	r3, #14
 800b2f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fe fae7 	bl	80098cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b300:	3316      	adds	r3, #22
 800b302:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe fae1 	bl	80098cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30c:	330b      	adds	r3, #11
 800b30e:	2220      	movs	r2, #32
 800b310:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fa35 	bl	800a788 <ld_clust>
 800b31e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b324:	2200      	movs	r2, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fa4d 	bl	800a7c6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32e:	331c      	adds	r3, #28
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe faca 	bl	80098cc <st_dword>
					fs->wflag = 1;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2201      	movs	r2, #1
 800b33c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b33e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b340:	2b00      	cmp	r3, #0
 800b342:	d037      	beq.n	800b3b4 <f_open+0x1d0>
						dw = fs->winsect;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b348:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b34a:	f107 0314 	add.w	r3, r7, #20
 800b34e:	2200      	movs	r2, #0
 800b350:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe ff60 	bl	800a218 <remove_chain>
 800b358:	4603      	mov	r3, r0
 800b35a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b35e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b362:	2b00      	cmp	r3, #0
 800b364:	d126      	bne.n	800b3b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fd08 	bl	8009d80 <move_window>
 800b370:	4603      	mov	r3, r0
 800b372:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b37a:	3a01      	subs	r2, #1
 800b37c:	60da      	str	r2, [r3, #12]
 800b37e:	e019      	b.n	800b3b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b380:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b384:	2b00      	cmp	r3, #0
 800b386:	d115      	bne.n	800b3b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b388:	7ebb      	ldrb	r3, [r7, #26]
 800b38a:	f003 0310 	and.w	r3, r3, #16
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <f_open+0x1b6>
					res = FR_NO_FILE;
 800b392:	2304      	movs	r3, #4
 800b394:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b398:	e00c      	b.n	800b3b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b39a:	79fb      	ldrb	r3, [r7, #7]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d007      	beq.n	800b3b4 <f_open+0x1d0>
 800b3a4:	7ebb      	ldrb	r3, [r7, #26]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <f_open+0x1d0>
						res = FR_DENIED;
 800b3ae:	2307      	movs	r3, #7
 800b3b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d126      	bne.n	800b40a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	f003 0308 	and.w	r3, r3, #8
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	bf8c      	ite	hi
 800b3e2:	2301      	movhi	r3, #1
 800b3e4:	2300      	movls	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f107 0314 	add.w	r3, r7, #20
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe fb93 	bl	8009b1c <inc_lock>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <f_open+0x226>
 800b404:	2302      	movs	r3, #2
 800b406:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b40a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f040 8095 	bne.w	800b53e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff f9b4 	bl	800a788 <ld_clust>
 800b420:	4602      	mov	r2, r0
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b428:	331c      	adds	r3, #28
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe fa10 	bl	8009850 <ld_dword>
 800b430:	4602      	mov	r2, r0
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	88da      	ldrh	r2, [r3, #6]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	79fa      	ldrb	r2, [r7, #7]
 800b44e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3330      	adds	r3, #48	@ 0x30
 800b466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b46a:	2100      	movs	r1, #0
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fa7a 	bl	8009966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	f003 0320 	and.w	r3, r3, #32
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d060      	beq.n	800b53e <f_open+0x35a>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d05c      	beq.n	800b53e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	68da      	ldr	r2, [r3, #12]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	895b      	ldrh	r3, [r3, #10]
 800b490:	025b      	lsls	r3, r3, #9
 800b492:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4a0:	e016      	b.n	800b4d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fd25 	bl	8009ef6 <get_fat>
 800b4ac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b4ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d802      	bhi.n	800b4ba <f_open+0x2d6>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b4ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c0:	d102      	bne.n	800b4c8 <f_open+0x2e4>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b4ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d103      	bne.n	800b4e0 <f_open+0x2fc>
 800b4d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d8e0      	bhi.n	800b4a2 <f_open+0x2be>
				}
				fp->clust = clst;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d127      	bne.n	800b53e <f_open+0x35a>
 800b4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d022      	beq.n	800b53e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fcdb 	bl	8009eb8 <clust2sect>
 800b502:	6478      	str	r0, [r7, #68]	@ 0x44
 800b504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b506:	2b00      	cmp	r3, #0
 800b508:	d103      	bne.n	800b512 <f_open+0x32e>
						res = FR_INT_ERR;
 800b50a:	2302      	movs	r3, #2
 800b50c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b510:	e015      	b.n	800b53e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b514:	0a5a      	lsrs	r2, r3, #9
 800b516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b518:	441a      	add	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	7858      	ldrb	r0, [r3, #1]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a1a      	ldr	r2, [r3, #32]
 800b52c:	2301      	movs	r3, #1
 800b52e:	f7fe f919 	bl	8009764 <disk_read>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d002      	beq.n	800b53e <f_open+0x35a>
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b53e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <f_open+0x368>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b54c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b550:	4618      	mov	r0, r3
 800b552:	3760      	adds	r7, #96	@ 0x60
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08c      	sub	sp, #48	@ 0x30
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f107 0210 	add.w	r2, r7, #16
 800b576:	4611      	mov	r1, r2
 800b578:	4618      	mov	r0, r3
 800b57a:	f7ff fdb7 	bl	800b0ec <validate>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d107      	bne.n	800b59c <f_write+0x44>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	7d5b      	ldrb	r3, [r3, #21]
 800b590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <f_write+0x4a>
 800b59c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5a0:	e14b      	b.n	800b83a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	7d1b      	ldrb	r3, [r3, #20]
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <f_write+0x5a>
 800b5ae:	2307      	movs	r3, #7
 800b5b0:	e143      	b.n	800b83a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	699a      	ldr	r2, [r3, #24]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	441a      	add	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	f080 812d 	bcs.w	800b81e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b5cc:	e127      	b.n	800b81e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f040 80e3 	bne.w	800b7a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	0a5b      	lsrs	r3, r3, #9
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	8952      	ldrh	r2, [r2, #10]
 800b5e6:	3a01      	subs	r2, #1
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d143      	bne.n	800b67a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10c      	bne.n	800b614 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	2b00      	cmp	r3, #0
 800b604:	d11a      	bne.n	800b63c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2100      	movs	r1, #0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe fe69 	bl	800a2e2 <create_chain>
 800b610:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b612:	e013      	b.n	800b63c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d007      	beq.n	800b62c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	4619      	mov	r1, r3
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f7fe fef5 	bl	800a412 <clmt_clust>
 800b628:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b62a:	e007      	b.n	800b63c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7fe fe54 	bl	800a2e2 <create_chain>
 800b63a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 80f2 	beq.w	800b828 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b646:	2b01      	cmp	r3, #1
 800b648:	d104      	bne.n	800b654 <f_write+0xfc>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2202      	movs	r2, #2
 800b64e:	755a      	strb	r2, [r3, #21]
 800b650:	2302      	movs	r3, #2
 800b652:	e0f2      	b.n	800b83a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65a:	d104      	bne.n	800b666 <f_write+0x10e>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	755a      	strb	r2, [r3, #21]
 800b662:	2301      	movs	r3, #1
 800b664:	e0e9      	b.n	800b83a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b66a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <f_write+0x122>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b678:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	7d1b      	ldrb	r3, [r3, #20]
 800b67e:	b25b      	sxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	da18      	bge.n	800b6b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	7858      	ldrb	r0, [r3, #1]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a1a      	ldr	r2, [r3, #32]
 800b692:	2301      	movs	r3, #1
 800b694:	f7fe f886 	bl	80097a4 <disk_write>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <f_write+0x150>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	755a      	strb	r2, [r3, #21]
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e0c8      	b.n	800b83a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	7d1b      	ldrb	r3, [r3, #20]
 800b6ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	69db      	ldr	r3, [r3, #28]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	f7fe fbfa 	bl	8009eb8 <clust2sect>
 800b6c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d104      	bne.n	800b6d6 <f_write+0x17e>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	755a      	strb	r2, [r3, #21]
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e0b1      	b.n	800b83a <f_write+0x2e2>
			sect += csect;
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	4413      	add	r3, r2
 800b6dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	0a5b      	lsrs	r3, r3, #9
 800b6e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d03c      	beq.n	800b764 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	8952      	ldrh	r2, [r2, #10]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d905      	bls.n	800b704 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	895b      	ldrh	r3, [r3, #10]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	7858      	ldrb	r0, [r3, #1]
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	69f9      	ldr	r1, [r7, #28]
 800b70e:	f7fe f849 	bl	80097a4 <disk_write>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <f_write+0x1ca>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2201      	movs	r2, #1
 800b71c:	755a      	strb	r2, [r3, #21]
 800b71e:	2301      	movs	r3, #1
 800b720:	e08b      	b.n	800b83a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1a      	ldr	r2, [r3, #32]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	6a3a      	ldr	r2, [r7, #32]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d915      	bls.n	800b75c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1a      	ldr	r2, [r3, #32]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	025b      	lsls	r3, r3, #9
 800b740:	69fa      	ldr	r2, [r7, #28]
 800b742:	4413      	add	r3, r2
 800b744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b748:	4619      	mov	r1, r3
 800b74a:	f7fe f8eb 	bl	8009924 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7d1b      	ldrb	r3, [r3, #20]
 800b752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b756:	b2da      	uxtb	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	025b      	lsls	r3, r3, #9
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b762:	e03f      	b.n	800b7e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d016      	beq.n	800b79c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b776:	429a      	cmp	r2, r3
 800b778:	d210      	bcs.n	800b79c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	7858      	ldrb	r0, [r3, #1]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b784:	2301      	movs	r3, #1
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	f7fd ffec 	bl	8009764 <disk_read>
 800b78c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d004      	beq.n	800b79c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2201      	movs	r2, #1
 800b796:	755a      	strb	r2, [r3, #21]
 800b798:	2301      	movs	r3, #1
 800b79a:	e04e      	b.n	800b83a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7aa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b7ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d901      	bls.n	800b7bc <f_write+0x264>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ca:	4413      	add	r3, r2
 800b7cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ce:	69f9      	ldr	r1, [r7, #28]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe f8a7 	bl	8009924 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
 800b7da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b7e4:	69fa      	ldr	r2, [r7, #28]
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	4413      	add	r3, r2
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	699a      	ldr	r2, [r3, #24]
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	441a      	add	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	619a      	str	r2, [r3, #24]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	429a      	cmp	r2, r3
 800b802:	bf38      	it	cc
 800b804:	461a      	movcc	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	441a      	add	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f47f aed4 	bne.w	800b5ce <f_write+0x76>
 800b826:	e000      	b.n	800b82a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b828:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	7d1b      	ldrb	r3, [r3, #20]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b832:	b2da      	uxtb	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3730      	adds	r7, #48	@ 0x30
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f107 0208 	add.w	r2, r7, #8
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7ff fc4a 	bl	800b0ec <validate>
 800b858:	4603      	mov	r3, r0
 800b85a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d168      	bne.n	800b934 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	7d1b      	ldrb	r3, [r3, #20]
 800b866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d062      	beq.n	800b934 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7d1b      	ldrb	r3, [r3, #20]
 800b872:	b25b      	sxtb	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	da15      	bge.n	800b8a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	7858      	ldrb	r0, [r3, #1]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a1a      	ldr	r2, [r3, #32]
 800b886:	2301      	movs	r3, #1
 800b888:	f7fd ff8c 	bl	80097a4 <disk_write>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <f_sync+0x54>
 800b892:	2301      	movs	r3, #1
 800b894:	e04f      	b.n	800b936 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	7d1b      	ldrb	r3, [r3, #20]
 800b89a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b8a4:	f7fd f9e2 	bl	8008c6c <get_fattime>
 800b8a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4610      	mov	r0, r2
 800b8b4:	f7fe fa64 	bl	8009d80 <move_window>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d138      	bne.n	800b934 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	330b      	adds	r3, #11
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	330b      	adds	r3, #11
 800b8d2:	f042 0220 	orr.w	r2, r2, #32
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	68f9      	ldr	r1, [r7, #12]
 800b8e6:	f7fe ff6e 	bl	800a7c6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f103 021c 	add.w	r2, r3, #28
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f7fd ffe8 	bl	80098cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3316      	adds	r3, #22
 800b900:	6939      	ldr	r1, [r7, #16]
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd ffe2 	bl	80098cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3312      	adds	r3, #18
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fd ffc1 	bl	8009896 <st_word>
					fs->wflag = 1;
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2201      	movs	r2, #1
 800b918:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fa5d 	bl	8009ddc <sync_fs>
 800b922:	4603      	mov	r3, r0
 800b924:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b934:	7dfb      	ldrb	r3, [r7, #23]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff ff7b 	bl	800b842 <f_sync>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d118      	bne.n	800b988 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f107 0208 	add.w	r2, r7, #8
 800b95c:	4611      	mov	r1, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fbc4 	bl	800b0ec <validate>
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10c      	bne.n	800b988 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe f960 	bl	8009c38 <dec_lock>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d102      	bne.n	800b988 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9aa:	4b1f      	ldr	r3, [pc, #124]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9ac:	7a5b      	ldrb	r3, [r3, #9]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d131      	bne.n	800ba18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9b6:	7a5b      	ldrb	r3, [r3, #9]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9be:	2100      	movs	r1, #0
 800b9c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9c2:	4b19      	ldr	r3, [pc, #100]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9c4:	7a5b      	ldrb	r3, [r3, #9]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	4a17      	ldr	r2, [pc, #92]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9d2:	4b15      	ldr	r3, [pc, #84]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9d4:	7a5b      	ldrb	r3, [r3, #9]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	461a      	mov	r2, r3
 800b9da:	4b13      	ldr	r3, [pc, #76]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9e2:	4b11      	ldr	r3, [pc, #68]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9e4:	7a5b      	ldrb	r3, [r3, #9]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	b2d1      	uxtb	r1, r2
 800b9ec:	4a0e      	ldr	r2, [pc, #56]	@ (800ba28 <FATFS_LinkDriverEx+0x94>)
 800b9ee:	7251      	strb	r1, [r2, #9]
 800b9f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9f2:	7dbb      	ldrb	r3, [r7, #22]
 800b9f4:	3330      	adds	r3, #48	@ 0x30
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	223a      	movs	r2, #58	@ 0x3a
 800ba02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	3302      	adds	r3, #2
 800ba08:	222f      	movs	r2, #47	@ 0x2f
 800ba0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	3303      	adds	r3, #3
 800ba10:	2200      	movs	r2, #0
 800ba12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	371c      	adds	r7, #28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20040978 	.word	0x20040978

0800ba2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba36:	2200      	movs	r2, #0
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7ff ffaa 	bl	800b994 <FATFS_LinkDriverEx>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <rand>:
 800ba4c:	4b16      	ldr	r3, [pc, #88]	@ (800baa8 <rand+0x5c>)
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	681c      	ldr	r4, [r3, #0]
 800ba52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ba54:	b9b3      	cbnz	r3, 800ba84 <rand+0x38>
 800ba56:	2018      	movs	r0, #24
 800ba58:	f001 fcfc 	bl	800d454 <malloc>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	6320      	str	r0, [r4, #48]	@ 0x30
 800ba60:	b920      	cbnz	r0, 800ba6c <rand+0x20>
 800ba62:	4b12      	ldr	r3, [pc, #72]	@ (800baac <rand+0x60>)
 800ba64:	4812      	ldr	r0, [pc, #72]	@ (800bab0 <rand+0x64>)
 800ba66:	2152      	movs	r1, #82	@ 0x52
 800ba68:	f000 fe3e 	bl	800c6e8 <__assert_func>
 800ba6c:	4911      	ldr	r1, [pc, #68]	@ (800bab4 <rand+0x68>)
 800ba6e:	4b12      	ldr	r3, [pc, #72]	@ (800bab8 <rand+0x6c>)
 800ba70:	e9c0 1300 	strd	r1, r3, [r0]
 800ba74:	4b11      	ldr	r3, [pc, #68]	@ (800babc <rand+0x70>)
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	230b      	movs	r3, #11
 800ba7a:	8183      	strh	r3, [r0, #12]
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	2001      	movs	r0, #1
 800ba80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ba84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba86:	480e      	ldr	r0, [pc, #56]	@ (800bac0 <rand+0x74>)
 800ba88:	690b      	ldr	r3, [r1, #16]
 800ba8a:	694c      	ldr	r4, [r1, #20]
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	@ (800bac4 <rand+0x78>)
 800ba8e:	4358      	muls	r0, r3
 800ba90:	fb02 0004 	mla	r0, r2, r4, r0
 800ba94:	fba3 3202 	umull	r3, r2, r3, r2
 800ba98:	3301      	adds	r3, #1
 800ba9a:	eb40 0002 	adc.w	r0, r0, r2
 800ba9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800baa2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800baa6:	bd10      	pop	{r4, pc}
 800baa8:	200400c8 	.word	0x200400c8
 800baac:	0809ce0c 	.word	0x0809ce0c
 800bab0:	0809ce23 	.word	0x0809ce23
 800bab4:	abcd330e 	.word	0xabcd330e
 800bab8:	e66d1234 	.word	0xe66d1234
 800babc:	0005deec 	.word	0x0005deec
 800bac0:	5851f42d 	.word	0x5851f42d
 800bac4:	4c957f2d 	.word	0x4c957f2d

0800bac8 <__cvt>:
 800bac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bacc:	ec57 6b10 	vmov	r6, r7, d0
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	460c      	mov	r4, r1
 800bad4:	4619      	mov	r1, r3
 800bad6:	463b      	mov	r3, r7
 800bad8:	bfbb      	ittet	lt
 800bada:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bade:	461f      	movlt	r7, r3
 800bae0:	2300      	movge	r3, #0
 800bae2:	232d      	movlt	r3, #45	@ 0x2d
 800bae4:	700b      	strb	r3, [r1, #0]
 800bae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bae8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800baec:	4691      	mov	r9, r2
 800baee:	f023 0820 	bic.w	r8, r3, #32
 800baf2:	bfbc      	itt	lt
 800baf4:	4632      	movlt	r2, r6
 800baf6:	4616      	movlt	r6, r2
 800baf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bafc:	d005      	beq.n	800bb0a <__cvt+0x42>
 800bafe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bb02:	d100      	bne.n	800bb06 <__cvt+0x3e>
 800bb04:	3401      	adds	r4, #1
 800bb06:	2102      	movs	r1, #2
 800bb08:	e000      	b.n	800bb0c <__cvt+0x44>
 800bb0a:	2103      	movs	r1, #3
 800bb0c:	ab03      	add	r3, sp, #12
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	ab02      	add	r3, sp, #8
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	ec47 6b10 	vmov	d0, r6, r7
 800bb18:	4653      	mov	r3, sl
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	f000 fe8c 	bl	800c838 <_dtoa_r>
 800bb20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bb24:	4605      	mov	r5, r0
 800bb26:	d119      	bne.n	800bb5c <__cvt+0x94>
 800bb28:	f019 0f01 	tst.w	r9, #1
 800bb2c:	d00e      	beq.n	800bb4c <__cvt+0x84>
 800bb2e:	eb00 0904 	add.w	r9, r0, r4
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 800bb3e:	b108      	cbz	r0, 800bb44 <__cvt+0x7c>
 800bb40:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb44:	2230      	movs	r2, #48	@ 0x30
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	454b      	cmp	r3, r9
 800bb4a:	d31e      	bcc.n	800bb8a <__cvt+0xc2>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb50:	1b5b      	subs	r3, r3, r5
 800bb52:	4628      	mov	r0, r5
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	b004      	add	sp, #16
 800bb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb60:	eb00 0904 	add.w	r9, r0, r4
 800bb64:	d1e5      	bne.n	800bb32 <__cvt+0x6a>
 800bb66:	7803      	ldrb	r3, [r0, #0]
 800bb68:	2b30      	cmp	r3, #48	@ 0x30
 800bb6a:	d10a      	bne.n	800bb82 <__cvt+0xba>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 ffc0 	bl	8000af8 <__aeabi_dcmpeq>
 800bb78:	b918      	cbnz	r0, 800bb82 <__cvt+0xba>
 800bb7a:	f1c4 0401 	rsb	r4, r4, #1
 800bb7e:	f8ca 4000 	str.w	r4, [sl]
 800bb82:	f8da 3000 	ldr.w	r3, [sl]
 800bb86:	4499      	add	r9, r3
 800bb88:	e7d3      	b.n	800bb32 <__cvt+0x6a>
 800bb8a:	1c59      	adds	r1, r3, #1
 800bb8c:	9103      	str	r1, [sp, #12]
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e7d9      	b.n	800bb46 <__cvt+0x7e>

0800bb92 <__exponent>:
 800bb92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb94:	2900      	cmp	r1, #0
 800bb96:	bfba      	itte	lt
 800bb98:	4249      	neglt	r1, r1
 800bb9a:	232d      	movlt	r3, #45	@ 0x2d
 800bb9c:	232b      	movge	r3, #43	@ 0x2b
 800bb9e:	2909      	cmp	r1, #9
 800bba0:	7002      	strb	r2, [r0, #0]
 800bba2:	7043      	strb	r3, [r0, #1]
 800bba4:	dd29      	ble.n	800bbfa <__exponent+0x68>
 800bba6:	f10d 0307 	add.w	r3, sp, #7
 800bbaa:	461d      	mov	r5, r3
 800bbac:	270a      	movs	r7, #10
 800bbae:	461a      	mov	r2, r3
 800bbb0:	fbb1 f6f7 	udiv	r6, r1, r7
 800bbb4:	fb07 1416 	mls	r4, r7, r6, r1
 800bbb8:	3430      	adds	r4, #48	@ 0x30
 800bbba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	2c63      	cmp	r4, #99	@ 0x63
 800bbc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	dcf1      	bgt.n	800bbae <__exponent+0x1c>
 800bbca:	3130      	adds	r1, #48	@ 0x30
 800bbcc:	1e94      	subs	r4, r2, #2
 800bbce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bbd2:	1c41      	adds	r1, r0, #1
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	42ab      	cmp	r3, r5
 800bbd8:	d30a      	bcc.n	800bbf0 <__exponent+0x5e>
 800bbda:	f10d 0309 	add.w	r3, sp, #9
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	42ac      	cmp	r4, r5
 800bbe2:	bf88      	it	hi
 800bbe4:	2300      	movhi	r3, #0
 800bbe6:	3302      	adds	r3, #2
 800bbe8:	4403      	add	r3, r0
 800bbea:	1a18      	subs	r0, r3, r0
 800bbec:	b003      	add	sp, #12
 800bbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbf0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bbf4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bbf8:	e7ed      	b.n	800bbd6 <__exponent+0x44>
 800bbfa:	2330      	movs	r3, #48	@ 0x30
 800bbfc:	3130      	adds	r1, #48	@ 0x30
 800bbfe:	7083      	strb	r3, [r0, #2]
 800bc00:	70c1      	strb	r1, [r0, #3]
 800bc02:	1d03      	adds	r3, r0, #4
 800bc04:	e7f1      	b.n	800bbea <__exponent+0x58>
	...

0800bc08 <_printf_float>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	b08d      	sub	sp, #52	@ 0x34
 800bc0e:	460c      	mov	r4, r1
 800bc10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc14:	4616      	mov	r6, r2
 800bc16:	461f      	mov	r7, r3
 800bc18:	4605      	mov	r5, r0
 800bc1a:	f000 fced 	bl	800c5f8 <_localeconv_r>
 800bc1e:	6803      	ldr	r3, [r0, #0]
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7f4 fb3c 	bl	80002a0 <strlen>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc30:	9005      	str	r0, [sp, #20]
 800bc32:	3307      	adds	r3, #7
 800bc34:	f023 0307 	bic.w	r3, r3, #7
 800bc38:	f103 0208 	add.w	r2, r3, #8
 800bc3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bc40:	f8d4 b000 	ldr.w	fp, [r4]
 800bc44:	f8c8 2000 	str.w	r2, [r8]
 800bc48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bc5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc5e:	4b9c      	ldr	r3, [pc, #624]	@ (800bed0 <_printf_float+0x2c8>)
 800bc60:	f04f 32ff 	mov.w	r2, #4294967295
 800bc64:	f7f4 ff7a 	bl	8000b5c <__aeabi_dcmpun>
 800bc68:	bb70      	cbnz	r0, 800bcc8 <_printf_float+0xc0>
 800bc6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6e:	4b98      	ldr	r3, [pc, #608]	@ (800bed0 <_printf_float+0x2c8>)
 800bc70:	f04f 32ff 	mov.w	r2, #4294967295
 800bc74:	f7f4 ff54 	bl	8000b20 <__aeabi_dcmple>
 800bc78:	bb30      	cbnz	r0, 800bcc8 <_printf_float+0xc0>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4640      	mov	r0, r8
 800bc80:	4649      	mov	r1, r9
 800bc82:	f7f4 ff43 	bl	8000b0c <__aeabi_dcmplt>
 800bc86:	b110      	cbz	r0, 800bc8e <_printf_float+0x86>
 800bc88:	232d      	movs	r3, #45	@ 0x2d
 800bc8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc8e:	4a91      	ldr	r2, [pc, #580]	@ (800bed4 <_printf_float+0x2cc>)
 800bc90:	4b91      	ldr	r3, [pc, #580]	@ (800bed8 <_printf_float+0x2d0>)
 800bc92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc96:	bf94      	ite	ls
 800bc98:	4690      	movls	r8, r2
 800bc9a:	4698      	movhi	r8, r3
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	6123      	str	r3, [r4, #16]
 800bca0:	f02b 0304 	bic.w	r3, fp, #4
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	f04f 0900 	mov.w	r9, #0
 800bcaa:	9700      	str	r7, [sp, #0]
 800bcac:	4633      	mov	r3, r6
 800bcae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 f9d2 	bl	800c05c <_printf_common>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f040 808d 	bne.w	800bdd8 <_printf_float+0x1d0>
 800bcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc2:	b00d      	add	sp, #52	@ 0x34
 800bcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc8:	4642      	mov	r2, r8
 800bcca:	464b      	mov	r3, r9
 800bccc:	4640      	mov	r0, r8
 800bcce:	4649      	mov	r1, r9
 800bcd0:	f7f4 ff44 	bl	8000b5c <__aeabi_dcmpun>
 800bcd4:	b140      	cbz	r0, 800bce8 <_printf_float+0xe0>
 800bcd6:	464b      	mov	r3, r9
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bfbc      	itt	lt
 800bcdc:	232d      	movlt	r3, #45	@ 0x2d
 800bcde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bce2:	4a7e      	ldr	r2, [pc, #504]	@ (800bedc <_printf_float+0x2d4>)
 800bce4:	4b7e      	ldr	r3, [pc, #504]	@ (800bee0 <_printf_float+0x2d8>)
 800bce6:	e7d4      	b.n	800bc92 <_printf_float+0x8a>
 800bce8:	6863      	ldr	r3, [r4, #4]
 800bcea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bcee:	9206      	str	r2, [sp, #24]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	d13b      	bne.n	800bd6c <_printf_float+0x164>
 800bcf4:	2306      	movs	r3, #6
 800bcf6:	6063      	str	r3, [r4, #4]
 800bcf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6022      	str	r2, [r4, #0]
 800bd00:	9303      	str	r3, [sp, #12]
 800bd02:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bd08:	ab09      	add	r3, sp, #36	@ 0x24
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	6861      	ldr	r1, [r4, #4]
 800bd0e:	ec49 8b10 	vmov	d0, r8, r9
 800bd12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd16:	4628      	mov	r0, r5
 800bd18:	f7ff fed6 	bl	800bac8 <__cvt>
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd20:	2b47      	cmp	r3, #71	@ 0x47
 800bd22:	4680      	mov	r8, r0
 800bd24:	d129      	bne.n	800bd7a <_printf_float+0x172>
 800bd26:	1cc8      	adds	r0, r1, #3
 800bd28:	db02      	blt.n	800bd30 <_printf_float+0x128>
 800bd2a:	6863      	ldr	r3, [r4, #4]
 800bd2c:	4299      	cmp	r1, r3
 800bd2e:	dd41      	ble.n	800bdb4 <_printf_float+0x1ac>
 800bd30:	f1aa 0a02 	sub.w	sl, sl, #2
 800bd34:	fa5f fa8a 	uxtb.w	sl, sl
 800bd38:	3901      	subs	r1, #1
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd40:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd42:	f7ff ff26 	bl	800bb92 <__exponent>
 800bd46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd48:	1813      	adds	r3, r2, r0
 800bd4a:	2a01      	cmp	r2, #1
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	6123      	str	r3, [r4, #16]
 800bd50:	dc02      	bgt.n	800bd58 <_printf_float+0x150>
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	07d2      	lsls	r2, r2, #31
 800bd56:	d501      	bpl.n	800bd5c <_printf_float+0x154>
 800bd58:	3301      	adds	r3, #1
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0a2      	beq.n	800bcaa <_printf_float+0xa2>
 800bd64:	232d      	movs	r3, #45	@ 0x2d
 800bd66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd6a:	e79e      	b.n	800bcaa <_printf_float+0xa2>
 800bd6c:	9a06      	ldr	r2, [sp, #24]
 800bd6e:	2a47      	cmp	r2, #71	@ 0x47
 800bd70:	d1c2      	bne.n	800bcf8 <_printf_float+0xf0>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1c0      	bne.n	800bcf8 <_printf_float+0xf0>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e7bd      	b.n	800bcf6 <_printf_float+0xee>
 800bd7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd7e:	d9db      	bls.n	800bd38 <_printf_float+0x130>
 800bd80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd84:	d118      	bne.n	800bdb8 <_printf_float+0x1b0>
 800bd86:	2900      	cmp	r1, #0
 800bd88:	6863      	ldr	r3, [r4, #4]
 800bd8a:	dd0b      	ble.n	800bda4 <_printf_float+0x19c>
 800bd8c:	6121      	str	r1, [r4, #16]
 800bd8e:	b913      	cbnz	r3, 800bd96 <_printf_float+0x18e>
 800bd90:	6822      	ldr	r2, [r4, #0]
 800bd92:	07d0      	lsls	r0, r2, #31
 800bd94:	d502      	bpl.n	800bd9c <_printf_float+0x194>
 800bd96:	3301      	adds	r3, #1
 800bd98:	440b      	add	r3, r1
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd9e:	f04f 0900 	mov.w	r9, #0
 800bda2:	e7db      	b.n	800bd5c <_printf_float+0x154>
 800bda4:	b913      	cbnz	r3, 800bdac <_printf_float+0x1a4>
 800bda6:	6822      	ldr	r2, [r4, #0]
 800bda8:	07d2      	lsls	r2, r2, #31
 800bdaa:	d501      	bpl.n	800bdb0 <_printf_float+0x1a8>
 800bdac:	3302      	adds	r3, #2
 800bdae:	e7f4      	b.n	800bd9a <_printf_float+0x192>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e7f2      	b.n	800bd9a <_printf_float+0x192>
 800bdb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bdb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdba:	4299      	cmp	r1, r3
 800bdbc:	db05      	blt.n	800bdca <_printf_float+0x1c2>
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	6121      	str	r1, [r4, #16]
 800bdc2:	07d8      	lsls	r0, r3, #31
 800bdc4:	d5ea      	bpl.n	800bd9c <_printf_float+0x194>
 800bdc6:	1c4b      	adds	r3, r1, #1
 800bdc8:	e7e7      	b.n	800bd9a <_printf_float+0x192>
 800bdca:	2900      	cmp	r1, #0
 800bdcc:	bfd4      	ite	le
 800bdce:	f1c1 0202 	rsble	r2, r1, #2
 800bdd2:	2201      	movgt	r2, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	e7e0      	b.n	800bd9a <_printf_float+0x192>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	055a      	lsls	r2, r3, #21
 800bddc:	d407      	bmi.n	800bdee <_printf_float+0x1e6>
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	4642      	mov	r2, r8
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	d12b      	bne.n	800be44 <_printf_float+0x23c>
 800bdec:	e767      	b.n	800bcbe <_printf_float+0xb6>
 800bdee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bdf2:	f240 80dd 	bls.w	800bfb0 <_printf_float+0x3a8>
 800bdf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f7f4 fe7b 	bl	8000af8 <__aeabi_dcmpeq>
 800be02:	2800      	cmp	r0, #0
 800be04:	d033      	beq.n	800be6e <_printf_float+0x266>
 800be06:	4a37      	ldr	r2, [pc, #220]	@ (800bee4 <_printf_float+0x2dc>)
 800be08:	2301      	movs	r3, #1
 800be0a:	4631      	mov	r1, r6
 800be0c:	4628      	mov	r0, r5
 800be0e:	47b8      	blx	r7
 800be10:	3001      	adds	r0, #1
 800be12:	f43f af54 	beq.w	800bcbe <_printf_float+0xb6>
 800be16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be1a:	4543      	cmp	r3, r8
 800be1c:	db02      	blt.n	800be24 <_printf_float+0x21c>
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	07d8      	lsls	r0, r3, #31
 800be22:	d50f      	bpl.n	800be44 <_printf_float+0x23c>
 800be24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	47b8      	blx	r7
 800be2e:	3001      	adds	r0, #1
 800be30:	f43f af45 	beq.w	800bcbe <_printf_float+0xb6>
 800be34:	f04f 0900 	mov.w	r9, #0
 800be38:	f108 38ff 	add.w	r8, r8, #4294967295
 800be3c:	f104 0a1a 	add.w	sl, r4, #26
 800be40:	45c8      	cmp	r8, r9
 800be42:	dc09      	bgt.n	800be58 <_printf_float+0x250>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	079b      	lsls	r3, r3, #30
 800be48:	f100 8103 	bmi.w	800c052 <_printf_float+0x44a>
 800be4c:	68e0      	ldr	r0, [r4, #12]
 800be4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be50:	4298      	cmp	r0, r3
 800be52:	bfb8      	it	lt
 800be54:	4618      	movlt	r0, r3
 800be56:	e734      	b.n	800bcc2 <_printf_float+0xba>
 800be58:	2301      	movs	r3, #1
 800be5a:	4652      	mov	r2, sl
 800be5c:	4631      	mov	r1, r6
 800be5e:	4628      	mov	r0, r5
 800be60:	47b8      	blx	r7
 800be62:	3001      	adds	r0, #1
 800be64:	f43f af2b 	beq.w	800bcbe <_printf_float+0xb6>
 800be68:	f109 0901 	add.w	r9, r9, #1
 800be6c:	e7e8      	b.n	800be40 <_printf_float+0x238>
 800be6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	dc39      	bgt.n	800bee8 <_printf_float+0x2e0>
 800be74:	4a1b      	ldr	r2, [pc, #108]	@ (800bee4 <_printf_float+0x2dc>)
 800be76:	2301      	movs	r3, #1
 800be78:	4631      	mov	r1, r6
 800be7a:	4628      	mov	r0, r5
 800be7c:	47b8      	blx	r7
 800be7e:	3001      	adds	r0, #1
 800be80:	f43f af1d 	beq.w	800bcbe <_printf_float+0xb6>
 800be84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be88:	ea59 0303 	orrs.w	r3, r9, r3
 800be8c:	d102      	bne.n	800be94 <_printf_float+0x28c>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d5d7      	bpl.n	800be44 <_printf_float+0x23c>
 800be94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b8      	blx	r7
 800be9e:	3001      	adds	r0, #1
 800bea0:	f43f af0d 	beq.w	800bcbe <_printf_float+0xb6>
 800bea4:	f04f 0a00 	mov.w	sl, #0
 800bea8:	f104 0b1a 	add.w	fp, r4, #26
 800beac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beae:	425b      	negs	r3, r3
 800beb0:	4553      	cmp	r3, sl
 800beb2:	dc01      	bgt.n	800beb8 <_printf_float+0x2b0>
 800beb4:	464b      	mov	r3, r9
 800beb6:	e793      	b.n	800bde0 <_printf_float+0x1d8>
 800beb8:	2301      	movs	r3, #1
 800beba:	465a      	mov	r2, fp
 800bebc:	4631      	mov	r1, r6
 800bebe:	4628      	mov	r0, r5
 800bec0:	47b8      	blx	r7
 800bec2:	3001      	adds	r0, #1
 800bec4:	f43f aefb 	beq.w	800bcbe <_printf_float+0xb6>
 800bec8:	f10a 0a01 	add.w	sl, sl, #1
 800becc:	e7ee      	b.n	800beac <_printf_float+0x2a4>
 800bece:	bf00      	nop
 800bed0:	7fefffff 	.word	0x7fefffff
 800bed4:	0809ce7b 	.word	0x0809ce7b
 800bed8:	0809ce7f 	.word	0x0809ce7f
 800bedc:	0809ce83 	.word	0x0809ce83
 800bee0:	0809ce87 	.word	0x0809ce87
 800bee4:	0809ce8b 	.word	0x0809ce8b
 800bee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800beea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800beee:	4553      	cmp	r3, sl
 800bef0:	bfa8      	it	ge
 800bef2:	4653      	movge	r3, sl
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	4699      	mov	r9, r3
 800bef8:	dc36      	bgt.n	800bf68 <_printf_float+0x360>
 800befa:	f04f 0b00 	mov.w	fp, #0
 800befe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf02:	f104 021a 	add.w	r2, r4, #26
 800bf06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf08:	9306      	str	r3, [sp, #24]
 800bf0a:	eba3 0309 	sub.w	r3, r3, r9
 800bf0e:	455b      	cmp	r3, fp
 800bf10:	dc31      	bgt.n	800bf76 <_printf_float+0x36e>
 800bf12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf14:	459a      	cmp	sl, r3
 800bf16:	dc3a      	bgt.n	800bf8e <_printf_float+0x386>
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	07da      	lsls	r2, r3, #31
 800bf1c:	d437      	bmi.n	800bf8e <_printf_float+0x386>
 800bf1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf20:	ebaa 0903 	sub.w	r9, sl, r3
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	ebaa 0303 	sub.w	r3, sl, r3
 800bf2a:	4599      	cmp	r9, r3
 800bf2c:	bfa8      	it	ge
 800bf2e:	4699      	movge	r9, r3
 800bf30:	f1b9 0f00 	cmp.w	r9, #0
 800bf34:	dc33      	bgt.n	800bf9e <_printf_float+0x396>
 800bf36:	f04f 0800 	mov.w	r8, #0
 800bf3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf3e:	f104 0b1a 	add.w	fp, r4, #26
 800bf42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf44:	ebaa 0303 	sub.w	r3, sl, r3
 800bf48:	eba3 0309 	sub.w	r3, r3, r9
 800bf4c:	4543      	cmp	r3, r8
 800bf4e:	f77f af79 	ble.w	800be44 <_printf_float+0x23c>
 800bf52:	2301      	movs	r3, #1
 800bf54:	465a      	mov	r2, fp
 800bf56:	4631      	mov	r1, r6
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b8      	blx	r7
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	f43f aeae 	beq.w	800bcbe <_printf_float+0xb6>
 800bf62:	f108 0801 	add.w	r8, r8, #1
 800bf66:	e7ec      	b.n	800bf42 <_printf_float+0x33a>
 800bf68:	4642      	mov	r2, r8
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	d1c2      	bne.n	800befa <_printf_float+0x2f2>
 800bf74:	e6a3      	b.n	800bcbe <_printf_float+0xb6>
 800bf76:	2301      	movs	r3, #1
 800bf78:	4631      	mov	r1, r6
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	9206      	str	r2, [sp, #24]
 800bf7e:	47b8      	blx	r7
 800bf80:	3001      	adds	r0, #1
 800bf82:	f43f ae9c 	beq.w	800bcbe <_printf_float+0xb6>
 800bf86:	9a06      	ldr	r2, [sp, #24]
 800bf88:	f10b 0b01 	add.w	fp, fp, #1
 800bf8c:	e7bb      	b.n	800bf06 <_printf_float+0x2fe>
 800bf8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf92:	4631      	mov	r1, r6
 800bf94:	4628      	mov	r0, r5
 800bf96:	47b8      	blx	r7
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d1c0      	bne.n	800bf1e <_printf_float+0x316>
 800bf9c:	e68f      	b.n	800bcbe <_printf_float+0xb6>
 800bf9e:	9a06      	ldr	r2, [sp, #24]
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	4442      	add	r2, r8
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	47b8      	blx	r7
 800bfaa:	3001      	adds	r0, #1
 800bfac:	d1c3      	bne.n	800bf36 <_printf_float+0x32e>
 800bfae:	e686      	b.n	800bcbe <_printf_float+0xb6>
 800bfb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfb4:	f1ba 0f01 	cmp.w	sl, #1
 800bfb8:	dc01      	bgt.n	800bfbe <_printf_float+0x3b6>
 800bfba:	07db      	lsls	r3, r3, #31
 800bfbc:	d536      	bpl.n	800c02c <_printf_float+0x424>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4642      	mov	r2, r8
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b8      	blx	r7
 800bfc8:	3001      	adds	r0, #1
 800bfca:	f43f ae78 	beq.w	800bcbe <_printf_float+0xb6>
 800bfce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	f43f ae70 	beq.w	800bcbe <_printf_float+0xb6>
 800bfde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfea:	f7f4 fd85 	bl	8000af8 <__aeabi_dcmpeq>
 800bfee:	b9c0      	cbnz	r0, 800c022 <_printf_float+0x41a>
 800bff0:	4653      	mov	r3, sl
 800bff2:	f108 0201 	add.w	r2, r8, #1
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b8      	blx	r7
 800bffc:	3001      	adds	r0, #1
 800bffe:	d10c      	bne.n	800c01a <_printf_float+0x412>
 800c000:	e65d      	b.n	800bcbe <_printf_float+0xb6>
 800c002:	2301      	movs	r3, #1
 800c004:	465a      	mov	r2, fp
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	f43f ae56 	beq.w	800bcbe <_printf_float+0xb6>
 800c012:	f108 0801 	add.w	r8, r8, #1
 800c016:	45d0      	cmp	r8, sl
 800c018:	dbf3      	blt.n	800c002 <_printf_float+0x3fa>
 800c01a:	464b      	mov	r3, r9
 800c01c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c020:	e6df      	b.n	800bde2 <_printf_float+0x1da>
 800c022:	f04f 0800 	mov.w	r8, #0
 800c026:	f104 0b1a 	add.w	fp, r4, #26
 800c02a:	e7f4      	b.n	800c016 <_printf_float+0x40e>
 800c02c:	2301      	movs	r3, #1
 800c02e:	4642      	mov	r2, r8
 800c030:	e7e1      	b.n	800bff6 <_printf_float+0x3ee>
 800c032:	2301      	movs	r3, #1
 800c034:	464a      	mov	r2, r9
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	47b8      	blx	r7
 800c03c:	3001      	adds	r0, #1
 800c03e:	f43f ae3e 	beq.w	800bcbe <_printf_float+0xb6>
 800c042:	f108 0801 	add.w	r8, r8, #1
 800c046:	68e3      	ldr	r3, [r4, #12]
 800c048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c04a:	1a5b      	subs	r3, r3, r1
 800c04c:	4543      	cmp	r3, r8
 800c04e:	dcf0      	bgt.n	800c032 <_printf_float+0x42a>
 800c050:	e6fc      	b.n	800be4c <_printf_float+0x244>
 800c052:	f04f 0800 	mov.w	r8, #0
 800c056:	f104 0919 	add.w	r9, r4, #25
 800c05a:	e7f4      	b.n	800c046 <_printf_float+0x43e>

0800c05c <_printf_common>:
 800c05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c060:	4616      	mov	r6, r2
 800c062:	4698      	mov	r8, r3
 800c064:	688a      	ldr	r2, [r1, #8]
 800c066:	690b      	ldr	r3, [r1, #16]
 800c068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c06c:	4293      	cmp	r3, r2
 800c06e:	bfb8      	it	lt
 800c070:	4613      	movlt	r3, r2
 800c072:	6033      	str	r3, [r6, #0]
 800c074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c078:	4607      	mov	r7, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	b10a      	cbz	r2, 800c082 <_printf_common+0x26>
 800c07e:	3301      	adds	r3, #1
 800c080:	6033      	str	r3, [r6, #0]
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	0699      	lsls	r1, r3, #26
 800c086:	bf42      	ittt	mi
 800c088:	6833      	ldrmi	r3, [r6, #0]
 800c08a:	3302      	addmi	r3, #2
 800c08c:	6033      	strmi	r3, [r6, #0]
 800c08e:	6825      	ldr	r5, [r4, #0]
 800c090:	f015 0506 	ands.w	r5, r5, #6
 800c094:	d106      	bne.n	800c0a4 <_printf_common+0x48>
 800c096:	f104 0a19 	add.w	sl, r4, #25
 800c09a:	68e3      	ldr	r3, [r4, #12]
 800c09c:	6832      	ldr	r2, [r6, #0]
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	42ab      	cmp	r3, r5
 800c0a2:	dc26      	bgt.n	800c0f2 <_printf_common+0x96>
 800c0a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0a8:	6822      	ldr	r2, [r4, #0]
 800c0aa:	3b00      	subs	r3, #0
 800c0ac:	bf18      	it	ne
 800c0ae:	2301      	movne	r3, #1
 800c0b0:	0692      	lsls	r2, r2, #26
 800c0b2:	d42b      	bmi.n	800c10c <_printf_common+0xb0>
 800c0b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0b8:	4641      	mov	r1, r8
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	47c8      	blx	r9
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d01e      	beq.n	800c100 <_printf_common+0xa4>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	6922      	ldr	r2, [r4, #16]
 800c0c6:	f003 0306 	and.w	r3, r3, #6
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	bf02      	ittt	eq
 800c0ce:	68e5      	ldreq	r5, [r4, #12]
 800c0d0:	6833      	ldreq	r3, [r6, #0]
 800c0d2:	1aed      	subeq	r5, r5, r3
 800c0d4:	68a3      	ldr	r3, [r4, #8]
 800c0d6:	bf0c      	ite	eq
 800c0d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0dc:	2500      	movne	r5, #0
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	bfc4      	itt	gt
 800c0e2:	1a9b      	subgt	r3, r3, r2
 800c0e4:	18ed      	addgt	r5, r5, r3
 800c0e6:	2600      	movs	r6, #0
 800c0e8:	341a      	adds	r4, #26
 800c0ea:	42b5      	cmp	r5, r6
 800c0ec:	d11a      	bne.n	800c124 <_printf_common+0xc8>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	e008      	b.n	800c104 <_printf_common+0xa8>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	4652      	mov	r2, sl
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	47c8      	blx	r9
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d103      	bne.n	800c108 <_printf_common+0xac>
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c108:	3501      	adds	r5, #1
 800c10a:	e7c6      	b.n	800c09a <_printf_common+0x3e>
 800c10c:	18e1      	adds	r1, r4, r3
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	2030      	movs	r0, #48	@ 0x30
 800c112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c116:	4422      	add	r2, r4
 800c118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c11c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c120:	3302      	adds	r3, #2
 800c122:	e7c7      	b.n	800c0b4 <_printf_common+0x58>
 800c124:	2301      	movs	r3, #1
 800c126:	4622      	mov	r2, r4
 800c128:	4641      	mov	r1, r8
 800c12a:	4638      	mov	r0, r7
 800c12c:	47c8      	blx	r9
 800c12e:	3001      	adds	r0, #1
 800c130:	d0e6      	beq.n	800c100 <_printf_common+0xa4>
 800c132:	3601      	adds	r6, #1
 800c134:	e7d9      	b.n	800c0ea <_printf_common+0x8e>
	...

0800c138 <_printf_i>:
 800c138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c13c:	7e0f      	ldrb	r7, [r1, #24]
 800c13e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c140:	2f78      	cmp	r7, #120	@ 0x78
 800c142:	4691      	mov	r9, r2
 800c144:	4680      	mov	r8, r0
 800c146:	460c      	mov	r4, r1
 800c148:	469a      	mov	sl, r3
 800c14a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c14e:	d807      	bhi.n	800c160 <_printf_i+0x28>
 800c150:	2f62      	cmp	r7, #98	@ 0x62
 800c152:	d80a      	bhi.n	800c16a <_printf_i+0x32>
 800c154:	2f00      	cmp	r7, #0
 800c156:	f000 80d2 	beq.w	800c2fe <_printf_i+0x1c6>
 800c15a:	2f58      	cmp	r7, #88	@ 0x58
 800c15c:	f000 80b9 	beq.w	800c2d2 <_printf_i+0x19a>
 800c160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c168:	e03a      	b.n	800c1e0 <_printf_i+0xa8>
 800c16a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c16e:	2b15      	cmp	r3, #21
 800c170:	d8f6      	bhi.n	800c160 <_printf_i+0x28>
 800c172:	a101      	add	r1, pc, #4	@ (adr r1, 800c178 <_printf_i+0x40>)
 800c174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c178:	0800c1d1 	.word	0x0800c1d1
 800c17c:	0800c1e5 	.word	0x0800c1e5
 800c180:	0800c161 	.word	0x0800c161
 800c184:	0800c161 	.word	0x0800c161
 800c188:	0800c161 	.word	0x0800c161
 800c18c:	0800c161 	.word	0x0800c161
 800c190:	0800c1e5 	.word	0x0800c1e5
 800c194:	0800c161 	.word	0x0800c161
 800c198:	0800c161 	.word	0x0800c161
 800c19c:	0800c161 	.word	0x0800c161
 800c1a0:	0800c161 	.word	0x0800c161
 800c1a4:	0800c2e5 	.word	0x0800c2e5
 800c1a8:	0800c20f 	.word	0x0800c20f
 800c1ac:	0800c29f 	.word	0x0800c29f
 800c1b0:	0800c161 	.word	0x0800c161
 800c1b4:	0800c161 	.word	0x0800c161
 800c1b8:	0800c307 	.word	0x0800c307
 800c1bc:	0800c161 	.word	0x0800c161
 800c1c0:	0800c20f 	.word	0x0800c20f
 800c1c4:	0800c161 	.word	0x0800c161
 800c1c8:	0800c161 	.word	0x0800c161
 800c1cc:	0800c2a7 	.word	0x0800c2a7
 800c1d0:	6833      	ldr	r3, [r6, #0]
 800c1d2:	1d1a      	adds	r2, r3, #4
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6032      	str	r2, [r6, #0]
 800c1d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e09d      	b.n	800c320 <_printf_i+0x1e8>
 800c1e4:	6833      	ldr	r3, [r6, #0]
 800c1e6:	6820      	ldr	r0, [r4, #0]
 800c1e8:	1d19      	adds	r1, r3, #4
 800c1ea:	6031      	str	r1, [r6, #0]
 800c1ec:	0606      	lsls	r6, r0, #24
 800c1ee:	d501      	bpl.n	800c1f4 <_printf_i+0xbc>
 800c1f0:	681d      	ldr	r5, [r3, #0]
 800c1f2:	e003      	b.n	800c1fc <_printf_i+0xc4>
 800c1f4:	0645      	lsls	r5, r0, #25
 800c1f6:	d5fb      	bpl.n	800c1f0 <_printf_i+0xb8>
 800c1f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1fc:	2d00      	cmp	r5, #0
 800c1fe:	da03      	bge.n	800c208 <_printf_i+0xd0>
 800c200:	232d      	movs	r3, #45	@ 0x2d
 800c202:	426d      	negs	r5, r5
 800c204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c208:	4859      	ldr	r0, [pc, #356]	@ (800c370 <_printf_i+0x238>)
 800c20a:	230a      	movs	r3, #10
 800c20c:	e011      	b.n	800c232 <_printf_i+0xfa>
 800c20e:	6821      	ldr	r1, [r4, #0]
 800c210:	6833      	ldr	r3, [r6, #0]
 800c212:	0608      	lsls	r0, r1, #24
 800c214:	f853 5b04 	ldr.w	r5, [r3], #4
 800c218:	d402      	bmi.n	800c220 <_printf_i+0xe8>
 800c21a:	0649      	lsls	r1, r1, #25
 800c21c:	bf48      	it	mi
 800c21e:	b2ad      	uxthmi	r5, r5
 800c220:	2f6f      	cmp	r7, #111	@ 0x6f
 800c222:	4853      	ldr	r0, [pc, #332]	@ (800c370 <_printf_i+0x238>)
 800c224:	6033      	str	r3, [r6, #0]
 800c226:	bf14      	ite	ne
 800c228:	230a      	movne	r3, #10
 800c22a:	2308      	moveq	r3, #8
 800c22c:	2100      	movs	r1, #0
 800c22e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c232:	6866      	ldr	r6, [r4, #4]
 800c234:	60a6      	str	r6, [r4, #8]
 800c236:	2e00      	cmp	r6, #0
 800c238:	bfa2      	ittt	ge
 800c23a:	6821      	ldrge	r1, [r4, #0]
 800c23c:	f021 0104 	bicge.w	r1, r1, #4
 800c240:	6021      	strge	r1, [r4, #0]
 800c242:	b90d      	cbnz	r5, 800c248 <_printf_i+0x110>
 800c244:	2e00      	cmp	r6, #0
 800c246:	d04b      	beq.n	800c2e0 <_printf_i+0x1a8>
 800c248:	4616      	mov	r6, r2
 800c24a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c24e:	fb03 5711 	mls	r7, r3, r1, r5
 800c252:	5dc7      	ldrb	r7, [r0, r7]
 800c254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c258:	462f      	mov	r7, r5
 800c25a:	42bb      	cmp	r3, r7
 800c25c:	460d      	mov	r5, r1
 800c25e:	d9f4      	bls.n	800c24a <_printf_i+0x112>
 800c260:	2b08      	cmp	r3, #8
 800c262:	d10b      	bne.n	800c27c <_printf_i+0x144>
 800c264:	6823      	ldr	r3, [r4, #0]
 800c266:	07df      	lsls	r7, r3, #31
 800c268:	d508      	bpl.n	800c27c <_printf_i+0x144>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	6861      	ldr	r1, [r4, #4]
 800c26e:	4299      	cmp	r1, r3
 800c270:	bfde      	ittt	le
 800c272:	2330      	movle	r3, #48	@ 0x30
 800c274:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c27c:	1b92      	subs	r2, r2, r6
 800c27e:	6122      	str	r2, [r4, #16]
 800c280:	f8cd a000 	str.w	sl, [sp]
 800c284:	464b      	mov	r3, r9
 800c286:	aa03      	add	r2, sp, #12
 800c288:	4621      	mov	r1, r4
 800c28a:	4640      	mov	r0, r8
 800c28c:	f7ff fee6 	bl	800c05c <_printf_common>
 800c290:	3001      	adds	r0, #1
 800c292:	d14a      	bne.n	800c32a <_printf_i+0x1f2>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b004      	add	sp, #16
 800c29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	f043 0320 	orr.w	r3, r3, #32
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	4833      	ldr	r0, [pc, #204]	@ (800c374 <_printf_i+0x23c>)
 800c2a8:	2778      	movs	r7, #120	@ 0x78
 800c2aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	6831      	ldr	r1, [r6, #0]
 800c2b2:	061f      	lsls	r7, r3, #24
 800c2b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2b8:	d402      	bmi.n	800c2c0 <_printf_i+0x188>
 800c2ba:	065f      	lsls	r7, r3, #25
 800c2bc:	bf48      	it	mi
 800c2be:	b2ad      	uxthmi	r5, r5
 800c2c0:	6031      	str	r1, [r6, #0]
 800c2c2:	07d9      	lsls	r1, r3, #31
 800c2c4:	bf44      	itt	mi
 800c2c6:	f043 0320 	orrmi.w	r3, r3, #32
 800c2ca:	6023      	strmi	r3, [r4, #0]
 800c2cc:	b11d      	cbz	r5, 800c2d6 <_printf_i+0x19e>
 800c2ce:	2310      	movs	r3, #16
 800c2d0:	e7ac      	b.n	800c22c <_printf_i+0xf4>
 800c2d2:	4827      	ldr	r0, [pc, #156]	@ (800c370 <_printf_i+0x238>)
 800c2d4:	e7e9      	b.n	800c2aa <_printf_i+0x172>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	f023 0320 	bic.w	r3, r3, #32
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	e7f6      	b.n	800c2ce <_printf_i+0x196>
 800c2e0:	4616      	mov	r6, r2
 800c2e2:	e7bd      	b.n	800c260 <_printf_i+0x128>
 800c2e4:	6833      	ldr	r3, [r6, #0]
 800c2e6:	6825      	ldr	r5, [r4, #0]
 800c2e8:	6961      	ldr	r1, [r4, #20]
 800c2ea:	1d18      	adds	r0, r3, #4
 800c2ec:	6030      	str	r0, [r6, #0]
 800c2ee:	062e      	lsls	r6, r5, #24
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	d501      	bpl.n	800c2f8 <_printf_i+0x1c0>
 800c2f4:	6019      	str	r1, [r3, #0]
 800c2f6:	e002      	b.n	800c2fe <_printf_i+0x1c6>
 800c2f8:	0668      	lsls	r0, r5, #25
 800c2fa:	d5fb      	bpl.n	800c2f4 <_printf_i+0x1bc>
 800c2fc:	8019      	strh	r1, [r3, #0]
 800c2fe:	2300      	movs	r3, #0
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	4616      	mov	r6, r2
 800c304:	e7bc      	b.n	800c280 <_printf_i+0x148>
 800c306:	6833      	ldr	r3, [r6, #0]
 800c308:	1d1a      	adds	r2, r3, #4
 800c30a:	6032      	str	r2, [r6, #0]
 800c30c:	681e      	ldr	r6, [r3, #0]
 800c30e:	6862      	ldr	r2, [r4, #4]
 800c310:	2100      	movs	r1, #0
 800c312:	4630      	mov	r0, r6
 800c314:	f7f3 ff74 	bl	8000200 <memchr>
 800c318:	b108      	cbz	r0, 800c31e <_printf_i+0x1e6>
 800c31a:	1b80      	subs	r0, r0, r6
 800c31c:	6060      	str	r0, [r4, #4]
 800c31e:	6863      	ldr	r3, [r4, #4]
 800c320:	6123      	str	r3, [r4, #16]
 800c322:	2300      	movs	r3, #0
 800c324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c328:	e7aa      	b.n	800c280 <_printf_i+0x148>
 800c32a:	6923      	ldr	r3, [r4, #16]
 800c32c:	4632      	mov	r2, r6
 800c32e:	4649      	mov	r1, r9
 800c330:	4640      	mov	r0, r8
 800c332:	47d0      	blx	sl
 800c334:	3001      	adds	r0, #1
 800c336:	d0ad      	beq.n	800c294 <_printf_i+0x15c>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	079b      	lsls	r3, r3, #30
 800c33c:	d413      	bmi.n	800c366 <_printf_i+0x22e>
 800c33e:	68e0      	ldr	r0, [r4, #12]
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	4298      	cmp	r0, r3
 800c344:	bfb8      	it	lt
 800c346:	4618      	movlt	r0, r3
 800c348:	e7a6      	b.n	800c298 <_printf_i+0x160>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4632      	mov	r2, r6
 800c34e:	4649      	mov	r1, r9
 800c350:	4640      	mov	r0, r8
 800c352:	47d0      	blx	sl
 800c354:	3001      	adds	r0, #1
 800c356:	d09d      	beq.n	800c294 <_printf_i+0x15c>
 800c358:	3501      	adds	r5, #1
 800c35a:	68e3      	ldr	r3, [r4, #12]
 800c35c:	9903      	ldr	r1, [sp, #12]
 800c35e:	1a5b      	subs	r3, r3, r1
 800c360:	42ab      	cmp	r3, r5
 800c362:	dcf2      	bgt.n	800c34a <_printf_i+0x212>
 800c364:	e7eb      	b.n	800c33e <_printf_i+0x206>
 800c366:	2500      	movs	r5, #0
 800c368:	f104 0619 	add.w	r6, r4, #25
 800c36c:	e7f5      	b.n	800c35a <_printf_i+0x222>
 800c36e:	bf00      	nop
 800c370:	0809ce8d 	.word	0x0809ce8d
 800c374:	0809ce9e 	.word	0x0809ce9e

0800c378 <std>:
 800c378:	2300      	movs	r3, #0
 800c37a:	b510      	push	{r4, lr}
 800c37c:	4604      	mov	r4, r0
 800c37e:	e9c0 3300 	strd	r3, r3, [r0]
 800c382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c386:	6083      	str	r3, [r0, #8]
 800c388:	8181      	strh	r1, [r0, #12]
 800c38a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c38c:	81c2      	strh	r2, [r0, #14]
 800c38e:	6183      	str	r3, [r0, #24]
 800c390:	4619      	mov	r1, r3
 800c392:	2208      	movs	r2, #8
 800c394:	305c      	adds	r0, #92	@ 0x5c
 800c396:	f000 f926 	bl	800c5e6 <memset>
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <std+0x58>)
 800c39c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c39e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d4 <std+0x5c>)
 800c3a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d8 <std+0x60>)
 800c3a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3dc <std+0x64>)
 800c3a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c3e0 <std+0x68>)
 800c3ac:	6224      	str	r4, [r4, #32]
 800c3ae:	429c      	cmp	r4, r3
 800c3b0:	d006      	beq.n	800c3c0 <std+0x48>
 800c3b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3b6:	4294      	cmp	r4, r2
 800c3b8:	d002      	beq.n	800c3c0 <std+0x48>
 800c3ba:	33d0      	adds	r3, #208	@ 0xd0
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	d105      	bne.n	800c3cc <std+0x54>
 800c3c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c8:	f000 b98a 	b.w	800c6e0 <__retarget_lock_init_recursive>
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	0800c561 	.word	0x0800c561
 800c3d4:	0800c583 	.word	0x0800c583
 800c3d8:	0800c5bb 	.word	0x0800c5bb
 800c3dc:	0800c5df 	.word	0x0800c5df
 800c3e0:	20040984 	.word	0x20040984

0800c3e4 <stdio_exit_handler>:
 800c3e4:	4a02      	ldr	r2, [pc, #8]	@ (800c3f0 <stdio_exit_handler+0xc>)
 800c3e6:	4903      	ldr	r1, [pc, #12]	@ (800c3f4 <stdio_exit_handler+0x10>)
 800c3e8:	4803      	ldr	r0, [pc, #12]	@ (800c3f8 <stdio_exit_handler+0x14>)
 800c3ea:	f000 b869 	b.w	800c4c0 <_fwalk_sglue>
 800c3ee:	bf00      	nop
 800c3f0:	200400bc 	.word	0x200400bc
 800c3f4:	0800e301 	.word	0x0800e301
 800c3f8:	200400cc 	.word	0x200400cc

0800c3fc <cleanup_stdio>:
 800c3fc:	6841      	ldr	r1, [r0, #4]
 800c3fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c430 <cleanup_stdio+0x34>)
 800c400:	4299      	cmp	r1, r3
 800c402:	b510      	push	{r4, lr}
 800c404:	4604      	mov	r4, r0
 800c406:	d001      	beq.n	800c40c <cleanup_stdio+0x10>
 800c408:	f001 ff7a 	bl	800e300 <_fflush_r>
 800c40c:	68a1      	ldr	r1, [r4, #8]
 800c40e:	4b09      	ldr	r3, [pc, #36]	@ (800c434 <cleanup_stdio+0x38>)
 800c410:	4299      	cmp	r1, r3
 800c412:	d002      	beq.n	800c41a <cleanup_stdio+0x1e>
 800c414:	4620      	mov	r0, r4
 800c416:	f001 ff73 	bl	800e300 <_fflush_r>
 800c41a:	68e1      	ldr	r1, [r4, #12]
 800c41c:	4b06      	ldr	r3, [pc, #24]	@ (800c438 <cleanup_stdio+0x3c>)
 800c41e:	4299      	cmp	r1, r3
 800c420:	d004      	beq.n	800c42c <cleanup_stdio+0x30>
 800c422:	4620      	mov	r0, r4
 800c424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c428:	f001 bf6a 	b.w	800e300 <_fflush_r>
 800c42c:	bd10      	pop	{r4, pc}
 800c42e:	bf00      	nop
 800c430:	20040984 	.word	0x20040984
 800c434:	200409ec 	.word	0x200409ec
 800c438:	20040a54 	.word	0x20040a54

0800c43c <global_stdio_init.part.0>:
 800c43c:	b510      	push	{r4, lr}
 800c43e:	4b0b      	ldr	r3, [pc, #44]	@ (800c46c <global_stdio_init.part.0+0x30>)
 800c440:	4c0b      	ldr	r4, [pc, #44]	@ (800c470 <global_stdio_init.part.0+0x34>)
 800c442:	4a0c      	ldr	r2, [pc, #48]	@ (800c474 <global_stdio_init.part.0+0x38>)
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	4620      	mov	r0, r4
 800c448:	2200      	movs	r2, #0
 800c44a:	2104      	movs	r1, #4
 800c44c:	f7ff ff94 	bl	800c378 <std>
 800c450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c454:	2201      	movs	r2, #1
 800c456:	2109      	movs	r1, #9
 800c458:	f7ff ff8e 	bl	800c378 <std>
 800c45c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c460:	2202      	movs	r2, #2
 800c462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c466:	2112      	movs	r1, #18
 800c468:	f7ff bf86 	b.w	800c378 <std>
 800c46c:	20040abc 	.word	0x20040abc
 800c470:	20040984 	.word	0x20040984
 800c474:	0800c3e5 	.word	0x0800c3e5

0800c478 <__sfp_lock_acquire>:
 800c478:	4801      	ldr	r0, [pc, #4]	@ (800c480 <__sfp_lock_acquire+0x8>)
 800c47a:	f000 b932 	b.w	800c6e2 <__retarget_lock_acquire_recursive>
 800c47e:	bf00      	nop
 800c480:	20040ac5 	.word	0x20040ac5

0800c484 <__sfp_lock_release>:
 800c484:	4801      	ldr	r0, [pc, #4]	@ (800c48c <__sfp_lock_release+0x8>)
 800c486:	f000 b92d 	b.w	800c6e4 <__retarget_lock_release_recursive>
 800c48a:	bf00      	nop
 800c48c:	20040ac5 	.word	0x20040ac5

0800c490 <__sinit>:
 800c490:	b510      	push	{r4, lr}
 800c492:	4604      	mov	r4, r0
 800c494:	f7ff fff0 	bl	800c478 <__sfp_lock_acquire>
 800c498:	6a23      	ldr	r3, [r4, #32]
 800c49a:	b11b      	cbz	r3, 800c4a4 <__sinit+0x14>
 800c49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4a0:	f7ff bff0 	b.w	800c484 <__sfp_lock_release>
 800c4a4:	4b04      	ldr	r3, [pc, #16]	@ (800c4b8 <__sinit+0x28>)
 800c4a6:	6223      	str	r3, [r4, #32]
 800c4a8:	4b04      	ldr	r3, [pc, #16]	@ (800c4bc <__sinit+0x2c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1f5      	bne.n	800c49c <__sinit+0xc>
 800c4b0:	f7ff ffc4 	bl	800c43c <global_stdio_init.part.0>
 800c4b4:	e7f2      	b.n	800c49c <__sinit+0xc>
 800c4b6:	bf00      	nop
 800c4b8:	0800c3fd 	.word	0x0800c3fd
 800c4bc:	20040abc 	.word	0x20040abc

0800c4c0 <_fwalk_sglue>:
 800c4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	4688      	mov	r8, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4d0:	f1b9 0901 	subs.w	r9, r9, #1
 800c4d4:	d505      	bpl.n	800c4e2 <_fwalk_sglue+0x22>
 800c4d6:	6824      	ldr	r4, [r4, #0]
 800c4d8:	2c00      	cmp	r4, #0
 800c4da:	d1f7      	bne.n	800c4cc <_fwalk_sglue+0xc>
 800c4dc:	4630      	mov	r0, r6
 800c4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d907      	bls.n	800c4f8 <_fwalk_sglue+0x38>
 800c4e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	d003      	beq.n	800c4f8 <_fwalk_sglue+0x38>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	47c0      	blx	r8
 800c4f6:	4306      	orrs	r6, r0
 800c4f8:	3568      	adds	r5, #104	@ 0x68
 800c4fa:	e7e9      	b.n	800c4d0 <_fwalk_sglue+0x10>

0800c4fc <iprintf>:
 800c4fc:	b40f      	push	{r0, r1, r2, r3}
 800c4fe:	b507      	push	{r0, r1, r2, lr}
 800c500:	4906      	ldr	r1, [pc, #24]	@ (800c51c <iprintf+0x20>)
 800c502:	ab04      	add	r3, sp, #16
 800c504:	6808      	ldr	r0, [r1, #0]
 800c506:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50a:	6881      	ldr	r1, [r0, #8]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	f001 fd5b 	bl	800dfc8 <_vfiprintf_r>
 800c512:	b003      	add	sp, #12
 800c514:	f85d eb04 	ldr.w	lr, [sp], #4
 800c518:	b004      	add	sp, #16
 800c51a:	4770      	bx	lr
 800c51c:	200400c8 	.word	0x200400c8

0800c520 <siprintf>:
 800c520:	b40e      	push	{r1, r2, r3}
 800c522:	b500      	push	{lr}
 800c524:	b09c      	sub	sp, #112	@ 0x70
 800c526:	ab1d      	add	r3, sp, #116	@ 0x74
 800c528:	9002      	str	r0, [sp, #8]
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c530:	4809      	ldr	r0, [pc, #36]	@ (800c558 <siprintf+0x38>)
 800c532:	9107      	str	r1, [sp, #28]
 800c534:	9104      	str	r1, [sp, #16]
 800c536:	4909      	ldr	r1, [pc, #36]	@ (800c55c <siprintf+0x3c>)
 800c538:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53c:	9105      	str	r1, [sp, #20]
 800c53e:	6800      	ldr	r0, [r0, #0]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	a902      	add	r1, sp, #8
 800c544:	f001 fc1a 	bl	800dd7c <_svfiprintf_r>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	b01c      	add	sp, #112	@ 0x70
 800c550:	f85d eb04 	ldr.w	lr, [sp], #4
 800c554:	b003      	add	sp, #12
 800c556:	4770      	bx	lr
 800c558:	200400c8 	.word	0x200400c8
 800c55c:	ffff0208 	.word	0xffff0208

0800c560 <__sread>:
 800c560:	b510      	push	{r4, lr}
 800c562:	460c      	mov	r4, r1
 800c564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c568:	f000 f86c 	bl	800c644 <_read_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	bfab      	itete	ge
 800c570:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c572:	89a3      	ldrhlt	r3, [r4, #12]
 800c574:	181b      	addge	r3, r3, r0
 800c576:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c57a:	bfac      	ite	ge
 800c57c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c57e:	81a3      	strhlt	r3, [r4, #12]
 800c580:	bd10      	pop	{r4, pc}

0800c582 <__swrite>:
 800c582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	461f      	mov	r7, r3
 800c588:	898b      	ldrh	r3, [r1, #12]
 800c58a:	05db      	lsls	r3, r3, #23
 800c58c:	4605      	mov	r5, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	4616      	mov	r6, r2
 800c592:	d505      	bpl.n	800c5a0 <__swrite+0x1e>
 800c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c598:	2302      	movs	r3, #2
 800c59a:	2200      	movs	r2, #0
 800c59c:	f000 f840 	bl	800c620 <_lseek_r>
 800c5a0:	89a3      	ldrh	r3, [r4, #12]
 800c5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	4632      	mov	r2, r6
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b6:	f000 b857 	b.w	800c668 <_write_r>

0800c5ba <__sseek>:
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	460c      	mov	r4, r1
 800c5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c2:	f000 f82d 	bl	800c620 <_lseek_r>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	bf15      	itete	ne
 800c5cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c5ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c5d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c5d6:	81a3      	strheq	r3, [r4, #12]
 800c5d8:	bf18      	it	ne
 800c5da:	81a3      	strhne	r3, [r4, #12]
 800c5dc:	bd10      	pop	{r4, pc}

0800c5de <__sclose>:
 800c5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e2:	f000 b80d 	b.w	800c600 <_close_r>

0800c5e6 <memset>:
 800c5e6:	4402      	add	r2, r0
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d100      	bne.n	800c5f0 <memset+0xa>
 800c5ee:	4770      	bx	lr
 800c5f0:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f4:	e7f9      	b.n	800c5ea <memset+0x4>
	...

0800c5f8 <_localeconv_r>:
 800c5f8:	4800      	ldr	r0, [pc, #0]	@ (800c5fc <_localeconv_r+0x4>)
 800c5fa:	4770      	bx	lr
 800c5fc:	20040208 	.word	0x20040208

0800c600 <_close_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	@ (800c61c <_close_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f6 fb62 	bl	8002cd4 <_close>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_close_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_close_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20040ac0 	.word	0x20040ac0

0800c620 <_lseek_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d07      	ldr	r5, [pc, #28]	@ (800c640 <_lseek_r+0x20>)
 800c624:	4604      	mov	r4, r0
 800c626:	4608      	mov	r0, r1
 800c628:	4611      	mov	r1, r2
 800c62a:	2200      	movs	r2, #0
 800c62c:	602a      	str	r2, [r5, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f7f6 fb77 	bl	8002d22 <_lseek>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_lseek_r+0x1e>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_lseek_r+0x1e>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	20040ac0 	.word	0x20040ac0

0800c644 <_read_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	@ (800c664 <_read_r+0x20>)
 800c648:	4604      	mov	r4, r0
 800c64a:	4608      	mov	r0, r1
 800c64c:	4611      	mov	r1, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	602a      	str	r2, [r5, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	f7f6 fb05 	bl	8002c62 <_read>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	d102      	bne.n	800c662 <_read_r+0x1e>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b103      	cbz	r3, 800c662 <_read_r+0x1e>
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	20040ac0 	.word	0x20040ac0

0800c668 <_write_r>:
 800c668:	b538      	push	{r3, r4, r5, lr}
 800c66a:	4d07      	ldr	r5, [pc, #28]	@ (800c688 <_write_r+0x20>)
 800c66c:	4604      	mov	r4, r0
 800c66e:	4608      	mov	r0, r1
 800c670:	4611      	mov	r1, r2
 800c672:	2200      	movs	r2, #0
 800c674:	602a      	str	r2, [r5, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	f7f6 fb10 	bl	8002c9c <_write>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d102      	bne.n	800c686 <_write_r+0x1e>
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	b103      	cbz	r3, 800c686 <_write_r+0x1e>
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	bd38      	pop	{r3, r4, r5, pc}
 800c688:	20040ac0 	.word	0x20040ac0

0800c68c <__errno>:
 800c68c:	4b01      	ldr	r3, [pc, #4]	@ (800c694 <__errno+0x8>)
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	200400c8 	.word	0x200400c8

0800c698 <__libc_init_array>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	4d0d      	ldr	r5, [pc, #52]	@ (800c6d0 <__libc_init_array+0x38>)
 800c69c:	4c0d      	ldr	r4, [pc, #52]	@ (800c6d4 <__libc_init_array+0x3c>)
 800c69e:	1b64      	subs	r4, r4, r5
 800c6a0:	10a4      	asrs	r4, r4, #2
 800c6a2:	2600      	movs	r6, #0
 800c6a4:	42a6      	cmp	r6, r4
 800c6a6:	d109      	bne.n	800c6bc <__libc_init_array+0x24>
 800c6a8:	4d0b      	ldr	r5, [pc, #44]	@ (800c6d8 <__libc_init_array+0x40>)
 800c6aa:	4c0c      	ldr	r4, [pc, #48]	@ (800c6dc <__libc_init_array+0x44>)
 800c6ac:	f002 f866 	bl	800e77c <_init>
 800c6b0:	1b64      	subs	r4, r4, r5
 800c6b2:	10a4      	asrs	r4, r4, #2
 800c6b4:	2600      	movs	r6, #0
 800c6b6:	42a6      	cmp	r6, r4
 800c6b8:	d105      	bne.n	800c6c6 <__libc_init_array+0x2e>
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6c0:	4798      	blx	r3
 800c6c2:	3601      	adds	r6, #1
 800c6c4:	e7ee      	b.n	800c6a4 <__libc_init_array+0xc>
 800c6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ca:	4798      	blx	r3
 800c6cc:	3601      	adds	r6, #1
 800c6ce:	e7f2      	b.n	800c6b6 <__libc_init_array+0x1e>
 800c6d0:	0809d1dc 	.word	0x0809d1dc
 800c6d4:	0809d1dc 	.word	0x0809d1dc
 800c6d8:	0809d1dc 	.word	0x0809d1dc
 800c6dc:	0809d1e0 	.word	0x0809d1e0

0800c6e0 <__retarget_lock_init_recursive>:
 800c6e0:	4770      	bx	lr

0800c6e2 <__retarget_lock_acquire_recursive>:
 800c6e2:	4770      	bx	lr

0800c6e4 <__retarget_lock_release_recursive>:
 800c6e4:	4770      	bx	lr
	...

0800c6e8 <__assert_func>:
 800c6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	4b09      	ldr	r3, [pc, #36]	@ (800c714 <__assert_func+0x2c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	68d8      	ldr	r0, [r3, #12]
 800c6f6:	b954      	cbnz	r4, 800c70e <__assert_func+0x26>
 800c6f8:	4b07      	ldr	r3, [pc, #28]	@ (800c718 <__assert_func+0x30>)
 800c6fa:	461c      	mov	r4, r3
 800c6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c700:	9100      	str	r1, [sp, #0]
 800c702:	462b      	mov	r3, r5
 800c704:	4905      	ldr	r1, [pc, #20]	@ (800c71c <__assert_func+0x34>)
 800c706:	f001 fe23 	bl	800e350 <fiprintf>
 800c70a:	f001 feff 	bl	800e50c <abort>
 800c70e:	4b04      	ldr	r3, [pc, #16]	@ (800c720 <__assert_func+0x38>)
 800c710:	e7f4      	b.n	800c6fc <__assert_func+0x14>
 800c712:	bf00      	nop
 800c714:	200400c8 	.word	0x200400c8
 800c718:	0809ceea 	.word	0x0809ceea
 800c71c:	0809cebc 	.word	0x0809cebc
 800c720:	0809ceaf 	.word	0x0809ceaf

0800c724 <quorem>:
 800c724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	6903      	ldr	r3, [r0, #16]
 800c72a:	690c      	ldr	r4, [r1, #16]
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	4607      	mov	r7, r0
 800c730:	db7e      	blt.n	800c830 <quorem+0x10c>
 800c732:	3c01      	subs	r4, #1
 800c734:	f101 0814 	add.w	r8, r1, #20
 800c738:	00a3      	lsls	r3, r4, #2
 800c73a:	f100 0514 	add.w	r5, r0, #20
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c744:	9301      	str	r3, [sp, #4]
 800c746:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c74a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c74e:	3301      	adds	r3, #1
 800c750:	429a      	cmp	r2, r3
 800c752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c756:	fbb2 f6f3 	udiv	r6, r2, r3
 800c75a:	d32e      	bcc.n	800c7ba <quorem+0x96>
 800c75c:	f04f 0a00 	mov.w	sl, #0
 800c760:	46c4      	mov	ip, r8
 800c762:	46ae      	mov	lr, r5
 800c764:	46d3      	mov	fp, sl
 800c766:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c76a:	b298      	uxth	r0, r3
 800c76c:	fb06 a000 	mla	r0, r6, r0, sl
 800c770:	0c02      	lsrs	r2, r0, #16
 800c772:	0c1b      	lsrs	r3, r3, #16
 800c774:	fb06 2303 	mla	r3, r6, r3, r2
 800c778:	f8de 2000 	ldr.w	r2, [lr]
 800c77c:	b280      	uxth	r0, r0
 800c77e:	b292      	uxth	r2, r2
 800c780:	1a12      	subs	r2, r2, r0
 800c782:	445a      	add	r2, fp
 800c784:	f8de 0000 	ldr.w	r0, [lr]
 800c788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c792:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c796:	b292      	uxth	r2, r2
 800c798:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c79c:	45e1      	cmp	r9, ip
 800c79e:	f84e 2b04 	str.w	r2, [lr], #4
 800c7a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c7a6:	d2de      	bcs.n	800c766 <quorem+0x42>
 800c7a8:	9b00      	ldr	r3, [sp, #0]
 800c7aa:	58eb      	ldr	r3, [r5, r3]
 800c7ac:	b92b      	cbnz	r3, 800c7ba <quorem+0x96>
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	3b04      	subs	r3, #4
 800c7b2:	429d      	cmp	r5, r3
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	d32f      	bcc.n	800c818 <quorem+0xf4>
 800c7b8:	613c      	str	r4, [r7, #16]
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	f001 f97a 	bl	800dab4 <__mcmp>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	db25      	blt.n	800c810 <quorem+0xec>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c7cc:	f8d1 c000 	ldr.w	ip, [r1]
 800c7d0:	fa1f fe82 	uxth.w	lr, r2
 800c7d4:	fa1f f38c 	uxth.w	r3, ip
 800c7d8:	eba3 030e 	sub.w	r3, r3, lr
 800c7dc:	4403      	add	r3, r0
 800c7de:	0c12      	lsrs	r2, r2, #16
 800c7e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c7e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7ee:	45c1      	cmp	r9, r8
 800c7f0:	f841 3b04 	str.w	r3, [r1], #4
 800c7f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c7f8:	d2e6      	bcs.n	800c7c8 <quorem+0xa4>
 800c7fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c802:	b922      	cbnz	r2, 800c80e <quorem+0xea>
 800c804:	3b04      	subs	r3, #4
 800c806:	429d      	cmp	r5, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	d30b      	bcc.n	800c824 <quorem+0x100>
 800c80c:	613c      	str	r4, [r7, #16]
 800c80e:	3601      	adds	r6, #1
 800c810:	4630      	mov	r0, r6
 800c812:	b003      	add	sp, #12
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	6812      	ldr	r2, [r2, #0]
 800c81a:	3b04      	subs	r3, #4
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	d1cb      	bne.n	800c7b8 <quorem+0x94>
 800c820:	3c01      	subs	r4, #1
 800c822:	e7c6      	b.n	800c7b2 <quorem+0x8e>
 800c824:	6812      	ldr	r2, [r2, #0]
 800c826:	3b04      	subs	r3, #4
 800c828:	2a00      	cmp	r2, #0
 800c82a:	d1ef      	bne.n	800c80c <quorem+0xe8>
 800c82c:	3c01      	subs	r4, #1
 800c82e:	e7ea      	b.n	800c806 <quorem+0xe2>
 800c830:	2000      	movs	r0, #0
 800c832:	e7ee      	b.n	800c812 <quorem+0xee>
 800c834:	0000      	movs	r0, r0
	...

0800c838 <_dtoa_r>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	69c7      	ldr	r7, [r0, #28]
 800c83e:	b099      	sub	sp, #100	@ 0x64
 800c840:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c844:	ec55 4b10 	vmov	r4, r5, d0
 800c848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c84a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c84c:	4683      	mov	fp, r0
 800c84e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c850:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c852:	b97f      	cbnz	r7, 800c874 <_dtoa_r+0x3c>
 800c854:	2010      	movs	r0, #16
 800c856:	f000 fdfd 	bl	800d454 <malloc>
 800c85a:	4602      	mov	r2, r0
 800c85c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c860:	b920      	cbnz	r0, 800c86c <_dtoa_r+0x34>
 800c862:	4ba7      	ldr	r3, [pc, #668]	@ (800cb00 <_dtoa_r+0x2c8>)
 800c864:	21ef      	movs	r1, #239	@ 0xef
 800c866:	48a7      	ldr	r0, [pc, #668]	@ (800cb04 <_dtoa_r+0x2cc>)
 800c868:	f7ff ff3e 	bl	800c6e8 <__assert_func>
 800c86c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c870:	6007      	str	r7, [r0, #0]
 800c872:	60c7      	str	r7, [r0, #12]
 800c874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c878:	6819      	ldr	r1, [r3, #0]
 800c87a:	b159      	cbz	r1, 800c894 <_dtoa_r+0x5c>
 800c87c:	685a      	ldr	r2, [r3, #4]
 800c87e:	604a      	str	r2, [r1, #4]
 800c880:	2301      	movs	r3, #1
 800c882:	4093      	lsls	r3, r2
 800c884:	608b      	str	r3, [r1, #8]
 800c886:	4658      	mov	r0, fp
 800c888:	f000 feda 	bl	800d640 <_Bfree>
 800c88c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	1e2b      	subs	r3, r5, #0
 800c896:	bfb9      	ittee	lt
 800c898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c89c:	9303      	strlt	r3, [sp, #12]
 800c89e:	2300      	movge	r3, #0
 800c8a0:	6033      	strge	r3, [r6, #0]
 800c8a2:	9f03      	ldr	r7, [sp, #12]
 800c8a4:	4b98      	ldr	r3, [pc, #608]	@ (800cb08 <_dtoa_r+0x2d0>)
 800c8a6:	bfbc      	itt	lt
 800c8a8:	2201      	movlt	r2, #1
 800c8aa:	6032      	strlt	r2, [r6, #0]
 800c8ac:	43bb      	bics	r3, r7
 800c8ae:	d112      	bne.n	800c8d6 <_dtoa_r+0x9e>
 800c8b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c8b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8bc:	4323      	orrs	r3, r4
 800c8be:	f000 854d 	beq.w	800d35c <_dtoa_r+0xb24>
 800c8c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cb1c <_dtoa_r+0x2e4>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 854f 	beq.w	800d36c <_dtoa_r+0xb34>
 800c8ce:	f10a 0303 	add.w	r3, sl, #3
 800c8d2:	f000 bd49 	b.w	800d368 <_dtoa_r+0xb30>
 800c8d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	ec51 0b17 	vmov	r0, r1, d7
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c8e6:	f7f4 f907 	bl	8000af8 <__aeabi_dcmpeq>
 800c8ea:	4680      	mov	r8, r0
 800c8ec:	b158      	cbz	r0, 800c906 <_dtoa_r+0xce>
 800c8ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8f6:	b113      	cbz	r3, 800c8fe <_dtoa_r+0xc6>
 800c8f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c8fa:	4b84      	ldr	r3, [pc, #528]	@ (800cb0c <_dtoa_r+0x2d4>)
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cb20 <_dtoa_r+0x2e8>
 800c902:	f000 bd33 	b.w	800d36c <_dtoa_r+0xb34>
 800c906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c90a:	aa16      	add	r2, sp, #88	@ 0x58
 800c90c:	a917      	add	r1, sp, #92	@ 0x5c
 800c90e:	4658      	mov	r0, fp
 800c910:	f001 f980 	bl	800dc14 <__d2b>
 800c914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c918:	4681      	mov	r9, r0
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d077      	beq.n	800ca0e <_dtoa_r+0x1d6>
 800c91e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c92c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c938:	4619      	mov	r1, r3
 800c93a:	2200      	movs	r2, #0
 800c93c:	4b74      	ldr	r3, [pc, #464]	@ (800cb10 <_dtoa_r+0x2d8>)
 800c93e:	f7f3 fcbb 	bl	80002b8 <__aeabi_dsub>
 800c942:	a369      	add	r3, pc, #420	@ (adr r3, 800cae8 <_dtoa_r+0x2b0>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fe6e 	bl	8000628 <__aeabi_dmul>
 800c94c:	a368      	add	r3, pc, #416	@ (adr r3, 800caf0 <_dtoa_r+0x2b8>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	f7f3 fcb3 	bl	80002bc <__adddf3>
 800c956:	4604      	mov	r4, r0
 800c958:	4630      	mov	r0, r6
 800c95a:	460d      	mov	r5, r1
 800c95c:	f7f3 fdfa 	bl	8000554 <__aeabi_i2d>
 800c960:	a365      	add	r3, pc, #404	@ (adr r3, 800caf8 <_dtoa_r+0x2c0>)
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	f7f3 fe5f 	bl	8000628 <__aeabi_dmul>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4620      	mov	r0, r4
 800c970:	4629      	mov	r1, r5
 800c972:	f7f3 fca3 	bl	80002bc <__adddf3>
 800c976:	4604      	mov	r4, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	f7f4 f905 	bl	8000b88 <__aeabi_d2iz>
 800c97e:	2200      	movs	r2, #0
 800c980:	4607      	mov	r7, r0
 800c982:	2300      	movs	r3, #0
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f7f4 f8c0 	bl	8000b0c <__aeabi_dcmplt>
 800c98c:	b140      	cbz	r0, 800c9a0 <_dtoa_r+0x168>
 800c98e:	4638      	mov	r0, r7
 800c990:	f7f3 fde0 	bl	8000554 <__aeabi_i2d>
 800c994:	4622      	mov	r2, r4
 800c996:	462b      	mov	r3, r5
 800c998:	f7f4 f8ae 	bl	8000af8 <__aeabi_dcmpeq>
 800c99c:	b900      	cbnz	r0, 800c9a0 <_dtoa_r+0x168>
 800c99e:	3f01      	subs	r7, #1
 800c9a0:	2f16      	cmp	r7, #22
 800c9a2:	d851      	bhi.n	800ca48 <_dtoa_r+0x210>
 800c9a4:	4b5b      	ldr	r3, [pc, #364]	@ (800cb14 <_dtoa_r+0x2dc>)
 800c9a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9b2:	f7f4 f8ab 	bl	8000b0c <__aeabi_dcmplt>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d048      	beq.n	800ca4c <_dtoa_r+0x214>
 800c9ba:	3f01      	subs	r7, #1
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9312      	str	r3, [sp, #72]	@ 0x48
 800c9c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c9c2:	1b9b      	subs	r3, r3, r6
 800c9c4:	1e5a      	subs	r2, r3, #1
 800c9c6:	bf44      	itt	mi
 800c9c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c9cc:	2300      	movmi	r3, #0
 800c9ce:	9208      	str	r2, [sp, #32]
 800c9d0:	bf54      	ite	pl
 800c9d2:	f04f 0800 	movpl.w	r8, #0
 800c9d6:	9308      	strmi	r3, [sp, #32]
 800c9d8:	2f00      	cmp	r7, #0
 800c9da:	db39      	blt.n	800ca50 <_dtoa_r+0x218>
 800c9dc:	9b08      	ldr	r3, [sp, #32]
 800c9de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c9e0:	443b      	add	r3, r7
 800c9e2:	9308      	str	r3, [sp, #32]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ea:	2b09      	cmp	r3, #9
 800c9ec:	d864      	bhi.n	800cab8 <_dtoa_r+0x280>
 800c9ee:	2b05      	cmp	r3, #5
 800c9f0:	bfc4      	itt	gt
 800c9f2:	3b04      	subgt	r3, #4
 800c9f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f8:	f1a3 0302 	sub.w	r3, r3, #2
 800c9fc:	bfcc      	ite	gt
 800c9fe:	2400      	movgt	r4, #0
 800ca00:	2401      	movle	r4, #1
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d863      	bhi.n	800cace <_dtoa_r+0x296>
 800ca06:	e8df f003 	tbb	[pc, r3]
 800ca0a:	372a      	.short	0x372a
 800ca0c:	5535      	.short	0x5535
 800ca0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ca12:	441e      	add	r6, r3
 800ca14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ca18:	2b20      	cmp	r3, #32
 800ca1a:	bfc1      	itttt	gt
 800ca1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ca20:	409f      	lslgt	r7, r3
 800ca22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ca26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ca2a:	bfd6      	itet	le
 800ca2c:	f1c3 0320 	rsble	r3, r3, #32
 800ca30:	ea47 0003 	orrgt.w	r0, r7, r3
 800ca34:	fa04 f003 	lslle.w	r0, r4, r3
 800ca38:	f7f3 fd7c 	bl	8000534 <__aeabi_ui2d>
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ca42:	3e01      	subs	r6, #1
 800ca44:	9214      	str	r2, [sp, #80]	@ 0x50
 800ca46:	e777      	b.n	800c938 <_dtoa_r+0x100>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e7b8      	b.n	800c9be <_dtoa_r+0x186>
 800ca4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ca4e:	e7b7      	b.n	800c9c0 <_dtoa_r+0x188>
 800ca50:	427b      	negs	r3, r7
 800ca52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca54:	2300      	movs	r3, #0
 800ca56:	eba8 0807 	sub.w	r8, r8, r7
 800ca5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca5c:	e7c4      	b.n	800c9e8 <_dtoa_r+0x1b0>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	dc35      	bgt.n	800cad4 <_dtoa_r+0x29c>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	9307      	str	r3, [sp, #28]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca72:	e00b      	b.n	800ca8c <_dtoa_r+0x254>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e7f3      	b.n	800ca60 <_dtoa_r+0x228>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca7e:	18fb      	adds	r3, r7, r3
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	3301      	adds	r3, #1
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	bfb8      	it	lt
 800ca8a:	2301      	movlt	r3, #1
 800ca8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ca90:	2100      	movs	r1, #0
 800ca92:	2204      	movs	r2, #4
 800ca94:	f102 0514 	add.w	r5, r2, #20
 800ca98:	429d      	cmp	r5, r3
 800ca9a:	d91f      	bls.n	800cadc <_dtoa_r+0x2a4>
 800ca9c:	6041      	str	r1, [r0, #4]
 800ca9e:	4658      	mov	r0, fp
 800caa0:	f000 fd8e 	bl	800d5c0 <_Balloc>
 800caa4:	4682      	mov	sl, r0
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d13c      	bne.n	800cb24 <_dtoa_r+0x2ec>
 800caaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cb18 <_dtoa_r+0x2e0>)
 800caac:	4602      	mov	r2, r0
 800caae:	f240 11af 	movw	r1, #431	@ 0x1af
 800cab2:	e6d8      	b.n	800c866 <_dtoa_r+0x2e>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e7e0      	b.n	800ca7a <_dtoa_r+0x242>
 800cab8:	2401      	movs	r4, #1
 800caba:	2300      	movs	r3, #0
 800cabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cabe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cac0:	f04f 33ff 	mov.w	r3, #4294967295
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	9307      	str	r3, [sp, #28]
 800cac8:	2200      	movs	r2, #0
 800caca:	2312      	movs	r3, #18
 800cacc:	e7d0      	b.n	800ca70 <_dtoa_r+0x238>
 800cace:	2301      	movs	r3, #1
 800cad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cad2:	e7f5      	b.n	800cac0 <_dtoa_r+0x288>
 800cad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	9307      	str	r3, [sp, #28]
 800cada:	e7d7      	b.n	800ca8c <_dtoa_r+0x254>
 800cadc:	3101      	adds	r1, #1
 800cade:	0052      	lsls	r2, r2, #1
 800cae0:	e7d8      	b.n	800ca94 <_dtoa_r+0x25c>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	636f4361 	.word	0x636f4361
 800caec:	3fd287a7 	.word	0x3fd287a7
 800caf0:	8b60c8b3 	.word	0x8b60c8b3
 800caf4:	3fc68a28 	.word	0x3fc68a28
 800caf8:	509f79fb 	.word	0x509f79fb
 800cafc:	3fd34413 	.word	0x3fd34413
 800cb00:	0809ce0c 	.word	0x0809ce0c
 800cb04:	0809cef8 	.word	0x0809cef8
 800cb08:	7ff00000 	.word	0x7ff00000
 800cb0c:	0809ce8c 	.word	0x0809ce8c
 800cb10:	3ff80000 	.word	0x3ff80000
 800cb14:	0809cff0 	.word	0x0809cff0
 800cb18:	0809cf50 	.word	0x0809cf50
 800cb1c:	0809cef4 	.word	0x0809cef4
 800cb20:	0809ce8b 	.word	0x0809ce8b
 800cb24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb28:	6018      	str	r0, [r3, #0]
 800cb2a:	9b07      	ldr	r3, [sp, #28]
 800cb2c:	2b0e      	cmp	r3, #14
 800cb2e:	f200 80a4 	bhi.w	800cc7a <_dtoa_r+0x442>
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	f000 80a1 	beq.w	800cc7a <_dtoa_r+0x442>
 800cb38:	2f00      	cmp	r7, #0
 800cb3a:	dd33      	ble.n	800cba4 <_dtoa_r+0x36c>
 800cb3c:	4bad      	ldr	r3, [pc, #692]	@ (800cdf4 <_dtoa_r+0x5bc>)
 800cb3e:	f007 020f 	and.w	r2, r7, #15
 800cb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb46:	ed93 7b00 	vldr	d7, [r3]
 800cb4a:	05f8      	lsls	r0, r7, #23
 800cb4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cb54:	d516      	bpl.n	800cb84 <_dtoa_r+0x34c>
 800cb56:	4ba8      	ldr	r3, [pc, #672]	@ (800cdf8 <_dtoa_r+0x5c0>)
 800cb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb60:	f7f3 fe8c 	bl	800087c <__aeabi_ddiv>
 800cb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb68:	f004 040f 	and.w	r4, r4, #15
 800cb6c:	2603      	movs	r6, #3
 800cb6e:	4da2      	ldr	r5, [pc, #648]	@ (800cdf8 <_dtoa_r+0x5c0>)
 800cb70:	b954      	cbnz	r4, 800cb88 <_dtoa_r+0x350>
 800cb72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb7a:	f7f3 fe7f 	bl	800087c <__aeabi_ddiv>
 800cb7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb82:	e028      	b.n	800cbd6 <_dtoa_r+0x39e>
 800cb84:	2602      	movs	r6, #2
 800cb86:	e7f2      	b.n	800cb6e <_dtoa_r+0x336>
 800cb88:	07e1      	lsls	r1, r4, #31
 800cb8a:	d508      	bpl.n	800cb9e <_dtoa_r+0x366>
 800cb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb94:	f7f3 fd48 	bl	8000628 <__aeabi_dmul>
 800cb98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb9c:	3601      	adds	r6, #1
 800cb9e:	1064      	asrs	r4, r4, #1
 800cba0:	3508      	adds	r5, #8
 800cba2:	e7e5      	b.n	800cb70 <_dtoa_r+0x338>
 800cba4:	f000 80d2 	beq.w	800cd4c <_dtoa_r+0x514>
 800cba8:	427c      	negs	r4, r7
 800cbaa:	4b92      	ldr	r3, [pc, #584]	@ (800cdf4 <_dtoa_r+0x5bc>)
 800cbac:	4d92      	ldr	r5, [pc, #584]	@ (800cdf8 <_dtoa_r+0x5c0>)
 800cbae:	f004 020f 	and.w	r2, r4, #15
 800cbb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbbe:	f7f3 fd33 	bl	8000628 <__aeabi_dmul>
 800cbc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbc6:	1124      	asrs	r4, r4, #4
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2602      	movs	r6, #2
 800cbcc:	2c00      	cmp	r4, #0
 800cbce:	f040 80b2 	bne.w	800cd36 <_dtoa_r+0x4fe>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1d3      	bne.n	800cb7e <_dtoa_r+0x346>
 800cbd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80b7 	beq.w	800cd50 <_dtoa_r+0x518>
 800cbe2:	4b86      	ldr	r3, [pc, #536]	@ (800cdfc <_dtoa_r+0x5c4>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 ff8f 	bl	8000b0c <__aeabi_dcmplt>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	f000 80ae 	beq.w	800cd50 <_dtoa_r+0x518>
 800cbf4:	9b07      	ldr	r3, [sp, #28]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 80aa 	beq.w	800cd50 <_dtoa_r+0x518>
 800cbfc:	9b00      	ldr	r3, [sp, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	dd37      	ble.n	800cc72 <_dtoa_r+0x43a>
 800cc02:	1e7b      	subs	r3, r7, #1
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	4620      	mov	r0, r4
 800cc08:	4b7d      	ldr	r3, [pc, #500]	@ (800ce00 <_dtoa_r+0x5c8>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7f3 fd0b 	bl	8000628 <__aeabi_dmul>
 800cc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc16:	9c00      	ldr	r4, [sp, #0]
 800cc18:	3601      	adds	r6, #1
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7f3 fc9a 	bl	8000554 <__aeabi_i2d>
 800cc20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc24:	f7f3 fd00 	bl	8000628 <__aeabi_dmul>
 800cc28:	4b76      	ldr	r3, [pc, #472]	@ (800ce04 <_dtoa_r+0x5cc>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f7f3 fb46 	bl	80002bc <__adddf3>
 800cc30:	4605      	mov	r5, r0
 800cc32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	f040 808d 	bne.w	800cd56 <_dtoa_r+0x51e>
 800cc3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc40:	4b71      	ldr	r3, [pc, #452]	@ (800ce08 <_dtoa_r+0x5d0>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	f7f3 fb38 	bl	80002b8 <__aeabi_dsub>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc50:	462a      	mov	r2, r5
 800cc52:	4633      	mov	r3, r6
 800cc54:	f7f3 ff78 	bl	8000b48 <__aeabi_dcmpgt>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f040 828b 	bne.w	800d174 <_dtoa_r+0x93c>
 800cc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc62:	462a      	mov	r2, r5
 800cc64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cc68:	f7f3 ff50 	bl	8000b0c <__aeabi_dcmplt>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	f040 8128 	bne.w	800cec2 <_dtoa_r+0x68a>
 800cc72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cc76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cc7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f2c0 815a 	blt.w	800cf36 <_dtoa_r+0x6fe>
 800cc82:	2f0e      	cmp	r7, #14
 800cc84:	f300 8157 	bgt.w	800cf36 <_dtoa_r+0x6fe>
 800cc88:	4b5a      	ldr	r3, [pc, #360]	@ (800cdf4 <_dtoa_r+0x5bc>)
 800cc8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc8e:	ed93 7b00 	vldr	d7, [r3]
 800cc92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	ed8d 7b00 	vstr	d7, [sp]
 800cc9a:	da03      	bge.n	800cca4 <_dtoa_r+0x46c>
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f340 8101 	ble.w	800cea6 <_dtoa_r+0x66e>
 800cca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cca8:	4656      	mov	r6, sl
 800ccaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f7f3 fde3 	bl	800087c <__aeabi_ddiv>
 800ccb6:	f7f3 ff67 	bl	8000b88 <__aeabi_d2iz>
 800ccba:	4680      	mov	r8, r0
 800ccbc:	f7f3 fc4a 	bl	8000554 <__aeabi_i2d>
 800ccc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccc4:	f7f3 fcb0 	bl	8000628 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ccd4:	f7f3 faf0 	bl	80002b8 <__aeabi_dsub>
 800ccd8:	f806 4b01 	strb.w	r4, [r6], #1
 800ccdc:	9d07      	ldr	r5, [sp, #28]
 800ccde:	eba6 040a 	sub.w	r4, r6, sl
 800cce2:	42a5      	cmp	r5, r4
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	f040 8117 	bne.w	800cf1a <_dtoa_r+0x6e2>
 800ccec:	f7f3 fae6 	bl	80002bc <__adddf3>
 800ccf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	460d      	mov	r5, r1
 800ccf8:	f7f3 ff26 	bl	8000b48 <__aeabi_dcmpgt>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	f040 80f9 	bne.w	800cef4 <_dtoa_r+0x6bc>
 800cd02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd06:	4620      	mov	r0, r4
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7f3 fef5 	bl	8000af8 <__aeabi_dcmpeq>
 800cd0e:	b118      	cbz	r0, 800cd18 <_dtoa_r+0x4e0>
 800cd10:	f018 0f01 	tst.w	r8, #1
 800cd14:	f040 80ee 	bne.w	800cef4 <_dtoa_r+0x6bc>
 800cd18:	4649      	mov	r1, r9
 800cd1a:	4658      	mov	r0, fp
 800cd1c:	f000 fc90 	bl	800d640 <_Bfree>
 800cd20:	2300      	movs	r3, #0
 800cd22:	7033      	strb	r3, [r6, #0]
 800cd24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd26:	3701      	adds	r7, #1
 800cd28:	601f      	str	r7, [r3, #0]
 800cd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 831d 	beq.w	800d36c <_dtoa_r+0xb34>
 800cd32:	601e      	str	r6, [r3, #0]
 800cd34:	e31a      	b.n	800d36c <_dtoa_r+0xb34>
 800cd36:	07e2      	lsls	r2, r4, #31
 800cd38:	d505      	bpl.n	800cd46 <_dtoa_r+0x50e>
 800cd3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd3e:	f7f3 fc73 	bl	8000628 <__aeabi_dmul>
 800cd42:	3601      	adds	r6, #1
 800cd44:	2301      	movs	r3, #1
 800cd46:	1064      	asrs	r4, r4, #1
 800cd48:	3508      	adds	r5, #8
 800cd4a:	e73f      	b.n	800cbcc <_dtoa_r+0x394>
 800cd4c:	2602      	movs	r6, #2
 800cd4e:	e742      	b.n	800cbd6 <_dtoa_r+0x39e>
 800cd50:	9c07      	ldr	r4, [sp, #28]
 800cd52:	9704      	str	r7, [sp, #16]
 800cd54:	e761      	b.n	800cc1a <_dtoa_r+0x3e2>
 800cd56:	4b27      	ldr	r3, [pc, #156]	@ (800cdf4 <_dtoa_r+0x5bc>)
 800cd58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd62:	4454      	add	r4, sl
 800cd64:	2900      	cmp	r1, #0
 800cd66:	d053      	beq.n	800ce10 <_dtoa_r+0x5d8>
 800cd68:	4928      	ldr	r1, [pc, #160]	@ (800ce0c <_dtoa_r+0x5d4>)
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	f7f3 fd86 	bl	800087c <__aeabi_ddiv>
 800cd70:	4633      	mov	r3, r6
 800cd72:	462a      	mov	r2, r5
 800cd74:	f7f3 faa0 	bl	80002b8 <__aeabi_dsub>
 800cd78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd7c:	4656      	mov	r6, sl
 800cd7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd82:	f7f3 ff01 	bl	8000b88 <__aeabi_d2iz>
 800cd86:	4605      	mov	r5, r0
 800cd88:	f7f3 fbe4 	bl	8000554 <__aeabi_i2d>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd94:	f7f3 fa90 	bl	80002b8 <__aeabi_dsub>
 800cd98:	3530      	adds	r5, #48	@ 0x30
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cda2:	f806 5b01 	strb.w	r5, [r6], #1
 800cda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdaa:	f7f3 feaf 	bl	8000b0c <__aeabi_dcmplt>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d171      	bne.n	800ce96 <_dtoa_r+0x65e>
 800cdb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdb6:	4911      	ldr	r1, [pc, #68]	@ (800cdfc <_dtoa_r+0x5c4>)
 800cdb8:	2000      	movs	r0, #0
 800cdba:	f7f3 fa7d 	bl	80002b8 <__aeabi_dsub>
 800cdbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cdc2:	f7f3 fea3 	bl	8000b0c <__aeabi_dcmplt>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	f040 8095 	bne.w	800cef6 <_dtoa_r+0x6be>
 800cdcc:	42a6      	cmp	r6, r4
 800cdce:	f43f af50 	beq.w	800cc72 <_dtoa_r+0x43a>
 800cdd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cdd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ce00 <_dtoa_r+0x5c8>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fc25 	bl	8000628 <__aeabi_dmul>
 800cdde:	4b08      	ldr	r3, [pc, #32]	@ (800ce00 <_dtoa_r+0x5c8>)
 800cde0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cde4:	2200      	movs	r2, #0
 800cde6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdea:	f7f3 fc1d 	bl	8000628 <__aeabi_dmul>
 800cdee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdf2:	e7c4      	b.n	800cd7e <_dtoa_r+0x546>
 800cdf4:	0809cff0 	.word	0x0809cff0
 800cdf8:	0809cfc8 	.word	0x0809cfc8
 800cdfc:	3ff00000 	.word	0x3ff00000
 800ce00:	40240000 	.word	0x40240000
 800ce04:	401c0000 	.word	0x401c0000
 800ce08:	40140000 	.word	0x40140000
 800ce0c:	3fe00000 	.word	0x3fe00000
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	f7f3 fc08 	bl	8000628 <__aeabi_dmul>
 800ce18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ce1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ce1e:	4656      	mov	r6, sl
 800ce20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce24:	f7f3 feb0 	bl	8000b88 <__aeabi_d2iz>
 800ce28:	4605      	mov	r5, r0
 800ce2a:	f7f3 fb93 	bl	8000554 <__aeabi_i2d>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce36:	f7f3 fa3f 	bl	80002b8 <__aeabi_dsub>
 800ce3a:	3530      	adds	r5, #48	@ 0x30
 800ce3c:	f806 5b01 	strb.w	r5, [r6], #1
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	42a6      	cmp	r6, r4
 800ce46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce4a:	f04f 0200 	mov.w	r2, #0
 800ce4e:	d124      	bne.n	800ce9a <_dtoa_r+0x662>
 800ce50:	4bac      	ldr	r3, [pc, #688]	@ (800d104 <_dtoa_r+0x8cc>)
 800ce52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ce56:	f7f3 fa31 	bl	80002bc <__adddf3>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce62:	f7f3 fe71 	bl	8000b48 <__aeabi_dcmpgt>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d145      	bne.n	800cef6 <_dtoa_r+0x6be>
 800ce6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce6e:	49a5      	ldr	r1, [pc, #660]	@ (800d104 <_dtoa_r+0x8cc>)
 800ce70:	2000      	movs	r0, #0
 800ce72:	f7f3 fa21 	bl	80002b8 <__aeabi_dsub>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce7e:	f7f3 fe45 	bl	8000b0c <__aeabi_dcmplt>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	f43f aef5 	beq.w	800cc72 <_dtoa_r+0x43a>
 800ce88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ce8a:	1e73      	subs	r3, r6, #1
 800ce8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ce8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce92:	2b30      	cmp	r3, #48	@ 0x30
 800ce94:	d0f8      	beq.n	800ce88 <_dtoa_r+0x650>
 800ce96:	9f04      	ldr	r7, [sp, #16]
 800ce98:	e73e      	b.n	800cd18 <_dtoa_r+0x4e0>
 800ce9a:	4b9b      	ldr	r3, [pc, #620]	@ (800d108 <_dtoa_r+0x8d0>)
 800ce9c:	f7f3 fbc4 	bl	8000628 <__aeabi_dmul>
 800cea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cea4:	e7bc      	b.n	800ce20 <_dtoa_r+0x5e8>
 800cea6:	d10c      	bne.n	800cec2 <_dtoa_r+0x68a>
 800cea8:	4b98      	ldr	r3, [pc, #608]	@ (800d10c <_dtoa_r+0x8d4>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceb0:	f7f3 fbba 	bl	8000628 <__aeabi_dmul>
 800ceb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ceb8:	f7f3 fe3c 	bl	8000b34 <__aeabi_dcmpge>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	f000 8157 	beq.w	800d170 <_dtoa_r+0x938>
 800cec2:	2400      	movs	r4, #0
 800cec4:	4625      	mov	r5, r4
 800cec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cec8:	43db      	mvns	r3, r3
 800ceca:	9304      	str	r3, [sp, #16]
 800cecc:	4656      	mov	r6, sl
 800cece:	2700      	movs	r7, #0
 800ced0:	4621      	mov	r1, r4
 800ced2:	4658      	mov	r0, fp
 800ced4:	f000 fbb4 	bl	800d640 <_Bfree>
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	d0dc      	beq.n	800ce96 <_dtoa_r+0x65e>
 800cedc:	b12f      	cbz	r7, 800ceea <_dtoa_r+0x6b2>
 800cede:	42af      	cmp	r7, r5
 800cee0:	d003      	beq.n	800ceea <_dtoa_r+0x6b2>
 800cee2:	4639      	mov	r1, r7
 800cee4:	4658      	mov	r0, fp
 800cee6:	f000 fbab 	bl	800d640 <_Bfree>
 800ceea:	4629      	mov	r1, r5
 800ceec:	4658      	mov	r0, fp
 800ceee:	f000 fba7 	bl	800d640 <_Bfree>
 800cef2:	e7d0      	b.n	800ce96 <_dtoa_r+0x65e>
 800cef4:	9704      	str	r7, [sp, #16]
 800cef6:	4633      	mov	r3, r6
 800cef8:	461e      	mov	r6, r3
 800cefa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cefe:	2a39      	cmp	r2, #57	@ 0x39
 800cf00:	d107      	bne.n	800cf12 <_dtoa_r+0x6da>
 800cf02:	459a      	cmp	sl, r3
 800cf04:	d1f8      	bne.n	800cef8 <_dtoa_r+0x6c0>
 800cf06:	9a04      	ldr	r2, [sp, #16]
 800cf08:	3201      	adds	r2, #1
 800cf0a:	9204      	str	r2, [sp, #16]
 800cf0c:	2230      	movs	r2, #48	@ 0x30
 800cf0e:	f88a 2000 	strb.w	r2, [sl]
 800cf12:	781a      	ldrb	r2, [r3, #0]
 800cf14:	3201      	adds	r2, #1
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	e7bd      	b.n	800ce96 <_dtoa_r+0x65e>
 800cf1a:	4b7b      	ldr	r3, [pc, #492]	@ (800d108 <_dtoa_r+0x8d0>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f7f3 fb83 	bl	8000628 <__aeabi_dmul>
 800cf22:	2200      	movs	r2, #0
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	460d      	mov	r5, r1
 800cf2a:	f7f3 fde5 	bl	8000af8 <__aeabi_dcmpeq>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f43f aebb 	beq.w	800ccaa <_dtoa_r+0x472>
 800cf34:	e6f0      	b.n	800cd18 <_dtoa_r+0x4e0>
 800cf36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf38:	2a00      	cmp	r2, #0
 800cf3a:	f000 80db 	beq.w	800d0f4 <_dtoa_r+0x8bc>
 800cf3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf40:	2a01      	cmp	r2, #1
 800cf42:	f300 80bf 	bgt.w	800d0c4 <_dtoa_r+0x88c>
 800cf46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	f000 80b7 	beq.w	800d0bc <_dtoa_r+0x884>
 800cf4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cf52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf54:	4646      	mov	r6, r8
 800cf56:	9a08      	ldr	r2, [sp, #32]
 800cf58:	2101      	movs	r1, #1
 800cf5a:	441a      	add	r2, r3
 800cf5c:	4658      	mov	r0, fp
 800cf5e:	4498      	add	r8, r3
 800cf60:	9208      	str	r2, [sp, #32]
 800cf62:	f000 fc21 	bl	800d7a8 <__i2b>
 800cf66:	4605      	mov	r5, r0
 800cf68:	b15e      	cbz	r6, 800cf82 <_dtoa_r+0x74a>
 800cf6a:	9b08      	ldr	r3, [sp, #32]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dd08      	ble.n	800cf82 <_dtoa_r+0x74a>
 800cf70:	42b3      	cmp	r3, r6
 800cf72:	9a08      	ldr	r2, [sp, #32]
 800cf74:	bfa8      	it	ge
 800cf76:	4633      	movge	r3, r6
 800cf78:	eba8 0803 	sub.w	r8, r8, r3
 800cf7c:	1af6      	subs	r6, r6, r3
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	9308      	str	r3, [sp, #32]
 800cf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf84:	b1f3      	cbz	r3, 800cfc4 <_dtoa_r+0x78c>
 800cf86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 80b7 	beq.w	800d0fc <_dtoa_r+0x8c4>
 800cf8e:	b18c      	cbz	r4, 800cfb4 <_dtoa_r+0x77c>
 800cf90:	4629      	mov	r1, r5
 800cf92:	4622      	mov	r2, r4
 800cf94:	4658      	mov	r0, fp
 800cf96:	f000 fcc7 	bl	800d928 <__pow5mult>
 800cf9a:	464a      	mov	r2, r9
 800cf9c:	4601      	mov	r1, r0
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	4658      	mov	r0, fp
 800cfa2:	f000 fc17 	bl	800d7d4 <__multiply>
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	9004      	str	r0, [sp, #16]
 800cfaa:	4658      	mov	r0, fp
 800cfac:	f000 fb48 	bl	800d640 <_Bfree>
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	4699      	mov	r9, r3
 800cfb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb6:	1b1a      	subs	r2, r3, r4
 800cfb8:	d004      	beq.n	800cfc4 <_dtoa_r+0x78c>
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4658      	mov	r0, fp
 800cfbe:	f000 fcb3 	bl	800d928 <__pow5mult>
 800cfc2:	4681      	mov	r9, r0
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	4658      	mov	r0, fp
 800cfc8:	f000 fbee 	bl	800d7a8 <__i2b>
 800cfcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfce:	4604      	mov	r4, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 81cf 	beq.w	800d374 <_dtoa_r+0xb3c>
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4658      	mov	r0, fp
 800cfdc:	f000 fca4 	bl	800d928 <__pow5mult>
 800cfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	f300 8095 	bgt.w	800d114 <_dtoa_r+0x8dc>
 800cfea:	9b02      	ldr	r3, [sp, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f040 8087 	bne.w	800d100 <_dtoa_r+0x8c8>
 800cff2:	9b03      	ldr	r3, [sp, #12]
 800cff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f040 8089 	bne.w	800d110 <_dtoa_r+0x8d8>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d004:	0d1b      	lsrs	r3, r3, #20
 800d006:	051b      	lsls	r3, r3, #20
 800d008:	b12b      	cbz	r3, 800d016 <_dtoa_r+0x7de>
 800d00a:	9b08      	ldr	r3, [sp, #32]
 800d00c:	3301      	adds	r3, #1
 800d00e:	9308      	str	r3, [sp, #32]
 800d010:	f108 0801 	add.w	r8, r8, #1
 800d014:	2301      	movs	r3, #1
 800d016:	930a      	str	r3, [sp, #40]	@ 0x28
 800d018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 81b0 	beq.w	800d380 <_dtoa_r+0xb48>
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d026:	6918      	ldr	r0, [r3, #16]
 800d028:	f000 fb72 	bl	800d710 <__hi0bits>
 800d02c:	f1c0 0020 	rsb	r0, r0, #32
 800d030:	9b08      	ldr	r3, [sp, #32]
 800d032:	4418      	add	r0, r3
 800d034:	f010 001f 	ands.w	r0, r0, #31
 800d038:	d077      	beq.n	800d12a <_dtoa_r+0x8f2>
 800d03a:	f1c0 0320 	rsb	r3, r0, #32
 800d03e:	2b04      	cmp	r3, #4
 800d040:	dd6b      	ble.n	800d11a <_dtoa_r+0x8e2>
 800d042:	9b08      	ldr	r3, [sp, #32]
 800d044:	f1c0 001c 	rsb	r0, r0, #28
 800d048:	4403      	add	r3, r0
 800d04a:	4480      	add	r8, r0
 800d04c:	4406      	add	r6, r0
 800d04e:	9308      	str	r3, [sp, #32]
 800d050:	f1b8 0f00 	cmp.w	r8, #0
 800d054:	dd05      	ble.n	800d062 <_dtoa_r+0x82a>
 800d056:	4649      	mov	r1, r9
 800d058:	4642      	mov	r2, r8
 800d05a:	4658      	mov	r0, fp
 800d05c:	f000 fcbe 	bl	800d9dc <__lshift>
 800d060:	4681      	mov	r9, r0
 800d062:	9b08      	ldr	r3, [sp, #32]
 800d064:	2b00      	cmp	r3, #0
 800d066:	dd05      	ble.n	800d074 <_dtoa_r+0x83c>
 800d068:	4621      	mov	r1, r4
 800d06a:	461a      	mov	r2, r3
 800d06c:	4658      	mov	r0, fp
 800d06e:	f000 fcb5 	bl	800d9dc <__lshift>
 800d072:	4604      	mov	r4, r0
 800d074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d076:	2b00      	cmp	r3, #0
 800d078:	d059      	beq.n	800d12e <_dtoa_r+0x8f6>
 800d07a:	4621      	mov	r1, r4
 800d07c:	4648      	mov	r0, r9
 800d07e:	f000 fd19 	bl	800dab4 <__mcmp>
 800d082:	2800      	cmp	r0, #0
 800d084:	da53      	bge.n	800d12e <_dtoa_r+0x8f6>
 800d086:	1e7b      	subs	r3, r7, #1
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	4649      	mov	r1, r9
 800d08c:	2300      	movs	r3, #0
 800d08e:	220a      	movs	r2, #10
 800d090:	4658      	mov	r0, fp
 800d092:	f000 faf7 	bl	800d684 <__multadd>
 800d096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d098:	4681      	mov	r9, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 8172 	beq.w	800d384 <_dtoa_r+0xb4c>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	220a      	movs	r2, #10
 800d0a6:	4658      	mov	r0, fp
 800d0a8:	f000 faec 	bl	800d684 <__multadd>
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	dc67      	bgt.n	800d184 <_dtoa_r+0x94c>
 800d0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	dc41      	bgt.n	800d13e <_dtoa_r+0x906>
 800d0ba:	e063      	b.n	800d184 <_dtoa_r+0x94c>
 800d0bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d0c2:	e746      	b.n	800cf52 <_dtoa_r+0x71a>
 800d0c4:	9b07      	ldr	r3, [sp, #28]
 800d0c6:	1e5c      	subs	r4, r3, #1
 800d0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0ca:	42a3      	cmp	r3, r4
 800d0cc:	bfbf      	itttt	lt
 800d0ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d0d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d0d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d0d4:	1ae3      	sublt	r3, r4, r3
 800d0d6:	bfb4      	ite	lt
 800d0d8:	18d2      	addlt	r2, r2, r3
 800d0da:	1b1c      	subge	r4, r3, r4
 800d0dc:	9b07      	ldr	r3, [sp, #28]
 800d0de:	bfbc      	itt	lt
 800d0e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d0e2:	2400      	movlt	r4, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	bfb5      	itete	lt
 800d0e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d0ec:	9b07      	ldrge	r3, [sp, #28]
 800d0ee:	2300      	movlt	r3, #0
 800d0f0:	4646      	movge	r6, r8
 800d0f2:	e730      	b.n	800cf56 <_dtoa_r+0x71e>
 800d0f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d0f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d0f8:	4646      	mov	r6, r8
 800d0fa:	e735      	b.n	800cf68 <_dtoa_r+0x730>
 800d0fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d0fe:	e75c      	b.n	800cfba <_dtoa_r+0x782>
 800d100:	2300      	movs	r3, #0
 800d102:	e788      	b.n	800d016 <_dtoa_r+0x7de>
 800d104:	3fe00000 	.word	0x3fe00000
 800d108:	40240000 	.word	0x40240000
 800d10c:	40140000 	.word	0x40140000
 800d110:	9b02      	ldr	r3, [sp, #8]
 800d112:	e780      	b.n	800d016 <_dtoa_r+0x7de>
 800d114:	2300      	movs	r3, #0
 800d116:	930a      	str	r3, [sp, #40]	@ 0x28
 800d118:	e782      	b.n	800d020 <_dtoa_r+0x7e8>
 800d11a:	d099      	beq.n	800d050 <_dtoa_r+0x818>
 800d11c:	9a08      	ldr	r2, [sp, #32]
 800d11e:	331c      	adds	r3, #28
 800d120:	441a      	add	r2, r3
 800d122:	4498      	add	r8, r3
 800d124:	441e      	add	r6, r3
 800d126:	9208      	str	r2, [sp, #32]
 800d128:	e792      	b.n	800d050 <_dtoa_r+0x818>
 800d12a:	4603      	mov	r3, r0
 800d12c:	e7f6      	b.n	800d11c <_dtoa_r+0x8e4>
 800d12e:	9b07      	ldr	r3, [sp, #28]
 800d130:	9704      	str	r7, [sp, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	dc20      	bgt.n	800d178 <_dtoa_r+0x940>
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	dd1e      	ble.n	800d17c <_dtoa_r+0x944>
 800d13e:	9b00      	ldr	r3, [sp, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f47f aec0 	bne.w	800cec6 <_dtoa_r+0x68e>
 800d146:	4621      	mov	r1, r4
 800d148:	2205      	movs	r2, #5
 800d14a:	4658      	mov	r0, fp
 800d14c:	f000 fa9a 	bl	800d684 <__multadd>
 800d150:	4601      	mov	r1, r0
 800d152:	4604      	mov	r4, r0
 800d154:	4648      	mov	r0, r9
 800d156:	f000 fcad 	bl	800dab4 <__mcmp>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f77f aeb3 	ble.w	800cec6 <_dtoa_r+0x68e>
 800d160:	4656      	mov	r6, sl
 800d162:	2331      	movs	r3, #49	@ 0x31
 800d164:	f806 3b01 	strb.w	r3, [r6], #1
 800d168:	9b04      	ldr	r3, [sp, #16]
 800d16a:	3301      	adds	r3, #1
 800d16c:	9304      	str	r3, [sp, #16]
 800d16e:	e6ae      	b.n	800cece <_dtoa_r+0x696>
 800d170:	9c07      	ldr	r4, [sp, #28]
 800d172:	9704      	str	r7, [sp, #16]
 800d174:	4625      	mov	r5, r4
 800d176:	e7f3      	b.n	800d160 <_dtoa_r+0x928>
 800d178:	9b07      	ldr	r3, [sp, #28]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f000 8104 	beq.w	800d38c <_dtoa_r+0xb54>
 800d184:	2e00      	cmp	r6, #0
 800d186:	dd05      	ble.n	800d194 <_dtoa_r+0x95c>
 800d188:	4629      	mov	r1, r5
 800d18a:	4632      	mov	r2, r6
 800d18c:	4658      	mov	r0, fp
 800d18e:	f000 fc25 	bl	800d9dc <__lshift>
 800d192:	4605      	mov	r5, r0
 800d194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d196:	2b00      	cmp	r3, #0
 800d198:	d05a      	beq.n	800d250 <_dtoa_r+0xa18>
 800d19a:	6869      	ldr	r1, [r5, #4]
 800d19c:	4658      	mov	r0, fp
 800d19e:	f000 fa0f 	bl	800d5c0 <_Balloc>
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	b928      	cbnz	r0, 800d1b2 <_dtoa_r+0x97a>
 800d1a6:	4b84      	ldr	r3, [pc, #528]	@ (800d3b8 <_dtoa_r+0xb80>)
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d1ae:	f7ff bb5a 	b.w	800c866 <_dtoa_r+0x2e>
 800d1b2:	692a      	ldr	r2, [r5, #16]
 800d1b4:	3202      	adds	r2, #2
 800d1b6:	0092      	lsls	r2, r2, #2
 800d1b8:	f105 010c 	add.w	r1, r5, #12
 800d1bc:	300c      	adds	r0, #12
 800d1be:	f001 f997 	bl	800e4f0 <memcpy>
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	f000 fc08 	bl	800d9dc <__lshift>
 800d1cc:	f10a 0301 	add.w	r3, sl, #1
 800d1d0:	9307      	str	r3, [sp, #28]
 800d1d2:	9b00      	ldr	r3, [sp, #0]
 800d1d4:	4453      	add	r3, sl
 800d1d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1d8:	9b02      	ldr	r3, [sp, #8]
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	462f      	mov	r7, r5
 800d1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	9b07      	ldr	r3, [sp, #28]
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4648      	mov	r0, r9
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	f7ff fa99 	bl	800c724 <quorem>
 800d1f2:	4639      	mov	r1, r7
 800d1f4:	9002      	str	r0, [sp, #8]
 800d1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d1fa:	4648      	mov	r0, r9
 800d1fc:	f000 fc5a 	bl	800dab4 <__mcmp>
 800d200:	462a      	mov	r2, r5
 800d202:	9008      	str	r0, [sp, #32]
 800d204:	4621      	mov	r1, r4
 800d206:	4658      	mov	r0, fp
 800d208:	f000 fc70 	bl	800daec <__mdiff>
 800d20c:	68c2      	ldr	r2, [r0, #12]
 800d20e:	4606      	mov	r6, r0
 800d210:	bb02      	cbnz	r2, 800d254 <_dtoa_r+0xa1c>
 800d212:	4601      	mov	r1, r0
 800d214:	4648      	mov	r0, r9
 800d216:	f000 fc4d 	bl	800dab4 <__mcmp>
 800d21a:	4602      	mov	r2, r0
 800d21c:	4631      	mov	r1, r6
 800d21e:	4658      	mov	r0, fp
 800d220:	920e      	str	r2, [sp, #56]	@ 0x38
 800d222:	f000 fa0d 	bl	800d640 <_Bfree>
 800d226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d22a:	9e07      	ldr	r6, [sp, #28]
 800d22c:	ea43 0102 	orr.w	r1, r3, r2
 800d230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d232:	4319      	orrs	r1, r3
 800d234:	d110      	bne.n	800d258 <_dtoa_r+0xa20>
 800d236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d23a:	d029      	beq.n	800d290 <_dtoa_r+0xa58>
 800d23c:	9b08      	ldr	r3, [sp, #32]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dd02      	ble.n	800d248 <_dtoa_r+0xa10>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d248:	9b00      	ldr	r3, [sp, #0]
 800d24a:	f883 8000 	strb.w	r8, [r3]
 800d24e:	e63f      	b.n	800ced0 <_dtoa_r+0x698>
 800d250:	4628      	mov	r0, r5
 800d252:	e7bb      	b.n	800d1cc <_dtoa_r+0x994>
 800d254:	2201      	movs	r2, #1
 800d256:	e7e1      	b.n	800d21c <_dtoa_r+0x9e4>
 800d258:	9b08      	ldr	r3, [sp, #32]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	db04      	blt.n	800d268 <_dtoa_r+0xa30>
 800d25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d260:	430b      	orrs	r3, r1
 800d262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d264:	430b      	orrs	r3, r1
 800d266:	d120      	bne.n	800d2aa <_dtoa_r+0xa72>
 800d268:	2a00      	cmp	r2, #0
 800d26a:	dded      	ble.n	800d248 <_dtoa_r+0xa10>
 800d26c:	4649      	mov	r1, r9
 800d26e:	2201      	movs	r2, #1
 800d270:	4658      	mov	r0, fp
 800d272:	f000 fbb3 	bl	800d9dc <__lshift>
 800d276:	4621      	mov	r1, r4
 800d278:	4681      	mov	r9, r0
 800d27a:	f000 fc1b 	bl	800dab4 <__mcmp>
 800d27e:	2800      	cmp	r0, #0
 800d280:	dc03      	bgt.n	800d28a <_dtoa_r+0xa52>
 800d282:	d1e1      	bne.n	800d248 <_dtoa_r+0xa10>
 800d284:	f018 0f01 	tst.w	r8, #1
 800d288:	d0de      	beq.n	800d248 <_dtoa_r+0xa10>
 800d28a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d28e:	d1d8      	bne.n	800d242 <_dtoa_r+0xa0a>
 800d290:	9a00      	ldr	r2, [sp, #0]
 800d292:	2339      	movs	r3, #57	@ 0x39
 800d294:	7013      	strb	r3, [r2, #0]
 800d296:	4633      	mov	r3, r6
 800d298:	461e      	mov	r6, r3
 800d29a:	3b01      	subs	r3, #1
 800d29c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d2a0:	2a39      	cmp	r2, #57	@ 0x39
 800d2a2:	d052      	beq.n	800d34a <_dtoa_r+0xb12>
 800d2a4:	3201      	adds	r2, #1
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	e612      	b.n	800ced0 <_dtoa_r+0x698>
 800d2aa:	2a00      	cmp	r2, #0
 800d2ac:	dd07      	ble.n	800d2be <_dtoa_r+0xa86>
 800d2ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d2b2:	d0ed      	beq.n	800d290 <_dtoa_r+0xa58>
 800d2b4:	9a00      	ldr	r2, [sp, #0]
 800d2b6:	f108 0301 	add.w	r3, r8, #1
 800d2ba:	7013      	strb	r3, [r2, #0]
 800d2bc:	e608      	b.n	800ced0 <_dtoa_r+0x698>
 800d2be:	9b07      	ldr	r3, [sp, #28]
 800d2c0:	9a07      	ldr	r2, [sp, #28]
 800d2c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d028      	beq.n	800d31e <_dtoa_r+0xae6>
 800d2cc:	4649      	mov	r1, r9
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	220a      	movs	r2, #10
 800d2d2:	4658      	mov	r0, fp
 800d2d4:	f000 f9d6 	bl	800d684 <__multadd>
 800d2d8:	42af      	cmp	r7, r5
 800d2da:	4681      	mov	r9, r0
 800d2dc:	f04f 0300 	mov.w	r3, #0
 800d2e0:	f04f 020a 	mov.w	r2, #10
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	4658      	mov	r0, fp
 800d2e8:	d107      	bne.n	800d2fa <_dtoa_r+0xac2>
 800d2ea:	f000 f9cb 	bl	800d684 <__multadd>
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	9b07      	ldr	r3, [sp, #28]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	9307      	str	r3, [sp, #28]
 800d2f8:	e774      	b.n	800d1e4 <_dtoa_r+0x9ac>
 800d2fa:	f000 f9c3 	bl	800d684 <__multadd>
 800d2fe:	4629      	mov	r1, r5
 800d300:	4607      	mov	r7, r0
 800d302:	2300      	movs	r3, #0
 800d304:	220a      	movs	r2, #10
 800d306:	4658      	mov	r0, fp
 800d308:	f000 f9bc 	bl	800d684 <__multadd>
 800d30c:	4605      	mov	r5, r0
 800d30e:	e7f0      	b.n	800d2f2 <_dtoa_r+0xaba>
 800d310:	9b00      	ldr	r3, [sp, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	bfcc      	ite	gt
 800d316:	461e      	movgt	r6, r3
 800d318:	2601      	movle	r6, #1
 800d31a:	4456      	add	r6, sl
 800d31c:	2700      	movs	r7, #0
 800d31e:	4649      	mov	r1, r9
 800d320:	2201      	movs	r2, #1
 800d322:	4658      	mov	r0, fp
 800d324:	f000 fb5a 	bl	800d9dc <__lshift>
 800d328:	4621      	mov	r1, r4
 800d32a:	4681      	mov	r9, r0
 800d32c:	f000 fbc2 	bl	800dab4 <__mcmp>
 800d330:	2800      	cmp	r0, #0
 800d332:	dcb0      	bgt.n	800d296 <_dtoa_r+0xa5e>
 800d334:	d102      	bne.n	800d33c <_dtoa_r+0xb04>
 800d336:	f018 0f01 	tst.w	r8, #1
 800d33a:	d1ac      	bne.n	800d296 <_dtoa_r+0xa5e>
 800d33c:	4633      	mov	r3, r6
 800d33e:	461e      	mov	r6, r3
 800d340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d344:	2a30      	cmp	r2, #48	@ 0x30
 800d346:	d0fa      	beq.n	800d33e <_dtoa_r+0xb06>
 800d348:	e5c2      	b.n	800ced0 <_dtoa_r+0x698>
 800d34a:	459a      	cmp	sl, r3
 800d34c:	d1a4      	bne.n	800d298 <_dtoa_r+0xa60>
 800d34e:	9b04      	ldr	r3, [sp, #16]
 800d350:	3301      	adds	r3, #1
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	2331      	movs	r3, #49	@ 0x31
 800d356:	f88a 3000 	strb.w	r3, [sl]
 800d35a:	e5b9      	b.n	800ced0 <_dtoa_r+0x698>
 800d35c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d35e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d3bc <_dtoa_r+0xb84>
 800d362:	b11b      	cbz	r3, 800d36c <_dtoa_r+0xb34>
 800d364:	f10a 0308 	add.w	r3, sl, #8
 800d368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d36a:	6013      	str	r3, [r2, #0]
 800d36c:	4650      	mov	r0, sl
 800d36e:	b019      	add	sp, #100	@ 0x64
 800d370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d376:	2b01      	cmp	r3, #1
 800d378:	f77f ae37 	ble.w	800cfea <_dtoa_r+0x7b2>
 800d37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d380:	2001      	movs	r0, #1
 800d382:	e655      	b.n	800d030 <_dtoa_r+0x7f8>
 800d384:	9b00      	ldr	r3, [sp, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	f77f aed6 	ble.w	800d138 <_dtoa_r+0x900>
 800d38c:	4656      	mov	r6, sl
 800d38e:	4621      	mov	r1, r4
 800d390:	4648      	mov	r0, r9
 800d392:	f7ff f9c7 	bl	800c724 <quorem>
 800d396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d39a:	f806 8b01 	strb.w	r8, [r6], #1
 800d39e:	9b00      	ldr	r3, [sp, #0]
 800d3a0:	eba6 020a 	sub.w	r2, r6, sl
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	ddb3      	ble.n	800d310 <_dtoa_r+0xad8>
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	4658      	mov	r0, fp
 800d3b0:	f000 f968 	bl	800d684 <__multadd>
 800d3b4:	4681      	mov	r9, r0
 800d3b6:	e7ea      	b.n	800d38e <_dtoa_r+0xb56>
 800d3b8:	0809cf50 	.word	0x0809cf50
 800d3bc:	0809ceeb 	.word	0x0809ceeb

0800d3c0 <_free_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	d041      	beq.n	800d44c <_free_r+0x8c>
 800d3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3cc:	1f0c      	subs	r4, r1, #4
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bfb8      	it	lt
 800d3d2:	18e4      	addlt	r4, r4, r3
 800d3d4:	f000 f8e8 	bl	800d5a8 <__malloc_lock>
 800d3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d450 <_free_r+0x90>)
 800d3da:	6813      	ldr	r3, [r2, #0]
 800d3dc:	b933      	cbnz	r3, 800d3ec <_free_r+0x2c>
 800d3de:	6063      	str	r3, [r4, #4]
 800d3e0:	6014      	str	r4, [r2, #0]
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e8:	f000 b8e4 	b.w	800d5b4 <__malloc_unlock>
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	d908      	bls.n	800d402 <_free_r+0x42>
 800d3f0:	6820      	ldr	r0, [r4, #0]
 800d3f2:	1821      	adds	r1, r4, r0
 800d3f4:	428b      	cmp	r3, r1
 800d3f6:	bf01      	itttt	eq
 800d3f8:	6819      	ldreq	r1, [r3, #0]
 800d3fa:	685b      	ldreq	r3, [r3, #4]
 800d3fc:	1809      	addeq	r1, r1, r0
 800d3fe:	6021      	streq	r1, [r4, #0]
 800d400:	e7ed      	b.n	800d3de <_free_r+0x1e>
 800d402:	461a      	mov	r2, r3
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	b10b      	cbz	r3, 800d40c <_free_r+0x4c>
 800d408:	42a3      	cmp	r3, r4
 800d40a:	d9fa      	bls.n	800d402 <_free_r+0x42>
 800d40c:	6811      	ldr	r1, [r2, #0]
 800d40e:	1850      	adds	r0, r2, r1
 800d410:	42a0      	cmp	r0, r4
 800d412:	d10b      	bne.n	800d42c <_free_r+0x6c>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	4401      	add	r1, r0
 800d418:	1850      	adds	r0, r2, r1
 800d41a:	4283      	cmp	r3, r0
 800d41c:	6011      	str	r1, [r2, #0]
 800d41e:	d1e0      	bne.n	800d3e2 <_free_r+0x22>
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	6053      	str	r3, [r2, #4]
 800d426:	4408      	add	r0, r1
 800d428:	6010      	str	r0, [r2, #0]
 800d42a:	e7da      	b.n	800d3e2 <_free_r+0x22>
 800d42c:	d902      	bls.n	800d434 <_free_r+0x74>
 800d42e:	230c      	movs	r3, #12
 800d430:	602b      	str	r3, [r5, #0]
 800d432:	e7d6      	b.n	800d3e2 <_free_r+0x22>
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	1821      	adds	r1, r4, r0
 800d438:	428b      	cmp	r3, r1
 800d43a:	bf04      	itt	eq
 800d43c:	6819      	ldreq	r1, [r3, #0]
 800d43e:	685b      	ldreq	r3, [r3, #4]
 800d440:	6063      	str	r3, [r4, #4]
 800d442:	bf04      	itt	eq
 800d444:	1809      	addeq	r1, r1, r0
 800d446:	6021      	streq	r1, [r4, #0]
 800d448:	6054      	str	r4, [r2, #4]
 800d44a:	e7ca      	b.n	800d3e2 <_free_r+0x22>
 800d44c:	bd38      	pop	{r3, r4, r5, pc}
 800d44e:	bf00      	nop
 800d450:	20040acc 	.word	0x20040acc

0800d454 <malloc>:
 800d454:	4b02      	ldr	r3, [pc, #8]	@ (800d460 <malloc+0xc>)
 800d456:	4601      	mov	r1, r0
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	f000 b825 	b.w	800d4a8 <_malloc_r>
 800d45e:	bf00      	nop
 800d460:	200400c8 	.word	0x200400c8

0800d464 <sbrk_aligned>:
 800d464:	b570      	push	{r4, r5, r6, lr}
 800d466:	4e0f      	ldr	r6, [pc, #60]	@ (800d4a4 <sbrk_aligned+0x40>)
 800d468:	460c      	mov	r4, r1
 800d46a:	6831      	ldr	r1, [r6, #0]
 800d46c:	4605      	mov	r5, r0
 800d46e:	b911      	cbnz	r1, 800d476 <sbrk_aligned+0x12>
 800d470:	f001 f82e 	bl	800e4d0 <_sbrk_r>
 800d474:	6030      	str	r0, [r6, #0]
 800d476:	4621      	mov	r1, r4
 800d478:	4628      	mov	r0, r5
 800d47a:	f001 f829 	bl	800e4d0 <_sbrk_r>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d103      	bne.n	800d48a <sbrk_aligned+0x26>
 800d482:	f04f 34ff 	mov.w	r4, #4294967295
 800d486:	4620      	mov	r0, r4
 800d488:	bd70      	pop	{r4, r5, r6, pc}
 800d48a:	1cc4      	adds	r4, r0, #3
 800d48c:	f024 0403 	bic.w	r4, r4, #3
 800d490:	42a0      	cmp	r0, r4
 800d492:	d0f8      	beq.n	800d486 <sbrk_aligned+0x22>
 800d494:	1a21      	subs	r1, r4, r0
 800d496:	4628      	mov	r0, r5
 800d498:	f001 f81a 	bl	800e4d0 <_sbrk_r>
 800d49c:	3001      	adds	r0, #1
 800d49e:	d1f2      	bne.n	800d486 <sbrk_aligned+0x22>
 800d4a0:	e7ef      	b.n	800d482 <sbrk_aligned+0x1e>
 800d4a2:	bf00      	nop
 800d4a4:	20040ac8 	.word	0x20040ac8

0800d4a8 <_malloc_r>:
 800d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ac:	1ccd      	adds	r5, r1, #3
 800d4ae:	f025 0503 	bic.w	r5, r5, #3
 800d4b2:	3508      	adds	r5, #8
 800d4b4:	2d0c      	cmp	r5, #12
 800d4b6:	bf38      	it	cc
 800d4b8:	250c      	movcc	r5, #12
 800d4ba:	2d00      	cmp	r5, #0
 800d4bc:	4606      	mov	r6, r0
 800d4be:	db01      	blt.n	800d4c4 <_malloc_r+0x1c>
 800d4c0:	42a9      	cmp	r1, r5
 800d4c2:	d904      	bls.n	800d4ce <_malloc_r+0x26>
 800d4c4:	230c      	movs	r3, #12
 800d4c6:	6033      	str	r3, [r6, #0]
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5a4 <_malloc_r+0xfc>
 800d4d2:	f000 f869 	bl	800d5a8 <__malloc_lock>
 800d4d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4da:	461c      	mov	r4, r3
 800d4dc:	bb44      	cbnz	r4, 800d530 <_malloc_r+0x88>
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f7ff ffbf 	bl	800d464 <sbrk_aligned>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	d158      	bne.n	800d59e <_malloc_r+0xf6>
 800d4ec:	f8d8 4000 	ldr.w	r4, [r8]
 800d4f0:	4627      	mov	r7, r4
 800d4f2:	2f00      	cmp	r7, #0
 800d4f4:	d143      	bne.n	800d57e <_malloc_r+0xd6>
 800d4f6:	2c00      	cmp	r4, #0
 800d4f8:	d04b      	beq.n	800d592 <_malloc_r+0xea>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	4630      	mov	r0, r6
 800d500:	eb04 0903 	add.w	r9, r4, r3
 800d504:	f000 ffe4 	bl	800e4d0 <_sbrk_r>
 800d508:	4581      	cmp	r9, r0
 800d50a:	d142      	bne.n	800d592 <_malloc_r+0xea>
 800d50c:	6821      	ldr	r1, [r4, #0]
 800d50e:	1a6d      	subs	r5, r5, r1
 800d510:	4629      	mov	r1, r5
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff ffa6 	bl	800d464 <sbrk_aligned>
 800d518:	3001      	adds	r0, #1
 800d51a:	d03a      	beq.n	800d592 <_malloc_r+0xea>
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	442b      	add	r3, r5
 800d520:	6023      	str	r3, [r4, #0]
 800d522:	f8d8 3000 	ldr.w	r3, [r8]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	bb62      	cbnz	r2, 800d584 <_malloc_r+0xdc>
 800d52a:	f8c8 7000 	str.w	r7, [r8]
 800d52e:	e00f      	b.n	800d550 <_malloc_r+0xa8>
 800d530:	6822      	ldr	r2, [r4, #0]
 800d532:	1b52      	subs	r2, r2, r5
 800d534:	d420      	bmi.n	800d578 <_malloc_r+0xd0>
 800d536:	2a0b      	cmp	r2, #11
 800d538:	d917      	bls.n	800d56a <_malloc_r+0xc2>
 800d53a:	1961      	adds	r1, r4, r5
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	6025      	str	r5, [r4, #0]
 800d540:	bf18      	it	ne
 800d542:	6059      	strne	r1, [r3, #4]
 800d544:	6863      	ldr	r3, [r4, #4]
 800d546:	bf08      	it	eq
 800d548:	f8c8 1000 	streq.w	r1, [r8]
 800d54c:	5162      	str	r2, [r4, r5]
 800d54e:	604b      	str	r3, [r1, #4]
 800d550:	4630      	mov	r0, r6
 800d552:	f000 f82f 	bl	800d5b4 <__malloc_unlock>
 800d556:	f104 000b 	add.w	r0, r4, #11
 800d55a:	1d23      	adds	r3, r4, #4
 800d55c:	f020 0007 	bic.w	r0, r0, #7
 800d560:	1ac2      	subs	r2, r0, r3
 800d562:	bf1c      	itt	ne
 800d564:	1a1b      	subne	r3, r3, r0
 800d566:	50a3      	strne	r3, [r4, r2]
 800d568:	e7af      	b.n	800d4ca <_malloc_r+0x22>
 800d56a:	6862      	ldr	r2, [r4, #4]
 800d56c:	42a3      	cmp	r3, r4
 800d56e:	bf0c      	ite	eq
 800d570:	f8c8 2000 	streq.w	r2, [r8]
 800d574:	605a      	strne	r2, [r3, #4]
 800d576:	e7eb      	b.n	800d550 <_malloc_r+0xa8>
 800d578:	4623      	mov	r3, r4
 800d57a:	6864      	ldr	r4, [r4, #4]
 800d57c:	e7ae      	b.n	800d4dc <_malloc_r+0x34>
 800d57e:	463c      	mov	r4, r7
 800d580:	687f      	ldr	r7, [r7, #4]
 800d582:	e7b6      	b.n	800d4f2 <_malloc_r+0x4a>
 800d584:	461a      	mov	r2, r3
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	42a3      	cmp	r3, r4
 800d58a:	d1fb      	bne.n	800d584 <_malloc_r+0xdc>
 800d58c:	2300      	movs	r3, #0
 800d58e:	6053      	str	r3, [r2, #4]
 800d590:	e7de      	b.n	800d550 <_malloc_r+0xa8>
 800d592:	230c      	movs	r3, #12
 800d594:	6033      	str	r3, [r6, #0]
 800d596:	4630      	mov	r0, r6
 800d598:	f000 f80c 	bl	800d5b4 <__malloc_unlock>
 800d59c:	e794      	b.n	800d4c8 <_malloc_r+0x20>
 800d59e:	6005      	str	r5, [r0, #0]
 800d5a0:	e7d6      	b.n	800d550 <_malloc_r+0xa8>
 800d5a2:	bf00      	nop
 800d5a4:	20040acc 	.word	0x20040acc

0800d5a8 <__malloc_lock>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	@ (800d5b0 <__malloc_lock+0x8>)
 800d5aa:	f7ff b89a 	b.w	800c6e2 <__retarget_lock_acquire_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	20040ac4 	.word	0x20040ac4

0800d5b4 <__malloc_unlock>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	@ (800d5bc <__malloc_unlock+0x8>)
 800d5b6:	f7ff b895 	b.w	800c6e4 <__retarget_lock_release_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	20040ac4 	.word	0x20040ac4

0800d5c0 <_Balloc>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	69c6      	ldr	r6, [r0, #28]
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	b976      	cbnz	r6, 800d5e8 <_Balloc+0x28>
 800d5ca:	2010      	movs	r0, #16
 800d5cc:	f7ff ff42 	bl	800d454 <malloc>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	61e0      	str	r0, [r4, #28]
 800d5d4:	b920      	cbnz	r0, 800d5e0 <_Balloc+0x20>
 800d5d6:	4b18      	ldr	r3, [pc, #96]	@ (800d638 <_Balloc+0x78>)
 800d5d8:	4818      	ldr	r0, [pc, #96]	@ (800d63c <_Balloc+0x7c>)
 800d5da:	216b      	movs	r1, #107	@ 0x6b
 800d5dc:	f7ff f884 	bl	800c6e8 <__assert_func>
 800d5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5e4:	6006      	str	r6, [r0, #0]
 800d5e6:	60c6      	str	r6, [r0, #12]
 800d5e8:	69e6      	ldr	r6, [r4, #28]
 800d5ea:	68f3      	ldr	r3, [r6, #12]
 800d5ec:	b183      	cbz	r3, 800d610 <_Balloc+0x50>
 800d5ee:	69e3      	ldr	r3, [r4, #28]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5f6:	b9b8      	cbnz	r0, 800d628 <_Balloc+0x68>
 800d5f8:	2101      	movs	r1, #1
 800d5fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d5fe:	1d72      	adds	r2, r6, #5
 800d600:	0092      	lsls	r2, r2, #2
 800d602:	4620      	mov	r0, r4
 800d604:	f000 ff89 	bl	800e51a <_calloc_r>
 800d608:	b160      	cbz	r0, 800d624 <_Balloc+0x64>
 800d60a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d60e:	e00e      	b.n	800d62e <_Balloc+0x6e>
 800d610:	2221      	movs	r2, #33	@ 0x21
 800d612:	2104      	movs	r1, #4
 800d614:	4620      	mov	r0, r4
 800d616:	f000 ff80 	bl	800e51a <_calloc_r>
 800d61a:	69e3      	ldr	r3, [r4, #28]
 800d61c:	60f0      	str	r0, [r6, #12]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e4      	bne.n	800d5ee <_Balloc+0x2e>
 800d624:	2000      	movs	r0, #0
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	6802      	ldr	r2, [r0, #0]
 800d62a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d62e:	2300      	movs	r3, #0
 800d630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d634:	e7f7      	b.n	800d626 <_Balloc+0x66>
 800d636:	bf00      	nop
 800d638:	0809ce0c 	.word	0x0809ce0c
 800d63c:	0809cf61 	.word	0x0809cf61

0800d640 <_Bfree>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	69c6      	ldr	r6, [r0, #28]
 800d644:	4605      	mov	r5, r0
 800d646:	460c      	mov	r4, r1
 800d648:	b976      	cbnz	r6, 800d668 <_Bfree+0x28>
 800d64a:	2010      	movs	r0, #16
 800d64c:	f7ff ff02 	bl	800d454 <malloc>
 800d650:	4602      	mov	r2, r0
 800d652:	61e8      	str	r0, [r5, #28]
 800d654:	b920      	cbnz	r0, 800d660 <_Bfree+0x20>
 800d656:	4b09      	ldr	r3, [pc, #36]	@ (800d67c <_Bfree+0x3c>)
 800d658:	4809      	ldr	r0, [pc, #36]	@ (800d680 <_Bfree+0x40>)
 800d65a:	218f      	movs	r1, #143	@ 0x8f
 800d65c:	f7ff f844 	bl	800c6e8 <__assert_func>
 800d660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d664:	6006      	str	r6, [r0, #0]
 800d666:	60c6      	str	r6, [r0, #12]
 800d668:	b13c      	cbz	r4, 800d67a <_Bfree+0x3a>
 800d66a:	69eb      	ldr	r3, [r5, #28]
 800d66c:	6862      	ldr	r2, [r4, #4]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d674:	6021      	str	r1, [r4, #0]
 800d676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
 800d67c:	0809ce0c 	.word	0x0809ce0c
 800d680:	0809cf61 	.word	0x0809cf61

0800d684 <__multadd>:
 800d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d688:	690d      	ldr	r5, [r1, #16]
 800d68a:	4607      	mov	r7, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	461e      	mov	r6, r3
 800d690:	f101 0c14 	add.w	ip, r1, #20
 800d694:	2000      	movs	r0, #0
 800d696:	f8dc 3000 	ldr.w	r3, [ip]
 800d69a:	b299      	uxth	r1, r3
 800d69c:	fb02 6101 	mla	r1, r2, r1, r6
 800d6a0:	0c1e      	lsrs	r6, r3, #16
 800d6a2:	0c0b      	lsrs	r3, r1, #16
 800d6a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d6a8:	b289      	uxth	r1, r1
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6b0:	4285      	cmp	r5, r0
 800d6b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ba:	dcec      	bgt.n	800d696 <__multadd+0x12>
 800d6bc:	b30e      	cbz	r6, 800d702 <__multadd+0x7e>
 800d6be:	68a3      	ldr	r3, [r4, #8]
 800d6c0:	42ab      	cmp	r3, r5
 800d6c2:	dc19      	bgt.n	800d6f8 <__multadd+0x74>
 800d6c4:	6861      	ldr	r1, [r4, #4]
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	3101      	adds	r1, #1
 800d6ca:	f7ff ff79 	bl	800d5c0 <_Balloc>
 800d6ce:	4680      	mov	r8, r0
 800d6d0:	b928      	cbnz	r0, 800d6de <__multadd+0x5a>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d708 <__multadd+0x84>)
 800d6d6:	480d      	ldr	r0, [pc, #52]	@ (800d70c <__multadd+0x88>)
 800d6d8:	21ba      	movs	r1, #186	@ 0xba
 800d6da:	f7ff f805 	bl	800c6e8 <__assert_func>
 800d6de:	6922      	ldr	r2, [r4, #16]
 800d6e0:	3202      	adds	r2, #2
 800d6e2:	f104 010c 	add.w	r1, r4, #12
 800d6e6:	0092      	lsls	r2, r2, #2
 800d6e8:	300c      	adds	r0, #12
 800d6ea:	f000 ff01 	bl	800e4f0 <memcpy>
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff ffa5 	bl	800d640 <_Bfree>
 800d6f6:	4644      	mov	r4, r8
 800d6f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	615e      	str	r6, [r3, #20]
 800d700:	6125      	str	r5, [r4, #16]
 800d702:	4620      	mov	r0, r4
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	0809cf50 	.word	0x0809cf50
 800d70c:	0809cf61 	.word	0x0809cf61

0800d710 <__hi0bits>:
 800d710:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d714:	4603      	mov	r3, r0
 800d716:	bf36      	itet	cc
 800d718:	0403      	lslcc	r3, r0, #16
 800d71a:	2000      	movcs	r0, #0
 800d71c:	2010      	movcc	r0, #16
 800d71e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d722:	bf3c      	itt	cc
 800d724:	021b      	lslcc	r3, r3, #8
 800d726:	3008      	addcc	r0, #8
 800d728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d72c:	bf3c      	itt	cc
 800d72e:	011b      	lslcc	r3, r3, #4
 800d730:	3004      	addcc	r0, #4
 800d732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d736:	bf3c      	itt	cc
 800d738:	009b      	lslcc	r3, r3, #2
 800d73a:	3002      	addcc	r0, #2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	db05      	blt.n	800d74c <__hi0bits+0x3c>
 800d740:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d744:	f100 0001 	add.w	r0, r0, #1
 800d748:	bf08      	it	eq
 800d74a:	2020      	moveq	r0, #32
 800d74c:	4770      	bx	lr

0800d74e <__lo0bits>:
 800d74e:	6803      	ldr	r3, [r0, #0]
 800d750:	4602      	mov	r2, r0
 800d752:	f013 0007 	ands.w	r0, r3, #7
 800d756:	d00b      	beq.n	800d770 <__lo0bits+0x22>
 800d758:	07d9      	lsls	r1, r3, #31
 800d75a:	d421      	bmi.n	800d7a0 <__lo0bits+0x52>
 800d75c:	0798      	lsls	r0, r3, #30
 800d75e:	bf49      	itett	mi
 800d760:	085b      	lsrmi	r3, r3, #1
 800d762:	089b      	lsrpl	r3, r3, #2
 800d764:	2001      	movmi	r0, #1
 800d766:	6013      	strmi	r3, [r2, #0]
 800d768:	bf5c      	itt	pl
 800d76a:	6013      	strpl	r3, [r2, #0]
 800d76c:	2002      	movpl	r0, #2
 800d76e:	4770      	bx	lr
 800d770:	b299      	uxth	r1, r3
 800d772:	b909      	cbnz	r1, 800d778 <__lo0bits+0x2a>
 800d774:	0c1b      	lsrs	r3, r3, #16
 800d776:	2010      	movs	r0, #16
 800d778:	b2d9      	uxtb	r1, r3
 800d77a:	b909      	cbnz	r1, 800d780 <__lo0bits+0x32>
 800d77c:	3008      	adds	r0, #8
 800d77e:	0a1b      	lsrs	r3, r3, #8
 800d780:	0719      	lsls	r1, r3, #28
 800d782:	bf04      	itt	eq
 800d784:	091b      	lsreq	r3, r3, #4
 800d786:	3004      	addeq	r0, #4
 800d788:	0799      	lsls	r1, r3, #30
 800d78a:	bf04      	itt	eq
 800d78c:	089b      	lsreq	r3, r3, #2
 800d78e:	3002      	addeq	r0, #2
 800d790:	07d9      	lsls	r1, r3, #31
 800d792:	d403      	bmi.n	800d79c <__lo0bits+0x4e>
 800d794:	085b      	lsrs	r3, r3, #1
 800d796:	f100 0001 	add.w	r0, r0, #1
 800d79a:	d003      	beq.n	800d7a4 <__lo0bits+0x56>
 800d79c:	6013      	str	r3, [r2, #0]
 800d79e:	4770      	bx	lr
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	4770      	bx	lr
 800d7a4:	2020      	movs	r0, #32
 800d7a6:	4770      	bx	lr

0800d7a8 <__i2b>:
 800d7a8:	b510      	push	{r4, lr}
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	2101      	movs	r1, #1
 800d7ae:	f7ff ff07 	bl	800d5c0 <_Balloc>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	b928      	cbnz	r0, 800d7c2 <__i2b+0x1a>
 800d7b6:	4b05      	ldr	r3, [pc, #20]	@ (800d7cc <__i2b+0x24>)
 800d7b8:	4805      	ldr	r0, [pc, #20]	@ (800d7d0 <__i2b+0x28>)
 800d7ba:	f240 1145 	movw	r1, #325	@ 0x145
 800d7be:	f7fe ff93 	bl	800c6e8 <__assert_func>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	6144      	str	r4, [r0, #20]
 800d7c6:	6103      	str	r3, [r0, #16]
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	bf00      	nop
 800d7cc:	0809cf50 	.word	0x0809cf50
 800d7d0:	0809cf61 	.word	0x0809cf61

0800d7d4 <__multiply>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4614      	mov	r4, r2
 800d7da:	690a      	ldr	r2, [r1, #16]
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	bfa8      	it	ge
 800d7e2:	4623      	movge	r3, r4
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	bfa4      	itt	ge
 800d7e8:	460c      	movge	r4, r1
 800d7ea:	461f      	movge	r7, r3
 800d7ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d7f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d7f4:	68a3      	ldr	r3, [r4, #8]
 800d7f6:	6861      	ldr	r1, [r4, #4]
 800d7f8:	eb0a 0609 	add.w	r6, sl, r9
 800d7fc:	42b3      	cmp	r3, r6
 800d7fe:	b085      	sub	sp, #20
 800d800:	bfb8      	it	lt
 800d802:	3101      	addlt	r1, #1
 800d804:	f7ff fedc 	bl	800d5c0 <_Balloc>
 800d808:	b930      	cbnz	r0, 800d818 <__multiply+0x44>
 800d80a:	4602      	mov	r2, r0
 800d80c:	4b44      	ldr	r3, [pc, #272]	@ (800d920 <__multiply+0x14c>)
 800d80e:	4845      	ldr	r0, [pc, #276]	@ (800d924 <__multiply+0x150>)
 800d810:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d814:	f7fe ff68 	bl	800c6e8 <__assert_func>
 800d818:	f100 0514 	add.w	r5, r0, #20
 800d81c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d820:	462b      	mov	r3, r5
 800d822:	2200      	movs	r2, #0
 800d824:	4543      	cmp	r3, r8
 800d826:	d321      	bcc.n	800d86c <__multiply+0x98>
 800d828:	f107 0114 	add.w	r1, r7, #20
 800d82c:	f104 0214 	add.w	r2, r4, #20
 800d830:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d834:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d838:	9302      	str	r3, [sp, #8]
 800d83a:	1b13      	subs	r3, r2, r4
 800d83c:	3b15      	subs	r3, #21
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	3304      	adds	r3, #4
 800d844:	f104 0715 	add.w	r7, r4, #21
 800d848:	42ba      	cmp	r2, r7
 800d84a:	bf38      	it	cc
 800d84c:	2304      	movcc	r3, #4
 800d84e:	9301      	str	r3, [sp, #4]
 800d850:	9b02      	ldr	r3, [sp, #8]
 800d852:	9103      	str	r1, [sp, #12]
 800d854:	428b      	cmp	r3, r1
 800d856:	d80c      	bhi.n	800d872 <__multiply+0x9e>
 800d858:	2e00      	cmp	r6, #0
 800d85a:	dd03      	ble.n	800d864 <__multiply+0x90>
 800d85c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d860:	2b00      	cmp	r3, #0
 800d862:	d05b      	beq.n	800d91c <__multiply+0x148>
 800d864:	6106      	str	r6, [r0, #16]
 800d866:	b005      	add	sp, #20
 800d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	f843 2b04 	str.w	r2, [r3], #4
 800d870:	e7d8      	b.n	800d824 <__multiply+0x50>
 800d872:	f8b1 a000 	ldrh.w	sl, [r1]
 800d876:	f1ba 0f00 	cmp.w	sl, #0
 800d87a:	d024      	beq.n	800d8c6 <__multiply+0xf2>
 800d87c:	f104 0e14 	add.w	lr, r4, #20
 800d880:	46a9      	mov	r9, r5
 800d882:	f04f 0c00 	mov.w	ip, #0
 800d886:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d88a:	f8d9 3000 	ldr.w	r3, [r9]
 800d88e:	fa1f fb87 	uxth.w	fp, r7
 800d892:	b29b      	uxth	r3, r3
 800d894:	fb0a 330b 	mla	r3, sl, fp, r3
 800d898:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d89c:	f8d9 7000 	ldr.w	r7, [r9]
 800d8a0:	4463      	add	r3, ip
 800d8a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d8aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8b4:	4572      	cmp	r2, lr
 800d8b6:	f849 3b04 	str.w	r3, [r9], #4
 800d8ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8be:	d8e2      	bhi.n	800d886 <__multiply+0xb2>
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	f845 c003 	str.w	ip, [r5, r3]
 800d8c6:	9b03      	ldr	r3, [sp, #12]
 800d8c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d8cc:	3104      	adds	r1, #4
 800d8ce:	f1b9 0f00 	cmp.w	r9, #0
 800d8d2:	d021      	beq.n	800d918 <__multiply+0x144>
 800d8d4:	682b      	ldr	r3, [r5, #0]
 800d8d6:	f104 0c14 	add.w	ip, r4, #20
 800d8da:	46ae      	mov	lr, r5
 800d8dc:	f04f 0a00 	mov.w	sl, #0
 800d8e0:	f8bc b000 	ldrh.w	fp, [ip]
 800d8e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d8e8:	fb09 770b 	mla	r7, r9, fp, r7
 800d8ec:	4457      	add	r7, sl
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8f4:	f84e 3b04 	str.w	r3, [lr], #4
 800d8f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d8fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d900:	f8be 3000 	ldrh.w	r3, [lr]
 800d904:	fb09 330a 	mla	r3, r9, sl, r3
 800d908:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d90c:	4562      	cmp	r2, ip
 800d90e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d912:	d8e5      	bhi.n	800d8e0 <__multiply+0x10c>
 800d914:	9f01      	ldr	r7, [sp, #4]
 800d916:	51eb      	str	r3, [r5, r7]
 800d918:	3504      	adds	r5, #4
 800d91a:	e799      	b.n	800d850 <__multiply+0x7c>
 800d91c:	3e01      	subs	r6, #1
 800d91e:	e79b      	b.n	800d858 <__multiply+0x84>
 800d920:	0809cf50 	.word	0x0809cf50
 800d924:	0809cf61 	.word	0x0809cf61

0800d928 <__pow5mult>:
 800d928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d92c:	4615      	mov	r5, r2
 800d92e:	f012 0203 	ands.w	r2, r2, #3
 800d932:	4607      	mov	r7, r0
 800d934:	460e      	mov	r6, r1
 800d936:	d007      	beq.n	800d948 <__pow5mult+0x20>
 800d938:	4c25      	ldr	r4, [pc, #148]	@ (800d9d0 <__pow5mult+0xa8>)
 800d93a:	3a01      	subs	r2, #1
 800d93c:	2300      	movs	r3, #0
 800d93e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d942:	f7ff fe9f 	bl	800d684 <__multadd>
 800d946:	4606      	mov	r6, r0
 800d948:	10ad      	asrs	r5, r5, #2
 800d94a:	d03d      	beq.n	800d9c8 <__pow5mult+0xa0>
 800d94c:	69fc      	ldr	r4, [r7, #28]
 800d94e:	b97c      	cbnz	r4, 800d970 <__pow5mult+0x48>
 800d950:	2010      	movs	r0, #16
 800d952:	f7ff fd7f 	bl	800d454 <malloc>
 800d956:	4602      	mov	r2, r0
 800d958:	61f8      	str	r0, [r7, #28]
 800d95a:	b928      	cbnz	r0, 800d968 <__pow5mult+0x40>
 800d95c:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d4 <__pow5mult+0xac>)
 800d95e:	481e      	ldr	r0, [pc, #120]	@ (800d9d8 <__pow5mult+0xb0>)
 800d960:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d964:	f7fe fec0 	bl	800c6e8 <__assert_func>
 800d968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d96c:	6004      	str	r4, [r0, #0]
 800d96e:	60c4      	str	r4, [r0, #12]
 800d970:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d978:	b94c      	cbnz	r4, 800d98e <__pow5mult+0x66>
 800d97a:	f240 2171 	movw	r1, #625	@ 0x271
 800d97e:	4638      	mov	r0, r7
 800d980:	f7ff ff12 	bl	800d7a8 <__i2b>
 800d984:	2300      	movs	r3, #0
 800d986:	f8c8 0008 	str.w	r0, [r8, #8]
 800d98a:	4604      	mov	r4, r0
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	f04f 0900 	mov.w	r9, #0
 800d992:	07eb      	lsls	r3, r5, #31
 800d994:	d50a      	bpl.n	800d9ac <__pow5mult+0x84>
 800d996:	4631      	mov	r1, r6
 800d998:	4622      	mov	r2, r4
 800d99a:	4638      	mov	r0, r7
 800d99c:	f7ff ff1a 	bl	800d7d4 <__multiply>
 800d9a0:	4631      	mov	r1, r6
 800d9a2:	4680      	mov	r8, r0
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff fe4b 	bl	800d640 <_Bfree>
 800d9aa:	4646      	mov	r6, r8
 800d9ac:	106d      	asrs	r5, r5, #1
 800d9ae:	d00b      	beq.n	800d9c8 <__pow5mult+0xa0>
 800d9b0:	6820      	ldr	r0, [r4, #0]
 800d9b2:	b938      	cbnz	r0, 800d9c4 <__pow5mult+0x9c>
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f7ff ff0b 	bl	800d7d4 <__multiply>
 800d9be:	6020      	str	r0, [r4, #0]
 800d9c0:	f8c0 9000 	str.w	r9, [r0]
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	e7e4      	b.n	800d992 <__pow5mult+0x6a>
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ce:	bf00      	nop
 800d9d0:	0809cfbc 	.word	0x0809cfbc
 800d9d4:	0809ce0c 	.word	0x0809ce0c
 800d9d8:	0809cf61 	.word	0x0809cf61

0800d9dc <__lshift>:
 800d9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	6849      	ldr	r1, [r1, #4]
 800d9e4:	6923      	ldr	r3, [r4, #16]
 800d9e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	4691      	mov	r9, r2
 800d9f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9f4:	f108 0601 	add.w	r6, r8, #1
 800d9f8:	42b3      	cmp	r3, r6
 800d9fa:	db0b      	blt.n	800da14 <__lshift+0x38>
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f7ff fddf 	bl	800d5c0 <_Balloc>
 800da02:	4605      	mov	r5, r0
 800da04:	b948      	cbnz	r0, 800da1a <__lshift+0x3e>
 800da06:	4602      	mov	r2, r0
 800da08:	4b28      	ldr	r3, [pc, #160]	@ (800daac <__lshift+0xd0>)
 800da0a:	4829      	ldr	r0, [pc, #164]	@ (800dab0 <__lshift+0xd4>)
 800da0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da10:	f7fe fe6a 	bl	800c6e8 <__assert_func>
 800da14:	3101      	adds	r1, #1
 800da16:	005b      	lsls	r3, r3, #1
 800da18:	e7ee      	b.n	800d9f8 <__lshift+0x1c>
 800da1a:	2300      	movs	r3, #0
 800da1c:	f100 0114 	add.w	r1, r0, #20
 800da20:	f100 0210 	add.w	r2, r0, #16
 800da24:	4618      	mov	r0, r3
 800da26:	4553      	cmp	r3, sl
 800da28:	db33      	blt.n	800da92 <__lshift+0xb6>
 800da2a:	6920      	ldr	r0, [r4, #16]
 800da2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da30:	f104 0314 	add.w	r3, r4, #20
 800da34:	f019 091f 	ands.w	r9, r9, #31
 800da38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da40:	d02b      	beq.n	800da9a <__lshift+0xbe>
 800da42:	f1c9 0e20 	rsb	lr, r9, #32
 800da46:	468a      	mov	sl, r1
 800da48:	2200      	movs	r2, #0
 800da4a:	6818      	ldr	r0, [r3, #0]
 800da4c:	fa00 f009 	lsl.w	r0, r0, r9
 800da50:	4310      	orrs	r0, r2
 800da52:	f84a 0b04 	str.w	r0, [sl], #4
 800da56:	f853 2b04 	ldr.w	r2, [r3], #4
 800da5a:	459c      	cmp	ip, r3
 800da5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800da60:	d8f3      	bhi.n	800da4a <__lshift+0x6e>
 800da62:	ebac 0304 	sub.w	r3, ip, r4
 800da66:	3b15      	subs	r3, #21
 800da68:	f023 0303 	bic.w	r3, r3, #3
 800da6c:	3304      	adds	r3, #4
 800da6e:	f104 0015 	add.w	r0, r4, #21
 800da72:	4584      	cmp	ip, r0
 800da74:	bf38      	it	cc
 800da76:	2304      	movcc	r3, #4
 800da78:	50ca      	str	r2, [r1, r3]
 800da7a:	b10a      	cbz	r2, 800da80 <__lshift+0xa4>
 800da7c:	f108 0602 	add.w	r6, r8, #2
 800da80:	3e01      	subs	r6, #1
 800da82:	4638      	mov	r0, r7
 800da84:	612e      	str	r6, [r5, #16]
 800da86:	4621      	mov	r1, r4
 800da88:	f7ff fdda 	bl	800d640 <_Bfree>
 800da8c:	4628      	mov	r0, r5
 800da8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da92:	f842 0f04 	str.w	r0, [r2, #4]!
 800da96:	3301      	adds	r3, #1
 800da98:	e7c5      	b.n	800da26 <__lshift+0x4a>
 800da9a:	3904      	subs	r1, #4
 800da9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa0:	f841 2f04 	str.w	r2, [r1, #4]!
 800daa4:	459c      	cmp	ip, r3
 800daa6:	d8f9      	bhi.n	800da9c <__lshift+0xc0>
 800daa8:	e7ea      	b.n	800da80 <__lshift+0xa4>
 800daaa:	bf00      	nop
 800daac:	0809cf50 	.word	0x0809cf50
 800dab0:	0809cf61 	.word	0x0809cf61

0800dab4 <__mcmp>:
 800dab4:	690a      	ldr	r2, [r1, #16]
 800dab6:	4603      	mov	r3, r0
 800dab8:	6900      	ldr	r0, [r0, #16]
 800daba:	1a80      	subs	r0, r0, r2
 800dabc:	b530      	push	{r4, r5, lr}
 800dabe:	d10e      	bne.n	800dade <__mcmp+0x2a>
 800dac0:	3314      	adds	r3, #20
 800dac2:	3114      	adds	r1, #20
 800dac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dacc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dad4:	4295      	cmp	r5, r2
 800dad6:	d003      	beq.n	800dae0 <__mcmp+0x2c>
 800dad8:	d205      	bcs.n	800dae6 <__mcmp+0x32>
 800dada:	f04f 30ff 	mov.w	r0, #4294967295
 800dade:	bd30      	pop	{r4, r5, pc}
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	d3f3      	bcc.n	800dacc <__mcmp+0x18>
 800dae4:	e7fb      	b.n	800dade <__mcmp+0x2a>
 800dae6:	2001      	movs	r0, #1
 800dae8:	e7f9      	b.n	800dade <__mcmp+0x2a>
	...

0800daec <__mdiff>:
 800daec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	4689      	mov	r9, r1
 800daf2:	4606      	mov	r6, r0
 800daf4:	4611      	mov	r1, r2
 800daf6:	4648      	mov	r0, r9
 800daf8:	4614      	mov	r4, r2
 800dafa:	f7ff ffdb 	bl	800dab4 <__mcmp>
 800dafe:	1e05      	subs	r5, r0, #0
 800db00:	d112      	bne.n	800db28 <__mdiff+0x3c>
 800db02:	4629      	mov	r1, r5
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff fd5b 	bl	800d5c0 <_Balloc>
 800db0a:	4602      	mov	r2, r0
 800db0c:	b928      	cbnz	r0, 800db1a <__mdiff+0x2e>
 800db0e:	4b3f      	ldr	r3, [pc, #252]	@ (800dc0c <__mdiff+0x120>)
 800db10:	f240 2137 	movw	r1, #567	@ 0x237
 800db14:	483e      	ldr	r0, [pc, #248]	@ (800dc10 <__mdiff+0x124>)
 800db16:	f7fe fde7 	bl	800c6e8 <__assert_func>
 800db1a:	2301      	movs	r3, #1
 800db1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db20:	4610      	mov	r0, r2
 800db22:	b003      	add	sp, #12
 800db24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db28:	bfbc      	itt	lt
 800db2a:	464b      	movlt	r3, r9
 800db2c:	46a1      	movlt	r9, r4
 800db2e:	4630      	mov	r0, r6
 800db30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db34:	bfba      	itte	lt
 800db36:	461c      	movlt	r4, r3
 800db38:	2501      	movlt	r5, #1
 800db3a:	2500      	movge	r5, #0
 800db3c:	f7ff fd40 	bl	800d5c0 <_Balloc>
 800db40:	4602      	mov	r2, r0
 800db42:	b918      	cbnz	r0, 800db4c <__mdiff+0x60>
 800db44:	4b31      	ldr	r3, [pc, #196]	@ (800dc0c <__mdiff+0x120>)
 800db46:	f240 2145 	movw	r1, #581	@ 0x245
 800db4a:	e7e3      	b.n	800db14 <__mdiff+0x28>
 800db4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db50:	6926      	ldr	r6, [r4, #16]
 800db52:	60c5      	str	r5, [r0, #12]
 800db54:	f109 0310 	add.w	r3, r9, #16
 800db58:	f109 0514 	add.w	r5, r9, #20
 800db5c:	f104 0e14 	add.w	lr, r4, #20
 800db60:	f100 0b14 	add.w	fp, r0, #20
 800db64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800db68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	46d9      	mov	r9, fp
 800db70:	f04f 0c00 	mov.w	ip, #0
 800db74:	9b01      	ldr	r3, [sp, #4]
 800db76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800db7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	fa1f f38a 	uxth.w	r3, sl
 800db84:	4619      	mov	r1, r3
 800db86:	b283      	uxth	r3, r0
 800db88:	1acb      	subs	r3, r1, r3
 800db8a:	0c00      	lsrs	r0, r0, #16
 800db8c:	4463      	add	r3, ip
 800db8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800db92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800db96:	b29b      	uxth	r3, r3
 800db98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db9c:	4576      	cmp	r6, lr
 800db9e:	f849 3b04 	str.w	r3, [r9], #4
 800dba2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dba6:	d8e5      	bhi.n	800db74 <__mdiff+0x88>
 800dba8:	1b33      	subs	r3, r6, r4
 800dbaa:	3b15      	subs	r3, #21
 800dbac:	f023 0303 	bic.w	r3, r3, #3
 800dbb0:	3415      	adds	r4, #21
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	42a6      	cmp	r6, r4
 800dbb6:	bf38      	it	cc
 800dbb8:	2304      	movcc	r3, #4
 800dbba:	441d      	add	r5, r3
 800dbbc:	445b      	add	r3, fp
 800dbbe:	461e      	mov	r6, r3
 800dbc0:	462c      	mov	r4, r5
 800dbc2:	4544      	cmp	r4, r8
 800dbc4:	d30e      	bcc.n	800dbe4 <__mdiff+0xf8>
 800dbc6:	f108 0103 	add.w	r1, r8, #3
 800dbca:	1b49      	subs	r1, r1, r5
 800dbcc:	f021 0103 	bic.w	r1, r1, #3
 800dbd0:	3d03      	subs	r5, #3
 800dbd2:	45a8      	cmp	r8, r5
 800dbd4:	bf38      	it	cc
 800dbd6:	2100      	movcc	r1, #0
 800dbd8:	440b      	add	r3, r1
 800dbda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dbde:	b191      	cbz	r1, 800dc06 <__mdiff+0x11a>
 800dbe0:	6117      	str	r7, [r2, #16]
 800dbe2:	e79d      	b.n	800db20 <__mdiff+0x34>
 800dbe4:	f854 1b04 	ldr.w	r1, [r4], #4
 800dbe8:	46e6      	mov	lr, ip
 800dbea:	0c08      	lsrs	r0, r1, #16
 800dbec:	fa1c fc81 	uxtah	ip, ip, r1
 800dbf0:	4471      	add	r1, lr
 800dbf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dbf6:	b289      	uxth	r1, r1
 800dbf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dbfc:	f846 1b04 	str.w	r1, [r6], #4
 800dc00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc04:	e7dd      	b.n	800dbc2 <__mdiff+0xd6>
 800dc06:	3f01      	subs	r7, #1
 800dc08:	e7e7      	b.n	800dbda <__mdiff+0xee>
 800dc0a:	bf00      	nop
 800dc0c:	0809cf50 	.word	0x0809cf50
 800dc10:	0809cf61 	.word	0x0809cf61

0800dc14 <__d2b>:
 800dc14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc18:	460f      	mov	r7, r1
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	ec59 8b10 	vmov	r8, r9, d0
 800dc20:	4616      	mov	r6, r2
 800dc22:	f7ff fccd 	bl	800d5c0 <_Balloc>
 800dc26:	4604      	mov	r4, r0
 800dc28:	b930      	cbnz	r0, 800dc38 <__d2b+0x24>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b23      	ldr	r3, [pc, #140]	@ (800dcbc <__d2b+0xa8>)
 800dc2e:	4824      	ldr	r0, [pc, #144]	@ (800dcc0 <__d2b+0xac>)
 800dc30:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc34:	f7fe fd58 	bl	800c6e8 <__assert_func>
 800dc38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc40:	b10d      	cbz	r5, 800dc46 <__d2b+0x32>
 800dc42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc46:	9301      	str	r3, [sp, #4]
 800dc48:	f1b8 0300 	subs.w	r3, r8, #0
 800dc4c:	d023      	beq.n	800dc96 <__d2b+0x82>
 800dc4e:	4668      	mov	r0, sp
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	f7ff fd7c 	bl	800d74e <__lo0bits>
 800dc56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc5a:	b1d0      	cbz	r0, 800dc92 <__d2b+0x7e>
 800dc5c:	f1c0 0320 	rsb	r3, r0, #32
 800dc60:	fa02 f303 	lsl.w	r3, r2, r3
 800dc64:	430b      	orrs	r3, r1
 800dc66:	40c2      	lsrs	r2, r0
 800dc68:	6163      	str	r3, [r4, #20]
 800dc6a:	9201      	str	r2, [sp, #4]
 800dc6c:	9b01      	ldr	r3, [sp, #4]
 800dc6e:	61a3      	str	r3, [r4, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bf0c      	ite	eq
 800dc74:	2201      	moveq	r2, #1
 800dc76:	2202      	movne	r2, #2
 800dc78:	6122      	str	r2, [r4, #16]
 800dc7a:	b1a5      	cbz	r5, 800dca6 <__d2b+0x92>
 800dc7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dc80:	4405      	add	r5, r0
 800dc82:	603d      	str	r5, [r7, #0]
 800dc84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc88:	6030      	str	r0, [r6, #0]
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	b003      	add	sp, #12
 800dc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc92:	6161      	str	r1, [r4, #20]
 800dc94:	e7ea      	b.n	800dc6c <__d2b+0x58>
 800dc96:	a801      	add	r0, sp, #4
 800dc98:	f7ff fd59 	bl	800d74e <__lo0bits>
 800dc9c:	9b01      	ldr	r3, [sp, #4]
 800dc9e:	6163      	str	r3, [r4, #20]
 800dca0:	3020      	adds	r0, #32
 800dca2:	2201      	movs	r2, #1
 800dca4:	e7e8      	b.n	800dc78 <__d2b+0x64>
 800dca6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dcae:	6038      	str	r0, [r7, #0]
 800dcb0:	6918      	ldr	r0, [r3, #16]
 800dcb2:	f7ff fd2d 	bl	800d710 <__hi0bits>
 800dcb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcba:	e7e5      	b.n	800dc88 <__d2b+0x74>
 800dcbc:	0809cf50 	.word	0x0809cf50
 800dcc0:	0809cf61 	.word	0x0809cf61

0800dcc4 <__ssputs_r>:
 800dcc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc8:	688e      	ldr	r6, [r1, #8]
 800dcca:	461f      	mov	r7, r3
 800dccc:	42be      	cmp	r6, r7
 800dcce:	680b      	ldr	r3, [r1, #0]
 800dcd0:	4682      	mov	sl, r0
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	4690      	mov	r8, r2
 800dcd6:	d82d      	bhi.n	800dd34 <__ssputs_r+0x70>
 800dcd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dce0:	d026      	beq.n	800dd30 <__ssputs_r+0x6c>
 800dce2:	6965      	ldr	r5, [r4, #20]
 800dce4:	6909      	ldr	r1, [r1, #16]
 800dce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcea:	eba3 0901 	sub.w	r9, r3, r1
 800dcee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcf2:	1c7b      	adds	r3, r7, #1
 800dcf4:	444b      	add	r3, r9
 800dcf6:	106d      	asrs	r5, r5, #1
 800dcf8:	429d      	cmp	r5, r3
 800dcfa:	bf38      	it	cc
 800dcfc:	461d      	movcc	r5, r3
 800dcfe:	0553      	lsls	r3, r2, #21
 800dd00:	d527      	bpl.n	800dd52 <__ssputs_r+0x8e>
 800dd02:	4629      	mov	r1, r5
 800dd04:	f7ff fbd0 	bl	800d4a8 <_malloc_r>
 800dd08:	4606      	mov	r6, r0
 800dd0a:	b360      	cbz	r0, 800dd66 <__ssputs_r+0xa2>
 800dd0c:	6921      	ldr	r1, [r4, #16]
 800dd0e:	464a      	mov	r2, r9
 800dd10:	f000 fbee 	bl	800e4f0 <memcpy>
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd1e:	81a3      	strh	r3, [r4, #12]
 800dd20:	6126      	str	r6, [r4, #16]
 800dd22:	6165      	str	r5, [r4, #20]
 800dd24:	444e      	add	r6, r9
 800dd26:	eba5 0509 	sub.w	r5, r5, r9
 800dd2a:	6026      	str	r6, [r4, #0]
 800dd2c:	60a5      	str	r5, [r4, #8]
 800dd2e:	463e      	mov	r6, r7
 800dd30:	42be      	cmp	r6, r7
 800dd32:	d900      	bls.n	800dd36 <__ssputs_r+0x72>
 800dd34:	463e      	mov	r6, r7
 800dd36:	6820      	ldr	r0, [r4, #0]
 800dd38:	4632      	mov	r2, r6
 800dd3a:	4641      	mov	r1, r8
 800dd3c:	f000 fbae 	bl	800e49c <memmove>
 800dd40:	68a3      	ldr	r3, [r4, #8]
 800dd42:	1b9b      	subs	r3, r3, r6
 800dd44:	60a3      	str	r3, [r4, #8]
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	4433      	add	r3, r6
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd52:	462a      	mov	r2, r5
 800dd54:	f000 fc07 	bl	800e566 <_realloc_r>
 800dd58:	4606      	mov	r6, r0
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d1e0      	bne.n	800dd20 <__ssputs_r+0x5c>
 800dd5e:	6921      	ldr	r1, [r4, #16]
 800dd60:	4650      	mov	r0, sl
 800dd62:	f7ff fb2d 	bl	800d3c0 <_free_r>
 800dd66:	230c      	movs	r3, #12
 800dd68:	f8ca 3000 	str.w	r3, [sl]
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	f04f 30ff 	mov.w	r0, #4294967295
 800dd78:	e7e9      	b.n	800dd4e <__ssputs_r+0x8a>
	...

0800dd7c <_svfiprintf_r>:
 800dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	4698      	mov	r8, r3
 800dd82:	898b      	ldrh	r3, [r1, #12]
 800dd84:	061b      	lsls	r3, r3, #24
 800dd86:	b09d      	sub	sp, #116	@ 0x74
 800dd88:	4607      	mov	r7, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	4614      	mov	r4, r2
 800dd8e:	d510      	bpl.n	800ddb2 <_svfiprintf_r+0x36>
 800dd90:	690b      	ldr	r3, [r1, #16]
 800dd92:	b973      	cbnz	r3, 800ddb2 <_svfiprintf_r+0x36>
 800dd94:	2140      	movs	r1, #64	@ 0x40
 800dd96:	f7ff fb87 	bl	800d4a8 <_malloc_r>
 800dd9a:	6028      	str	r0, [r5, #0]
 800dd9c:	6128      	str	r0, [r5, #16]
 800dd9e:	b930      	cbnz	r0, 800ddae <_svfiprintf_r+0x32>
 800dda0:	230c      	movs	r3, #12
 800dda2:	603b      	str	r3, [r7, #0]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	b01d      	add	sp, #116	@ 0x74
 800ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	2340      	movs	r3, #64	@ 0x40
 800ddb0:	616b      	str	r3, [r5, #20]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb6:	2320      	movs	r3, #32
 800ddb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddc0:	2330      	movs	r3, #48	@ 0x30
 800ddc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800df60 <_svfiprintf_r+0x1e4>
 800ddc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddca:	f04f 0901 	mov.w	r9, #1
 800ddce:	4623      	mov	r3, r4
 800ddd0:	469a      	mov	sl, r3
 800ddd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddd6:	b10a      	cbz	r2, 800dddc <_svfiprintf_r+0x60>
 800ddd8:	2a25      	cmp	r2, #37	@ 0x25
 800ddda:	d1f9      	bne.n	800ddd0 <_svfiprintf_r+0x54>
 800dddc:	ebba 0b04 	subs.w	fp, sl, r4
 800dde0:	d00b      	beq.n	800ddfa <_svfiprintf_r+0x7e>
 800dde2:	465b      	mov	r3, fp
 800dde4:	4622      	mov	r2, r4
 800dde6:	4629      	mov	r1, r5
 800dde8:	4638      	mov	r0, r7
 800ddea:	f7ff ff6b 	bl	800dcc4 <__ssputs_r>
 800ddee:	3001      	adds	r0, #1
 800ddf0:	f000 80a7 	beq.w	800df42 <_svfiprintf_r+0x1c6>
 800ddf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddf6:	445a      	add	r2, fp
 800ddf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f000 809f 	beq.w	800df42 <_svfiprintf_r+0x1c6>
 800de04:	2300      	movs	r3, #0
 800de06:	f04f 32ff 	mov.w	r2, #4294967295
 800de0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de0e:	f10a 0a01 	add.w	sl, sl, #1
 800de12:	9304      	str	r3, [sp, #16]
 800de14:	9307      	str	r3, [sp, #28]
 800de16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800de1c:	4654      	mov	r4, sl
 800de1e:	2205      	movs	r2, #5
 800de20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de24:	484e      	ldr	r0, [pc, #312]	@ (800df60 <_svfiprintf_r+0x1e4>)
 800de26:	f7f2 f9eb 	bl	8000200 <memchr>
 800de2a:	9a04      	ldr	r2, [sp, #16]
 800de2c:	b9d8      	cbnz	r0, 800de66 <_svfiprintf_r+0xea>
 800de2e:	06d0      	lsls	r0, r2, #27
 800de30:	bf44      	itt	mi
 800de32:	2320      	movmi	r3, #32
 800de34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de38:	0711      	lsls	r1, r2, #28
 800de3a:	bf44      	itt	mi
 800de3c:	232b      	movmi	r3, #43	@ 0x2b
 800de3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de42:	f89a 3000 	ldrb.w	r3, [sl]
 800de46:	2b2a      	cmp	r3, #42	@ 0x2a
 800de48:	d015      	beq.n	800de76 <_svfiprintf_r+0xfa>
 800de4a:	9a07      	ldr	r2, [sp, #28]
 800de4c:	4654      	mov	r4, sl
 800de4e:	2000      	movs	r0, #0
 800de50:	f04f 0c0a 	mov.w	ip, #10
 800de54:	4621      	mov	r1, r4
 800de56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de5a:	3b30      	subs	r3, #48	@ 0x30
 800de5c:	2b09      	cmp	r3, #9
 800de5e:	d94b      	bls.n	800def8 <_svfiprintf_r+0x17c>
 800de60:	b1b0      	cbz	r0, 800de90 <_svfiprintf_r+0x114>
 800de62:	9207      	str	r2, [sp, #28]
 800de64:	e014      	b.n	800de90 <_svfiprintf_r+0x114>
 800de66:	eba0 0308 	sub.w	r3, r0, r8
 800de6a:	fa09 f303 	lsl.w	r3, r9, r3
 800de6e:	4313      	orrs	r3, r2
 800de70:	9304      	str	r3, [sp, #16]
 800de72:	46a2      	mov	sl, r4
 800de74:	e7d2      	b.n	800de1c <_svfiprintf_r+0xa0>
 800de76:	9b03      	ldr	r3, [sp, #12]
 800de78:	1d19      	adds	r1, r3, #4
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	9103      	str	r1, [sp, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	bfbb      	ittet	lt
 800de82:	425b      	neglt	r3, r3
 800de84:	f042 0202 	orrlt.w	r2, r2, #2
 800de88:	9307      	strge	r3, [sp, #28]
 800de8a:	9307      	strlt	r3, [sp, #28]
 800de8c:	bfb8      	it	lt
 800de8e:	9204      	strlt	r2, [sp, #16]
 800de90:	7823      	ldrb	r3, [r4, #0]
 800de92:	2b2e      	cmp	r3, #46	@ 0x2e
 800de94:	d10a      	bne.n	800deac <_svfiprintf_r+0x130>
 800de96:	7863      	ldrb	r3, [r4, #1]
 800de98:	2b2a      	cmp	r3, #42	@ 0x2a
 800de9a:	d132      	bne.n	800df02 <_svfiprintf_r+0x186>
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	1d1a      	adds	r2, r3, #4
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	9203      	str	r2, [sp, #12]
 800dea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dea8:	3402      	adds	r4, #2
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800df70 <_svfiprintf_r+0x1f4>
 800deb0:	7821      	ldrb	r1, [r4, #0]
 800deb2:	2203      	movs	r2, #3
 800deb4:	4650      	mov	r0, sl
 800deb6:	f7f2 f9a3 	bl	8000200 <memchr>
 800deba:	b138      	cbz	r0, 800decc <_svfiprintf_r+0x150>
 800debc:	9b04      	ldr	r3, [sp, #16]
 800debe:	eba0 000a 	sub.w	r0, r0, sl
 800dec2:	2240      	movs	r2, #64	@ 0x40
 800dec4:	4082      	lsls	r2, r0
 800dec6:	4313      	orrs	r3, r2
 800dec8:	3401      	adds	r4, #1
 800deca:	9304      	str	r3, [sp, #16]
 800decc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded0:	4824      	ldr	r0, [pc, #144]	@ (800df64 <_svfiprintf_r+0x1e8>)
 800ded2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ded6:	2206      	movs	r2, #6
 800ded8:	f7f2 f992 	bl	8000200 <memchr>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d036      	beq.n	800df4e <_svfiprintf_r+0x1d2>
 800dee0:	4b21      	ldr	r3, [pc, #132]	@ (800df68 <_svfiprintf_r+0x1ec>)
 800dee2:	bb1b      	cbnz	r3, 800df2c <_svfiprintf_r+0x1b0>
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	3307      	adds	r3, #7
 800dee8:	f023 0307 	bic.w	r3, r3, #7
 800deec:	3308      	adds	r3, #8
 800deee:	9303      	str	r3, [sp, #12]
 800def0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def2:	4433      	add	r3, r6
 800def4:	9309      	str	r3, [sp, #36]	@ 0x24
 800def6:	e76a      	b.n	800ddce <_svfiprintf_r+0x52>
 800def8:	fb0c 3202 	mla	r2, ip, r2, r3
 800defc:	460c      	mov	r4, r1
 800defe:	2001      	movs	r0, #1
 800df00:	e7a8      	b.n	800de54 <_svfiprintf_r+0xd8>
 800df02:	2300      	movs	r3, #0
 800df04:	3401      	adds	r4, #1
 800df06:	9305      	str	r3, [sp, #20]
 800df08:	4619      	mov	r1, r3
 800df0a:	f04f 0c0a 	mov.w	ip, #10
 800df0e:	4620      	mov	r0, r4
 800df10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df14:	3a30      	subs	r2, #48	@ 0x30
 800df16:	2a09      	cmp	r2, #9
 800df18:	d903      	bls.n	800df22 <_svfiprintf_r+0x1a6>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c6      	beq.n	800deac <_svfiprintf_r+0x130>
 800df1e:	9105      	str	r1, [sp, #20]
 800df20:	e7c4      	b.n	800deac <_svfiprintf_r+0x130>
 800df22:	fb0c 2101 	mla	r1, ip, r1, r2
 800df26:	4604      	mov	r4, r0
 800df28:	2301      	movs	r3, #1
 800df2a:	e7f0      	b.n	800df0e <_svfiprintf_r+0x192>
 800df2c:	ab03      	add	r3, sp, #12
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	462a      	mov	r2, r5
 800df32:	4b0e      	ldr	r3, [pc, #56]	@ (800df6c <_svfiprintf_r+0x1f0>)
 800df34:	a904      	add	r1, sp, #16
 800df36:	4638      	mov	r0, r7
 800df38:	f7fd fe66 	bl	800bc08 <_printf_float>
 800df3c:	1c42      	adds	r2, r0, #1
 800df3e:	4606      	mov	r6, r0
 800df40:	d1d6      	bne.n	800def0 <_svfiprintf_r+0x174>
 800df42:	89ab      	ldrh	r3, [r5, #12]
 800df44:	065b      	lsls	r3, r3, #25
 800df46:	f53f af2d 	bmi.w	800dda4 <_svfiprintf_r+0x28>
 800df4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df4c:	e72c      	b.n	800dda8 <_svfiprintf_r+0x2c>
 800df4e:	ab03      	add	r3, sp, #12
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	462a      	mov	r2, r5
 800df54:	4b05      	ldr	r3, [pc, #20]	@ (800df6c <_svfiprintf_r+0x1f0>)
 800df56:	a904      	add	r1, sp, #16
 800df58:	4638      	mov	r0, r7
 800df5a:	f7fe f8ed 	bl	800c138 <_printf_i>
 800df5e:	e7ed      	b.n	800df3c <_svfiprintf_r+0x1c0>
 800df60:	0809d0b8 	.word	0x0809d0b8
 800df64:	0809d0c2 	.word	0x0809d0c2
 800df68:	0800bc09 	.word	0x0800bc09
 800df6c:	0800dcc5 	.word	0x0800dcc5
 800df70:	0809d0be 	.word	0x0809d0be

0800df74 <__sfputc_r>:
 800df74:	6893      	ldr	r3, [r2, #8]
 800df76:	3b01      	subs	r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	b410      	push	{r4}
 800df7c:	6093      	str	r3, [r2, #8]
 800df7e:	da08      	bge.n	800df92 <__sfputc_r+0x1e>
 800df80:	6994      	ldr	r4, [r2, #24]
 800df82:	42a3      	cmp	r3, r4
 800df84:	db01      	blt.n	800df8a <__sfputc_r+0x16>
 800df86:	290a      	cmp	r1, #10
 800df88:	d103      	bne.n	800df92 <__sfputc_r+0x1e>
 800df8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df8e:	f000 b9f1 	b.w	800e374 <__swbuf_r>
 800df92:	6813      	ldr	r3, [r2, #0]
 800df94:	1c58      	adds	r0, r3, #1
 800df96:	6010      	str	r0, [r2, #0]
 800df98:	7019      	strb	r1, [r3, #0]
 800df9a:	4608      	mov	r0, r1
 800df9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <__sfputs_r>:
 800dfa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	460f      	mov	r7, r1
 800dfa8:	4614      	mov	r4, r2
 800dfaa:	18d5      	adds	r5, r2, r3
 800dfac:	42ac      	cmp	r4, r5
 800dfae:	d101      	bne.n	800dfb4 <__sfputs_r+0x12>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e007      	b.n	800dfc4 <__sfputs_r+0x22>
 800dfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfb8:	463a      	mov	r2, r7
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7ff ffda 	bl	800df74 <__sfputc_r>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	d1f3      	bne.n	800dfac <__sfputs_r+0xa>
 800dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfc8 <_vfiprintf_r>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	460d      	mov	r5, r1
 800dfce:	b09d      	sub	sp, #116	@ 0x74
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	4698      	mov	r8, r3
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	b118      	cbz	r0, 800dfe0 <_vfiprintf_r+0x18>
 800dfd8:	6a03      	ldr	r3, [r0, #32]
 800dfda:	b90b      	cbnz	r3, 800dfe0 <_vfiprintf_r+0x18>
 800dfdc:	f7fe fa58 	bl	800c490 <__sinit>
 800dfe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfe2:	07d9      	lsls	r1, r3, #31
 800dfe4:	d405      	bmi.n	800dff2 <_vfiprintf_r+0x2a>
 800dfe6:	89ab      	ldrh	r3, [r5, #12]
 800dfe8:	059a      	lsls	r2, r3, #22
 800dfea:	d402      	bmi.n	800dff2 <_vfiprintf_r+0x2a>
 800dfec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfee:	f7fe fb78 	bl	800c6e2 <__retarget_lock_acquire_recursive>
 800dff2:	89ab      	ldrh	r3, [r5, #12]
 800dff4:	071b      	lsls	r3, r3, #28
 800dff6:	d501      	bpl.n	800dffc <_vfiprintf_r+0x34>
 800dff8:	692b      	ldr	r3, [r5, #16]
 800dffa:	b99b      	cbnz	r3, 800e024 <_vfiprintf_r+0x5c>
 800dffc:	4629      	mov	r1, r5
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 f9f6 	bl	800e3f0 <__swsetup_r>
 800e004:	b170      	cbz	r0, 800e024 <_vfiprintf_r+0x5c>
 800e006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e008:	07dc      	lsls	r4, r3, #31
 800e00a:	d504      	bpl.n	800e016 <_vfiprintf_r+0x4e>
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	b01d      	add	sp, #116	@ 0x74
 800e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	0598      	lsls	r0, r3, #22
 800e01a:	d4f7      	bmi.n	800e00c <_vfiprintf_r+0x44>
 800e01c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e01e:	f7fe fb61 	bl	800c6e4 <__retarget_lock_release_recursive>
 800e022:	e7f3      	b.n	800e00c <_vfiprintf_r+0x44>
 800e024:	2300      	movs	r3, #0
 800e026:	9309      	str	r3, [sp, #36]	@ 0x24
 800e028:	2320      	movs	r3, #32
 800e02a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e032:	2330      	movs	r3, #48	@ 0x30
 800e034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1e4 <_vfiprintf_r+0x21c>
 800e038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e03c:	f04f 0901 	mov.w	r9, #1
 800e040:	4623      	mov	r3, r4
 800e042:	469a      	mov	sl, r3
 800e044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e048:	b10a      	cbz	r2, 800e04e <_vfiprintf_r+0x86>
 800e04a:	2a25      	cmp	r2, #37	@ 0x25
 800e04c:	d1f9      	bne.n	800e042 <_vfiprintf_r+0x7a>
 800e04e:	ebba 0b04 	subs.w	fp, sl, r4
 800e052:	d00b      	beq.n	800e06c <_vfiprintf_r+0xa4>
 800e054:	465b      	mov	r3, fp
 800e056:	4622      	mov	r2, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	4630      	mov	r0, r6
 800e05c:	f7ff ffa1 	bl	800dfa2 <__sfputs_r>
 800e060:	3001      	adds	r0, #1
 800e062:	f000 80a7 	beq.w	800e1b4 <_vfiprintf_r+0x1ec>
 800e066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e068:	445a      	add	r2, fp
 800e06a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e06c:	f89a 3000 	ldrb.w	r3, [sl]
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 809f 	beq.w	800e1b4 <_vfiprintf_r+0x1ec>
 800e076:	2300      	movs	r3, #0
 800e078:	f04f 32ff 	mov.w	r2, #4294967295
 800e07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e080:	f10a 0a01 	add.w	sl, sl, #1
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	9307      	str	r3, [sp, #28]
 800e088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e08c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e08e:	4654      	mov	r4, sl
 800e090:	2205      	movs	r2, #5
 800e092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e096:	4853      	ldr	r0, [pc, #332]	@ (800e1e4 <_vfiprintf_r+0x21c>)
 800e098:	f7f2 f8b2 	bl	8000200 <memchr>
 800e09c:	9a04      	ldr	r2, [sp, #16]
 800e09e:	b9d8      	cbnz	r0, 800e0d8 <_vfiprintf_r+0x110>
 800e0a0:	06d1      	lsls	r1, r2, #27
 800e0a2:	bf44      	itt	mi
 800e0a4:	2320      	movmi	r3, #32
 800e0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0aa:	0713      	lsls	r3, r2, #28
 800e0ac:	bf44      	itt	mi
 800e0ae:	232b      	movmi	r3, #43	@ 0x2b
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0ba:	d015      	beq.n	800e0e8 <_vfiprintf_r+0x120>
 800e0bc:	9a07      	ldr	r2, [sp, #28]
 800e0be:	4654      	mov	r4, sl
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	f04f 0c0a 	mov.w	ip, #10
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0cc:	3b30      	subs	r3, #48	@ 0x30
 800e0ce:	2b09      	cmp	r3, #9
 800e0d0:	d94b      	bls.n	800e16a <_vfiprintf_r+0x1a2>
 800e0d2:	b1b0      	cbz	r0, 800e102 <_vfiprintf_r+0x13a>
 800e0d4:	9207      	str	r2, [sp, #28]
 800e0d6:	e014      	b.n	800e102 <_vfiprintf_r+0x13a>
 800e0d8:	eba0 0308 	sub.w	r3, r0, r8
 800e0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	46a2      	mov	sl, r4
 800e0e6:	e7d2      	b.n	800e08e <_vfiprintf_r+0xc6>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	1d19      	adds	r1, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	9103      	str	r1, [sp, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfbb      	ittet	lt
 800e0f4:	425b      	neglt	r3, r3
 800e0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e0fa:	9307      	strge	r3, [sp, #28]
 800e0fc:	9307      	strlt	r3, [sp, #28]
 800e0fe:	bfb8      	it	lt
 800e100:	9204      	strlt	r2, [sp, #16]
 800e102:	7823      	ldrb	r3, [r4, #0]
 800e104:	2b2e      	cmp	r3, #46	@ 0x2e
 800e106:	d10a      	bne.n	800e11e <_vfiprintf_r+0x156>
 800e108:	7863      	ldrb	r3, [r4, #1]
 800e10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e10c:	d132      	bne.n	800e174 <_vfiprintf_r+0x1ac>
 800e10e:	9b03      	ldr	r3, [sp, #12]
 800e110:	1d1a      	adds	r2, r3, #4
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	9203      	str	r2, [sp, #12]
 800e116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e11a:	3402      	adds	r4, #2
 800e11c:	9305      	str	r3, [sp, #20]
 800e11e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1f4 <_vfiprintf_r+0x22c>
 800e122:	7821      	ldrb	r1, [r4, #0]
 800e124:	2203      	movs	r2, #3
 800e126:	4650      	mov	r0, sl
 800e128:	f7f2 f86a 	bl	8000200 <memchr>
 800e12c:	b138      	cbz	r0, 800e13e <_vfiprintf_r+0x176>
 800e12e:	9b04      	ldr	r3, [sp, #16]
 800e130:	eba0 000a 	sub.w	r0, r0, sl
 800e134:	2240      	movs	r2, #64	@ 0x40
 800e136:	4082      	lsls	r2, r0
 800e138:	4313      	orrs	r3, r2
 800e13a:	3401      	adds	r4, #1
 800e13c:	9304      	str	r3, [sp, #16]
 800e13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e142:	4829      	ldr	r0, [pc, #164]	@ (800e1e8 <_vfiprintf_r+0x220>)
 800e144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e148:	2206      	movs	r2, #6
 800e14a:	f7f2 f859 	bl	8000200 <memchr>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d03f      	beq.n	800e1d2 <_vfiprintf_r+0x20a>
 800e152:	4b26      	ldr	r3, [pc, #152]	@ (800e1ec <_vfiprintf_r+0x224>)
 800e154:	bb1b      	cbnz	r3, 800e19e <_vfiprintf_r+0x1d6>
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	3307      	adds	r3, #7
 800e15a:	f023 0307 	bic.w	r3, r3, #7
 800e15e:	3308      	adds	r3, #8
 800e160:	9303      	str	r3, [sp, #12]
 800e162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e164:	443b      	add	r3, r7
 800e166:	9309      	str	r3, [sp, #36]	@ 0x24
 800e168:	e76a      	b.n	800e040 <_vfiprintf_r+0x78>
 800e16a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e16e:	460c      	mov	r4, r1
 800e170:	2001      	movs	r0, #1
 800e172:	e7a8      	b.n	800e0c6 <_vfiprintf_r+0xfe>
 800e174:	2300      	movs	r3, #0
 800e176:	3401      	adds	r4, #1
 800e178:	9305      	str	r3, [sp, #20]
 800e17a:	4619      	mov	r1, r3
 800e17c:	f04f 0c0a 	mov.w	ip, #10
 800e180:	4620      	mov	r0, r4
 800e182:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e186:	3a30      	subs	r2, #48	@ 0x30
 800e188:	2a09      	cmp	r2, #9
 800e18a:	d903      	bls.n	800e194 <_vfiprintf_r+0x1cc>
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d0c6      	beq.n	800e11e <_vfiprintf_r+0x156>
 800e190:	9105      	str	r1, [sp, #20]
 800e192:	e7c4      	b.n	800e11e <_vfiprintf_r+0x156>
 800e194:	fb0c 2101 	mla	r1, ip, r1, r2
 800e198:	4604      	mov	r4, r0
 800e19a:	2301      	movs	r3, #1
 800e19c:	e7f0      	b.n	800e180 <_vfiprintf_r+0x1b8>
 800e19e:	ab03      	add	r3, sp, #12
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	462a      	mov	r2, r5
 800e1a4:	4b12      	ldr	r3, [pc, #72]	@ (800e1f0 <_vfiprintf_r+0x228>)
 800e1a6:	a904      	add	r1, sp, #16
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f7fd fd2d 	bl	800bc08 <_printf_float>
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	1c78      	adds	r0, r7, #1
 800e1b2:	d1d6      	bne.n	800e162 <_vfiprintf_r+0x19a>
 800e1b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1b6:	07d9      	lsls	r1, r3, #31
 800e1b8:	d405      	bmi.n	800e1c6 <_vfiprintf_r+0x1fe>
 800e1ba:	89ab      	ldrh	r3, [r5, #12]
 800e1bc:	059a      	lsls	r2, r3, #22
 800e1be:	d402      	bmi.n	800e1c6 <_vfiprintf_r+0x1fe>
 800e1c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1c2:	f7fe fa8f 	bl	800c6e4 <__retarget_lock_release_recursive>
 800e1c6:	89ab      	ldrh	r3, [r5, #12]
 800e1c8:	065b      	lsls	r3, r3, #25
 800e1ca:	f53f af1f 	bmi.w	800e00c <_vfiprintf_r+0x44>
 800e1ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1d0:	e71e      	b.n	800e010 <_vfiprintf_r+0x48>
 800e1d2:	ab03      	add	r3, sp, #12
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	4b05      	ldr	r3, [pc, #20]	@ (800e1f0 <_vfiprintf_r+0x228>)
 800e1da:	a904      	add	r1, sp, #16
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7fd ffab 	bl	800c138 <_printf_i>
 800e1e2:	e7e4      	b.n	800e1ae <_vfiprintf_r+0x1e6>
 800e1e4:	0809d0b8 	.word	0x0809d0b8
 800e1e8:	0809d0c2 	.word	0x0809d0c2
 800e1ec:	0800bc09 	.word	0x0800bc09
 800e1f0:	0800dfa3 	.word	0x0800dfa3
 800e1f4:	0809d0be 	.word	0x0809d0be

0800e1f8 <__sflush_r>:
 800e1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e200:	0716      	lsls	r6, r2, #28
 800e202:	4605      	mov	r5, r0
 800e204:	460c      	mov	r4, r1
 800e206:	d454      	bmi.n	800e2b2 <__sflush_r+0xba>
 800e208:	684b      	ldr	r3, [r1, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	dc02      	bgt.n	800e214 <__sflush_r+0x1c>
 800e20e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e210:	2b00      	cmp	r3, #0
 800e212:	dd48      	ble.n	800e2a6 <__sflush_r+0xae>
 800e214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e216:	2e00      	cmp	r6, #0
 800e218:	d045      	beq.n	800e2a6 <__sflush_r+0xae>
 800e21a:	2300      	movs	r3, #0
 800e21c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e220:	682f      	ldr	r7, [r5, #0]
 800e222:	6a21      	ldr	r1, [r4, #32]
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	d030      	beq.n	800e28a <__sflush_r+0x92>
 800e228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e22a:	89a3      	ldrh	r3, [r4, #12]
 800e22c:	0759      	lsls	r1, r3, #29
 800e22e:	d505      	bpl.n	800e23c <__sflush_r+0x44>
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	1ad2      	subs	r2, r2, r3
 800e234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e236:	b10b      	cbz	r3, 800e23c <__sflush_r+0x44>
 800e238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e23a:	1ad2      	subs	r2, r2, r3
 800e23c:	2300      	movs	r3, #0
 800e23e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e240:	6a21      	ldr	r1, [r4, #32]
 800e242:	4628      	mov	r0, r5
 800e244:	47b0      	blx	r6
 800e246:	1c43      	adds	r3, r0, #1
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	d106      	bne.n	800e25a <__sflush_r+0x62>
 800e24c:	6829      	ldr	r1, [r5, #0]
 800e24e:	291d      	cmp	r1, #29
 800e250:	d82b      	bhi.n	800e2aa <__sflush_r+0xb2>
 800e252:	4a2a      	ldr	r2, [pc, #168]	@ (800e2fc <__sflush_r+0x104>)
 800e254:	410a      	asrs	r2, r1
 800e256:	07d6      	lsls	r6, r2, #31
 800e258:	d427      	bmi.n	800e2aa <__sflush_r+0xb2>
 800e25a:	2200      	movs	r2, #0
 800e25c:	6062      	str	r2, [r4, #4]
 800e25e:	04d9      	lsls	r1, r3, #19
 800e260:	6922      	ldr	r2, [r4, #16]
 800e262:	6022      	str	r2, [r4, #0]
 800e264:	d504      	bpl.n	800e270 <__sflush_r+0x78>
 800e266:	1c42      	adds	r2, r0, #1
 800e268:	d101      	bne.n	800e26e <__sflush_r+0x76>
 800e26a:	682b      	ldr	r3, [r5, #0]
 800e26c:	b903      	cbnz	r3, 800e270 <__sflush_r+0x78>
 800e26e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e272:	602f      	str	r7, [r5, #0]
 800e274:	b1b9      	cbz	r1, 800e2a6 <__sflush_r+0xae>
 800e276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e27a:	4299      	cmp	r1, r3
 800e27c:	d002      	beq.n	800e284 <__sflush_r+0x8c>
 800e27e:	4628      	mov	r0, r5
 800e280:	f7ff f89e 	bl	800d3c0 <_free_r>
 800e284:	2300      	movs	r3, #0
 800e286:	6363      	str	r3, [r4, #52]	@ 0x34
 800e288:	e00d      	b.n	800e2a6 <__sflush_r+0xae>
 800e28a:	2301      	movs	r3, #1
 800e28c:	4628      	mov	r0, r5
 800e28e:	47b0      	blx	r6
 800e290:	4602      	mov	r2, r0
 800e292:	1c50      	adds	r0, r2, #1
 800e294:	d1c9      	bne.n	800e22a <__sflush_r+0x32>
 800e296:	682b      	ldr	r3, [r5, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0c6      	beq.n	800e22a <__sflush_r+0x32>
 800e29c:	2b1d      	cmp	r3, #29
 800e29e:	d001      	beq.n	800e2a4 <__sflush_r+0xac>
 800e2a0:	2b16      	cmp	r3, #22
 800e2a2:	d11e      	bne.n	800e2e2 <__sflush_r+0xea>
 800e2a4:	602f      	str	r7, [r5, #0]
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	e022      	b.n	800e2f0 <__sflush_r+0xf8>
 800e2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ae:	b21b      	sxth	r3, r3
 800e2b0:	e01b      	b.n	800e2ea <__sflush_r+0xf2>
 800e2b2:	690f      	ldr	r7, [r1, #16]
 800e2b4:	2f00      	cmp	r7, #0
 800e2b6:	d0f6      	beq.n	800e2a6 <__sflush_r+0xae>
 800e2b8:	0793      	lsls	r3, r2, #30
 800e2ba:	680e      	ldr	r6, [r1, #0]
 800e2bc:	bf08      	it	eq
 800e2be:	694b      	ldreq	r3, [r1, #20]
 800e2c0:	600f      	str	r7, [r1, #0]
 800e2c2:	bf18      	it	ne
 800e2c4:	2300      	movne	r3, #0
 800e2c6:	eba6 0807 	sub.w	r8, r6, r7
 800e2ca:	608b      	str	r3, [r1, #8]
 800e2cc:	f1b8 0f00 	cmp.w	r8, #0
 800e2d0:	dde9      	ble.n	800e2a6 <__sflush_r+0xae>
 800e2d2:	6a21      	ldr	r1, [r4, #32]
 800e2d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e2d6:	4643      	mov	r3, r8
 800e2d8:	463a      	mov	r2, r7
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b0      	blx	r6
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	dc08      	bgt.n	800e2f4 <__sflush_r+0xfc>
 800e2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ea:	81a3      	strh	r3, [r4, #12]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	4407      	add	r7, r0
 800e2f6:	eba8 0800 	sub.w	r8, r8, r0
 800e2fa:	e7e7      	b.n	800e2cc <__sflush_r+0xd4>
 800e2fc:	dfbffffe 	.word	0xdfbffffe

0800e300 <_fflush_r>:
 800e300:	b538      	push	{r3, r4, r5, lr}
 800e302:	690b      	ldr	r3, [r1, #16]
 800e304:	4605      	mov	r5, r0
 800e306:	460c      	mov	r4, r1
 800e308:	b913      	cbnz	r3, 800e310 <_fflush_r+0x10>
 800e30a:	2500      	movs	r5, #0
 800e30c:	4628      	mov	r0, r5
 800e30e:	bd38      	pop	{r3, r4, r5, pc}
 800e310:	b118      	cbz	r0, 800e31a <_fflush_r+0x1a>
 800e312:	6a03      	ldr	r3, [r0, #32]
 800e314:	b90b      	cbnz	r3, 800e31a <_fflush_r+0x1a>
 800e316:	f7fe f8bb 	bl	800c490 <__sinit>
 800e31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0f3      	beq.n	800e30a <_fflush_r+0xa>
 800e322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e324:	07d0      	lsls	r0, r2, #31
 800e326:	d404      	bmi.n	800e332 <_fflush_r+0x32>
 800e328:	0599      	lsls	r1, r3, #22
 800e32a:	d402      	bmi.n	800e332 <_fflush_r+0x32>
 800e32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e32e:	f7fe f9d8 	bl	800c6e2 <__retarget_lock_acquire_recursive>
 800e332:	4628      	mov	r0, r5
 800e334:	4621      	mov	r1, r4
 800e336:	f7ff ff5f 	bl	800e1f8 <__sflush_r>
 800e33a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e33c:	07da      	lsls	r2, r3, #31
 800e33e:	4605      	mov	r5, r0
 800e340:	d4e4      	bmi.n	800e30c <_fflush_r+0xc>
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	059b      	lsls	r3, r3, #22
 800e346:	d4e1      	bmi.n	800e30c <_fflush_r+0xc>
 800e348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e34a:	f7fe f9cb 	bl	800c6e4 <__retarget_lock_release_recursive>
 800e34e:	e7dd      	b.n	800e30c <_fflush_r+0xc>

0800e350 <fiprintf>:
 800e350:	b40e      	push	{r1, r2, r3}
 800e352:	b503      	push	{r0, r1, lr}
 800e354:	4601      	mov	r1, r0
 800e356:	ab03      	add	r3, sp, #12
 800e358:	4805      	ldr	r0, [pc, #20]	@ (800e370 <fiprintf+0x20>)
 800e35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e35e:	6800      	ldr	r0, [r0, #0]
 800e360:	9301      	str	r3, [sp, #4]
 800e362:	f7ff fe31 	bl	800dfc8 <_vfiprintf_r>
 800e366:	b002      	add	sp, #8
 800e368:	f85d eb04 	ldr.w	lr, [sp], #4
 800e36c:	b003      	add	sp, #12
 800e36e:	4770      	bx	lr
 800e370:	200400c8 	.word	0x200400c8

0800e374 <__swbuf_r>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	460e      	mov	r6, r1
 800e378:	4614      	mov	r4, r2
 800e37a:	4605      	mov	r5, r0
 800e37c:	b118      	cbz	r0, 800e386 <__swbuf_r+0x12>
 800e37e:	6a03      	ldr	r3, [r0, #32]
 800e380:	b90b      	cbnz	r3, 800e386 <__swbuf_r+0x12>
 800e382:	f7fe f885 	bl	800c490 <__sinit>
 800e386:	69a3      	ldr	r3, [r4, #24]
 800e388:	60a3      	str	r3, [r4, #8]
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	071a      	lsls	r2, r3, #28
 800e38e:	d501      	bpl.n	800e394 <__swbuf_r+0x20>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	b943      	cbnz	r3, 800e3a6 <__swbuf_r+0x32>
 800e394:	4621      	mov	r1, r4
 800e396:	4628      	mov	r0, r5
 800e398:	f000 f82a 	bl	800e3f0 <__swsetup_r>
 800e39c:	b118      	cbz	r0, 800e3a6 <__swbuf_r+0x32>
 800e39e:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	6922      	ldr	r2, [r4, #16]
 800e3aa:	1a98      	subs	r0, r3, r2
 800e3ac:	6963      	ldr	r3, [r4, #20]
 800e3ae:	b2f6      	uxtb	r6, r6
 800e3b0:	4283      	cmp	r3, r0
 800e3b2:	4637      	mov	r7, r6
 800e3b4:	dc05      	bgt.n	800e3c2 <__swbuf_r+0x4e>
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	f7ff ffa1 	bl	800e300 <_fflush_r>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d1ed      	bne.n	800e39e <__swbuf_r+0x2a>
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	60a3      	str	r3, [r4, #8]
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	1c5a      	adds	r2, r3, #1
 800e3cc:	6022      	str	r2, [r4, #0]
 800e3ce:	701e      	strb	r6, [r3, #0]
 800e3d0:	6962      	ldr	r2, [r4, #20]
 800e3d2:	1c43      	adds	r3, r0, #1
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d004      	beq.n	800e3e2 <__swbuf_r+0x6e>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	07db      	lsls	r3, r3, #31
 800e3dc:	d5e1      	bpl.n	800e3a2 <__swbuf_r+0x2e>
 800e3de:	2e0a      	cmp	r6, #10
 800e3e0:	d1df      	bne.n	800e3a2 <__swbuf_r+0x2e>
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f7ff ff8b 	bl	800e300 <_fflush_r>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	d0d9      	beq.n	800e3a2 <__swbuf_r+0x2e>
 800e3ee:	e7d6      	b.n	800e39e <__swbuf_r+0x2a>

0800e3f0 <__swsetup_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4b29      	ldr	r3, [pc, #164]	@ (800e498 <__swsetup_r+0xa8>)
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	b118      	cbz	r0, 800e404 <__swsetup_r+0x14>
 800e3fc:	6a03      	ldr	r3, [r0, #32]
 800e3fe:	b90b      	cbnz	r3, 800e404 <__swsetup_r+0x14>
 800e400:	f7fe f846 	bl	800c490 <__sinit>
 800e404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e408:	0719      	lsls	r1, r3, #28
 800e40a:	d422      	bmi.n	800e452 <__swsetup_r+0x62>
 800e40c:	06da      	lsls	r2, r3, #27
 800e40e:	d407      	bmi.n	800e420 <__swsetup_r+0x30>
 800e410:	2209      	movs	r2, #9
 800e412:	602a      	str	r2, [r5, #0]
 800e414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295
 800e41e:	e033      	b.n	800e488 <__swsetup_r+0x98>
 800e420:	0758      	lsls	r0, r3, #29
 800e422:	d512      	bpl.n	800e44a <__swsetup_r+0x5a>
 800e424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e426:	b141      	cbz	r1, 800e43a <__swsetup_r+0x4a>
 800e428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e42c:	4299      	cmp	r1, r3
 800e42e:	d002      	beq.n	800e436 <__swsetup_r+0x46>
 800e430:	4628      	mov	r0, r5
 800e432:	f7fe ffc5 	bl	800d3c0 <_free_r>
 800e436:	2300      	movs	r3, #0
 800e438:	6363      	str	r3, [r4, #52]	@ 0x34
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	2300      	movs	r3, #0
 800e444:	6063      	str	r3, [r4, #4]
 800e446:	6923      	ldr	r3, [r4, #16]
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	f043 0308 	orr.w	r3, r3, #8
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	b94b      	cbnz	r3, 800e46a <__swsetup_r+0x7a>
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e460:	d003      	beq.n	800e46a <__swsetup_r+0x7a>
 800e462:	4621      	mov	r1, r4
 800e464:	4628      	mov	r0, r5
 800e466:	f000 f8df 	bl	800e628 <__smakebuf_r>
 800e46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e46e:	f013 0201 	ands.w	r2, r3, #1
 800e472:	d00a      	beq.n	800e48a <__swsetup_r+0x9a>
 800e474:	2200      	movs	r2, #0
 800e476:	60a2      	str	r2, [r4, #8]
 800e478:	6962      	ldr	r2, [r4, #20]
 800e47a:	4252      	negs	r2, r2
 800e47c:	61a2      	str	r2, [r4, #24]
 800e47e:	6922      	ldr	r2, [r4, #16]
 800e480:	b942      	cbnz	r2, 800e494 <__swsetup_r+0xa4>
 800e482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e486:	d1c5      	bne.n	800e414 <__swsetup_r+0x24>
 800e488:	bd38      	pop	{r3, r4, r5, pc}
 800e48a:	0799      	lsls	r1, r3, #30
 800e48c:	bf58      	it	pl
 800e48e:	6962      	ldrpl	r2, [r4, #20]
 800e490:	60a2      	str	r2, [r4, #8]
 800e492:	e7f4      	b.n	800e47e <__swsetup_r+0x8e>
 800e494:	2000      	movs	r0, #0
 800e496:	e7f7      	b.n	800e488 <__swsetup_r+0x98>
 800e498:	200400c8 	.word	0x200400c8

0800e49c <memmove>:
 800e49c:	4288      	cmp	r0, r1
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	eb01 0402 	add.w	r4, r1, r2
 800e4a4:	d902      	bls.n	800e4ac <memmove+0x10>
 800e4a6:	4284      	cmp	r4, r0
 800e4a8:	4623      	mov	r3, r4
 800e4aa:	d807      	bhi.n	800e4bc <memmove+0x20>
 800e4ac:	1e43      	subs	r3, r0, #1
 800e4ae:	42a1      	cmp	r1, r4
 800e4b0:	d008      	beq.n	800e4c4 <memmove+0x28>
 800e4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4ba:	e7f8      	b.n	800e4ae <memmove+0x12>
 800e4bc:	4402      	add	r2, r0
 800e4be:	4601      	mov	r1, r0
 800e4c0:	428a      	cmp	r2, r1
 800e4c2:	d100      	bne.n	800e4c6 <memmove+0x2a>
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4ce:	e7f7      	b.n	800e4c0 <memmove+0x24>

0800e4d0 <_sbrk_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d06      	ldr	r5, [pc, #24]	@ (800e4ec <_sbrk_r+0x1c>)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	602b      	str	r3, [r5, #0]
 800e4dc:	f7f4 fc2e 	bl	8002d3c <_sbrk>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d102      	bne.n	800e4ea <_sbrk_r+0x1a>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	b103      	cbz	r3, 800e4ea <_sbrk_r+0x1a>
 800e4e8:	6023      	str	r3, [r4, #0]
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	20040ac0 	.word	0x20040ac0

0800e4f0 <memcpy>:
 800e4f0:	440a      	add	r2, r1
 800e4f2:	4291      	cmp	r1, r2
 800e4f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f8:	d100      	bne.n	800e4fc <memcpy+0xc>
 800e4fa:	4770      	bx	lr
 800e4fc:	b510      	push	{r4, lr}
 800e4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e502:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e506:	4291      	cmp	r1, r2
 800e508:	d1f9      	bne.n	800e4fe <memcpy+0xe>
 800e50a:	bd10      	pop	{r4, pc}

0800e50c <abort>:
 800e50c:	b508      	push	{r3, lr}
 800e50e:	2006      	movs	r0, #6
 800e510:	f000 f8ee 	bl	800e6f0 <raise>
 800e514:	2001      	movs	r0, #1
 800e516:	f7f4 fb99 	bl	8002c4c <_exit>

0800e51a <_calloc_r>:
 800e51a:	b570      	push	{r4, r5, r6, lr}
 800e51c:	fba1 5402 	umull	r5, r4, r1, r2
 800e520:	b93c      	cbnz	r4, 800e532 <_calloc_r+0x18>
 800e522:	4629      	mov	r1, r5
 800e524:	f7fe ffc0 	bl	800d4a8 <_malloc_r>
 800e528:	4606      	mov	r6, r0
 800e52a:	b928      	cbnz	r0, 800e538 <_calloc_r+0x1e>
 800e52c:	2600      	movs	r6, #0
 800e52e:	4630      	mov	r0, r6
 800e530:	bd70      	pop	{r4, r5, r6, pc}
 800e532:	220c      	movs	r2, #12
 800e534:	6002      	str	r2, [r0, #0]
 800e536:	e7f9      	b.n	800e52c <_calloc_r+0x12>
 800e538:	462a      	mov	r2, r5
 800e53a:	4621      	mov	r1, r4
 800e53c:	f7fe f853 	bl	800c5e6 <memset>
 800e540:	e7f5      	b.n	800e52e <_calloc_r+0x14>

0800e542 <__ascii_mbtowc>:
 800e542:	b082      	sub	sp, #8
 800e544:	b901      	cbnz	r1, 800e548 <__ascii_mbtowc+0x6>
 800e546:	a901      	add	r1, sp, #4
 800e548:	b142      	cbz	r2, 800e55c <__ascii_mbtowc+0x1a>
 800e54a:	b14b      	cbz	r3, 800e560 <__ascii_mbtowc+0x1e>
 800e54c:	7813      	ldrb	r3, [r2, #0]
 800e54e:	600b      	str	r3, [r1, #0]
 800e550:	7812      	ldrb	r2, [r2, #0]
 800e552:	1e10      	subs	r0, r2, #0
 800e554:	bf18      	it	ne
 800e556:	2001      	movne	r0, #1
 800e558:	b002      	add	sp, #8
 800e55a:	4770      	bx	lr
 800e55c:	4610      	mov	r0, r2
 800e55e:	e7fb      	b.n	800e558 <__ascii_mbtowc+0x16>
 800e560:	f06f 0001 	mvn.w	r0, #1
 800e564:	e7f8      	b.n	800e558 <__ascii_mbtowc+0x16>

0800e566 <_realloc_r>:
 800e566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e56a:	4680      	mov	r8, r0
 800e56c:	4615      	mov	r5, r2
 800e56e:	460c      	mov	r4, r1
 800e570:	b921      	cbnz	r1, 800e57c <_realloc_r+0x16>
 800e572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e576:	4611      	mov	r1, r2
 800e578:	f7fe bf96 	b.w	800d4a8 <_malloc_r>
 800e57c:	b92a      	cbnz	r2, 800e58a <_realloc_r+0x24>
 800e57e:	f7fe ff1f 	bl	800d3c0 <_free_r>
 800e582:	2400      	movs	r4, #0
 800e584:	4620      	mov	r0, r4
 800e586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e58a:	f000 f8ef 	bl	800e76c <_malloc_usable_size_r>
 800e58e:	4285      	cmp	r5, r0
 800e590:	4606      	mov	r6, r0
 800e592:	d802      	bhi.n	800e59a <_realloc_r+0x34>
 800e594:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e598:	d8f4      	bhi.n	800e584 <_realloc_r+0x1e>
 800e59a:	4629      	mov	r1, r5
 800e59c:	4640      	mov	r0, r8
 800e59e:	f7fe ff83 	bl	800d4a8 <_malloc_r>
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d0ec      	beq.n	800e582 <_realloc_r+0x1c>
 800e5a8:	42b5      	cmp	r5, r6
 800e5aa:	462a      	mov	r2, r5
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	bf28      	it	cs
 800e5b0:	4632      	movcs	r2, r6
 800e5b2:	f7ff ff9d 	bl	800e4f0 <memcpy>
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	4640      	mov	r0, r8
 800e5ba:	f7fe ff01 	bl	800d3c0 <_free_r>
 800e5be:	463c      	mov	r4, r7
 800e5c0:	e7e0      	b.n	800e584 <_realloc_r+0x1e>

0800e5c2 <__ascii_wctomb>:
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	b141      	cbz	r1, 800e5da <__ascii_wctomb+0x18>
 800e5c8:	2aff      	cmp	r2, #255	@ 0xff
 800e5ca:	d904      	bls.n	800e5d6 <__ascii_wctomb+0x14>
 800e5cc:	228a      	movs	r2, #138	@ 0x8a
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d4:	4770      	bx	lr
 800e5d6:	700a      	strb	r2, [r1, #0]
 800e5d8:	2001      	movs	r0, #1
 800e5da:	4770      	bx	lr

0800e5dc <__swhatbuf_r>:
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	460c      	mov	r4, r1
 800e5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e4:	2900      	cmp	r1, #0
 800e5e6:	b096      	sub	sp, #88	@ 0x58
 800e5e8:	4615      	mov	r5, r2
 800e5ea:	461e      	mov	r6, r3
 800e5ec:	da0d      	bge.n	800e60a <__swhatbuf_r+0x2e>
 800e5ee:	89a3      	ldrh	r3, [r4, #12]
 800e5f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5f4:	f04f 0100 	mov.w	r1, #0
 800e5f8:	bf14      	ite	ne
 800e5fa:	2340      	movne	r3, #64	@ 0x40
 800e5fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e600:	2000      	movs	r0, #0
 800e602:	6031      	str	r1, [r6, #0]
 800e604:	602b      	str	r3, [r5, #0]
 800e606:	b016      	add	sp, #88	@ 0x58
 800e608:	bd70      	pop	{r4, r5, r6, pc}
 800e60a:	466a      	mov	r2, sp
 800e60c:	f000 f878 	bl	800e700 <_fstat_r>
 800e610:	2800      	cmp	r0, #0
 800e612:	dbec      	blt.n	800e5ee <__swhatbuf_r+0x12>
 800e614:	9901      	ldr	r1, [sp, #4]
 800e616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e61a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e61e:	4259      	negs	r1, r3
 800e620:	4159      	adcs	r1, r3
 800e622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e626:	e7eb      	b.n	800e600 <__swhatbuf_r+0x24>

0800e628 <__smakebuf_r>:
 800e628:	898b      	ldrh	r3, [r1, #12]
 800e62a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e62c:	079d      	lsls	r5, r3, #30
 800e62e:	4606      	mov	r6, r0
 800e630:	460c      	mov	r4, r1
 800e632:	d507      	bpl.n	800e644 <__smakebuf_r+0x1c>
 800e634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e638:	6023      	str	r3, [r4, #0]
 800e63a:	6123      	str	r3, [r4, #16]
 800e63c:	2301      	movs	r3, #1
 800e63e:	6163      	str	r3, [r4, #20]
 800e640:	b003      	add	sp, #12
 800e642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e644:	ab01      	add	r3, sp, #4
 800e646:	466a      	mov	r2, sp
 800e648:	f7ff ffc8 	bl	800e5dc <__swhatbuf_r>
 800e64c:	9f00      	ldr	r7, [sp, #0]
 800e64e:	4605      	mov	r5, r0
 800e650:	4639      	mov	r1, r7
 800e652:	4630      	mov	r0, r6
 800e654:	f7fe ff28 	bl	800d4a8 <_malloc_r>
 800e658:	b948      	cbnz	r0, 800e66e <__smakebuf_r+0x46>
 800e65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e65e:	059a      	lsls	r2, r3, #22
 800e660:	d4ee      	bmi.n	800e640 <__smakebuf_r+0x18>
 800e662:	f023 0303 	bic.w	r3, r3, #3
 800e666:	f043 0302 	orr.w	r3, r3, #2
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	e7e2      	b.n	800e634 <__smakebuf_r+0xc>
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	6020      	str	r0, [r4, #0]
 800e672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e676:	81a3      	strh	r3, [r4, #12]
 800e678:	9b01      	ldr	r3, [sp, #4]
 800e67a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e67e:	b15b      	cbz	r3, 800e698 <__smakebuf_r+0x70>
 800e680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e684:	4630      	mov	r0, r6
 800e686:	f000 f84d 	bl	800e724 <_isatty_r>
 800e68a:	b128      	cbz	r0, 800e698 <__smakebuf_r+0x70>
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	f023 0303 	bic.w	r3, r3, #3
 800e692:	f043 0301 	orr.w	r3, r3, #1
 800e696:	81a3      	strh	r3, [r4, #12]
 800e698:	89a3      	ldrh	r3, [r4, #12]
 800e69a:	431d      	orrs	r5, r3
 800e69c:	81a5      	strh	r5, [r4, #12]
 800e69e:	e7cf      	b.n	800e640 <__smakebuf_r+0x18>

0800e6a0 <_raise_r>:
 800e6a0:	291f      	cmp	r1, #31
 800e6a2:	b538      	push	{r3, r4, r5, lr}
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	d904      	bls.n	800e6b4 <_raise_r+0x14>
 800e6aa:	2316      	movs	r3, #22
 800e6ac:	6003      	str	r3, [r0, #0]
 800e6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
 800e6b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6b6:	b112      	cbz	r2, 800e6be <_raise_r+0x1e>
 800e6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6bc:	b94b      	cbnz	r3, 800e6d2 <_raise_r+0x32>
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f000 f852 	bl	800e768 <_getpid_r>
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	4601      	mov	r1, r0
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6ce:	f000 b839 	b.w	800e744 <_kill_r>
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d00a      	beq.n	800e6ec <_raise_r+0x4c>
 800e6d6:	1c59      	adds	r1, r3, #1
 800e6d8:	d103      	bne.n	800e6e2 <_raise_r+0x42>
 800e6da:	2316      	movs	r3, #22
 800e6dc:	6003      	str	r3, [r0, #0]
 800e6de:	2001      	movs	r0, #1
 800e6e0:	e7e7      	b.n	800e6b2 <_raise_r+0x12>
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	4798      	blx	r3
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	e7e0      	b.n	800e6b2 <_raise_r+0x12>

0800e6f0 <raise>:
 800e6f0:	4b02      	ldr	r3, [pc, #8]	@ (800e6fc <raise+0xc>)
 800e6f2:	4601      	mov	r1, r0
 800e6f4:	6818      	ldr	r0, [r3, #0]
 800e6f6:	f7ff bfd3 	b.w	800e6a0 <_raise_r>
 800e6fa:	bf00      	nop
 800e6fc:	200400c8 	.word	0x200400c8

0800e700 <_fstat_r>:
 800e700:	b538      	push	{r3, r4, r5, lr}
 800e702:	4d07      	ldr	r5, [pc, #28]	@ (800e720 <_fstat_r+0x20>)
 800e704:	2300      	movs	r3, #0
 800e706:	4604      	mov	r4, r0
 800e708:	4608      	mov	r0, r1
 800e70a:	4611      	mov	r1, r2
 800e70c:	602b      	str	r3, [r5, #0]
 800e70e:	f7f4 faed 	bl	8002cec <_fstat>
 800e712:	1c43      	adds	r3, r0, #1
 800e714:	d102      	bne.n	800e71c <_fstat_r+0x1c>
 800e716:	682b      	ldr	r3, [r5, #0]
 800e718:	b103      	cbz	r3, 800e71c <_fstat_r+0x1c>
 800e71a:	6023      	str	r3, [r4, #0]
 800e71c:	bd38      	pop	{r3, r4, r5, pc}
 800e71e:	bf00      	nop
 800e720:	20040ac0 	.word	0x20040ac0

0800e724 <_isatty_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d06      	ldr	r5, [pc, #24]	@ (800e740 <_isatty_r+0x1c>)
 800e728:	2300      	movs	r3, #0
 800e72a:	4604      	mov	r4, r0
 800e72c:	4608      	mov	r0, r1
 800e72e:	602b      	str	r3, [r5, #0]
 800e730:	f7f4 faec 	bl	8002d0c <_isatty>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d102      	bne.n	800e73e <_isatty_r+0x1a>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	b103      	cbz	r3, 800e73e <_isatty_r+0x1a>
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	20040ac0 	.word	0x20040ac0

0800e744 <_kill_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	4d07      	ldr	r5, [pc, #28]	@ (800e764 <_kill_r+0x20>)
 800e748:	2300      	movs	r3, #0
 800e74a:	4604      	mov	r4, r0
 800e74c:	4608      	mov	r0, r1
 800e74e:	4611      	mov	r1, r2
 800e750:	602b      	str	r3, [r5, #0]
 800e752:	f7f4 fa6b 	bl	8002c2c <_kill>
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	d102      	bne.n	800e760 <_kill_r+0x1c>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	b103      	cbz	r3, 800e760 <_kill_r+0x1c>
 800e75e:	6023      	str	r3, [r4, #0]
 800e760:	bd38      	pop	{r3, r4, r5, pc}
 800e762:	bf00      	nop
 800e764:	20040ac0 	.word	0x20040ac0

0800e768 <_getpid_r>:
 800e768:	f7f4 ba58 	b.w	8002c1c <_getpid>

0800e76c <_malloc_usable_size_r>:
 800e76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e770:	1f18      	subs	r0, r3, #4
 800e772:	2b00      	cmp	r3, #0
 800e774:	bfbc      	itt	lt
 800e776:	580b      	ldrlt	r3, [r1, r0]
 800e778:	18c0      	addlt	r0, r0, r3
 800e77a:	4770      	bx	lr

0800e77c <_init>:
 800e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77e:	bf00      	nop
 800e780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e782:	bc08      	pop	{r3}
 800e784:	469e      	mov	lr, r3
 800e786:	4770      	bx	lr

0800e788 <_fini>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	bf00      	nop
 800e78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78e:	bc08      	pop	{r3}
 800e790:	469e      	mov	lr, r3
 800e792:	4770      	bx	lr
